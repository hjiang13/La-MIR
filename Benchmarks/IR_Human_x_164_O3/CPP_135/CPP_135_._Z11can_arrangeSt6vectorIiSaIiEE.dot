digraph "CFG for '_Z11can_arrangeSt6vectorIiSaIiEE' function" {
	label="CFG for '_Z11can_arrangeSt6vectorIiSaIiEE' function";

	Node0x55c24a9ec5c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%1:\l  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %3 = load i32*, i32** %2, align 8, !tbaa !3\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %5 = load i32*, i32** %4, align 8, !tbaa !8\l  %6 = ptrtoint i32* %3 to i64\l  %7 = ptrtoint i32* %5 to i64\l  %8 = sub i64 %6, %7\l  %9 = icmp eq i64 %8, 0\l  br i1 %9, label %36, label %10\l|{<s0>T|<s1>F}}"];
	Node0x55c24a9ec5c0:s0 -> Node0x55c24a9eda70;
	Node0x55c24a9ec5c0:s1 -> Node0x55c24a9edf00;
	Node0x55c24a9edf00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%10:\l10:                                               \l  %11 = ashr exact i64 %8, 2\l  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)\l  %13 = add i64 %12, -1\l  %14 = and i64 %12, 3\l  %15 = icmp ult i64 %13, 3\l  br i1 %15, label %18, label %16\l|{<s0>T|<s1>F}}"];
	Node0x55c24a9edf00:s0 -> Node0x55c24a9ee580;
	Node0x55c24a9edf00:s1 -> Node0x55c24a9ee5d0;
	Node0x55c24a9ee5d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b5cdfa70",label="{%16:\l16:                                               \l  %17 = and i64 %12, -4\l  br label %38\l}"];
	Node0x55c24a9ee5d0 -> Node0x55c24a9ee740;
	Node0x55c24a9ee580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%18:\l18:                                               \l  %19 = phi i32 [ undef, %10 ], [ %68, %38 ]\l  %20 = phi i64 [ 0, %10 ], [ %69, %38 ]\l  %21 = phi i32 [ -1, %10 ], [ %68, %38 ]\l  %22 = icmp eq i64 %14, 0\l  br i1 %22, label %36, label %23\l|{<s0>T|<s1>F}}"];
	Node0x55c24a9ee580:s0 -> Node0x55c24a9eda70;
	Node0x55c24a9ee580:s1 -> Node0x55c24a9eef80;
	Node0x55c24a9eef80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%23:\l23:                                               \l  %24 = phi i64 [ %33, %23 ], [ %20, %18 ]\l  %25 = phi i32 [ %32, %23 ], [ %21, %18 ]\l  %26 = phi i64 [ %34, %23 ], [ %14, %18 ]\l  %27 = getelementptr inbounds i32, i32* %5, i64 %24\l  %28 = load i32, i32* %27, align 4, !tbaa !9\l  %29 = sext i32 %28 to i64\l  %30 = icmp slt i64 %24, %29\l  %31 = trunc i64 %24 to i32\l  %32 = select i1 %30, i32 %25, i32 %31\l  %33 = add nuw nsw i64 %24, 1\l  %34 = add i64 %26, -1\l  %35 = icmp eq i64 %34, 0\l  br i1 %35, label %36, label %23, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x55c24a9eef80:s0 -> Node0x55c24a9eda70;
	Node0x55c24a9eef80:s1 -> Node0x55c24a9eef80;
	Node0x55c24a9eda70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%36:\l36:                                               \l  %37 = phi i32 [ -1, %1 ], [ %19, %18 ], [ %32, %23 ]\l  ret i32 %37\l}"];
	Node0x55c24a9ee740 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%38:\l38:                                               \l  %39 = phi i64 [ 0, %16 ], [ %69, %38 ]\l  %40 = phi i32 [ -1, %16 ], [ %68, %38 ]\l  %41 = phi i64 [ %17, %16 ], [ %70, %38 ]\l  %42 = getelementptr inbounds i32, i32* %5, i64 %39\l  %43 = load i32, i32* %42, align 4, !tbaa !9\l  %44 = sext i32 %43 to i64\l  %45 = icmp slt i64 %39, %44\l  %46 = trunc i64 %39 to i32\l  %47 = select i1 %45, i32 %40, i32 %46\l  %48 = or i64 %39, 1\l  %49 = getelementptr inbounds i32, i32* %5, i64 %48\l  %50 = load i32, i32* %49, align 4, !tbaa !9\l  %51 = sext i32 %50 to i64\l  %52 = icmp slt i64 %48, %51\l  %53 = trunc i64 %48 to i32\l  %54 = select i1 %52, i32 %47, i32 %53\l  %55 = or i64 %39, 2\l  %56 = getelementptr inbounds i32, i32* %5, i64 %55\l  %57 = load i32, i32* %56, align 4, !tbaa !9\l  %58 = sext i32 %57 to i64\l  %59 = icmp slt i64 %55, %58\l  %60 = trunc i64 %55 to i32\l  %61 = select i1 %59, i32 %54, i32 %60\l  %62 = or i64 %39, 3\l  %63 = getelementptr inbounds i32, i32* %5, i64 %62\l  %64 = load i32, i32* %63, align 4, !tbaa !9\l  %65 = sext i32 %64 to i64\l  %66 = icmp slt i64 %62, %65\l  %67 = trunc i64 %62 to i32\l  %68 = select i1 %66, i32 %61, i32 %67\l  %69 = add nuw nsw i64 %39, 4\l  %70 = add i64 %41, -4\l  %71 = icmp eq i64 %70, 0\l  br i1 %71, label %18, label %38, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x55c24a9ee740:s0 -> Node0x55c24a9ee580;
	Node0x55c24a9ee740:s1 -> Node0x55c24a9ee740;
}
