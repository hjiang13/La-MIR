; ModuleID = '../../Human_xBenchmarks_164/CPP_114/CPP_114.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_114/CPP_114.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl" }
%"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl" = type { %"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl_data" }
%"struct.std::_Vector_base<long long, std::allocator<long long>>::_Vector_impl_data" = type { i64*, i64*, i64* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i64 @_Z14minSubArraySumSt6vectorIxSaIxEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8, !tbaa !3
  %4 = load i64, i64* %3, align 8, !tbaa !8
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load i64*, i64** %5, align 8, !tbaa !10
  %7 = ptrtoint i64* %6 to i64
  %8 = ptrtoint i64* %3 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ugt i64 %10, 1
  br i1 %11, label %12, label %32

12:                                               ; preds = %1
  %13 = add nsw i64 %10, -1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %9, 16
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = and i64 %13, -2
  br label %34

18:                                               ; preds = %34, %12
  %19 = phi i64 [ undef, %12 ], [ %53, %34 ]
  %20 = phi i64 [ 1, %12 ], [ %54, %34 ]
  %21 = phi i64 [ %4, %12 ], [ %53, %34 ]
  %22 = phi i64 [ %4, %12 ], [ %51, %34 ]
  %23 = icmp eq i64 %14, 0
  br i1 %23, label %32, label %24

24:                                               ; preds = %18
  %25 = icmp slt i64 %22, 0
  %26 = getelementptr inbounds i64, i64* %3, i64 %20
  %27 = load i64, i64* %26, align 8, !tbaa !8
  %28 = select i1 %25, i64 %22, i64 0
  %29 = add nsw i64 %27, %28
  %30 = icmp slt i64 %29, %21
  %31 = select i1 %30, i64 %29, i64 %21
  br label %32

32:                                               ; preds = %24, %18, %1
  %33 = phi i64 [ %4, %1 ], [ %19, %18 ], [ %31, %24 ]
  ret i64 %33

34:                                               ; preds = %34, %16
  %35 = phi i64 [ 1, %16 ], [ %54, %34 ]
  %36 = phi i64 [ %4, %16 ], [ %53, %34 ]
  %37 = phi i64 [ %4, %16 ], [ %51, %34 ]
  %38 = phi i64 [ %17, %16 ], [ %55, %34 ]
  %39 = icmp slt i64 %37, 0
  %40 = getelementptr inbounds i64, i64* %3, i64 %35
  %41 = load i64, i64* %40, align 8, !tbaa !8
  %42 = select i1 %39, i64 %37, i64 0
  %43 = add nsw i64 %41, %42
  %44 = icmp slt i64 %43, %36
  %45 = select i1 %44, i64 %43, i64 %36
  %46 = add nuw nsw i64 %35, 1
  %47 = icmp slt i64 %43, 0
  %48 = getelementptr inbounds i64, i64* %3, i64 %46
  %49 = load i64, i64* %48, align 8, !tbaa !8
  %50 = select i1 %47, i64 %43, i64 0
  %51 = add nsw i64 %49, %50
  %52 = icmp slt i64 %51, %45
  %53 = select i1 %52, i64 %51, i64 %45
  %54 = add nuw nsw i64 %35, 2
  %55 = add i64 %38, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %18, label %34, !llvm.loop !11
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIxSaIxEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"long long", !6, i64 0}
!10 = !{!4, !5, i64 8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
