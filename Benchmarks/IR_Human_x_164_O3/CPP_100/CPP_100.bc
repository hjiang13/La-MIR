; ModuleID = '../../Human_xBenchmarks_164/CPP_100/CPP_100.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_100/CPP_100.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str.1 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z11make_a_pilei(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = bitcast %"class.std::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %3, i8 0, i64 24, i1 false) #6
  %4 = call noalias nonnull i8* @_Znwm(i64 4) #7
  %5 = bitcast i8* %4 to i32*
  %6 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %4, i8** %6, align 8, !tbaa !3
  %7 = getelementptr inbounds i8, i8* %4, i64 4
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = bitcast i32** %8 to i8**
  store i8* %7, i8** %9, align 8, !tbaa !8
  store i32 %1, i32* %5, align 4
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast i32** %10 to i8**
  store i8* %7, i8** %11, align 8, !tbaa !9
  %12 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = icmp sgt i32 %1, 1
  %14 = bitcast i8* %7 to i32*
  br i1 %13, label %15, label %73

15:                                               ; preds = %2, %60
  %16 = phi i32* [ %61, %60 ], [ %14, %2 ]
  %17 = phi i32* [ %62, %60 ], [ %5, %2 ]
  %18 = phi i32* [ %63, %60 ], [ %14, %2 ]
  %19 = phi i32 [ %64, %60 ], [ 1, %2 ]
  %20 = ptrtoint i32* %18 to i64
  %21 = ptrtoint i32* %17 to i64
  %22 = sub i64 %20, %21
  %23 = ashr exact i64 %22, 2
  %24 = add nsw i64 %23, -1
  %25 = getelementptr inbounds i32, i32* %17, i64 %24
  %26 = load i32, i32* %25, align 4, !tbaa !10
  %27 = add nsw i32 %26, 2
  %28 = icmp eq i32* %18, %16
  br i1 %28, label %31, label %29

29:                                               ; preds = %15
  store i32 %27, i32* %18, align 4, !tbaa !10
  %30 = getelementptr inbounds i32, i32* %18, i64 1
  store i32* %30, i32** %10, align 8, !tbaa !9
  br label %60

31:                                               ; preds = %15
  %32 = icmp eq i64 %22, 9223372036854775804
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #8
          to label %34 unwind label %68

34:                                               ; preds = %33
  unreachable

35:                                               ; preds = %31
  %36 = icmp eq i64 %22, 0
  %37 = select i1 %36, i64 1, i64 %23
  %38 = add nsw i64 %37, %23
  %39 = icmp ult i64 %38, %23
  %40 = icmp ugt i64 %38, 2305843009213693951
  %41 = or i1 %39, %40
  %42 = select i1 %41, i64 2305843009213693951, i64 %38
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %35
  %45 = shl nuw nsw i64 %42, 2
  %46 = invoke noalias nonnull i8* @_Znwm(i64 %45) #7
          to label %47 unwind label %66

47:                                               ; preds = %44
  %48 = bitcast i8* %46 to i32*
  br label %49

49:                                               ; preds = %47, %35
  %50 = phi i32* [ %48, %47 ], [ null, %35 ]
  %51 = getelementptr inbounds i32, i32* %50, i64 %23
  store i32 %27, i32* %51, align 4, !tbaa !10
  %52 = icmp sgt i64 %22, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %49
  %54 = bitcast i32* %50 to i8*
  %55 = bitcast i32* %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %55, i64 %22, i1 false) #6
  br label %56

56:                                               ; preds = %49, %53
  %57 = bitcast i32* %17 to i8*
  %58 = getelementptr inbounds i32, i32* %51, i64 1
  tail call void @_ZdlPv(i8* nonnull %57) #6
  store i32* %50, i32** %12, align 8, !tbaa !3
  store i32* %58, i32** %10, align 8, !tbaa !9
  %59 = getelementptr inbounds i32, i32* %50, i64 %42
  store i32* %59, i32** %8, align 8, !tbaa !8
  br label %60

60:                                               ; preds = %56, %29
  %61 = phi i32* [ %59, %56 ], [ %16, %29 ]
  %62 = phi i32* [ %50, %56 ], [ %17, %29 ]
  %63 = phi i32* [ %58, %56 ], [ %30, %29 ]
  %64 = add nuw nsw i32 %19, 1
  %65 = icmp eq i32 %64, %1
  br i1 %65, label %73, label %15, !llvm.loop !12

66:                                               ; preds = %44
  %67 = landingpad { i8*, i32 }
          cleanup
  br label %70

68:                                               ; preds = %33
  %69 = landingpad { i8*, i32 }
          cleanup
  br label %70

70:                                               ; preds = %68, %66
  %71 = phi { i8*, i32 } [ %67, %66 ], [ %69, %68 ]
  %72 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* nonnull %72) #6
  resume { i8*, i32 } %71

73:                                               ; preds = %60, %2
  ret void
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #4 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly nofree nounwind willreturn writeonly }
attributes #6 = { nounwind }
attributes #7 = { allocsize(0) }
attributes #8 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 16}
!9 = !{!4, !5, i64 8}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
