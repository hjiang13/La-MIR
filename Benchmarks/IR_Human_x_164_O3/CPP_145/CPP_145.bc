; ModuleID = '../../Human_xBenchmarks_164/CPP_145/CPP_145.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_145/CPP_145.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z15order_by_pointsSt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::__cxx11::basic_string", align 8
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.std::__cxx11::basic_string"* %3 to i8*
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2
  %10 = bitcast %union.anon* %9 to i8*
  %11 = load i32*, i32** %4, align 8, !tbaa !3
  %12 = load i32*, i32** %5, align 8, !tbaa !8
  %13 = icmp eq i32* %11, %12
  br i1 %13, label %221, label %37

14:                                               ; preds = %206
  %15 = icmp ult i64 %213, 2
  br i1 %15, label %221, label %16

16:                                               ; preds = %14, %34
  %17 = phi i64 [ %35, %34 ], [ 0, %14 ]
  br label %18

18:                                               ; preds = %16, %31
  %19 = phi i64 [ 1, %16 ], [ %32, %31 ]
  %20 = add nsw i64 %19, -1
  %21 = getelementptr inbounds i32, i32* %199, i64 %20
  %22 = load i32, i32* %21, align 4, !tbaa !9
  %23 = getelementptr inbounds i32, i32* %199, i64 %19
  %24 = load i32, i32* %23, align 4, !tbaa !9
  %25 = icmp sgt i32 %22, %24
  br i1 %25, label %26, label %31

26:                                               ; preds = %18
  store i32 %22, i32* %23, align 4, !tbaa !9
  store i32 %24, i32* %21, align 4, !tbaa !9
  %27 = getelementptr inbounds i32, i32* %209, i64 %19
  %28 = load i32, i32* %27, align 4, !tbaa !9
  %29 = getelementptr inbounds i32, i32* %209, i64 %20
  %30 = load i32, i32* %29, align 4, !tbaa !9
  store i32 %30, i32* %27, align 4, !tbaa !9
  store i32 %28, i32* %29, align 4, !tbaa !9
  br label %31

31:                                               ; preds = %26, %18
  %32 = add nuw nsw i64 %19, 1
  %33 = icmp eq i64 %32, %213
  br i1 %33, label %34, label %18, !llvm.loop !11

34:                                               ; preds = %31
  %35 = add nuw nsw i64 %17, 1
  %36 = icmp eq i64 %35, %213
  br i1 %36, label %221, label %16, !llvm.loop !13

37:                                               ; preds = %2, %206
  %38 = phi i64 [ %207, %206 ], [ 0, %2 ]
  %39 = phi i32* [ %209, %206 ], [ %12, %2 ]
  %40 = phi i32* [ %201, %206 ], [ null, %2 ]
  %41 = phi i32* [ %202, %206 ], [ null, %2 ]
  %42 = phi i32* [ %199, %206 ], [ null, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #12
  %43 = getelementptr inbounds i32, i32* %39, i64 %38
  %44 = load i32, i32* %43, align 4, !tbaa !9
  %45 = call i32 @llvm.abs.i32(i32 %44, i1 true)
  invoke void (%"class.std::__cxx11::basic_string"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* nonnull sret(%"class.std::__cxx11::basic_string") align 8 %3, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %45)
          to label %46 unwind label %141

46:                                               ; preds = %37
  %47 = load i64, i64* %7, align 8, !tbaa !14
  %48 = load i8*, i8** %8, align 8
  %49 = icmp ugt i64 %47, 1
  br i1 %49, label %50, label %127

50:                                               ; preds = %46
  %51 = add i64 %47, -1
  %52 = icmp ult i64 %51, 8
  br i1 %52, label %124, label %53

53:                                               ; preds = %50
  %54 = and i64 %51, -8
  %55 = or i64 %54, 1
  %56 = add i64 %54, -8
  %57 = lshr exact i64 %56, 3
  %58 = add nuw nsw i64 %57, 1
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %56, 0
  br i1 %60, label %97, label %61

61:                                               ; preds = %53
  %62 = and i64 %58, 4611686018427387902
  br label %63

63:                                               ; preds = %63, %61
  %64 = phi i64 [ 0, %61 ], [ %94, %63 ]
  %65 = phi <4 x i32> [ zeroinitializer, %61 ], [ %92, %63 ]
  %66 = phi <4 x i32> [ zeroinitializer, %61 ], [ %93, %63 ]
  %67 = phi i64 [ %62, %61 ], [ %95, %63 ]
  %68 = or i64 %64, 1
  %69 = getelementptr inbounds i8, i8* %48, i64 %68
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1, !tbaa !18
  %72 = getelementptr inbounds i8, i8* %69, i64 4
  %73 = bitcast i8* %72 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1, !tbaa !18
  %75 = sext <4 x i8> %71 to <4 x i32>
  %76 = sext <4 x i8> %74 to <4 x i32>
  %77 = add <4 x i32> %65, <i32 -48, i32 -48, i32 -48, i32 -48>
  %78 = add <4 x i32> %66, <i32 -48, i32 -48, i32 -48, i32 -48>
  %79 = add <4 x i32> %77, %75
  %80 = add <4 x i32> %78, %76
  %81 = or i64 %64, 9
  %82 = getelementptr inbounds i8, i8* %48, i64 %81
  %83 = bitcast i8* %82 to <4 x i8>*
  %84 = load <4 x i8>, <4 x i8>* %83, align 1, !tbaa !18
  %85 = getelementptr inbounds i8, i8* %82, i64 4
  %86 = bitcast i8* %85 to <4 x i8>*
  %87 = load <4 x i8>, <4 x i8>* %86, align 1, !tbaa !18
  %88 = sext <4 x i8> %84 to <4 x i32>
  %89 = sext <4 x i8> %87 to <4 x i32>
  %90 = add <4 x i32> %79, <i32 -48, i32 -48, i32 -48, i32 -48>
  %91 = add <4 x i32> %80, <i32 -48, i32 -48, i32 -48, i32 -48>
  %92 = add <4 x i32> %90, %88
  %93 = add <4 x i32> %91, %89
  %94 = add nuw i64 %64, 16
  %95 = add i64 %67, -2
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %63, !llvm.loop !19

97:                                               ; preds = %63, %53
  %98 = phi <4 x i32> [ undef, %53 ], [ %92, %63 ]
  %99 = phi <4 x i32> [ undef, %53 ], [ %93, %63 ]
  %100 = phi i64 [ 0, %53 ], [ %94, %63 ]
  %101 = phi <4 x i32> [ zeroinitializer, %53 ], [ %92, %63 ]
  %102 = phi <4 x i32> [ zeroinitializer, %53 ], [ %93, %63 ]
  %103 = icmp eq i64 %59, 0
  br i1 %103, label %118, label %104

104:                                              ; preds = %97
  %105 = or i64 %100, 1
  %106 = getelementptr inbounds i8, i8* %48, i64 %105
  %107 = add <4 x i32> %102, <i32 -48, i32 -48, i32 -48, i32 -48>
  %108 = getelementptr inbounds i8, i8* %106, i64 4
  %109 = bitcast i8* %108 to <4 x i8>*
  %110 = load <4 x i8>, <4 x i8>* %109, align 1, !tbaa !18
  %111 = sext <4 x i8> %110 to <4 x i32>
  %112 = add <4 x i32> %107, %111
  %113 = add <4 x i32> %101, <i32 -48, i32 -48, i32 -48, i32 -48>
  %114 = bitcast i8* %106 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1, !tbaa !18
  %116 = sext <4 x i8> %115 to <4 x i32>
  %117 = add <4 x i32> %113, %116
  br label %118

118:                                              ; preds = %97, %104
  %119 = phi <4 x i32> [ %98, %97 ], [ %117, %104 ]
  %120 = phi <4 x i32> [ %99, %97 ], [ %112, %104 ]
  %121 = add <4 x i32> %120, %119
  %122 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %121)
  %123 = icmp eq i64 %51, %54
  br i1 %123, label %127, label %124

124:                                              ; preds = %50, %118
  %125 = phi i64 [ 1, %50 ], [ %55, %118 ]
  %126 = phi i32 [ 0, %50 ], [ %122, %118 ]
  br label %143

127:                                              ; preds = %143, %118, %46
  %128 = phi i32 [ 0, %46 ], [ %122, %118 ], [ %150, %143 ]
  %129 = load i32*, i32** %5, align 8, !tbaa !8
  %130 = getelementptr inbounds i32, i32* %129, i64 %38
  %131 = load i32, i32* %130, align 4, !tbaa !9
  %132 = icmp sgt i32 %131, 0
  %133 = load i8, i8* %48, align 1, !tbaa !18
  %134 = sext i8 %133 to i32
  %135 = add i32 %128, 48
  %136 = sub i32 %135, %134
  %137 = add i32 %128, -48
  %138 = add i32 %137, %134
  %139 = select i1 %132, i32 %138, i32 %136
  %140 = icmp eq i32* %41, %40
  br i1 %140, label %163, label %162

141:                                              ; preds = %37
  %142 = landingpad { i8*, i32 }
          cleanup
  br label %215

143:                                              ; preds = %124, %143
  %144 = phi i64 [ %151, %143 ], [ %125, %124 ]
  %145 = phi i32 [ %150, %143 ], [ %126, %124 ]
  %146 = getelementptr inbounds i8, i8* %48, i64 %144
  %147 = load i8, i8* %146, align 1, !tbaa !18
  %148 = sext i8 %147 to i32
  %149 = add i32 %145, -48
  %150 = add i32 %149, %148
  %151 = add nuw nsw i64 %144, 1
  %152 = icmp eq i64 %151, %47
  br i1 %152, label %127, label %143, !llvm.loop !21

153:                                              ; preds = %180
  %154 = landingpad { i8*, i32 }
          cleanup
  br label %157

155:                                              ; preds = %169
  %156 = landingpad { i8*, i32 }
          cleanup
  br label %157

157:                                              ; preds = %155, %153
  %158 = phi { i8*, i32 } [ %154, %153 ], [ %156, %155 ]
  %159 = load i8*, i8** %8, align 8, !tbaa !23
  %160 = icmp eq i8* %159, %10
  br i1 %160, label %215, label %161

161:                                              ; preds = %157
  call void @_ZdlPv(i8* %159) #12
  br label %215

162:                                              ; preds = %127
  store i32 %139, i32* %41, align 4, !tbaa !9
  br label %198

163:                                              ; preds = %127
  %164 = ptrtoint i32* %40 to i64
  %165 = ptrtoint i32* %42 to i64
  %166 = sub i64 %164, %165
  %167 = ashr exact i64 %166, 2
  %168 = icmp eq i64 %166, 9223372036854775804
  br i1 %168, label %169, label %171

169:                                              ; preds = %163
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #13
          to label %170 unwind label %155

170:                                              ; preds = %169
  unreachable

171:                                              ; preds = %163
  %172 = icmp eq i64 %166, 0
  %173 = select i1 %172, i64 1, i64 %167
  %174 = add nsw i64 %173, %167
  %175 = icmp ult i64 %174, %167
  %176 = icmp ugt i64 %174, 2305843009213693951
  %177 = or i1 %175, %176
  %178 = select i1 %177, i64 2305843009213693951, i64 %174
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %185, label %180

180:                                              ; preds = %171
  %181 = shl nuw nsw i64 %178, 2
  %182 = invoke noalias nonnull i8* @_Znwm(i64 %181) #14
          to label %183 unwind label %153

183:                                              ; preds = %180
  %184 = bitcast i8* %182 to i32*
  br label %185

185:                                              ; preds = %183, %171
  %186 = phi i32* [ %184, %183 ], [ null, %171 ]
  %187 = getelementptr inbounds i32, i32* %186, i64 %167
  store i32 %139, i32* %187, align 4, !tbaa !9
  %188 = icmp sgt i64 %166, 0
  br i1 %188, label %189, label %192

189:                                              ; preds = %185
  %190 = bitcast i32* %186 to i8*
  %191 = bitcast i32* %42 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %190, i8* align 4 %191, i64 %166, i1 false) #12
  br label %192

192:                                              ; preds = %185, %189
  %193 = icmp eq i32* %42, null
  br i1 %193, label %196, label %194

194:                                              ; preds = %192
  %195 = bitcast i32* %42 to i8*
  call void @_ZdlPv(i8* nonnull %195) #12
  br label %196

196:                                              ; preds = %194, %192
  %197 = getelementptr inbounds i32, i32* %186, i64 %178
  br label %198

198:                                              ; preds = %196, %162
  %199 = phi i32* [ %186, %196 ], [ %42, %162 ]
  %200 = phi i32* [ %187, %196 ], [ %41, %162 ]
  %201 = phi i32* [ %197, %196 ], [ %40, %162 ]
  %202 = getelementptr inbounds i32, i32* %200, i64 1
  %203 = load i8*, i8** %8, align 8, !tbaa !23
  %204 = icmp eq i8* %203, %10
  br i1 %204, label %206, label %205

205:                                              ; preds = %198
  call void @_ZdlPv(i8* %203) #12
  br label %206

206:                                              ; preds = %198, %205
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  %207 = add nuw i64 %38, 1
  %208 = load i32*, i32** %4, align 8, !tbaa !3
  %209 = load i32*, i32** %5, align 8, !tbaa !8
  %210 = ptrtoint i32* %208 to i64
  %211 = ptrtoint i32* %209 to i64
  %212 = sub i64 %210, %211
  %213 = ashr exact i64 %212, 2
  %214 = icmp ugt i64 %213, %207
  br i1 %214, label %37, label %14, !llvm.loop !24

215:                                              ; preds = %161, %157, %141
  %216 = phi { i8*, i32 } [ %142, %141 ], [ %158, %157 ], [ %158, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  %217 = icmp eq i32* %42, null
  br i1 %217, label %220, label %218

218:                                              ; preds = %215
  %219 = bitcast i32* %42 to i8*
  call void @_ZdlPv(i8* nonnull %219) #12
  br label %220

220:                                              ; preds = %215, %218
  resume { i8*, i32 } %216

221:                                              ; preds = %34, %14, %2
  %222 = phi i32* [ %12, %2 ], [ %209, %14 ], [ %209, %34 ]
  %223 = phi i32* [ %11, %2 ], [ %208, %14 ], [ %208, %34 ]
  %224 = phi i32* [ null, %2 ], [ %199, %14 ], [ %199, %34 ]
  %225 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32* %222, i32** %225, align 8, !tbaa !8
  %226 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32* %223, i32** %226, align 8, !tbaa !3
  %227 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %228 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %229 = load i32*, i32** %228, align 8, !tbaa !25
  store i32* %229, i32** %227, align 8, !tbaa !25
  %230 = bitcast %"class.std::vector"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %230, i8 0, i64 24, i1 false) #12
  %231 = icmp eq i32* %224, null
  br i1 %231, label %234, label %232

232:                                              ; preds = %221
  %233 = bitcast i32* %224 to i8*
  call void @_ZdlPv(i8* nonnull %233) #12
  br label %234

234:                                              ; preds = %221, %232
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = alloca i64, align 8
  %6 = alloca [1 x %struct.__va_list_tag], align 16
  %7 = alloca i8, i64 %2, align 16
  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %8)
  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)
  call void @llvm.va_end(i8* nonnull %8)
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %13 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !26
  %14 = bitcast %union.anon* %12 to i8*
  %15 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #12
  store i64 %11, i64* %5, align 8, !tbaa !27
  %16 = icmp ugt i32 %10, 15
  br i1 %16, label %17, label %22

17:                                               ; preds = %4
  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %18, i8** %19, align 8, !tbaa !23
  %20 = load i64, i64* %5, align 8, !tbaa !27
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %20, i64* %21, align 8, !tbaa !18
  br label %22

22:                                               ; preds = %17, %4
  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]
  switch i64 %11, label %26 [
    i64 1, label %24
    i64 0, label %27
  ]

24:                                               ; preds = %22
  %25 = load i8, i8* %7, align 16, !tbaa !18
  store i8 %25, i8* %23, align 1, !tbaa !18
  br label %27

26:                                               ; preds = %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #12
  br label %27

27:                                               ; preds = %26, %24, %22
  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %29 = load i64, i64* %5, align 8, !tbaa !27
  %30 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %29, i64* %30, align 8, !tbaa !14
  %31 = load i8*, i8** %28, align 8, !tbaa !23
  %32 = getelementptr inbounds i8, i8* %31, i64 %29
  store i8 0, i8* %32, align 1, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #3

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #4

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #4

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #11

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nosync nounwind willreturn }
attributes #5 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #11 = { nofree nosync nounwind readnone willreturn }
attributes #12 = { nounwind }
attributes #13 = { noreturn }
attributes #14 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !12}
!14 = !{!15, !17, i64 8}
!15 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !16, i64 0, !17, i64 8, !6, i64 16}
!16 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!17 = !{!"long", !6, i64 0}
!18 = !{!6, !6, i64 0}
!19 = distinct !{!19, !12, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !12, !22, !20}
!22 = !{!"llvm.loop.unroll.runtime.disable"}
!23 = !{!15, !5, i64 0}
!24 = distinct !{!24, !12}
!25 = !{!4, !5, i64 16}
!26 = !{!16, !5, i64 0}
!27 = !{!17, !17, i64 0}
