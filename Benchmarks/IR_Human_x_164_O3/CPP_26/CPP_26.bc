; ModuleID = '../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z17remove_duplicatesSt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  %6 = load i32*, i32** %3, align 8, !tbaa !3
  %7 = load i32*, i32** %4, align 8, !tbaa !8
  %8 = icmp eq i32* %6, %7
  br i1 %8, label %9, label %24

9:                                                ; preds = %250, %2
  %10 = phi i32* [ %6, %2 ], [ %259, %250 ]
  %11 = phi i32* [ %6, %2 ], [ %258, %250 ]
  %12 = phi i32* [ null, %2 ], [ %252, %250 ]
  %13 = phi i32* [ null, %2 ], [ %253, %250 ]
  %14 = phi i32* [ null, %2 ], [ %256, %250 ]
  %15 = ptrtoint i32* %12 to i64
  %16 = ptrtoint i32* %13 to i64
  %17 = sub i64 %15, %16
  %18 = icmp sgt i64 %17, 15
  %19 = lshr i64 %17, 4
  %20 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = icmp eq i32* %11, %10
  br i1 %23, label %265, label %274

24:                                               ; preds = %2, %250
  %25 = phi i64 [ %257, %250 ], [ 0, %2 ]
  %26 = phi i32* [ %259, %250 ], [ %7, %2 ]
  %27 = phi i32* [ %256, %250 ], [ null, %2 ]
  %28 = phi i32* [ %255, %250 ], [ null, %2 ]
  %29 = phi i32* [ %254, %250 ], [ null, %2 ]
  %30 = phi i32* [ %253, %250 ], [ null, %2 ]
  %31 = phi i32* [ %252, %250 ], [ null, %2 ]
  %32 = phi i32* [ %251, %250 ], [ null, %2 ]
  %33 = getelementptr inbounds i32, i32* %26, i64 %25
  %34 = ptrtoint i32* %31 to i64
  %35 = ptrtoint i32* %30 to i64
  %36 = sub i64 %34, %35
  %37 = icmp sgt i64 %36, 15
  br i1 %37, label %38, label %65

38:                                               ; preds = %24
  %39 = lshr i64 %36, 4
  %40 = load i32, i32* %33, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %58, %38
  %42 = phi i64 [ %39, %38 ], [ %60, %58 ]
  %43 = phi i32* [ %30, %38 ], [ %59, %58 ]
  %44 = load i32, i32* %43, align 4, !tbaa !9
  %45 = icmp eq i32 %44, %40
  br i1 %45, label %97, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds i32, i32* %43, i64 1
  %48 = load i32, i32* %47, align 4, !tbaa !9
  %49 = icmp eq i32 %48, %40
  br i1 %49, label %95, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds i32, i32* %43, i64 2
  %52 = load i32, i32* %51, align 4, !tbaa !9
  %53 = icmp eq i32 %52, %40
  br i1 %53, label %93, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds i32, i32* %43, i64 3
  %56 = load i32, i32* %55, align 4, !tbaa !9
  %57 = icmp eq i32 %56, %40
  br i1 %57, label %91, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds i32, i32* %43, i64 4
  %60 = add nsw i64 %42, -1
  %61 = icmp sgt i64 %42, 1
  br i1 %61, label %41, label %62, !llvm.loop !11

62:                                               ; preds = %58
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %34, %63
  br label %65

65:                                               ; preds = %62, %24
  %66 = phi i64 [ %64, %62 ], [ %36, %24 ]
  %67 = phi i32* [ %59, %62 ], [ %30, %24 ]
  %68 = ashr exact i64 %66, 2
  switch i64 %68, label %100 [
    i64 3, label %73
    i64 2, label %71
    i64 1, label %69
  ]

69:                                               ; preds = %65
  %70 = load i32, i32* %33, align 4, !tbaa !9
  br label %86

71:                                               ; preds = %65
  %72 = load i32, i32* %33, align 4, !tbaa !9
  br label %79

73:                                               ; preds = %65
  %74 = load i32, i32* %67, align 4, !tbaa !9
  %75 = load i32, i32* %33, align 4, !tbaa !9
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %97, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds i32, i32* %67, i64 1
  br label %79

79:                                               ; preds = %77, %71
  %80 = phi i32 [ %72, %71 ], [ %75, %77 ]
  %81 = phi i32* [ %67, %71 ], [ %78, %77 ]
  %82 = load i32, i32* %81, align 4, !tbaa !9
  %83 = icmp eq i32 %82, %80
  br i1 %83, label %97, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds i32, i32* %81, i64 1
  br label %86

86:                                               ; preds = %84, %69
  %87 = phi i32 [ %70, %69 ], [ %80, %84 ]
  %88 = phi i32* [ %67, %69 ], [ %85, %84 ]
  %89 = load i32, i32* %88, align 4, !tbaa !9
  %90 = icmp eq i32 %89, %87
  br i1 %90, label %97, label %100

91:                                               ; preds = %54
  %92 = getelementptr inbounds i32, i32* %43, i64 3
  br label %97

93:                                               ; preds = %50
  %94 = getelementptr inbounds i32, i32* %43, i64 2
  br label %97

95:                                               ; preds = %46
  %96 = getelementptr inbounds i32, i32* %43, i64 1
  br label %97

97:                                               ; preds = %41, %91, %93, %95, %86, %79, %73
  %98 = phi i32* [ %67, %73 ], [ %81, %79 ], [ %88, %86 ], [ %92, %91 ], [ %94, %93 ], [ %96, %95 ], [ %43, %41 ]
  %99 = icmp eq i32* %98, %31
  br i1 %99, label %100, label %250

100:                                              ; preds = %86, %65, %97
  %101 = ptrtoint i32* %28 to i64
  %102 = ptrtoint i32* %27 to i64
  %103 = sub i64 %101, %102
  %104 = icmp sgt i64 %103, 15
  br i1 %104, label %105, label %132

105:                                              ; preds = %100
  %106 = lshr i64 %103, 4
  %107 = load i32, i32* %33, align 4, !tbaa !9
  br label %108

108:                                              ; preds = %125, %105
  %109 = phi i64 [ %106, %105 ], [ %127, %125 ]
  %110 = phi i32* [ %27, %105 ], [ %126, %125 ]
  %111 = load i32, i32* %110, align 4, !tbaa !9
  %112 = icmp eq i32 %111, %107
  br i1 %112, label %164, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds i32, i32* %110, i64 1
  %115 = load i32, i32* %114, align 4, !tbaa !9
  %116 = icmp eq i32 %115, %107
  br i1 %116, label %162, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds i32, i32* %110, i64 2
  %119 = load i32, i32* %118, align 4, !tbaa !9
  %120 = icmp eq i32 %119, %107
  br i1 %120, label %160, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds i32, i32* %110, i64 3
  %123 = load i32, i32* %122, align 4, !tbaa !9
  %124 = icmp eq i32 %123, %107
  br i1 %124, label %158, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds i32, i32* %110, i64 4
  %127 = add nsw i64 %109, -1
  %128 = icmp sgt i64 %109, 1
  br i1 %128, label %108, label %129, !llvm.loop !11

129:                                              ; preds = %125
  %130 = ptrtoint i32* %126 to i64
  %131 = sub i64 %101, %130
  br label %132

132:                                              ; preds = %129, %100
  %133 = phi i64 [ %131, %129 ], [ %103, %100 ]
  %134 = phi i32* [ %126, %129 ], [ %27, %100 ]
  %135 = ashr exact i64 %133, 2
  switch i64 %135, label %211 [
    i64 3, label %140
    i64 2, label %138
    i64 1, label %136
  ]

136:                                              ; preds = %132
  %137 = load i32, i32* %33, align 4, !tbaa !9
  br label %153

138:                                              ; preds = %132
  %139 = load i32, i32* %33, align 4, !tbaa !9
  br label %146

140:                                              ; preds = %132
  %141 = load i32, i32* %134, align 4, !tbaa !9
  %142 = load i32, i32* %33, align 4, !tbaa !9
  %143 = icmp eq i32 %141, %142
  br i1 %143, label %164, label %144

144:                                              ; preds = %140
  %145 = getelementptr inbounds i32, i32* %134, i64 1
  br label %146

146:                                              ; preds = %144, %138
  %147 = phi i32 [ %139, %138 ], [ %142, %144 ]
  %148 = phi i32* [ %134, %138 ], [ %145, %144 ]
  %149 = load i32, i32* %148, align 4, !tbaa !9
  %150 = icmp eq i32 %149, %147
  br i1 %150, label %164, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds i32, i32* %148, i64 1
  br label %153

153:                                              ; preds = %151, %136
  %154 = phi i32 [ %137, %136 ], [ %147, %151 ]
  %155 = phi i32* [ %134, %136 ], [ %152, %151 ]
  %156 = load i32, i32* %155, align 4, !tbaa !9
  %157 = icmp eq i32 %156, %154
  br i1 %157, label %164, label %211

158:                                              ; preds = %121
  %159 = getelementptr inbounds i32, i32* %110, i64 3
  br label %164

160:                                              ; preds = %117
  %161 = getelementptr inbounds i32, i32* %110, i64 2
  br label %164

162:                                              ; preds = %113
  %163 = getelementptr inbounds i32, i32* %110, i64 1
  br label %164

164:                                              ; preds = %108, %158, %160, %162, %153, %146, %140
  %165 = phi i32 [ %141, %140 ], [ %147, %146 ], [ %154, %153 ], [ %107, %162 ], [ %107, %160 ], [ %107, %158 ], [ %107, %108 ]
  %166 = phi i32* [ %134, %140 ], [ %148, %146 ], [ %155, %153 ], [ %163, %162 ], [ %161, %160 ], [ %159, %158 ], [ %110, %108 ]
  %167 = icmp eq i32* %166, %28
  br i1 %167, label %211, label %168

168:                                              ; preds = %164
  %169 = icmp eq i32* %31, %32
  br i1 %169, label %172, label %170

170:                                              ; preds = %168
  store i32 %165, i32* %31, align 4, !tbaa !9
  %171 = getelementptr inbounds i32, i32* %31, i64 1
  br label %250

172:                                              ; preds = %168
  %173 = ashr exact i64 %36, 2
  %174 = icmp eq i64 %36, 9223372036854775804
  br i1 %174, label %175, label %177

175:                                              ; preds = %172
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %176 unwind label %209

176:                                              ; preds = %175
  unreachable

177:                                              ; preds = %172
  %178 = icmp eq i64 %36, 0
  %179 = select i1 %178, i64 1, i64 %173
  %180 = add nsw i64 %179, %173
  %181 = icmp ult i64 %180, %173
  %182 = icmp ugt i64 %180, 2305843009213693951
  %183 = or i1 %181, %182
  %184 = select i1 %183, i64 2305843009213693951, i64 %180
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %192, label %186

186:                                              ; preds = %177
  %187 = shl nuw nsw i64 %184, 2
  %188 = invoke noalias nonnull i8* @_Znwm(i64 %187) #7
          to label %189 unwind label %207

189:                                              ; preds = %186
  %190 = bitcast i8* %188 to i32*
  %191 = load i32, i32* %33, align 4, !tbaa !9
  br label %192

192:                                              ; preds = %189, %177
  %193 = phi i32 [ %191, %189 ], [ %165, %177 ]
  %194 = phi i32* [ %190, %189 ], [ null, %177 ]
  %195 = getelementptr inbounds i32, i32* %194, i64 %173
  store i32 %193, i32* %195, align 4, !tbaa !9
  %196 = icmp sgt i64 %36, 0
  br i1 %196, label %197, label %200

197:                                              ; preds = %192
  %198 = bitcast i32* %194 to i8*
  %199 = bitcast i32* %30 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %198, i8* align 4 %199, i64 %36, i1 false) #8
  br label %200

200:                                              ; preds = %197, %192
  %201 = getelementptr inbounds i32, i32* %195, i64 1
  %202 = icmp eq i32* %30, null
  br i1 %202, label %205, label %203

203:                                              ; preds = %200
  %204 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* nonnull %204) #8
  br label %205

205:                                              ; preds = %203, %200
  %206 = getelementptr inbounds i32, i32* %194, i64 %184
  br label %250

207:                                              ; preds = %186, %230
  %208 = landingpad { i8*, i32 }
          cleanup
  br label %403

209:                                              ; preds = %175, %219
  %210 = landingpad { i8*, i32 }
          cleanup
  br label %403

211:                                              ; preds = %153, %132, %164
  %212 = icmp eq i32* %28, %29
  br i1 %212, label %216, label %213

213:                                              ; preds = %211
  %214 = load i32, i32* %33, align 4, !tbaa !9
  store i32 %214, i32* %28, align 4, !tbaa !9
  %215 = getelementptr inbounds i32, i32* %28, i64 1
  br label %250

216:                                              ; preds = %211
  %217 = ashr exact i64 %103, 2
  %218 = icmp eq i64 %103, 9223372036854775804
  br i1 %218, label %219, label %221

219:                                              ; preds = %216
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %220 unwind label %209

220:                                              ; preds = %219
  unreachable

221:                                              ; preds = %216
  %222 = icmp eq i64 %103, 0
  %223 = select i1 %222, i64 1, i64 %217
  %224 = add nsw i64 %223, %217
  %225 = icmp ult i64 %224, %217
  %226 = icmp ugt i64 %224, 2305843009213693951
  %227 = or i1 %225, %226
  %228 = select i1 %227, i64 2305843009213693951, i64 %224
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %235, label %230

230:                                              ; preds = %221
  %231 = shl nuw nsw i64 %228, 2
  %232 = invoke noalias nonnull i8* @_Znwm(i64 %231) #7
          to label %233 unwind label %207

233:                                              ; preds = %230
  %234 = bitcast i8* %232 to i32*
  br label %235

235:                                              ; preds = %233, %221
  %236 = phi i32* [ %234, %233 ], [ null, %221 ]
  %237 = getelementptr inbounds i32, i32* %236, i64 %217
  %238 = load i32, i32* %33, align 4, !tbaa !9
  store i32 %238, i32* %237, align 4, !tbaa !9
  %239 = icmp sgt i64 %103, 0
  br i1 %239, label %240, label %243

240:                                              ; preds = %235
  %241 = bitcast i32* %236 to i8*
  %242 = bitcast i32* %27 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %241, i8* align 4 %242, i64 %103, i1 false) #8
  br label %243

243:                                              ; preds = %240, %235
  %244 = getelementptr inbounds i32, i32* %237, i64 1
  %245 = icmp eq i32* %27, null
  br i1 %245, label %248, label %246

246:                                              ; preds = %243
  %247 = bitcast i32* %27 to i8*
  tail call void @_ZdlPv(i8* nonnull %247) #8
  br label %248

248:                                              ; preds = %246, %243
  %249 = getelementptr inbounds i32, i32* %236, i64 %228
  br label %250

250:                                              ; preds = %248, %213, %205, %170, %97
  %251 = phi i32* [ %32, %97 ], [ %206, %205 ], [ %32, %170 ], [ %32, %213 ], [ %32, %248 ]
  %252 = phi i32* [ %31, %97 ], [ %201, %205 ], [ %171, %170 ], [ %31, %213 ], [ %31, %248 ]
  %253 = phi i32* [ %30, %97 ], [ %194, %205 ], [ %30, %170 ], [ %30, %213 ], [ %30, %248 ]
  %254 = phi i32* [ %29, %97 ], [ %29, %205 ], [ %29, %170 ], [ %29, %213 ], [ %249, %248 ]
  %255 = phi i32* [ %28, %97 ], [ %28, %205 ], [ %28, %170 ], [ %215, %213 ], [ %244, %248 ]
  %256 = phi i32* [ %27, %97 ], [ %27, %205 ], [ %27, %170 ], [ %27, %213 ], [ %236, %248 ]
  %257 = add nuw i64 %25, 1
  %258 = load i32*, i32** %3, align 8, !tbaa !3
  %259 = load i32*, i32** %4, align 8, !tbaa !8
  %260 = ptrtoint i32* %258 to i64
  %261 = ptrtoint i32* %259 to i64
  %262 = sub i64 %260, %261
  %263 = ashr exact i64 %262, 2
  %264 = icmp ugt i64 %263, %257
  br i1 %264, label %24, label %9, !llvm.loop !13

265:                                              ; preds = %391, %9
  %266 = icmp eq i32* %13, null
  br i1 %266, label %269, label %267

267:                                              ; preds = %265
  %268 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* nonnull %268) #8
  br label %269

269:                                              ; preds = %265, %267
  %270 = icmp eq i32* %14, null
  br i1 %270, label %273, label %271

271:                                              ; preds = %269
  %272 = bitcast i32* %14 to i8*
  tail call void @_ZdlPv(i8* nonnull %272) #8
  br label %273

273:                                              ; preds = %269, %271
  ret void

274:                                              ; preds = %9, %391
  %275 = phi i32* [ %392, %391 ], [ %10, %9 ]
  %276 = phi i32* [ %393, %391 ], [ %11, %9 ]
  %277 = phi i32* [ %394, %391 ], [ null, %9 ]
  %278 = phi i32* [ %395, %391 ], [ null, %9 ]
  %279 = phi i32* [ %396, %391 ], [ null, %9 ]
  %280 = phi i64 [ %397, %391 ], [ 0, %9 ]
  %281 = getelementptr inbounds i32, i32* %275, i64 %280
  br i1 %18, label %282, label %308

282:                                              ; preds = %274
  %283 = load i32, i32* %281, align 4, !tbaa !9
  br label %284

284:                                              ; preds = %301, %282
  %285 = phi i64 [ %19, %282 ], [ %303, %301 ]
  %286 = phi i32* [ %13, %282 ], [ %302, %301 ]
  %287 = load i32, i32* %286, align 4, !tbaa !9
  %288 = icmp eq i32 %287, %283
  br i1 %288, label %340, label %289

289:                                              ; preds = %284
  %290 = getelementptr inbounds i32, i32* %286, i64 1
  %291 = load i32, i32* %290, align 4, !tbaa !9
  %292 = icmp eq i32 %291, %283
  br i1 %292, label %338, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i32, i32* %286, i64 2
  %295 = load i32, i32* %294, align 4, !tbaa !9
  %296 = icmp eq i32 %295, %283
  br i1 %296, label %336, label %297

297:                                              ; preds = %293
  %298 = getelementptr inbounds i32, i32* %286, i64 3
  %299 = load i32, i32* %298, align 4, !tbaa !9
  %300 = icmp eq i32 %299, %283
  br i1 %300, label %334, label %301

301:                                              ; preds = %297
  %302 = getelementptr inbounds i32, i32* %286, i64 4
  %303 = add nsw i64 %285, -1
  %304 = icmp sgt i64 %285, 1
  br i1 %304, label %284, label %305, !llvm.loop !11

305:                                              ; preds = %301
  %306 = ptrtoint i32* %302 to i64
  %307 = sub i64 %15, %306
  br label %308

308:                                              ; preds = %305, %274
  %309 = phi i64 [ %307, %305 ], [ %17, %274 ]
  %310 = phi i32* [ %302, %305 ], [ %13, %274 ]
  %311 = ashr exact i64 %309, 2
  switch i64 %311, label %343 [
    i64 3, label %316
    i64 2, label %314
    i64 1, label %312
  ]

312:                                              ; preds = %308
  %313 = load i32, i32* %281, align 4, !tbaa !9
  br label %329

314:                                              ; preds = %308
  %315 = load i32, i32* %281, align 4, !tbaa !9
  br label %322

316:                                              ; preds = %308
  %317 = load i32, i32* %310, align 4, !tbaa !9
  %318 = load i32, i32* %281, align 4, !tbaa !9
  %319 = icmp eq i32 %317, %318
  br i1 %319, label %340, label %320

320:                                              ; preds = %316
  %321 = getelementptr inbounds i32, i32* %310, i64 1
  br label %322

322:                                              ; preds = %320, %314
  %323 = phi i32 [ %315, %314 ], [ %318, %320 ]
  %324 = phi i32* [ %310, %314 ], [ %321, %320 ]
  %325 = load i32, i32* %324, align 4, !tbaa !9
  %326 = icmp eq i32 %325, %323
  br i1 %326, label %340, label %327

327:                                              ; preds = %322
  %328 = getelementptr inbounds i32, i32* %324, i64 1
  br label %329

329:                                              ; preds = %327, %312
  %330 = phi i32 [ %313, %312 ], [ %323, %327 ]
  %331 = phi i32* [ %310, %312 ], [ %328, %327 ]
  %332 = load i32, i32* %331, align 4, !tbaa !9
  %333 = icmp eq i32 %332, %330
  br i1 %333, label %340, label %343

334:                                              ; preds = %297
  %335 = getelementptr inbounds i32, i32* %286, i64 3
  br label %340

336:                                              ; preds = %293
  %337 = getelementptr inbounds i32, i32* %286, i64 2
  br label %340

338:                                              ; preds = %289
  %339 = getelementptr inbounds i32, i32* %286, i64 1
  br label %340

340:                                              ; preds = %284, %334, %336, %338, %329, %322, %316
  %341 = phi i32* [ %310, %316 ], [ %324, %322 ], [ %331, %329 ], [ %335, %334 ], [ %337, %336 ], [ %339, %338 ], [ %286, %284 ]
  %342 = icmp eq i32* %341, %12
  br i1 %342, label %343, label %391

343:                                              ; preds = %329, %308, %340
  %344 = icmp eq i32* %279, %278
  br i1 %344, label %348, label %345

345:                                              ; preds = %343
  %346 = load i32, i32* %281, align 4, !tbaa !9
  store i32 %346, i32* %279, align 4, !tbaa !9
  %347 = getelementptr inbounds i32, i32* %279, i64 1
  store i32* %347, i32** %20, align 8, !tbaa !3
  br label %391

348:                                              ; preds = %343
  %349 = ptrtoint i32* %278 to i64
  %350 = ptrtoint i32* %277 to i64
  %351 = sub i64 %349, %350
  %352 = ashr exact i64 %351, 2
  %353 = icmp eq i64 %351, 9223372036854775804
  br i1 %353, label %354, label %356

354:                                              ; preds = %348
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %355 unwind label %389

355:                                              ; preds = %354
  unreachable

356:                                              ; preds = %348
  %357 = icmp eq i64 %351, 0
  %358 = select i1 %357, i64 1, i64 %352
  %359 = add nsw i64 %358, %352
  %360 = icmp ult i64 %359, %352
  %361 = icmp ugt i64 %359, 2305843009213693951
  %362 = or i1 %360, %361
  %363 = select i1 %362, i64 2305843009213693951, i64 %359
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %356
  %366 = shl nuw nsw i64 %363, 2
  %367 = invoke noalias nonnull i8* @_Znwm(i64 %366) #7
          to label %368 unwind label %387

368:                                              ; preds = %365
  %369 = bitcast i8* %367 to i32*
  br label %370

370:                                              ; preds = %368, %356
  %371 = phi i32* [ %369, %368 ], [ null, %356 ]
  %372 = getelementptr inbounds i32, i32* %371, i64 %352
  %373 = load i32, i32* %281, align 4, !tbaa !9
  store i32 %373, i32* %372, align 4, !tbaa !9
  %374 = icmp sgt i64 %351, 0
  br i1 %374, label %375, label %378

375:                                              ; preds = %370
  %376 = bitcast i32* %371 to i8*
  %377 = bitcast i32* %277 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %376, i8* align 4 %377, i64 %351, i1 false) #8
  br label %378

378:                                              ; preds = %375, %370
  %379 = getelementptr inbounds i32, i32* %372, i64 1
  %380 = icmp eq i32* %277, null
  br i1 %380, label %383, label %381

381:                                              ; preds = %378
  %382 = bitcast i32* %277 to i8*
  tail call void @_ZdlPv(i8* nonnull %382) #8
  br label %383

383:                                              ; preds = %381, %378
  store i32* %371, i32** %22, align 8, !tbaa !8
  store i32* %379, i32** %20, align 8, !tbaa !3
  %384 = getelementptr inbounds i32, i32* %371, i64 %363
  store i32* %384, i32** %21, align 8, !tbaa !14
  %385 = load i32*, i32** %3, align 8, !tbaa !3
  %386 = load i32*, i32** %4, align 8, !tbaa !8
  br label %391

387:                                              ; preds = %365
  %388 = landingpad { i8*, i32 }
          cleanup
  br label %403

389:                                              ; preds = %354
  %390 = landingpad { i8*, i32 }
          cleanup
  br label %403

391:                                              ; preds = %383, %345, %340
  %392 = phi i32* [ %386, %383 ], [ %275, %345 ], [ %275, %340 ]
  %393 = phi i32* [ %385, %383 ], [ %276, %345 ], [ %276, %340 ]
  %394 = phi i32* [ %371, %383 ], [ %277, %345 ], [ %277, %340 ]
  %395 = phi i32* [ %384, %383 ], [ %278, %345 ], [ %278, %340 ]
  %396 = phi i32* [ %379, %383 ], [ %347, %345 ], [ %279, %340 ]
  %397 = add nuw i64 %280, 1
  %398 = ptrtoint i32* %393 to i64
  %399 = ptrtoint i32* %392 to i64
  %400 = sub i64 %398, %399
  %401 = ashr exact i64 %400, 2
  %402 = icmp ugt i64 %401, %397
  br i1 %402, label %274, label %265, !llvm.loop !15

403:                                              ; preds = %387, %389, %207, %209
  %404 = phi i32* [ null, %207 ], [ null, %209 ], [ %277, %387 ], [ %277, %389 ]
  %405 = phi i32* [ %30, %207 ], [ %30, %209 ], [ %13, %387 ], [ %13, %389 ]
  %406 = phi i32* [ %27, %207 ], [ %27, %209 ], [ %14, %387 ], [ %14, %389 ]
  %407 = phi { i8*, i32 } [ %208, %207 ], [ %210, %209 ], [ %388, %387 ], [ %390, %389 ]
  %408 = icmp eq i32* %405, null
  br i1 %408, label %411, label %409

409:                                              ; preds = %403
  %410 = bitcast i32* %405 to i8*
  tail call void @_ZdlPv(i8* nonnull %410) #8
  br label %411

411:                                              ; preds = %403, %409
  %412 = icmp eq i32* %406, null
  br i1 %412, label %415, label %413

413:                                              ; preds = %411
  %414 = bitcast i32* %406 to i8*
  tail call void @_ZdlPv(i8* nonnull %414) #8
  br label %415

415:                                              ; preds = %411, %413
  %416 = icmp eq i32* %404, null
  br i1 %416, label %419, label %417

417:                                              ; preds = %415
  %418 = bitcast i32* %404 to i8*
  tail call void @_ZdlPv(i8* nonnull %418) #8
  br label %419

419:                                              ; preds = %415, %417
  resume { i8*, i32 } %407
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { noreturn }
attributes #7 = { allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !12}
!14 = !{!4, !5, i64 16}
!15 = distinct !{!15, !12}
