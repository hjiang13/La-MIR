; ModuleID = '../../Human_xBenchmarks_164/CPP_121/CPP_121.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_121/CPP_121.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z9solutionsSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !8
  %6 = ptrtoint i32* %3 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %74, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 2
  %12 = call i64 @llvm.umax.i64(i64 %11, i64 2)
  %13 = add i64 %12, -1
  %14 = lshr i64 %13, 1
  %15 = add nuw i64 %14, 1
  %16 = icmp ult i64 %13, 14
  br i1 %16, label %70, label %17

17:                                               ; preds = %10
  %18 = and i64 %15, -8
  %19 = shl i64 %18, 1
  br label %20

20:                                               ; preds = %20, %17
  %21 = phi i64 [ 0, %17 ], [ %64, %20 ]
  %22 = phi <4 x i32> [ zeroinitializer, %17 ], [ %62, %20 ]
  %23 = phi <4 x i32> [ zeroinitializer, %17 ], [ %63, %20 ]
  %24 = shl i64 %21, 1
  %25 = or i64 %24, 2
  %26 = or i64 %24, 4
  %27 = or i64 %24, 6
  %28 = or i64 %24, 8
  %29 = or i64 %24, 10
  %30 = or i64 %24, 12
  %31 = or i64 %24, 14
  %32 = getelementptr inbounds i32, i32* %5, i64 %24
  %33 = getelementptr inbounds i32, i32* %5, i64 %25
  %34 = getelementptr inbounds i32, i32* %5, i64 %26
  %35 = getelementptr inbounds i32, i32* %5, i64 %27
  %36 = getelementptr inbounds i32, i32* %5, i64 %28
  %37 = getelementptr inbounds i32, i32* %5, i64 %29
  %38 = getelementptr inbounds i32, i32* %5, i64 %30
  %39 = getelementptr inbounds i32, i32* %5, i64 %31
  %40 = load i32, i32* %32, align 4, !tbaa !9
  %41 = load i32, i32* %33, align 4, !tbaa !9
  %42 = load i32, i32* %34, align 4, !tbaa !9
  %43 = load i32, i32* %35, align 4, !tbaa !9
  %44 = insertelement <4 x i32> poison, i32 %40, i32 0
  %45 = insertelement <4 x i32> %44, i32 %41, i32 1
  %46 = insertelement <4 x i32> %45, i32 %42, i32 2
  %47 = insertelement <4 x i32> %46, i32 %43, i32 3
  %48 = load i32, i32* %36, align 4, !tbaa !9
  %49 = load i32, i32* %37, align 4, !tbaa !9
  %50 = load i32, i32* %38, align 4, !tbaa !9
  %51 = load i32, i32* %39, align 4, !tbaa !9
  %52 = insertelement <4 x i32> poison, i32 %48, i32 0
  %53 = insertelement <4 x i32> %52, i32 %49, i32 1
  %54 = insertelement <4 x i32> %53, i32 %50, i32 2
  %55 = insertelement <4 x i32> %54, i32 %51, i32 3
  %56 = srem <4 x i32> %47, <i32 2, i32 2, i32 2, i32 2>
  %57 = srem <4 x i32> %55, <i32 2, i32 2, i32 2, i32 2>
  %58 = icmp eq <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  %59 = icmp eq <4 x i32> %57, <i32 1, i32 1, i32 1, i32 1>
  %60 = select <4 x i1> %58, <4 x i32> %47, <4 x i32> zeroinitializer
  %61 = select <4 x i1> %59, <4 x i32> %55, <4 x i32> zeroinitializer
  %62 = add <4 x i32> %60, %22
  %63 = add <4 x i32> %61, %23
  %64 = add nuw i64 %21, 8
  %65 = icmp eq i64 %64, %18
  br i1 %65, label %66, label %20, !llvm.loop !11

66:                                               ; preds = %20
  %67 = add <4 x i32> %63, %62
  %68 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %67)
  %69 = icmp eq i64 %15, %18
  br i1 %69, label %74, label %70

70:                                               ; preds = %10, %66
  %71 = phi i64 [ 0, %10 ], [ %18, %66 ]
  %72 = phi i64 [ 0, %10 ], [ %19, %66 ]
  %73 = phi i32 [ 0, %10 ], [ %68, %66 ]
  br label %76

74:                                               ; preds = %76, %66, %1
  %75 = phi i32 [ 0, %1 ], [ %68, %66 ], [ %85, %76 ]
  ret i32 %75

76:                                               ; preds = %70, %76
  %77 = phi i64 [ %86, %76 ], [ %71, %70 ]
  %78 = phi i64 [ %87, %76 ], [ %72, %70 ]
  %79 = phi i32 [ %85, %76 ], [ %73, %70 ]
  %80 = getelementptr inbounds i32, i32* %5, i64 %78
  %81 = load i32, i32* %80, align 4, !tbaa !9
  %82 = srem i32 %81, 2
  %83 = icmp eq i32 %82, 1
  %84 = select i1 %83, i32 %81, i32 0
  %85 = add nsw i32 %84, %79
  %86 = add nuw nsw i64 %77, 1
  %87 = shl nuw nsw i64 %86, 1
  %88 = icmp eq i64 %77, %14
  br i1 %88, label %74, label %76, !llvm.loop !14
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nofree nosync nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !12, !15, !13}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
