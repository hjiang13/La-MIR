; ModuleID = '../../Human_xBenchmarks_164/CPP_68/CPP_68.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_68/CPP_68.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: uwtable
define dso_local void @_Z5pluckSt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to [2 x i32]*
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = bitcast i64* %3 to i8*
  %10 = bitcast i64* %3 to i32*
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 1
  %12 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %13 = bitcast %"class.std::vector"* %0 to i8**
  %14 = bitcast i32** %7 to i8**
  %15 = bitcast i32** %12 to i8**
  %16 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false)
  %17 = load i32*, i32** %5, align 8, !tbaa !3
  %18 = load i32*, i32** %6, align 8, !tbaa !8
  %19 = icmp eq i32* %17, %18
  br i1 %19, label %98, label %20

20:                                               ; preds = %2, %88
  %21 = phi i32* [ %89, %88 ], [ %18, %2 ]
  %22 = phi i32* [ %90, %88 ], [ %17, %2 ]
  %23 = phi i32* [ %91, %88 ], [ null, %2 ]
  %24 = phi i64 [ %92, %88 ], [ 0, %2 ]
  %25 = getelementptr inbounds i32, i32* %21, i64 %24
  %26 = load i32, i32* %25, align 4, !tbaa !9
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %88

29:                                               ; preds = %20
  %30 = load i32*, i32** %8, align 8, !tbaa !8
  %31 = ptrtoint i32* %23 to i64
  %32 = ptrtoint i32* %30 to i64
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 2
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %29
  %37 = load i32, i32* %30, align 4, !tbaa !9
  %38 = icmp slt i32 %26, %37
  br i1 %38, label %39, label %88

39:                                               ; preds = %36, %29
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  store i32 %26, i32* %10, align 8, !tbaa !9
  %40 = trunc i64 %24 to i32
  store i32 %40, i32* %11, align 4, !tbaa !9
  %41 = load i32*, i32** %12, align 8, !tbaa !11
  %42 = ptrtoint i32* %41 to i64
  %43 = sub i64 %42, %32
  %44 = ashr exact i64 %43, 2
  %45 = icmp ult i64 %44, 2
  br i1 %45, label %46, label %57

46:                                               ; preds = %39
  %47 = invoke noalias nonnull i8* @_Znwm(i64 8) #8
          to label %48 unwind label %82

48:                                               ; preds = %46
  %49 = bitcast i8* %47 to i64*
  %50 = load i64, i64* %3, align 8
  store i64 %50, i64* %49, align 4
  %51 = icmp eq i32* %30, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  %53 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* nonnull %53) #7
  br label %54

54:                                               ; preds = %52, %48
  store i8* %47, i8** %13, align 8, !tbaa !8
  %55 = getelementptr inbounds i8, i8* %47, i64 8
  store i8* %55, i8** %14, align 8, !tbaa !3
  store i8* %55, i8** %15, align 8, !tbaa !11
  %56 = bitcast i8* %55 to i32*
  br label %78

57:                                               ; preds = %39
  %58 = icmp ult i64 %34, 2
  br i1 %58, label %65, label %59

59:                                               ; preds = %57
  %60 = bitcast i32* %30 to i64*
  %61 = load i64, i64* %3, align 8
  store i64 %61, i64* %60, align 4
  %62 = getelementptr inbounds i32, i32* %30, i64 2
  %63 = icmp eq i32* %23, %62
  br i1 %63, label %78, label %64

64:                                               ; preds = %59
  store i32* %62, i32** %7, align 8, !tbaa !3
  br label %78

65:                                               ; preds = %57
  %66 = getelementptr inbounds i32, i32* %10, i64 %34
  %67 = icmp eq i64 %33, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  %69 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* nonnull align 8 %9, i64 %33, i1 false) #7
  %70 = mul nsw i64 %34, -4
  %71 = add nsw i64 %70, 8
  br label %72

72:                                               ; preds = %65, %68
  %73 = phi i64 [ %71, %68 ], [ 8, %65 ]
  %74 = bitcast i32* %23 to i8*
  %75 = bitcast i32* %66 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %74, i8* nonnull align 4 %75, i64 %73, i1 false) #7
  %76 = lshr exact i64 %73, 2
  %77 = getelementptr inbounds i32, i32* %23, i64 %76
  store i32* %77, i32** %7, align 8, !tbaa !3
  br label %78

78:                                               ; preds = %54, %59, %64, %72
  %79 = phi i32* [ %56, %54 ], [ %23, %59 ], [ %62, %64 ], [ %77, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  %80 = load i32*, i32** %5, align 8, !tbaa !3
  %81 = load i32*, i32** %6, align 8, !tbaa !8
  br label %88

82:                                               ; preds = %46
  %83 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  %84 = icmp eq i32* %30, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %82
  %86 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* nonnull %86) #7
  br label %87

87:                                               ; preds = %82, %85
  resume { i8*, i32 } %83

88:                                               ; preds = %20, %36, %78
  %89 = phi i32* [ %21, %20 ], [ %21, %36 ], [ %81, %78 ]
  %90 = phi i32* [ %22, %20 ], [ %22, %36 ], [ %80, %78 ]
  %91 = phi i32* [ %23, %20 ], [ %23, %36 ], [ %79, %78 ]
  %92 = add nuw i64 %24, 1
  %93 = ptrtoint i32* %90 to i64
  %94 = ptrtoint i32* %89 to i64
  %95 = sub i64 %93, %94
  %96 = ashr exact i64 %95, 2
  %97 = icmp ugt i64 %96, %92
  br i1 %97, label %20, label %98, !llvm.loop !12

98:                                               ; preds = %88, %2
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { argmemonly nofree nounwind willreturn }
attributes #7 = { nounwind }
attributes #8 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = !{!4, !5, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
