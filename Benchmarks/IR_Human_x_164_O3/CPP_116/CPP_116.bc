; ModuleID = '../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z10sort_arraySt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %3, align 8, !tbaa !3
  %6 = load i32*, i32** %4, align 8, !tbaa !8
  %7 = icmp eq i32* %5, %6
  br i1 %7, label %131, label %48

8:                                                ; preds = %108
  %9 = icmp ult i64 %119, 2
  br i1 %9, label %131, label %10

10:                                               ; preds = %8, %45
  %11 = phi i64 [ %46, %45 ], [ 0, %8 ]
  %12 = load i32, i32* %111, align 4, !tbaa !9
  br label %13

13:                                               ; preds = %10, %41
  %14 = phi i32 [ %12, %10 ], [ %42, %41 ]
  %15 = phi i64 [ 1, %10 ], [ %43, %41 ]
  %16 = getelementptr inbounds i32, i32* %111, i64 %15
  %17 = load i32, i32* %16, align 4, !tbaa !9
  %18 = add nsw i64 %15, -1
  %19 = getelementptr inbounds i32, i32* %111, i64 %18
  %20 = icmp slt i32 %17, %14
  br i1 %20, label %21, label %26

21:                                               ; preds = %13
  %22 = getelementptr inbounds i32, i32* %109, i64 %15
  %23 = load i32, i32* %22, align 4, !tbaa !9
  %24 = getelementptr inbounds i32, i32* %109, i64 %18
  %25 = load i32, i32* %24, align 4, !tbaa !9
  br label %34

26:                                               ; preds = %13
  %27 = icmp eq i32 %17, %14
  br i1 %27, label %28, label %41

28:                                               ; preds = %26
  %29 = getelementptr inbounds i32, i32* %109, i64 %15
  %30 = load i32, i32* %29, align 4, !tbaa !9
  %31 = getelementptr inbounds i32, i32* %109, i64 %18
  %32 = load i32, i32* %31, align 4, !tbaa !9
  %33 = icmp slt i32 %30, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %21, %28
  %35 = phi i32 [ %25, %21 ], [ %32, %28 ]
  %36 = phi i32 [ %23, %21 ], [ %30, %28 ]
  %37 = getelementptr inbounds i32, i32* %109, i64 %15
  %38 = getelementptr inbounds i32, i32* %109, i64 %18
  store i32 %35, i32* %37, align 4, !tbaa !9
  store i32 %36, i32* %38, align 4, !tbaa !9
  %39 = load i32, i32* %16, align 4, !tbaa !9
  %40 = load i32, i32* %19, align 4, !tbaa !9
  store i32 %40, i32* %16, align 4, !tbaa !9
  store i32 %39, i32* %19, align 4, !tbaa !9
  br label %41

41:                                               ; preds = %34, %28, %26
  %42 = phi i32 [ %40, %34 ], [ %14, %28 ], [ %17, %26 ]
  %43 = add nuw nsw i64 %15, 1
  %44 = icmp eq i64 %43, %119
  br i1 %44, label %45, label %13, !llvm.loop !11

45:                                               ; preds = %41
  %46 = add nuw nsw i64 %11, 1
  %47 = icmp eq i64 %46, %119
  br i1 %47, label %131, label %10, !llvm.loop !13

48:                                               ; preds = %2, %108
  %49 = phi i32* [ %109, %108 ], [ %6, %2 ]
  %50 = phi i32* [ %110, %108 ], [ %5, %2 ]
  %51 = phi i64 [ %115, %108 ], [ 0, %2 ]
  %52 = phi i32* [ %113, %108 ], [ null, %2 ]
  %53 = phi i32* [ %114, %108 ], [ null, %2 ]
  %54 = phi i32* [ %111, %108 ], [ null, %2 ]
  %55 = getelementptr inbounds i32, i32* %49, i64 %51
  %56 = load i32, i32* %55, align 4, !tbaa !9
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %67, label %58

58:                                               ; preds = %48
  %59 = tail call i32 @llvm.abs.i32(i32 %56, i1 true)
  br label %60

60:                                               ; preds = %58, %60
  %61 = phi i32 [ %65, %60 ], [ %59, %58 ]
  %62 = phi i32 [ %64, %60 ], [ 0, %58 ]
  %63 = and i32 %61, 1
  %64 = add nuw nsw i32 %63, %62
  %65 = lshr i32 %61, 1
  %66 = icmp ult i32 %61, 2
  br i1 %66, label %67, label %60, !llvm.loop !14

67:                                               ; preds = %60, %48
  %68 = phi i32 [ 0, %48 ], [ %64, %60 ]
  %69 = icmp eq i32* %53, %52
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  store i32 %68, i32* %53, align 4, !tbaa !9
  br label %108

71:                                               ; preds = %67
  %72 = ptrtoint i32* %52 to i64
  %73 = ptrtoint i32* %54 to i64
  %74 = sub i64 %72, %73
  %75 = ashr exact i64 %74, 2
  %76 = icmp eq i64 %74, 9223372036854775804
  br i1 %76, label %77, label %79

77:                                               ; preds = %71
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %78 unwind label %123

78:                                               ; preds = %77
  unreachable

79:                                               ; preds = %71
  %80 = icmp eq i64 %74, 0
  %81 = select i1 %80, i64 1, i64 %75
  %82 = add nsw i64 %81, %75
  %83 = icmp ult i64 %82, %75
  %84 = icmp ugt i64 %82, 2305843009213693951
  %85 = or i1 %83, %84
  %86 = select i1 %85, i64 2305843009213693951, i64 %82
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %79
  %89 = shl nuw nsw i64 %86, 2
  %90 = invoke noalias nonnull i8* @_Znwm(i64 %89) #8
          to label %91 unwind label %121

91:                                               ; preds = %88
  %92 = bitcast i8* %90 to i32*
  br label %93

93:                                               ; preds = %91, %79
  %94 = phi i32* [ %92, %91 ], [ null, %79 ]
  %95 = getelementptr inbounds i32, i32* %94, i64 %75
  store i32 %68, i32* %95, align 4, !tbaa !9
  %96 = icmp sgt i64 %74, 0
  br i1 %96, label %97, label %100

97:                                               ; preds = %93
  %98 = bitcast i32* %94 to i8*
  %99 = bitcast i32* %54 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %98, i8* align 4 %99, i64 %74, i1 false) #9
  br label %100

100:                                              ; preds = %93, %97
  %101 = icmp eq i32* %54, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %100
  %103 = bitcast i32* %54 to i8*
  tail call void @_ZdlPv(i8* nonnull %103) #9
  br label %104

104:                                              ; preds = %102, %100
  %105 = getelementptr inbounds i32, i32* %94, i64 %86
  %106 = load i32*, i32** %3, align 8, !tbaa !3
  %107 = load i32*, i32** %4, align 8, !tbaa !8
  br label %108

108:                                              ; preds = %104, %70
  %109 = phi i32* [ %107, %104 ], [ %49, %70 ]
  %110 = phi i32* [ %106, %104 ], [ %50, %70 ]
  %111 = phi i32* [ %94, %104 ], [ %54, %70 ]
  %112 = phi i32* [ %95, %104 ], [ %53, %70 ]
  %113 = phi i32* [ %105, %104 ], [ %52, %70 ]
  %114 = getelementptr inbounds i32, i32* %112, i64 1
  %115 = add nuw i64 %51, 1
  %116 = ptrtoint i32* %110 to i64
  %117 = ptrtoint i32* %109 to i64
  %118 = sub i64 %116, %117
  %119 = ashr exact i64 %118, 2
  %120 = icmp ugt i64 %119, %115
  br i1 %120, label %48, label %8, !llvm.loop !15

121:                                              ; preds = %88
  %122 = landingpad { i8*, i32 }
          cleanup
  br label %125

123:                                              ; preds = %77
  %124 = landingpad { i8*, i32 }
          cleanup
  br label %125

125:                                              ; preds = %123, %121
  %126 = phi { i8*, i32 } [ %122, %121 ], [ %124, %123 ]
  %127 = icmp eq i32* %54, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %125
  %129 = bitcast i32* %54 to i8*
  tail call void @_ZdlPv(i8* nonnull %129) #9
  br label %130

130:                                              ; preds = %125, %128
  resume { i8*, i32 } %126

131:                                              ; preds = %45, %8, %2
  %132 = phi i32* [ %6, %2 ], [ %109, %8 ], [ %109, %45 ]
  %133 = phi i32* [ %5, %2 ], [ %110, %8 ], [ %110, %45 ]
  %134 = phi i32* [ null, %2 ], [ %111, %8 ], [ %111, %45 ]
  %135 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32* %132, i32** %135, align 8, !tbaa !8
  %136 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32* %133, i32** %136, align 8, !tbaa !3
  %137 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %138 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %139 = load i32*, i32** %138, align 8, !tbaa !16
  store i32* %139, i32** %137, align 8, !tbaa !16
  %140 = bitcast %"class.std::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %140, i8 0, i64 24, i1 false) #9
  %141 = icmp eq i32* %134, null
  br i1 %141, label %144, label %142

142:                                              ; preds = %131
  %143 = bitcast i32* %134 to i8*
  tail call void @_ZdlPv(i8* nonnull %143) #9
  br label %144

144:                                              ; preds = %131, %142
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { noreturn }
attributes #8 = { allocsize(0) }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !12}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !12}
!16 = !{!4, !5, i64 16}
