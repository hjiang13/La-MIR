digraph "CFG for '_Z10sort_arraySt6vectorIiSaIiEE' function" {
	label="CFG for '_Z10sort_arraySt6vectorIiSaIiEE' function";

	Node0x56364f3554a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %5 = load i32*, i32** %3, align 8, !tbaa !3\l  %6 = load i32*, i32** %4, align 8, !tbaa !8\l  %7 = icmp eq i32* %5, %6\l  br i1 %7, label %131, label %48\l|{<s0>T|<s1>F}}"];
	Node0x56364f3554a0:s0 -> Node0x56364f356ba0;
	Node0x56364f3554a0:s1 -> Node0x56364f356c30;
	Node0x56364f356d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%8:\l8:                                                \l  %9 = icmp ult i64 %119, 2\l  br i1 %9, label %131, label %10\l|{<s0>T|<s1>F}}"];
	Node0x56364f356d70:s0 -> Node0x56364f356ba0;
	Node0x56364f356d70:s1 -> Node0x56364f355e10;
	Node0x56364f355e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%10:\l10:                                               \l  %11 = phi i64 [ %46, %45 ], [ 0, %8 ]\l  %12 = load i32, i32* %111, align 4, !tbaa !9\l  br label %13\l}"];
	Node0x56364f355e10 -> Node0x56364f3573b0;
	Node0x56364f3573b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%13:\l13:                                               \l  %14 = phi i32 [ %12, %10 ], [ %42, %41 ]\l  %15 = phi i64 [ 1, %10 ], [ %43, %41 ]\l  %16 = getelementptr inbounds i32, i32* %111, i64 %15\l  %17 = load i32, i32* %16, align 4, !tbaa !9\l  %18 = add nsw i64 %15, -1\l  %19 = getelementptr inbounds i32, i32* %111, i64 %18\l  %20 = icmp slt i32 %17, %14\l  br i1 %20, label %21, label %26\l|{<s0>T|<s1>F}}"];
	Node0x56364f3573b0:s0 -> Node0x56364f357ff0;
	Node0x56364f3573b0:s1 -> Node0x56364f358080;
	Node0x56364f357ff0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70",label="{%21:\l21:                                               \l  %22 = getelementptr inbounds i32, i32* %109, i64 %15\l  %23 = load i32, i32* %22, align 4, !tbaa !9\l  %24 = getelementptr inbounds i32, i32* %109, i64 %18\l  %25 = load i32, i32* %24, align 4, !tbaa !9\l  br label %34\l}"];
	Node0x56364f357ff0 -> Node0x56364f358410;
	Node0x56364f358080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70",label="{%26:\l26:                                               \l  %27 = icmp eq i32 %17, %14\l  br i1 %27, label %28, label %41\l|{<s0>T|<s1>F}}"];
	Node0x56364f358080:s0 -> Node0x56364f3585a0;
	Node0x56364f358080:s1 -> Node0x56364f3574e0;
	Node0x56364f3585a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%28:\l28:                                               \l  %29 = getelementptr inbounds i32, i32* %109, i64 %15\l  %30 = load i32, i32* %29, align 4, !tbaa !9\l  %31 = getelementptr inbounds i32, i32* %109, i64 %18\l  %32 = load i32, i32* %31, align 4, !tbaa !9\l  %33 = icmp slt i32 %30, %32\l  br i1 %33, label %34, label %41\l|{<s0>T|<s1>F}}"];
	Node0x56364f3585a0:s0 -> Node0x56364f358410;
	Node0x56364f3585a0:s1 -> Node0x56364f3574e0;
	Node0x56364f358410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70",label="{%34:\l34:                                               \l  %35 = phi i32 [ %25, %21 ], [ %32, %28 ]\l  %36 = phi i32 [ %23, %21 ], [ %30, %28 ]\l  %37 = getelementptr inbounds i32, i32* %109, i64 %15\l  %38 = getelementptr inbounds i32, i32* %109, i64 %18\l  store i32 %35, i32* %37, align 4, !tbaa !9\l  store i32 %36, i32* %38, align 4, !tbaa !9\l  %39 = load i32, i32* %16, align 4, !tbaa !9\l  %40 = load i32, i32* %19, align 4, !tbaa !9\l  store i32 %40, i32* %16, align 4, !tbaa !9\l  store i32 %39, i32* %19, align 4, !tbaa !9\l  br label %41\l}"];
	Node0x56364f358410 -> Node0x56364f3574e0;
	Node0x56364f3574e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%41:\l41:                                               \l  %42 = phi i32 [ %40, %34 ], [ %14, %28 ], [ %17, %26 ]\l  %43 = add nuw nsw i64 %15, 1\l  %44 = icmp eq i64 %43, %119\l  br i1 %44, label %45, label %13, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x56364f3574e0:s0 -> Node0x56364f357070;
	Node0x56364f3574e0:s1 -> Node0x56364f3573b0;
	Node0x56364f357070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%45:\l45:                                               \l  %46 = add nuw nsw i64 %11, 1\l  %47 = icmp eq i64 %46, %119\l  br i1 %47, label %131, label %10, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x56364f357070:s0 -> Node0x56364f356ba0;
	Node0x56364f357070:s1 -> Node0x56364f355e10;
	Node0x56364f356c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%48:\l48:                                               \l  %49 = phi i32* [ %109, %108 ], [ %6, %2 ]\l  %50 = phi i32* [ %110, %108 ], [ %5, %2 ]\l  %51 = phi i64 [ %115, %108 ], [ 0, %2 ]\l  %52 = phi i32* [ %113, %108 ], [ null, %2 ]\l  %53 = phi i32* [ %114, %108 ], [ null, %2 ]\l  %54 = phi i32* [ %111, %108 ], [ null, %2 ]\l  %55 = getelementptr inbounds i32, i32* %49, i64 %51\l  %56 = load i32, i32* %55, align 4, !tbaa !9\l  %57 = icmp eq i32 %56, 0\l  br i1 %57, label %67, label %58\l|{<s0>T|<s1>F}}"];
	Node0x56364f356c30:s0 -> Node0x56364f359e90;
	Node0x56364f356c30:s1 -> Node0x56364f359f20;
	Node0x56364f359f20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%58:\l58:                                               \l  %59 = tail call i32 @llvm.abs.i32(i32 %56, i1 true)\l  br label %60\l}"];
	Node0x56364f359f20 -> Node0x56364f35a300;
	Node0x56364f35a300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%60:\l60:                                               \l  %61 = phi i32 [ %65, %60 ], [ %59, %58 ]\l  %62 = phi i32 [ %64, %60 ], [ 0, %58 ]\l  %63 = and i32 %61, 1\l  %64 = add nuw nsw i32 %63, %62\l  %65 = lshr i32 %61, 1\l  %66 = icmp ult i32 %61, 2\l  br i1 %66, label %67, label %60, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x56364f35a300:s0 -> Node0x56364f359e90;
	Node0x56364f35a300:s1 -> Node0x56364f35a300;
	Node0x56364f359e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%67:\l67:                                               \l  %68 = phi i32 [ 0, %48 ], [ %64, %60 ]\l  %69 = icmp eq i32* %53, %52\l  br i1 %69, label %71, label %70\l|{<s0>T|<s1>F}}"];
	Node0x56364f359e90:s0 -> Node0x56364f35ae80;
	Node0x56364f359e90:s1 -> Node0x56364f35aed0;
	Node0x56364f35aed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%70:\l70:                                               \l  store i32 %68, i32* %53, align 4, !tbaa !9\l  br label %108\l}"];
	Node0x56364f35aed0 -> Node0x56364f3597f0;
	Node0x56364f35ae80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%71:\l71:                                               \l  %72 = ptrtoint i32* %52 to i64\l  %73 = ptrtoint i32* %54 to i64\l  %74 = sub i64 %72, %73\l  %75 = ashr exact i64 %74, 2\l  %76 = icmp eq i64 %74, 9223372036854775804\l  br i1 %76, label %77, label %79\l|{<s0>T|<s1>F}}"];
	Node0x56364f35ae80:s0 -> Node0x56364f35b3a0;
	Node0x56364f35ae80:s1 -> Node0x56364f35b3f0;
	Node0x56364f35b3a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%77:\l77:                                               \l  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x\l... i8], [26 x i8]* @.str, i64 0, i64 0)) #7\l          to label %78 unwind label %123\l}"];
	Node0x56364f35b3a0 -> Node0x56364f35b5b0;
	Node0x56364f35b3a0 -> Node0x56364f35b600;
	Node0x56364f35b5b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%78:\l78:                                               \l  unreachable\l}"];
	Node0x56364f35b3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%79:\l79:                                               \l  %80 = icmp eq i64 %74, 0\l  %81 = select i1 %80, i64 1, i64 %75\l  %82 = add nsw i64 %81, %75\l  %83 = icmp ult i64 %82, %75\l  %84 = icmp ugt i64 %82, 2305843009213693951\l  %85 = or i1 %83, %84\l  %86 = select i1 %85, i64 2305843009213693951, i64 %82\l  %87 = icmp eq i64 %86, 0\l  br i1 %87, label %93, label %88\l|{<s0>T|<s1>F}}"];
	Node0x56364f35b3f0:s0 -> Node0x56364f35bd60;
	Node0x56364f35b3f0:s1 -> Node0x56364f35bdb0;
	Node0x56364f35bdb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%88:\l88:                                               \l  %89 = shl nuw nsw i64 %86, 2\l  %90 = invoke noalias nonnull i8* @_Znwm(i64 %89) #8\l          to label %91 unwind label %121\l}"];
	Node0x56364f35bdb0 -> Node0x56364f35bf40;
	Node0x56364f35bdb0 -> Node0x56364f35bf90;
	Node0x56364f35bf40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%91:\l91:                                               \l  %92 = bitcast i8* %90 to i32*\l  br label %93\l}"];
	Node0x56364f35bf40 -> Node0x56364f35bd60;
	Node0x56364f35bd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%93:\l93:                                               \l  %94 = phi i32* [ %92, %91 ], [ null, %79 ]\l  %95 = getelementptr inbounds i32, i32* %94, i64 %75\l  store i32 %68, i32* %95, align 4, !tbaa !9\l  %96 = icmp sgt i64 %74, 0\l  br i1 %96, label %97, label %100\l|{<s0>T|<s1>F}}"];
	Node0x56364f35bd60:s0 -> Node0x56364f35c550;
	Node0x56364f35bd60:s1 -> Node0x56364f35c5a0;
	Node0x56364f35c550 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%97:\l97:                                               \l  %98 = bitcast i32* %94 to i8*\l  %99 = bitcast i32* %54 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %98, i8* align 4 %99,\l... i64 %74, i1 false) #9\l  br label %100\l}"];
	Node0x56364f35c550 -> Node0x56364f35c5a0;
	Node0x56364f35c5a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%100:\l100:                                              \l  %101 = icmp eq i32* %54, null\l  br i1 %101, label %104, label %102\l|{<s0>T|<s1>F}}"];
	Node0x56364f35c5a0:s0 -> Node0x56364f35cbc0;
	Node0x56364f35c5a0:s1 -> Node0x56364f35cc10;
	Node0x56364f35cc10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%102:\l102:                                              \l  %103 = bitcast i32* %54 to i8*\l  tail call void @_ZdlPv(i8* nonnull %103) #9\l  br label %104\l}"];
	Node0x56364f35cc10 -> Node0x56364f35cbc0;
	Node0x56364f35cbc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%104:\l104:                                              \l  %105 = getelementptr inbounds i32, i32* %94, i64 %86\l  %106 = load i32*, i32** %3, align 8, !tbaa !3\l  %107 = load i32*, i32** %4, align 8, !tbaa !8\l  br label %108\l}"];
	Node0x56364f35cbc0 -> Node0x56364f3597f0;
	Node0x56364f3597f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%108:\l108:                                              \l  %109 = phi i32* [ %107, %104 ], [ %49, %70 ]\l  %110 = phi i32* [ %106, %104 ], [ %50, %70 ]\l  %111 = phi i32* [ %94, %104 ], [ %54, %70 ]\l  %112 = phi i32* [ %95, %104 ], [ %53, %70 ]\l  %113 = phi i32* [ %105, %104 ], [ %52, %70 ]\l  %114 = getelementptr inbounds i32, i32* %112, i64 1\l  %115 = add nuw i64 %51, 1\l  %116 = ptrtoint i32* %110 to i64\l  %117 = ptrtoint i32* %109 to i64\l  %118 = sub i64 %116, %117\l  %119 = ashr exact i64 %118, 2\l  %120 = icmp ugt i64 %119, %115\l  br i1 %120, label %48, label %8, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x56364f3597f0:s0 -> Node0x56364f356c30;
	Node0x56364f3597f0:s1 -> Node0x56364f356d70;
	Node0x56364f35bf90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%121:\l121:                                              \l  %122 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %125\l}"];
	Node0x56364f35bf90 -> Node0x56364f35e6f0;
	Node0x56364f35b600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%123:\l123:                                              \l  %124 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %125\l}"];
	Node0x56364f35b600 -> Node0x56364f35e6f0;
	Node0x56364f35e6f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%125:\l125:                                              \l  %126 = phi \{ i8*, i32 \} [ %122, %121 ], [ %124, %123 ]\l  %127 = icmp eq i32* %54, null\l  br i1 %127, label %130, label %128\l|{<s0>T|<s1>F}}"];
	Node0x56364f35e6f0:s0 -> Node0x56364f35e9d0;
	Node0x56364f35e6f0:s1 -> Node0x56364f35ea20;
	Node0x56364f35ea20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%128:\l128:                                              \l  %129 = bitcast i32* %54 to i8*\l  tail call void @_ZdlPv(i8* nonnull %129) #9\l  br label %130\l}"];
	Node0x56364f35ea20 -> Node0x56364f35e9d0;
	Node0x56364f35e9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%130:\l130:                                              \l  resume \{ i8*, i32 \} %126\l}"];
	Node0x56364f356ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%131:\l131:                                              \l  %132 = phi i32* [ %6, %2 ], [ %109, %8 ], [ %109, %45 ]\l  %133 = phi i32* [ %5, %2 ], [ %110, %8 ], [ %110, %45 ]\l  %134 = phi i32* [ null, %2 ], [ %111, %8 ], [ %111, %45 ]\l  %135 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 0\l  store i32* %132, i32** %135, align 8, !tbaa !8\l  %136 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 1\l  store i32* %133, i32** %136, align 8, !tbaa !3\l  %137 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 2\l  %138 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %1, i64 0, i32 0, i32 0, i32 0, i32 2\l  %139 = load i32*, i32** %138, align 8, !tbaa !16\l  store i32* %139, i32** %137, align 8, !tbaa !16\l  %140 = bitcast %\"class.std::vector\"* %1 to i8*\l  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %140, i8 0, i64 24, i1 false) #9\l  %141 = icmp eq i32* %134, null\l  br i1 %141, label %144, label %142\l|{<s0>T|<s1>F}}"];
	Node0x56364f356ba0:s0 -> Node0x56364f3608b0;
	Node0x56364f356ba0:s1 -> Node0x56364f360900;
	Node0x56364f360900 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%142:\l142:                                              \l  %143 = bitcast i32* %134 to i8*\l  tail call void @_ZdlPv(i8* nonnull %143) #9\l  br label %144\l}"];
	Node0x56364f360900 -> Node0x56364f3608b0;
	Node0x56364f3608b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%144:\l144:                                              \l  ret void\l}"];
}
