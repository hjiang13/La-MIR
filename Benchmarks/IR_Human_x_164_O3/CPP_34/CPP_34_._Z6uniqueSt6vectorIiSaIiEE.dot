digraph "CFG for '_Z6uniqueSt6vectorIiSaIiEE' function" {
	label="CFG for '_Z6uniqueSt6vectorIiSaIiEE' function";

	Node0x561145600630 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %8 = bitcast %\"class.std::vector\"* %0 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %8, i8 0, i64 24, i1 false)\l  %9 = load i32*, i32** %3, align 8, !tbaa !3\l  %10 = load i32*, i32** %4, align 8, !tbaa !8\l  %11 = icmp eq i32* %9, %10\l  br i1 %11, label %156, label %23\l|{<s0>T|<s1>F}}"];
	Node0x561145600630:s0 -> Node0x5611456024f0;
	Node0x561145600630:s1 -> Node0x561145602580;
	Node0x5611456026c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%12:\l12:                                               \l  %13 = icmp eq i32* %147, %146\l  br i1 %13, label %156, label %14\l|{<s0>T|<s1>F}}"];
	Node0x5611456026c0:s0 -> Node0x5611456024f0;
	Node0x5611456026c0:s1 -> Node0x561145602850;
	Node0x561145602850 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%14:\l14:                                               \l  %15 = ptrtoint i32* %146 to i64\l  %16 = ptrtoint i32* %147 to i64\l  %17 = sub i64 %15, %16\l  %18 = ashr exact i64 %17, 2\l  %19 = tail call i64 @llvm.ctlz.i64(i64 %18, i1 true) #8, !range !9\l  %20 = shl nuw nsw i64 %19, 1\l  %21 = xor i64 %20, 126\l  invoke void\l... @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElN\l...S0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %147, i32* %146, i64 %21)\l          to label %22 unwind label %154\l}"];
	Node0x561145602850 -> Node0x5611456030b0;
	Node0x561145602850 -> Node0x561145603140;
	Node0x5611456030b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%22:\l22:                                               \l  invoke void\l... @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIi\l...EEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %147, i32* %146)\l          to label %156 unwind label %154\l}"];
	Node0x5611456030b0 -> Node0x5611456024f0;
	Node0x5611456030b0 -> Node0x561145603140;
	Node0x561145602580 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%23:\l23:                                               \l  %24 = phi i32* [ %143, %142 ], [ %10, %2 ]\l  %25 = phi i32* [ %144, %142 ], [ %9, %2 ]\l  %26 = phi i32* [ %145, %142 ], [ null, %2 ]\l  %27 = phi i32* [ %146, %142 ], [ null, %2 ]\l  %28 = phi i32* [ %147, %142 ], [ null, %2 ]\l  %29 = phi i64 [ %148, %142 ], [ 0, %2 ]\l  %30 = getelementptr inbounds i32, i32* %24, i64 %29\l  %31 = ptrtoint i32* %27 to i64\l  %32 = ptrtoint i32* %28 to i64\l  %33 = sub i64 %31, %32\l  %34 = icmp sgt i64 %33, 15\l  br i1 %34, label %35, label %62\l|{<s0>T|<s1>F}}"];
	Node0x561145602580:s0 -> Node0x5611456042c0;
	Node0x561145602580:s1 -> Node0x561145604350;
	Node0x5611456042c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%35:\l35:                                               \l  %36 = lshr i64 %33, 4\l  %37 = load i32, i32* %30, align 4, !tbaa !10\l  br label %38\l}"];
	Node0x5611456042c0 -> Node0x561145604600;
	Node0x561145604600 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%38:\l38:                                               \l  %39 = phi i64 [ %36, %35 ], [ %57, %55 ]\l  %40 = phi i32* [ %28, %35 ], [ %56, %55 ]\l  %41 = load i32, i32* %40, align 4, !tbaa !10\l  %42 = icmp eq i32 %41, %37\l  br i1 %42, label %94, label %43\l|{<s0>T|<s1>F}}"];
	Node0x561145604600:s0 -> Node0x5611456050a0;
	Node0x561145604600:s1 -> Node0x561145605130;
	Node0x561145605130 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%43:\l43:                                               \l  %44 = getelementptr inbounds i32, i32* %40, i64 1\l  %45 = load i32, i32* %44, align 4, !tbaa !10\l  %46 = icmp eq i32 %45, %37\l  br i1 %46, label %92, label %47\l|{<s0>T|<s1>F}}"];
	Node0x561145605130:s0 -> Node0x561145605410;
	Node0x561145605130:s1 -> Node0x561145605460;
	Node0x561145605460 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = getelementptr inbounds i32, i32* %40, i64 2\l  %49 = load i32, i32* %48, align 4, !tbaa !10\l  %50 = icmp eq i32 %49, %37\l  br i1 %50, label %90, label %51\l|{<s0>T|<s1>F}}"];
	Node0x561145605460:s0 -> Node0x561145605740;
	Node0x561145605460:s1 -> Node0x561145605790;
	Node0x561145605790 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%51:\l51:                                               \l  %52 = getelementptr inbounds i32, i32* %40, i64 3\l  %53 = load i32, i32* %52, align 4, !tbaa !10\l  %54 = icmp eq i32 %53, %37\l  br i1 %54, label %88, label %55\l|{<s0>T|<s1>F}}"];
	Node0x561145605790:s0 -> Node0x561145605aa0;
	Node0x561145605790:s1 -> Node0x561145604730;
	Node0x561145604730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = getelementptr inbounds i32, i32* %40, i64 4\l  %57 = add nsw i64 %39, -1\l  %58 = icmp sgt i64 %39, 1\l  br i1 %58, label %38, label %59, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x561145604730:s0 -> Node0x561145604600;
	Node0x561145604730:s1 -> Node0x561145605d60;
	Node0x561145605d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%59:\l59:                                               \l  %60 = ptrtoint i32* %56 to i64\l  %61 = sub i64 %31, %60\l  br label %62\l}"];
	Node0x561145605d60 -> Node0x561145604350;
	Node0x561145604350 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = phi i64 [ %61, %59 ], [ %33, %23 ]\l  %64 = phi i32* [ %56, %59 ], [ %28, %23 ]\l  %65 = ashr exact i64 %63, 2\l  switch i64 %65, label %97 [\l    i64 3, label %70\l    i64 2, label %68\l    i64 1, label %66\l  ]\l|{<s0>def|<s1>3|<s2>2|<s3>1}}"];
	Node0x561145604350:s0 -> Node0x561145606670;
	Node0x561145604350:s1 -> Node0x5611456066c0;
	Node0x561145604350:s2 -> Node0x561145606710;
	Node0x561145604350:s3 -> Node0x5611456067a0;
	Node0x5611456067a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%66:\l66:                                               \l  %67 = load i32, i32* %30, align 4, !tbaa !10\l  br label %83\l}"];
	Node0x5611456067a0 -> Node0x5611456068f0;
	Node0x561145606710 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%68:\l68:                                               \l  %69 = load i32, i32* %30, align 4, !tbaa !10\l  br label %76\l}"];
	Node0x561145606710 -> Node0x561145606a20;
	Node0x5611456066c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%70:\l70:                                               \l  %71 = load i32, i32* %64, align 4, !tbaa !10\l  %72 = load i32, i32* %30, align 4, !tbaa !10\l  %73 = icmp eq i32 %71, %72\l  br i1 %73, label %94, label %74\l|{<s0>T|<s1>F}}"];
	Node0x5611456066c0:s0 -> Node0x5611456050a0;
	Node0x5611456066c0:s1 -> Node0x561145606c50;
	Node0x561145606c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%74:\l74:                                               \l  %75 = getelementptr inbounds i32, i32* %64, i64 1\l  br label %76\l}"];
	Node0x561145606c50 -> Node0x561145606a20;
	Node0x561145606a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%76:\l76:                                               \l  %77 = phi i32 [ %69, %68 ], [ %72, %74 ]\l  %78 = phi i32* [ %64, %68 ], [ %75, %74 ]\l  %79 = load i32, i32* %78, align 4, !tbaa !10\l  %80 = icmp eq i32 %79, %77\l  br i1 %80, label %94, label %81\l|{<s0>T|<s1>F}}"];
	Node0x561145606a20:s0 -> Node0x5611456050a0;
	Node0x561145606a20:s1 -> Node0x5611456070c0;
	Node0x5611456070c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%81:\l81:                                               \l  %82 = getelementptr inbounds i32, i32* %78, i64 1\l  br label %83\l}"];
	Node0x5611456070c0 -> Node0x5611456068f0;
	Node0x5611456068f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%83:\l83:                                               \l  %84 = phi i32 [ %67, %66 ], [ %77, %81 ]\l  %85 = phi i32* [ %64, %66 ], [ %82, %81 ]\l  %86 = load i32, i32* %85, align 4, !tbaa !10\l  %87 = icmp eq i32 %86, %84\l  br i1 %87, label %94, label %97\l|{<s0>T|<s1>F}}"];
	Node0x5611456068f0:s0 -> Node0x5611456050a0;
	Node0x5611456068f0:s1 -> Node0x561145606670;
	Node0x561145605aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%88:\l88:                                               \l  %89 = getelementptr inbounds i32, i32* %40, i64 3\l  br label %94\l}"];
	Node0x561145605aa0 -> Node0x5611456050a0;
	Node0x561145605740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%90:\l90:                                               \l  %91 = getelementptr inbounds i32, i32* %40, i64 2\l  br label %94\l}"];
	Node0x561145605740 -> Node0x5611456050a0;
	Node0x561145605410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%92:\l92:                                               \l  %93 = getelementptr inbounds i32, i32* %40, i64 1\l  br label %94\l}"];
	Node0x561145605410 -> Node0x5611456050a0;
	Node0x5611456050a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%94:\l94:                                               \l  %95 = phi i32* [ %64, %70 ], [ %78, %76 ], [ %85, %83 ], [ %89, %88 ], [\l... %91, %90 ], [ %93, %92 ], [ %40, %38 ]\l  %96 = icmp eq i32* %95, %27\l  br i1 %96, label %97, label %142\l|{<s0>T|<s1>F}}"];
	Node0x5611456050a0:s0 -> Node0x561145606670;
	Node0x5611456050a0:s1 -> Node0x561145603820;
	Node0x561145606670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%97:\l97:                                               \l  %98 = icmp eq i32* %27, %26\l  br i1 %98, label %102, label %99\l|{<s0>T|<s1>F}}"];
	Node0x561145606670:s0 -> Node0x561145607c50;
	Node0x561145606670:s1 -> Node0x561145607ca0;
	Node0x561145607ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%99:\l99:                                               \l  %100 = load i32, i32* %30, align 4, !tbaa !10\l  store i32 %100, i32* %27, align 4, !tbaa !10\l  %101 = getelementptr inbounds i32, i32* %27, i64 1\l  store i32* %101, i32** %6, align 8, !tbaa !3\l  br label %142\l}"];
	Node0x561145607ca0 -> Node0x561145603820;
	Node0x561145607c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%102:\l102:                                              \l  %103 = ashr exact i64 %33, 2\l  %104 = icmp eq i64 %33, 9223372036854775804\l  br i1 %104, label %105, label %107\l|{<s0>T|<s1>F}}"];
	Node0x561145607c50:s0 -> Node0x561145608770;
	Node0x561145607c50:s1 -> Node0x5611456087c0;
	Node0x561145608770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%105:\l105:                                              \l  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x\l... i8], [26 x i8]* @.str, i64 0, i64 0)) #9\l          to label %106 unwind label %140\l}"];
	Node0x561145608770 -> Node0x561145608980;
	Node0x561145608770 -> Node0x5611456089d0;
	Node0x561145608980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%106:\l106:                                              \l  unreachable\l}"];
	Node0x5611456087c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%107:\l107:                                              \l  %108 = icmp eq i64 %33, 0\l  %109 = select i1 %108, i64 1, i64 %103\l  %110 = add nsw i64 %109, %103\l  %111 = icmp ult i64 %110, %103\l  %112 = icmp ugt i64 %110, 2305843009213693951\l  %113 = or i1 %111, %112\l  %114 = select i1 %113, i64 2305843009213693951, i64 %110\l  %115 = icmp eq i64 %114, 0\l  br i1 %115, label %121, label %116\l|{<s0>T|<s1>F}}"];
	Node0x5611456087c0:s0 -> Node0x5611456090d0;
	Node0x5611456087c0:s1 -> Node0x561145609120;
	Node0x561145609120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%116:\l116:                                              \l  %117 = shl nuw nsw i64 %114, 2\l  %118 = invoke noalias nonnull i8* @_Znwm(i64 %117) #10\l          to label %119 unwind label %138\l}"];
	Node0x561145609120 -> Node0x5611456092b0;
	Node0x561145609120 -> Node0x561145609300;
	Node0x5611456092b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%119:\l119:                                              \l  %120 = bitcast i8* %118 to i32*\l  br label %121\l}"];
	Node0x5611456092b0 -> Node0x5611456090d0;
	Node0x5611456090d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%121:\l121:                                              \l  %122 = phi i32* [ %120, %119 ], [ null, %107 ]\l  %123 = getelementptr inbounds i32, i32* %122, i64 %103\l  %124 = load i32, i32* %30, align 4, !tbaa !10\l  store i32 %124, i32* %123, align 4, !tbaa !10\l  %125 = icmp sgt i64 %33, 0\l  br i1 %125, label %126, label %129\l|{<s0>T|<s1>F}}"];
	Node0x5611456090d0:s0 -> Node0x5611456098f0;
	Node0x5611456090d0:s1 -> Node0x561145609940;
	Node0x5611456098f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%126:\l126:                                              \l  %127 = bitcast i32* %122 to i8*\l  %128 = bitcast i32* %28 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4\l... %128, i64 %33, i1 false) #8\l  br label %129\l}"];
	Node0x5611456098f0 -> Node0x561145609940;
	Node0x561145609940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%129:\l129:                                              \l  %130 = getelementptr inbounds i32, i32* %123, i64 1\l  %131 = icmp eq i32* %28, null\l  br i1 %131, label %134, label %132\l|{<s0>T|<s1>F}}"];
	Node0x561145609940:s0 -> Node0x56114560a7e0;
	Node0x561145609940:s1 -> Node0x56114560a830;
	Node0x56114560a830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%132:\l132:                                              \l  %133 = bitcast i32* %28 to i8*\l  tail call void @_ZdlPv(i8* nonnull %133) #8\l  br label %134\l}"];
	Node0x56114560a830 -> Node0x56114560a7e0;
	Node0x56114560a7e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%134:\l134:                                              \l  store i32* %122, i32** %5, align 8, !tbaa !8\l  store i32* %130, i32** %6, align 8, !tbaa !3\l  %135 = getelementptr inbounds i32, i32* %122, i64 %114\l  store i32* %135, i32** %7, align 8, !tbaa !14\l  %136 = load i32*, i32** %3, align 8, !tbaa !3\l  %137 = load i32*, i32** %4, align 8, !tbaa !8\l  br label %142\l}"];
	Node0x56114560a7e0 -> Node0x561145603820;
	Node0x561145609300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%138:\l138:                                              \l  %139 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %157\l}"];
	Node0x561145609300 -> Node0x56114560b690;
	Node0x5611456089d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%140:\l140:                                              \l  %141 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %157\l}"];
	Node0x5611456089d0 -> Node0x56114560b690;
	Node0x561145603820 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%142:\l142:                                              \l  %143 = phi i32* [ %137, %134 ], [ %24, %99 ], [ %24, %94 ]\l  %144 = phi i32* [ %136, %134 ], [ %25, %99 ], [ %25, %94 ]\l  %145 = phi i32* [ %135, %134 ], [ %26, %99 ], [ %26, %94 ]\l  %146 = phi i32* [ %130, %134 ], [ %101, %99 ], [ %27, %94 ]\l  %147 = phi i32* [ %122, %134 ], [ %28, %99 ], [ %28, %94 ]\l  %148 = add nuw i64 %29, 1\l  %149 = ptrtoint i32* %144 to i64\l  %150 = ptrtoint i32* %143 to i64\l  %151 = sub i64 %149, %150\l  %152 = ashr exact i64 %151, 2\l  %153 = icmp ugt i64 %152, %148\l  br i1 %153, label %23, label %12, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x561145603820:s0 -> Node0x561145602580;
	Node0x561145603820:s1 -> Node0x5611456026c0;
	Node0x561145603140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8d6cc70",label="{%154:\l154:                                              \l  %155 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %157\l}"];
	Node0x561145603140 -> Node0x56114560b690;
	Node0x5611456024f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%156:\l156:                                              \l  ret void\l}"];
	Node0x56114560b690 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%157:\l157:                                              \l  %158 = phi i32* [ %147, %154 ], [ %28, %138 ], [ %28, %140 ]\l  %159 = phi \{ i8*, i32 \} [ %155, %154 ], [ %139, %138 ], [ %141, %140 ]\l  %160 = icmp eq i32* %158, null\l  br i1 %160, label %163, label %161\l|{<s0>T|<s1>F}}"];
	Node0x56114560b690:s0 -> Node0x56114560c410;
	Node0x56114560b690:s1 -> Node0x56114560c460;
	Node0x56114560c460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%161:\l161:                                              \l  %162 = bitcast i32* %158 to i8*\l  tail call void @_ZdlPv(i8* nonnull %162) #8\l  br label %163\l}"];
	Node0x56114560c460 -> Node0x56114560c410;
	Node0x56114560c410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%163:\l163:                                              \l  resume \{ i8*, i32 \} %159\l}"];
}
