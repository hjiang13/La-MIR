digraph "CFG for '_ZNSt6vectorIiSaIiEEaSERKS1_' function" {
	label="CFG for '_ZNSt6vectorIiSaIiEEaSERKS1_' function";

	Node0x55c0ee1b0690 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%2:\l  %3 = icmp eq %\"class.std::vector\"* %1, %0\l  br i1 %3, label %81, label %4\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1b0690:s0 -> Node0x55c0ee1b06e0;
	Node0x55c0ee1b0690:s1 -> Node0x55c0ee1b0730;
	Node0x55c0ee1b0730 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%4:\l4:                                                \l  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %6 = load i32*, i32** %5, align 8, !tbaa !3\l  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %8 = load i32*, i32** %7, align 8, !tbaa !8\l  %9 = ptrtoint i32* %6 to i64\l  %10 = ptrtoint i32* %8 to i64\l  %11 = sub i64 %9, %10\l  %12 = ashr exact i64 %11, 2\l  %13 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %14 = load i32*, i32** %13, align 8, !tbaa !9\l  %15 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %16 = load i32*, i32** %15, align 8, !tbaa !8\l  %17 = ptrtoint i32* %14 to i64\l  %18 = ptrtoint i32* %16 to i64\l  %19 = sub i64 %17, %18\l  %20 = ashr exact i64 %19, 2\l  %21 = icmp ugt i64 %12, %20\l  br i1 %21, label %22, label %39\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1b0730:s0 -> Node0x55c0ee1b0830;
	Node0x55c0ee1b0730:s1 -> Node0x55c0ee1cfee0;
	Node0x55c0ee1b0830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%22:\l22:                                               \l  %23 = icmp ugt i64 %12, 2305843009213693951\l  br i1 %23, label %24, label %25\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1b0830:s0 -> Node0x55c0ee1d0070;
	Node0x55c0ee1b0830:s1 -> Node0x55c0ee1d00c0;
	Node0x55c0ee1d0070 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6282ea70",label="{%24:\l24:                                               \l  tail call void @_ZSt17__throw_bad_allocv() #10\l  unreachable\l}"];
	Node0x55c0ee1d00c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%25:\l25:                                               \l  %26 = tail call noalias nonnull i8* @_Znwm(i64 %11) #11\l  %27 = bitcast i8* %26 to i32*\l  %28 = icmp eq i64 %11, 0\l  br i1 %28, label %31, label %29\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1d00c0:s0 -> Node0x55c0ee1d04d0;
	Node0x55c0ee1d00c0:s1 -> Node0x55c0ee1d0520;
	Node0x55c0ee1d0520 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%29:\l29:                                               \l  %30 = bitcast i32* %8 to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align\l... 4 %30, i64 %11, i1 false) #12\l  br label %31\l}"];
	Node0x55c0ee1d0520 -> Node0x55c0ee1d04d0;
	Node0x55c0ee1d04d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%31:\l31:                                               \l  %32 = load i32*, i32** %15, align 8, !tbaa !8\l  %33 = icmp eq i32* %32, null\l  br i1 %33, label %36, label %34\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1d04d0:s0 -> Node0x55c0ee1d0ab0;
	Node0x55c0ee1d04d0:s1 -> Node0x55c0ee1d0b00;
	Node0x55c0ee1d0b00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%34:\l34:                                               \l  %35 = bitcast i32* %32 to i8*\l  tail call void @_ZdlPv(i8* nonnull %35) #12\l  br label %36\l}"];
	Node0x55c0ee1d0b00 -> Node0x55c0ee1d0ab0;
	Node0x55c0ee1d0ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%36:\l36:                                               \l  %37 = bitcast %\"class.std::vector\"* %0 to i8**\l  store i8* %26, i8** %37, align 8, !tbaa !8\l  %38 = getelementptr inbounds i32, i32* %27, i64 %12\l  store i32* %38, i32** %13, align 8, !tbaa !9\l  br label %77\l}"];
	Node0x55c0ee1d0ab0 -> Node0x55c0ee1d1020;
	Node0x55c0ee1cfee0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%39:\l39:                                               \l  %40 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %41 = load i32*, i32** %40, align 8, !tbaa !3\l  %42 = ptrtoint i32* %41 to i64\l  %43 = sub i64 %42, %18\l  %44 = ashr exact i64 %43, 2\l  %45 = icmp ult i64 %44, %12\l  br i1 %45, label %51, label %46\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1cfee0:s0 -> Node0x55c0ee1d1490;
	Node0x55c0ee1cfee0:s1 -> Node0x55c0ee1d14e0;
	Node0x55c0ee1d14e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%46:\l46:                                               \l  %47 = icmp eq i64 %11, 0\l  br i1 %47, label %77, label %48\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1d14e0:s0 -> Node0x55c0ee1d1020;
	Node0x55c0ee1d14e0:s1 -> Node0x55c0ee1d1670;
	Node0x55c0ee1d1670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%48:\l48:                                               \l  %49 = bitcast i32* %16 to i8*\l  %50 = bitcast i32* %8 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %49, i8* align 4 %50,\l... i64 %11, i1 false) #12\l  br label %77\l}"];
	Node0x55c0ee1d1670 -> Node0x55c0ee1d1020;
	Node0x55c0ee1d1490 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%51:\l51:                                               \l  %52 = icmp eq i64 %43, 0\l  br i1 %52, label %65, label %53\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1d1490:s0 -> Node0x55c0ee1d1ae0;
	Node0x55c0ee1d1490:s1 -> Node0x55c0ee1d1b30;
	Node0x55c0ee1d1b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%53:\l53:                                               \l  %54 = bitcast i32* %16 to i8*\l  %55 = bitcast i32* %8 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %55,\l... i64 %43, i1 false) #12\l  %56 = load i32*, i32** %7, align 8, !tbaa !8\l  %57 = load i32*, i32** %40, align 8, !tbaa !3\l  %58 = load i32*, i32** %15, align 8, !tbaa !8\l  %59 = load i32*, i32** %5, align 8, !tbaa !3\l  %60 = ptrtoint i32* %57 to i64\l  %61 = ptrtoint i32* %58 to i64\l  %62 = sub i64 %60, %61\l  %63 = ashr exact i64 %62, 2\l  %64 = ptrtoint i32* %59 to i64\l  br label %65\l}"];
	Node0x55c0ee1d1b30 -> Node0x55c0ee1d1ae0;
	Node0x55c0ee1d1ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%65:\l65:                                               \l  %66 = phi i64 [ %9, %51 ], [ %64, %53 ]\l  %67 = phi i64 [ 0, %51 ], [ %63, %53 ]\l  %68 = phi i32* [ %41, %51 ], [ %57, %53 ]\l  %69 = phi i32* [ %8, %51 ], [ %56, %53 ]\l  %70 = getelementptr inbounds i32, i32* %69, i64 %67\l  %71 = ptrtoint i32* %70 to i64\l  %72 = sub i64 %66, %71\l  %73 = icmp eq i64 %72, 0\l  br i1 %73, label %77, label %74\l|{<s0>T|<s1>F}}"];
	Node0x55c0ee1d1ae0:s0 -> Node0x55c0ee1d1020;
	Node0x55c0ee1d1ae0:s1 -> Node0x55c0ee1d2810;
	Node0x55c0ee1d2810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%74:\l74:                                               \l  %75 = bitcast i32* %68 to i8*\l  %76 = bitcast i32* %70 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %75, i8* align 4 %76,\l... i64 %72, i1 false) #12\l  br label %77\l}"];
	Node0x55c0ee1d2810 -> Node0x55c0ee1d1020;
	Node0x55c0ee1d1020 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%77:\l77:                                               \l  %78 = load i32*, i32** %15, align 8, !tbaa !8\l  %79 = getelementptr inbounds i32, i32* %78, i64 %12\l  %80 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  store i32* %79, i32** %80, align 8, !tbaa !3\l  br label %81\l}"];
	Node0x55c0ee1d1020 -> Node0x55c0ee1b06e0;
	Node0x55c0ee1b06e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%81:\l81:                                               \l  ret %\"class.std::vector\"* %0\l}"];
}
