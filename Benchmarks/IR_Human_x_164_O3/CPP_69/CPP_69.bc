; ModuleID = '../../Human_xBenchmarks_164/CPP_69/CPP_69.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_69/CPP_69.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::vector.0" = type { %"struct.std::_Vector_base.1" }
%"struct.std::_Vector_base.1" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" = type { %"class.std::vector"*, %"class.std::vector"*, %"class.std::vector"* }

$_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev = comdat any

$_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local i32 @_Z6searchSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::vector.0", align 8
  %3 = alloca %"class.std::vector", align 8
  %4 = bitcast %"class.std::vector.0"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.std::vector"* %3 to i8*
  %10 = bitcast %"class.std::vector"* %3 to i8**
  %11 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast i32** %11 to i8**
  %13 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast i32** %13 to i8**
  %15 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %16 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.std::vector.0"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %17, i8 0, i64 24, i1 false)
  %18 = load i32*, i32** %5, align 8, !tbaa !3
  %19 = load i32*, i32** %6, align 8, !tbaa !8
  %20 = icmp eq i32* %18, %19
  br i1 %20, label %56, label %21

21:                                               ; preds = %1, %140
  %22 = phi i32* [ %131, %140 ], [ %19, %1 ]
  %23 = phi %"class.std::vector"* [ %142, %140 ], [ null, %1 ]
  %24 = phi %"class.std::vector"* [ %141, %140 ], [ null, %1 ]
  %25 = phi i64 [ %133, %140 ], [ 0, %1 ]
  %26 = phi i32 [ %132, %140 ], [ -1, %1 ]
  %27 = ptrtoint %"class.std::vector"* %24 to i64
  %28 = ptrtoint %"class.std::vector"* %23 to i64
  %29 = sub i64 %27, %28
  %30 = getelementptr inbounds i32, i32* %22, i64 %25
  %31 = icmp eq i64 %29, 0
  br i1 %31, label %83, label %32

32:                                               ; preds = %21
  %33 = sdiv exact i64 %29, 24
  %34 = call i64 @llvm.umax.i64(i64 %33, i64 1)
  br label %61

35:                                               ; preds = %130
  %36 = load %"class.std::vector"*, %"class.std::vector"** %8, align 8, !tbaa !9
  %37 = load %"class.std::vector"*, %"class.std::vector"** %7, align 8, !tbaa !11
  %38 = icmp eq %"class.std::vector"* %36, %37
  br i1 %38, label %51, label %39

39:                                               ; preds = %35, %46
  %40 = phi %"class.std::vector"* [ %47, %46 ], [ %36, %35 ]
  %41 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %40, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8, !tbaa !8
  %43 = icmp eq i32* %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = bitcast i32* %42 to i8*
  call void @_ZdlPv(i8* nonnull %45) #8
  br label %46

46:                                               ; preds = %44, %39
  %47 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %40, i64 1
  %48 = icmp eq %"class.std::vector"* %47, %37
  br i1 %48, label %49, label %39, !llvm.loop !12

49:                                               ; preds = %46
  %50 = load %"class.std::vector"*, %"class.std::vector"** %8, align 8, !tbaa !9
  br label %51

51:                                               ; preds = %49, %35
  %52 = phi %"class.std::vector"* [ %50, %49 ], [ %37, %35 ]
  %53 = icmp eq %"class.std::vector"* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %51
  %55 = bitcast %"class.std::vector"* %52 to i8*
  call void @_ZdlPv(i8* nonnull %55) #8
  br label %56

56:                                               ; preds = %1, %51, %54
  %57 = phi i32 [ %132, %51 ], [ %132, %54 ], [ -1, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  ret i32 %57

58:                                               ; preds = %78
  %59 = and i8 %79, 1
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %83, label %130

61:                                               ; preds = %32, %78
  %62 = phi i64 [ 0, %32 ], [ %81, %78 ]
  %63 = phi i32 [ %26, %32 ], [ %80, %78 ]
  %64 = phi i8 [ 0, %32 ], [ %79, %78 ]
  %65 = load i32, i32* %30, align 4, !tbaa !14
  %66 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %23, i64 %62, i32 0, i32 0, i32 0, i32 0
  %67 = load i32*, i32** %66, align 8, !tbaa !8
  %68 = load i32, i32* %67, align 4, !tbaa !14
  %69 = icmp eq i32 %65, %68
  br i1 %69, label %70, label %78

70:                                               ; preds = %61
  %71 = getelementptr inbounds i32, i32* %67, i64 1
  %72 = load i32, i32* %71, align 4, !tbaa !14
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %71, align 4, !tbaa !14
  %74 = icmp sge i32 %73, %65
  %75 = icmp sgt i32 %65, %63
  %76 = select i1 %74, i1 %75, i1 false
  %77 = select i1 %76, i32 %65, i32 %63
  br label %78

78:                                               ; preds = %70, %61
  %79 = phi i8 [ %64, %61 ], [ 1, %70 ]
  %80 = phi i32 [ %63, %61 ], [ %77, %70 ]
  %81 = add nuw nsw i64 %62, 1
  %82 = icmp eq i64 %81, %34
  br i1 %82, label %58, label %61, !llvm.loop !16

83:                                               ; preds = %21, %58
  %84 = phi i32 [ %80, %58 ], [ %26, %21 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8
  %85 = load i32, i32* %30, align 4, !tbaa !14
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false) #8
  %86 = invoke noalias nonnull i8* @_Znwm(i64 8) #9
          to label %91 unwind label %87

87:                                               ; preds = %83
  %88 = landingpad { i8*, i32 }
          cleanup
  %89 = load i32*, i32** %16, align 8, !tbaa !8
  %90 = icmp eq i32* %89, null
  br i1 %90, label %128, label %124

91:                                               ; preds = %83
  %92 = bitcast i8* %86 to i32*
  store i8* %86, i8** %10, align 8, !tbaa !8
  %93 = getelementptr inbounds i8, i8* %86, i64 8
  store i8* %93, i8** %12, align 8, !tbaa !17
  store i32 %85, i32* %92, align 4
  %94 = getelementptr inbounds i8, i8* %86, i64 4
  %95 = bitcast i8* %94 to i32*
  store i32 1, i32* %95, align 4
  store i8* %93, i8** %14, align 8, !tbaa !3
  %96 = load %"class.std::vector"*, %"class.std::vector"** %7, align 8, !tbaa !11
  %97 = load %"class.std::vector"*, %"class.std::vector"** %15, align 8, !tbaa !18
  %98 = icmp eq %"class.std::vector"* %96, %97
  br i1 %98, label %106, label %99

99:                                               ; preds = %91
  %100 = bitcast %"class.std::vector"* %96 to i8**
  store i8* %86, i8** %100, align 8, !tbaa !8
  %101 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %96, i64 0, i32 0, i32 0, i32 0, i32 1
  %102 = bitcast i32** %101 to i8**
  store i8* %93, i8** %102, align 8, !tbaa !3
  %103 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %96, i64 0, i32 0, i32 0, i32 0, i32 2
  %104 = bitcast i32** %103 to i8**
  store i8* %93, i8** %104, align 8, !tbaa !17
  %105 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %96, i64 1
  store %"class.std::vector"* %105, %"class.std::vector"** %7, align 8, !tbaa !11
  br label %112

106:                                              ; preds = %91
  invoke void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.0"* nonnull align 8 dereferenceable(24) %2, %"class.std::vector"* %96, %"class.std::vector"* nonnull align 8 dereferenceable(24) %3)
          to label %107 unwind label %120

107:                                              ; preds = %106
  %108 = load i32*, i32** %16, align 8, !tbaa !8
  %109 = icmp eq i32* %108, null
  br i1 %109, label %112, label %110

110:                                              ; preds = %107
  %111 = bitcast i32* %108 to i8*
  call void @_ZdlPv(i8* nonnull %111) #8
  br label %112

112:                                              ; preds = %99, %107, %110
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  %113 = icmp eq i32 %84, -1
  %114 = load i32*, i32** %6, align 8, !tbaa !8
  br i1 %113, label %115, label %130

115:                                              ; preds = %112
  %116 = getelementptr inbounds i32, i32* %114, i64 %25
  %117 = load i32, i32* %116, align 4, !tbaa !14
  %118 = icmp eq i32 %117, 1
  %119 = select i1 %118, i32 1, i32 -1
  br label %130

120:                                              ; preds = %106
  %121 = landingpad { i8*, i32 }
          cleanup
  %122 = load i32*, i32** %16, align 8, !tbaa !8
  %123 = icmp eq i32* %122, null
  br i1 %123, label %128, label %124

124:                                              ; preds = %120, %87
  %125 = phi i32* [ %89, %87 ], [ %122, %120 ]
  %126 = phi { i8*, i32 } [ %88, %87 ], [ %121, %120 ]
  %127 = bitcast i32* %125 to i8*
  call void @_ZdlPv(i8* nonnull %127) #8
  br label %128

128:                                              ; preds = %124, %120, %87
  %129 = phi { i8*, i32 } [ %88, %87 ], [ %121, %120 ], [ %126, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  call void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%"class.std::vector.0"* nonnull align 8 dereferenceable(24) %2) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  resume { i8*, i32 } %129

130:                                              ; preds = %112, %115, %58
  %131 = phi i32* [ %22, %58 ], [ %114, %115 ], [ %114, %112 ]
  %132 = phi i32 [ %80, %58 ], [ %119, %115 ], [ %84, %112 ]
  %133 = add nuw i64 %25, 1
  %134 = load i32*, i32** %5, align 8, !tbaa !3
  %135 = ptrtoint i32* %134 to i64
  %136 = ptrtoint i32* %131 to i64
  %137 = sub i64 %135, %136
  %138 = ashr exact i64 %137, 2
  %139 = icmp ugt i64 %138, %133
  br i1 %139, label %140, label %35, !llvm.loop !19

140:                                              ; preds = %130
  %141 = load %"class.std::vector"*, %"class.std::vector"** %7, align 8, !tbaa !11
  %142 = load %"class.std::vector"*, %"class.std::vector"** %8, align 8, !tbaa !9
  br label %21
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%"class.std::vector.0"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #3 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::vector"*, %"class.std::vector"** %4, align 8, !tbaa !11
  %6 = icmp eq %"class.std::vector"* %3, %5
  br i1 %6, label %19, label %7

7:                                                ; preds = %1, %14
  %8 = phi %"class.std::vector"* [ %15, %14 ], [ %3, %1 ]
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !8
  %11 = icmp eq i32* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* nonnull %13) #8
  br label %14

14:                                               ; preds = %12, %7
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %8, i64 1
  %16 = icmp eq %"class.std::vector"* %15, %5
  br i1 %16, label %17, label %7, !llvm.loop !12

17:                                               ; preds = %14
  %18 = load %"class.std::vector"*, %"class.std::vector"** %2, align 8, !tbaa !9
  br label %19

19:                                               ; preds = %17, %1
  %20 = phi %"class.std::vector"* [ %18, %17 ], [ %3, %1 ]
  %21 = icmp eq %"class.std::vector"* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = bitcast %"class.std::vector"* %20 to i8*
  tail call void @_ZdlPv(i8* nonnull %23) #8
  br label %24

24:                                               ; preds = %19, %22
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.0"* nonnull align 8 dereferenceable(24) %0, %"class.std::vector"* %1, %"class.std::vector"* nonnull align 8 dereferenceable(24) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::vector"*, %"class.std::vector"** %4, align 8, !tbaa !11
  %6 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::vector"*, %"class.std::vector"** %6, align 8, !tbaa !9
  %8 = ptrtoint %"class.std::vector"* %5 to i64
  %9 = ptrtoint %"class.std::vector"* %7 to i64
  %10 = sub i64 %8, %9
  %11 = sdiv exact i64 %10, 24
  %12 = icmp eq i64 %10, 9223372036854775800
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #10
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 384307168202282325
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 384307168202282325, i64 %17
  %22 = ptrtoint %"class.std::vector"* %1 to i64
  %23 = sub i64 %22, %9
  %24 = sdiv exact i64 %23, 24
  %25 = mul nuw nsw i64 %21, 24
  %26 = tail call noalias nonnull i8* @_Znwm(i64 %25) #9
  %27 = bitcast i8* %26 to %"class.std::vector"*
  %28 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %27, i64 %24, i32 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.std::vector"* %2 to <2 x i32*>*
  %30 = load <2 x i32*>, <2 x i32*>* %29, align 8, !tbaa !20
  %31 = bitcast i32** %28 to <2 x i32*>*
  store <2 x i32*> %30, <2 x i32*>* %31, align 8, !tbaa !20
  %32 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %27, i64 %24, i32 0, i32 0, i32 0, i32 2
  %33 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 2
  %34 = load i32*, i32** %33, align 8, !tbaa !17
  store i32* %34, i32** %32, align 8, !tbaa !17
  %35 = bitcast %"class.std::vector"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %35, i8 0, i64 24, i1 false) #8
  %36 = icmp eq %"class.std::vector"* %7, %1
  br i1 %36, label %50, label %37

37:                                               ; preds = %14, %37
  %38 = phi %"class.std::vector"* [ %48, %37 ], [ %27, %14 ]
  %39 = phi %"class.std::vector"* [ %47, %37 ], [ %7, %14 ]
  %40 = bitcast %"class.std::vector"* %39 to <2 x i32*>*
  %41 = load <2 x i32*>, <2 x i32*>* %40, align 8, !tbaa !20
  %42 = bitcast %"class.std::vector"* %38 to <2 x i32*>*
  store <2 x i32*> %41, <2 x i32*>* %42, align 8, !tbaa !20
  %43 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %38, i64 0, i32 0, i32 0, i32 0, i32 2
  %44 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %39, i64 0, i32 0, i32 0, i32 0, i32 2
  %45 = load i32*, i32** %44, align 8, !tbaa !17
  store i32* %45, i32** %43, align 8, !tbaa !17
  %46 = bitcast %"class.std::vector"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %46, i8 0, i64 24, i1 false) #8
  %47 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %39, i64 1
  %48 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %38, i64 1
  %49 = icmp eq %"class.std::vector"* %47, %1
  br i1 %49, label %50, label %37, !llvm.loop !21

50:                                               ; preds = %37, %14
  %51 = phi %"class.std::vector"* [ %27, %14 ], [ %48, %37 ]
  %52 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %51, i64 1
  %53 = icmp eq %"class.std::vector"* %5, %1
  br i1 %53, label %67, label %54

54:                                               ; preds = %50, %54
  %55 = phi %"class.std::vector"* [ %65, %54 ], [ %52, %50 ]
  %56 = phi %"class.std::vector"* [ %64, %54 ], [ %1, %50 ]
  %57 = bitcast %"class.std::vector"* %56 to <2 x i32*>*
  %58 = load <2 x i32*>, <2 x i32*>* %57, align 8, !tbaa !20
  %59 = bitcast %"class.std::vector"* %55 to <2 x i32*>*
  store <2 x i32*> %58, <2 x i32*>* %59, align 8, !tbaa !20
  %60 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %55, i64 0, i32 0, i32 0, i32 0, i32 2
  %61 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %56, i64 0, i32 0, i32 0, i32 0, i32 2
  %62 = load i32*, i32** %61, align 8, !tbaa !17
  store i32* %62, i32** %60, align 8, !tbaa !17
  %63 = bitcast %"class.std::vector"* %56 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %63, i8 0, i64 24, i1 false) #8
  %64 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %56, i64 1
  %65 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %55, i64 1
  %66 = icmp eq %"class.std::vector"* %64, %5
  br i1 %66, label %67, label %54, !llvm.loop !21

67:                                               ; preds = %54, %50
  %68 = phi %"class.std::vector"* [ %52, %50 ], [ %65, %54 ]
  %69 = icmp eq %"class.std::vector"* %7, null
  br i1 %69, label %72, label %70

70:                                               ; preds = %67
  %71 = bitcast %"class.std::vector"* %7 to i8*
  tail call void @_ZdlPv(i8* nonnull %71) #8
  br label %72

72:                                               ; preds = %67, %70
  %73 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %74 = bitcast %"class.std::vector.0"* %0 to i8**
  store i8* %26, i8** %74, align 8, !tbaa !9
  store %"class.std::vector"* %68, %"class.std::vector"** %4, align 8, !tbaa !11
  %75 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %27, i64 %21
  store %"class.std::vector"* %75, %"class.std::vector"** %73, align 8, !tbaa !18
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #7

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }
attributes #9 = { allocsize(0) }
attributes #10 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !5, i64 0}
!10 = !{!"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!11 = !{!10, !5, i64 8}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !6, i64 0}
!16 = distinct !{!16, !13}
!17 = !{!4, !5, i64 16}
!18 = !{!10, !5, i64 16}
!19 = distinct !{!19, !13}
!20 = !{!5, !5, i64 0}
!21 = distinct !{!21, !13}
