digraph "CFG for '_Z15rescale_to_unitSt6vectorIfSaIfEE' function" {
	label="CFG for '_Z15rescale_to_unitSt6vectorIfSaIfEE' function";

	Node0x5654d3100a10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %4 = load float*, float** %3, align 8, !tbaa !3\l  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %6 = load float*, float** %5, align 8, !tbaa !8\l  %7 = ptrtoint float* %4 to i64\l  %8 = ptrtoint float* %6 to i64\l  %9 = sub i64 %7, %8\l  %10 = ashr exact i64 %9, 2\l  %11 = icmp eq i64 %9, 0\l  br i1 %11, label %128, label %12\l|{<s0>T|<s1>F}}"];
	Node0x5654d3100a10:s0 -> Node0x5654d3101da0;
	Node0x5654d3100a10:s1 -> Node0x5654d31023e0;
	Node0x5654d31023e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%12:\l12:                                               \l  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)\l  %14 = add i64 %13, -1\l  %15 = and i64 %13, 3\l  %16 = icmp ult i64 %14, 3\l  br i1 %16, label %19, label %17\l|{<s0>T|<s1>F}}"];
	Node0x5654d31023e0:s0 -> Node0x5654d31029d0;
	Node0x5654d31023e0:s1 -> Node0x5654d3102a20;
	Node0x5654d3102a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d4dbe670",label="{%17:\l17:                                               \l  %18 = and i64 %13, -4\l  br label %93\l}"];
	Node0x5654d3102a20 -> Node0x5654d3102b90;
	Node0x5654d31029d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%19:\l19:                                               \l  %20 = phi float [ undef, %12 ], [ %122, %93 ]\l  %21 = phi float [ undef, %12 ], [ %124, %93 ]\l  %22 = phi i64 [ 0, %12 ], [ %125, %93 ]\l  %23 = phi float [ -1.000000e+05, %12 ], [ %124, %93 ]\l  %24 = phi float [ 1.000000e+05, %12 ], [ %122, %93 ]\l  %25 = icmp eq i64 %15, 0\l  br i1 %25, label %40, label %26\l|{<s0>T|<s1>F}}"];
	Node0x5654d31029d0:s0 -> Node0x5654d3104000;
	Node0x5654d31029d0:s1 -> Node0x5654d3104090;
	Node0x5654d3104090 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i64 [ %37, %26 ], [ %22, %19 ]\l  %28 = phi float [ %36, %26 ], [ %23, %19 ]\l  %29 = phi float [ %34, %26 ], [ %24, %19 ]\l  %30 = phi i64 [ %38, %26 ], [ %15, %19 ]\l  %31 = getelementptr inbounds float, float* %6, i64 %27\l  %32 = load float, float* %31, align 4, !tbaa !9\l  %33 = fcmp olt float %32, %29\l  %34 = select i1 %33, float %32, float %29\l  %35 = fcmp ogt float %32, %28\l  %36 = select i1 %35, float %32, float %28\l  %37 = add nuw nsw i64 %27, 1\l  %38 = add i64 %30, -1\l  %39 = icmp eq i64 %38, 0\l  br i1 %39, label %40, label %26, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x5654d3104090:s0 -> Node0x5654d3104000;
	Node0x5654d3104090:s1 -> Node0x5654d3104090;
	Node0x5654d3104000 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%40:\l40:                                               \l  %41 = phi float [ %20, %19 ], [ %34, %26 ]\l  %42 = phi float [ %21, %19 ], [ %36, %26 ]\l  %43 = fsub float %42, %41\l  br i1 %11, label %128, label %44\l|{<s0>T|<s1>F}}"];
	Node0x5654d3104000:s0 -> Node0x5654d3101da0;
	Node0x5654d3104000:s1 -> Node0x5654d31051a0;
	Node0x5654d31051a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%44:\l44:                                               \l  %45 = call i64 @llvm.umax.i64(i64 %10, i64 1)\l  %46 = icmp ult i64 %45, 4\l  br i1 %46, label %91, label %47\l|{<s0>T|<s1>F}}"];
	Node0x5654d31051a0:s0 -> Node0x5654d3105480;
	Node0x5654d31051a0:s1 -> Node0x5654d31054d0;
	Node0x5654d31054d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%47:\l47:                                               \l  %48 = and i64 %45, -4\l  %49 = insertelement \<4 x float\> poison, float %41, i32 0\l  %50 = shufflevector \<4 x float\> %49, \<4 x float\> poison, \<4 x i32\>\l... zeroinitializer\l  %51 = insertelement \<4 x float\> poison, float %43, i32 0\l  %52 = shufflevector \<4 x float\> %51, \<4 x float\> poison, \<4 x i32\>\l... zeroinitializer\l  %53 = add i64 %48, -4\l  %54 = lshr exact i64 %53, 2\l  %55 = add nuw nsw i64 %54, 1\l  %56 = and i64 %55, 1\l  %57 = icmp eq i64 %53, 0\l  br i1 %57, label %79, label %58\l|{<s0>T|<s1>F}}"];
	Node0x5654d31054d0:s0 -> Node0x5654d3106a20;
	Node0x5654d31054d0:s1 -> Node0x5654d3106a70;
	Node0x5654d3106a70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%58:\l58:                                               \l  %59 = and i64 %55, 9223372036854775806\l  br label %60\l}"];
	Node0x5654d3106a70 -> Node0x5654d3106c20;
	Node0x5654d3106c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%60:\l60:                                               \l  %61 = phi i64 [ 0, %58 ], [ %76, %60 ]\l  %62 = phi i64 [ %59, %58 ], [ %77, %60 ]\l  %63 = getelementptr inbounds float, float* %6, i64 %61\l  %64 = bitcast float* %63 to \<4 x float\>*\l  %65 = load \<4 x float\>, \<4 x float\>* %64, align 4, !tbaa !9\l  %66 = fsub \<4 x float\> %65, %50\l  %67 = fdiv \<4 x float\> %66, %52\l  %68 = bitcast float* %63 to \<4 x float\>*\l  store \<4 x float\> %67, \<4 x float\>* %68, align 4, !tbaa !9\l  %69 = or i64 %61, 4\l  %70 = getelementptr inbounds float, float* %6, i64 %69\l  %71 = bitcast float* %70 to \<4 x float\>*\l  %72 = load \<4 x float\>, \<4 x float\>* %71, align 4, !tbaa !9\l  %73 = fsub \<4 x float\> %72, %50\l  %74 = fdiv \<4 x float\> %73, %52\l  %75 = bitcast float* %70 to \<4 x float\>*\l  store \<4 x float\> %74, \<4 x float\>* %75, align 4, !tbaa !9\l  %76 = add nuw i64 %61, 8\l  %77 = add i64 %62, -2\l  %78 = icmp eq i64 %77, 0\l  br i1 %78, label %79, label %60, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x5654d3106c20:s0 -> Node0x5654d3106a20;
	Node0x5654d3106c20:s1 -> Node0x5654d3106c20;
	Node0x5654d3106a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%79:\l79:                                               \l  %80 = phi i64 [ 0, %47 ], [ %76, %60 ]\l  %81 = icmp eq i64 %56, 0\l  br i1 %81, label %89, label %82\l|{<s0>T|<s1>F}}"];
	Node0x5654d3106a20:s0 -> Node0x5654d31084c0;
	Node0x5654d3106a20:s1 -> Node0x5654d3108510;
	Node0x5654d3108510 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%82:\l82:                                               \l  %83 = getelementptr inbounds float, float* %6, i64 %80\l  %84 = bitcast float* %83 to \<4 x float\>*\l  %85 = load \<4 x float\>, \<4 x float\>* %84, align 4, !tbaa !9\l  %86 = fsub \<4 x float\> %85, %50\l  %87 = fdiv \<4 x float\> %86, %52\l  %88 = bitcast float* %83 to \<4 x float\>*\l  store \<4 x float\> %87, \<4 x float\>* %88, align 4, !tbaa !9\l  br label %89\l}"];
	Node0x5654d3108510 -> Node0x5654d31084c0;
	Node0x5654d31084c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c1d4f470",label="{%89:\l89:                                               \l  %90 = icmp eq i64 %45, %48\l  br i1 %90, label %128, label %91\l|{<s0>T|<s1>F}}"];
	Node0x5654d31084c0:s0 -> Node0x5654d3101da0;
	Node0x5654d31084c0:s1 -> Node0x5654d3105480;
	Node0x5654d3105480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d1dae970",label="{%91:\l91:                                               \l  %92 = phi i64 [ 0, %44 ], [ %48, %89 ]\l  br label %135\l}"];
	Node0x5654d3105480 -> Node0x5654d3108c50;
	Node0x5654d3102b90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c32e3170",label="{%93:\l93:                                               \l  %94 = phi i64 [ 0, %17 ], [ %125, %93 ]\l  %95 = phi float [ -1.000000e+05, %17 ], [ %124, %93 ]\l  %96 = phi float [ 1.000000e+05, %17 ], [ %122, %93 ]\l  %97 = phi i64 [ %18, %17 ], [ %126, %93 ]\l  %98 = getelementptr inbounds float, float* %6, i64 %94\l  %99 = load float, float* %98, align 4, !tbaa !9\l  %100 = fcmp olt float %99, %96\l  %101 = select i1 %100, float %99, float %96\l  %102 = fcmp ogt float %99, %95\l  %103 = select i1 %102, float %99, float %95\l  %104 = or i64 %94, 1\l  %105 = getelementptr inbounds float, float* %6, i64 %104\l  %106 = load float, float* %105, align 4, !tbaa !9\l  %107 = fcmp olt float %106, %101\l  %108 = select i1 %107, float %106, float %101\l  %109 = fcmp ogt float %106, %103\l  %110 = select i1 %109, float %106, float %103\l  %111 = or i64 %94, 2\l  %112 = getelementptr inbounds float, float* %6, i64 %111\l  %113 = load float, float* %112, align 4, !tbaa !9\l  %114 = fcmp olt float %113, %108\l  %115 = select i1 %114, float %113, float %108\l  %116 = fcmp ogt float %113, %110\l  %117 = select i1 %116, float %113, float %110\l  %118 = or i64 %94, 3\l  %119 = getelementptr inbounds float, float* %6, i64 %118\l  %120 = load float, float* %119, align 4, !tbaa !9\l  %121 = fcmp olt float %120, %115\l  %122 = select i1 %121, float %120, float %115\l  %123 = fcmp ogt float %120, %117\l  %124 = select i1 %123, float %120, float %117\l  %125 = add nuw nsw i64 %94, 4\l  %126 = add i64 %97, -4\l  %127 = icmp eq i64 %126, 0\l  br i1 %127, label %19, label %93, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5654d3102b90:s0 -> Node0x5654d31029d0;
	Node0x5654d3102b90:s1 -> Node0x5654d3102b90;
	Node0x5654d3101da0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%128:\l128:                                              \l  %129 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 0\l  store float* %6, float** %129, align 8, !tbaa !8\l  %130 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 1\l  store float* %4, float** %130, align 8, !tbaa !3\l  %131 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 2\l  %132 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %1, i64 0, i32 0, i32 0, i32 0, i32 2\l  %133 = load float*, float** %132, align 8, !tbaa !17\l  store float* %133, float** %131, align 8, !tbaa !17\l  %134 = bitcast %\"class.std::vector\"* %1 to i8*\l  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %134, i8 0, i64 24, i1 false) #3\l  ret void\l}"];
	Node0x5654d3108c50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#c5333470",label="{%135:\l135:                                              \l  %136 = phi i64 [ %141, %135 ], [ %92, %91 ]\l  %137 = getelementptr inbounds float, float* %6, i64 %136\l  %138 = load float, float* %137, align 4, !tbaa !9\l  %139 = fsub float %138, %41\l  %140 = fdiv float %139, %43\l  store float %140, float* %137, align 4, !tbaa !9\l  %141 = add nuw nsw i64 %136, 1\l  %142 = icmp eq i64 %141, %45\l  br i1 %142, label %128, label %135, !llvm.loop !18\l|{<s0>T|<s1>F}}"];
	Node0x5654d3108c50:s0 -> Node0x5654d3101da0;
	Node0x5654d3108c50:s1 -> Node0x5654d3108c50;
}
