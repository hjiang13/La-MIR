; ModuleID = '../../Human_xBenchmarks_164/CPP_21/CPP_21.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_21/CPP_21.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: nofree nosync nounwind uwtable
define dso_local void @_Z15rescale_to_unitSt6vectorIfSaIfEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load float*, float** %3, align 8, !tbaa !3
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load float*, float** %5, align 8, !tbaa !8
  %7 = ptrtoint float* %4 to i64
  %8 = ptrtoint float* %6 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %128, label %12

12:                                               ; preds = %2
  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)
  %14 = add i64 %13, -1
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = and i64 %13, -4
  br label %93

19:                                               ; preds = %93, %12
  %20 = phi float [ undef, %12 ], [ %122, %93 ]
  %21 = phi float [ undef, %12 ], [ %124, %93 ]
  %22 = phi i64 [ 0, %12 ], [ %125, %93 ]
  %23 = phi float [ -1.000000e+05, %12 ], [ %124, %93 ]
  %24 = phi float [ 1.000000e+05, %12 ], [ %122, %93 ]
  %25 = icmp eq i64 %15, 0
  br i1 %25, label %40, label %26

26:                                               ; preds = %19, %26
  %27 = phi i64 [ %37, %26 ], [ %22, %19 ]
  %28 = phi float [ %36, %26 ], [ %23, %19 ]
  %29 = phi float [ %34, %26 ], [ %24, %19 ]
  %30 = phi i64 [ %38, %26 ], [ %15, %19 ]
  %31 = getelementptr inbounds float, float* %6, i64 %27
  %32 = load float, float* %31, align 4, !tbaa !9
  %33 = fcmp olt float %32, %29
  %34 = select i1 %33, float %32, float %29
  %35 = fcmp ogt float %32, %28
  %36 = select i1 %35, float %32, float %28
  %37 = add nuw nsw i64 %27, 1
  %38 = add i64 %30, -1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %26, !llvm.loop !11

40:                                               ; preds = %26, %19
  %41 = phi float [ %20, %19 ], [ %34, %26 ]
  %42 = phi float [ %21, %19 ], [ %36, %26 ]
  %43 = fsub float %42, %41
  br i1 %11, label %128, label %44

44:                                               ; preds = %40
  %45 = call i64 @llvm.umax.i64(i64 %10, i64 1)
  %46 = icmp ult i64 %45, 4
  br i1 %46, label %91, label %47

47:                                               ; preds = %44
  %48 = and i64 %45, -4
  %49 = insertelement <4 x float> poison, float %41, i32 0
  %50 = shufflevector <4 x float> %49, <4 x float> poison, <4 x i32> zeroinitializer
  %51 = insertelement <4 x float> poison, float %43, i32 0
  %52 = shufflevector <4 x float> %51, <4 x float> poison, <4 x i32> zeroinitializer
  %53 = add i64 %48, -4
  %54 = lshr exact i64 %53, 2
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %53, 0
  br i1 %57, label %79, label %58

58:                                               ; preds = %47
  %59 = and i64 %55, 9223372036854775806
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %76, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %77, %60 ]
  %63 = getelementptr inbounds float, float* %6, i64 %61
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !9
  %66 = fsub <4 x float> %65, %50
  %67 = fdiv <4 x float> %66, %52
  %68 = bitcast float* %63 to <4 x float>*
  store <4 x float> %67, <4 x float>* %68, align 4, !tbaa !9
  %69 = or i64 %61, 4
  %70 = getelementptr inbounds float, float* %6, i64 %69
  %71 = bitcast float* %70 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !9
  %73 = fsub <4 x float> %72, %50
  %74 = fdiv <4 x float> %73, %52
  %75 = bitcast float* %70 to <4 x float>*
  store <4 x float> %74, <4 x float>* %75, align 4, !tbaa !9
  %76 = add nuw i64 %61, 8
  %77 = add i64 %62, -2
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %60, !llvm.loop !13

79:                                               ; preds = %60, %47
  %80 = phi i64 [ 0, %47 ], [ %76, %60 ]
  %81 = icmp eq i64 %56, 0
  br i1 %81, label %89, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds float, float* %6, i64 %80
  %84 = bitcast float* %83 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 4, !tbaa !9
  %86 = fsub <4 x float> %85, %50
  %87 = fdiv <4 x float> %86, %52
  %88 = bitcast float* %83 to <4 x float>*
  store <4 x float> %87, <4 x float>* %88, align 4, !tbaa !9
  br label %89

89:                                               ; preds = %79, %82
  %90 = icmp eq i64 %45, %48
  br i1 %90, label %128, label %91

91:                                               ; preds = %44, %89
  %92 = phi i64 [ 0, %44 ], [ %48, %89 ]
  br label %135

93:                                               ; preds = %93, %17
  %94 = phi i64 [ 0, %17 ], [ %125, %93 ]
  %95 = phi float [ -1.000000e+05, %17 ], [ %124, %93 ]
  %96 = phi float [ 1.000000e+05, %17 ], [ %122, %93 ]
  %97 = phi i64 [ %18, %17 ], [ %126, %93 ]
  %98 = getelementptr inbounds float, float* %6, i64 %94
  %99 = load float, float* %98, align 4, !tbaa !9
  %100 = fcmp olt float %99, %96
  %101 = select i1 %100, float %99, float %96
  %102 = fcmp ogt float %99, %95
  %103 = select i1 %102, float %99, float %95
  %104 = or i64 %94, 1
  %105 = getelementptr inbounds float, float* %6, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !9
  %107 = fcmp olt float %106, %101
  %108 = select i1 %107, float %106, float %101
  %109 = fcmp ogt float %106, %103
  %110 = select i1 %109, float %106, float %103
  %111 = or i64 %94, 2
  %112 = getelementptr inbounds float, float* %6, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !9
  %114 = fcmp olt float %113, %108
  %115 = select i1 %114, float %113, float %108
  %116 = fcmp ogt float %113, %110
  %117 = select i1 %116, float %113, float %110
  %118 = or i64 %94, 3
  %119 = getelementptr inbounds float, float* %6, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !9
  %121 = fcmp olt float %120, %115
  %122 = select i1 %121, float %120, float %115
  %123 = fcmp ogt float %120, %117
  %124 = select i1 %123, float %120, float %117
  %125 = add nuw nsw i64 %94, 4
  %126 = add i64 %97, -4
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %19, label %93, !llvm.loop !16

128:                                              ; preds = %135, %89, %2, %40
  %129 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %6, float** %129, align 8, !tbaa !8
  %130 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store float* %4, float** %130, align 8, !tbaa !3
  %131 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %132 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %133 = load float*, float** %132, align 8, !tbaa !17
  store float* %133, float** %131, align 8, !tbaa !17
  %134 = bitcast %"class.std::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %134, i8 0, i64 24, i1 false) #3
  ret void

135:                                              ; preds = %91, %135
  %136 = phi i64 [ %141, %135 ], [ %92, %91 ]
  %137 = getelementptr inbounds float, float* %6, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !9
  %139 = fsub float %138, %41
  %140 = fdiv float %139, %43
  store float %140, float* %137, align 4, !tbaa !9
  %141 = add nuw nsw i64 %136, 1
  %142 = icmp eq i64 %141, %45
  br i1 %142, label %128, label %135, !llvm.loop !18
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nounwind willreturn writeonly }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14, !15}
!14 = !{!"llvm.loop.mustprogress"}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !14}
!17 = !{!4, !5, i64 16}
!18 = distinct !{!18, !14, !19, !15}
!19 = !{!"llvm.loop.unroll.runtime.disable"}
