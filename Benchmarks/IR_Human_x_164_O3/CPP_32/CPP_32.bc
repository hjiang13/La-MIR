; ModuleID = '../../Human_xBenchmarks_164/CPP_32/CPP_32.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_32/CPP_32.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" = type { double*, double*, double* }

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local double @_Z4polySt6vectorIdSaIdEEd(%"class.std::vector"* nocapture readonly %0, double %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load double*, double** %3, align 8, !tbaa !3
  %6 = load double*, double** %4, align 8, !tbaa !8
  %7 = icmp eq double* %5, %6
  br i1 %7, label %27, label %8

8:                                                ; preds = %2, %8
  %9 = phi i64 [ %19, %8 ], [ 0, %2 ]
  %10 = phi double* [ %21, %8 ], [ %6, %2 ]
  %11 = phi double [ %18, %8 ], [ 0.000000e+00, %2 ]
  %12 = getelementptr inbounds double, double* %10, i64 %9
  %13 = load double, double* %12, align 8, !tbaa !9
  %14 = trunc i64 %9 to i32
  %15 = sitofp i32 %14 to double
  %16 = tail call double @pow(double %1, double %15) #9
  %17 = fmul double %13, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i64 %9, 1
  %20 = load double*, double** %3, align 8, !tbaa !3
  %21 = load double*, double** %4, align 8, !tbaa !8
  %22 = ptrtoint double* %20 to i64
  %23 = ptrtoint double* %21 to i64
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 3
  %26 = icmp ugt i64 %25, %19
  br i1 %26, label %8, label %27, !llvm.loop !11

27:                                               ; preds = %8, %2
  %28 = phi double [ 0.000000e+00, %2 ], [ %18, %8 ]
  ret double %28
}

; Function Attrs: uwtable
define dso_local double @_Z9find_zeroSt6vectorIdSaIdEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #1 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load double*, double** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load double*, double** %4, align 8, !tbaa !8
  %6 = ptrtoint double* %3 to i64
  %7 = ptrtoint double* %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 3
  %12 = icmp ugt i64 %11, 1152921504606846975
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  tail call void @_ZSt17__throw_bad_allocv() #10
  unreachable

14:                                               ; preds = %10
  %15 = tail call noalias nonnull i8* @_Znwm(i64 %8) #11
  %16 = bitcast i8* %15 to double*
  %17 = load double*, double** %4, align 8, !tbaa !13
  %18 = load double*, double** %2, align 8, !tbaa !13
  %19 = ptrtoint double* %18 to i64
  %20 = ptrtoint double* %17 to i64
  %21 = sub i64 %19, %20
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %96, label %26

23:                                               ; preds = %1
  %24 = sub i64 %6, %7
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %100, label %26

26:                                               ; preds = %23, %14
  %27 = phi i64 [ %24, %23 ], [ %21, %14 ]
  %28 = phi double* [ null, %23 ], [ %16, %14 ]
  %29 = phi double* [ %5, %23 ], [ %17, %14 ]
  %30 = bitcast double* %28 to i8*
  %31 = bitcast double* %29 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 %27, i1 false) #9
  %32 = ashr exact i64 %27, 3
  %33 = call i64 @llvm.umax.i64(i64 %32, i64 1)
  %34 = add i64 %33, -1
  %35 = and i64 %33, 3
  %36 = icmp ult i64 %34, 3
  br i1 %36, label %77, label %37

37:                                               ; preds = %26
  %38 = and i64 %33, -4
  br label %39

39:                                               ; preds = %39, %37
  %40 = phi i64 [ 0, %37 ], [ %74, %39 ]
  %41 = phi double [ 0.000000e+00, %37 ], [ %73, %39 ]
  %42 = phi i64 [ %38, %37 ], [ %75, %39 ]
  %43 = getelementptr inbounds double, double* %28, i64 %40
  %44 = load double, double* %43, align 8, !tbaa !9
  %45 = trunc i64 %40 to i32
  %46 = sitofp i32 %45 to double
  %47 = tail call double @pow(double 0.000000e+00, double %46) #9
  %48 = fmul double %44, %47
  %49 = fadd double %41, %48
  %50 = or i64 %40, 1
  %51 = getelementptr inbounds double, double* %28, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !9
  %53 = trunc i64 %50 to i32
  %54 = sitofp i32 %53 to double
  %55 = tail call double @pow(double 0.000000e+00, double %54) #9
  %56 = fmul double %52, %55
  %57 = fadd double %49, %56
  %58 = or i64 %40, 2
  %59 = getelementptr inbounds double, double* %28, i64 %58
  %60 = load double, double* %59, align 8, !tbaa !9
  %61 = trunc i64 %58 to i32
  %62 = sitofp i32 %61 to double
  %63 = tail call double @pow(double 0.000000e+00, double %62) #9
  %64 = fmul double %60, %63
  %65 = fadd double %57, %64
  %66 = or i64 %40, 3
  %67 = getelementptr inbounds double, double* %28, i64 %66
  %68 = load double, double* %67, align 8, !tbaa !9
  %69 = trunc i64 %66 to i32
  %70 = sitofp i32 %69 to double
  %71 = tail call double @pow(double 0.000000e+00, double %70) #9
  %72 = fmul double %68, %71
  %73 = fadd double %65, %72
  %74 = add nuw nsw i64 %40, 4
  %75 = add i64 %42, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %39, !llvm.loop !11

77:                                               ; preds = %39, %26
  %78 = phi double [ undef, %26 ], [ %73, %39 ]
  %79 = phi i64 [ 0, %26 ], [ %74, %39 ]
  %80 = phi double [ 0.000000e+00, %26 ], [ %73, %39 ]
  %81 = icmp eq i64 %35, 0
  br i1 %81, label %96, label %82

82:                                               ; preds = %77, %82
  %83 = phi i64 [ %93, %82 ], [ %79, %77 ]
  %84 = phi double [ %92, %82 ], [ %80, %77 ]
  %85 = phi i64 [ %94, %82 ], [ %35, %77 ]
  %86 = getelementptr inbounds double, double* %28, i64 %83
  %87 = load double, double* %86, align 8, !tbaa !9
  %88 = trunc i64 %83 to i32
  %89 = sitofp i32 %88 to double
  %90 = tail call double @pow(double 0.000000e+00, double %89) #9
  %91 = fmul double %87, %90
  %92 = fadd double %84, %91
  %93 = add nuw nsw i64 %83, 1
  %94 = add i64 %85, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %82, !llvm.loop !14

96:                                               ; preds = %77, %82, %14
  %97 = phi double* [ %16, %14 ], [ %28, %82 ], [ %28, %77 ]
  %98 = phi double [ 0.000000e+00, %14 ], [ %78, %77 ], [ %92, %82 ]
  %99 = bitcast double* %97 to i8*
  tail call void @_ZdlPv(i8* nonnull %99) #9
  br label %100

100:                                              ; preds = %23, %96
  %101 = phi double [ %98, %96 ], [ 0.000000e+00, %23 ]
  %102 = tail call double @llvm.fabs.f64(double %101) #9
  %103 = fcmp ogt double %102, 0x3EB0C6F7A0B5ED8D
  br i1 %103, label %104, label %241

104:                                              ; preds = %100, %237
  %105 = phi double [ %238, %237 ], [ %101, %100 ]
  %106 = phi double [ %121, %237 ], [ 0.000000e+00, %100 ]
  %107 = load double*, double** %2, align 8, !tbaa !3
  %108 = load double*, double** %4, align 8, !tbaa !8
  %109 = ptrtoint double* %107 to i64
  %110 = ptrtoint double* %108 to i64
  %111 = sub i64 %109, %110
  %112 = ashr exact i64 %111, 3
  %113 = icmp ugt i64 %112, 1
  br i1 %113, label %191, label %114

114:                                              ; preds = %191, %104
  %115 = phi double* [ %107, %104 ], [ %207, %191 ]
  %116 = phi double* [ %108, %104 ], [ %208, %191 ]
  %117 = phi double [ 0.000000e+00, %104 ], [ %205, %191 ]
  %118 = phi i64 [ %111, %104 ], [ %211, %191 ]
  %119 = phi i64 [ %112, %104 ], [ %212, %191 ]
  %120 = fdiv double %105, %117
  %121 = fsub double %106, %120
  %122 = icmp eq i64 %118, 0
  br i1 %122, label %135, label %123

123:                                              ; preds = %114
  %124 = icmp ugt i64 %119, 1152921504606846975
  br i1 %124, label %125, label %126

125:                                              ; preds = %123
  tail call void @_ZSt17__throw_bad_allocv() #10
  unreachable

126:                                              ; preds = %123
  %127 = tail call noalias nonnull i8* @_Znwm(i64 %118) #11
  %128 = bitcast i8* %127 to double*
  %129 = load double*, double** %4, align 8, !tbaa !13
  %130 = load double*, double** %2, align 8, !tbaa !13
  %131 = ptrtoint double* %130 to i64
  %132 = ptrtoint double* %129 to i64
  %133 = sub i64 %131, %132
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %233, label %140

135:                                              ; preds = %114
  %136 = ptrtoint double* %115 to i64
  %137 = ptrtoint double* %116 to i64
  %138 = sub i64 %136, %137
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %237, label %140

140:                                              ; preds = %135, %126
  %141 = phi i64 [ %138, %135 ], [ %133, %126 ]
  %142 = phi double* [ null, %135 ], [ %128, %126 ]
  %143 = phi double* [ %116, %135 ], [ %129, %126 ]
  %144 = bitcast double* %142 to i8*
  %145 = bitcast double* %143 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %145, i64 %141, i1 false) #9
  %146 = ashr exact i64 %141, 3
  %147 = call i64 @llvm.umax.i64(i64 %146, i64 1)
  %148 = add i64 %147, -1
  %149 = and i64 %147, 3
  %150 = icmp ult i64 %148, 3
  br i1 %150, label %214, label %151

151:                                              ; preds = %140
  %152 = and i64 %147, -4
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ 0, %151 ], [ %188, %153 ]
  %155 = phi double [ 0.000000e+00, %151 ], [ %187, %153 ]
  %156 = phi i64 [ %152, %151 ], [ %189, %153 ]
  %157 = getelementptr inbounds double, double* %142, i64 %154
  %158 = load double, double* %157, align 8, !tbaa !9
  %159 = trunc i64 %154 to i32
  %160 = sitofp i32 %159 to double
  %161 = tail call double @pow(double %121, double %160) #9
  %162 = fmul double %158, %161
  %163 = fadd double %155, %162
  %164 = or i64 %154, 1
  %165 = getelementptr inbounds double, double* %142, i64 %164
  %166 = load double, double* %165, align 8, !tbaa !9
  %167 = trunc i64 %164 to i32
  %168 = sitofp i32 %167 to double
  %169 = tail call double @pow(double %121, double %168) #9
  %170 = fmul double %166, %169
  %171 = fadd double %163, %170
  %172 = or i64 %154, 2
  %173 = getelementptr inbounds double, double* %142, i64 %172
  %174 = load double, double* %173, align 8, !tbaa !9
  %175 = trunc i64 %172 to i32
  %176 = sitofp i32 %175 to double
  %177 = tail call double @pow(double %121, double %176) #9
  %178 = fmul double %174, %177
  %179 = fadd double %171, %178
  %180 = or i64 %154, 3
  %181 = getelementptr inbounds double, double* %142, i64 %180
  %182 = load double, double* %181, align 8, !tbaa !9
  %183 = trunc i64 %180 to i32
  %184 = sitofp i32 %183 to double
  %185 = tail call double @pow(double %121, double %184) #9
  %186 = fmul double %182, %185
  %187 = fadd double %179, %186
  %188 = add nuw nsw i64 %154, 4
  %189 = add i64 %156, -4
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %214, label %153, !llvm.loop !11

191:                                              ; preds = %104, %191
  %192 = phi i64 [ %206, %191 ], [ 1, %104 ]
  %193 = phi double* [ %208, %191 ], [ %108, %104 ]
  %194 = phi double [ %205, %191 ], [ 0.000000e+00, %104 ]
  %195 = getelementptr inbounds double, double* %193, i64 %192
  %196 = load double, double* %195, align 8, !tbaa !9
  %197 = trunc i64 %192 to i32
  %198 = add i32 %197, -1
  %199 = sitofp i32 %198 to double
  %200 = tail call double @pow(double %106, double %199) #9
  %201 = fmul double %196, %200
  %202 = trunc i64 %192 to i32
  %203 = sitofp i32 %202 to double
  %204 = fmul double %201, %203
  %205 = fadd double %194, %204
  %206 = add nuw nsw i64 %192, 1
  %207 = load double*, double** %2, align 8, !tbaa !3
  %208 = load double*, double** %4, align 8, !tbaa !8
  %209 = ptrtoint double* %207 to i64
  %210 = ptrtoint double* %208 to i64
  %211 = sub i64 %209, %210
  %212 = ashr exact i64 %211, 3
  %213 = icmp ugt i64 %212, %206
  br i1 %213, label %191, label %114, !llvm.loop !16

214:                                              ; preds = %153, %140
  %215 = phi double [ undef, %140 ], [ %187, %153 ]
  %216 = phi i64 [ 0, %140 ], [ %188, %153 ]
  %217 = phi double [ 0.000000e+00, %140 ], [ %187, %153 ]
  %218 = icmp eq i64 %149, 0
  br i1 %218, label %233, label %219

219:                                              ; preds = %214, %219
  %220 = phi i64 [ %230, %219 ], [ %216, %214 ]
  %221 = phi double [ %229, %219 ], [ %217, %214 ]
  %222 = phi i64 [ %231, %219 ], [ %149, %214 ]
  %223 = getelementptr inbounds double, double* %142, i64 %220
  %224 = load double, double* %223, align 8, !tbaa !9
  %225 = trunc i64 %220 to i32
  %226 = sitofp i32 %225 to double
  %227 = tail call double @pow(double %121, double %226) #9
  %228 = fmul double %224, %227
  %229 = fadd double %221, %228
  %230 = add nuw nsw i64 %220, 1
  %231 = add i64 %222, -1
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %233, label %219, !llvm.loop !17

233:                                              ; preds = %214, %219, %126
  %234 = phi double* [ %128, %126 ], [ %142, %219 ], [ %142, %214 ]
  %235 = phi double [ 0.000000e+00, %126 ], [ %215, %214 ], [ %229, %219 ]
  %236 = bitcast double* %234 to i8*
  tail call void @_ZdlPv(i8* nonnull %236) #9
  br label %237

237:                                              ; preds = %135, %233
  %238 = phi double [ %235, %233 ], [ 0.000000e+00, %135 ]
  %239 = tail call double @llvm.fabs.f64(double %238) #9
  %240 = fcmp ogt double %239, 0x3EB0C6F7A0B5ED8D
  br i1 %240, label %104, label %241, !llvm.loop !18

241:                                              ; preds = %237, %100
  %242 = phi double [ 0.000000e+00, %100 ], [ %121, %237 ]
  ret double %242
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: mustprogress nofree nounwind willreturn
declare dso_local double @pow(double, double) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #3

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #8

attributes #0 = { mustprogress nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }
attributes #10 = { noreturn }
attributes #11 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"double", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!5, !5, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !12}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !12}
