; ModuleID = '../../Human_xBenchmarks_164/CPP_106/CPP_106.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_106/CPP_106.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z1fi(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = icmp slt i32 %1, 1
  %7 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false)
  br i1 %6, label %117, label %8

8:                                                ; preds = %2, %110
  %9 = phi i32* [ %111, %110 ], [ null, %2 ]
  %10 = phi i32* [ %112, %110 ], [ null, %2 ]
  %11 = phi i32* [ %113, %110 ], [ null, %2 ]
  %12 = phi i32* [ %114, %110 ], [ null, %2 ]
  %13 = phi i32 [ %115, %110 ], [ 1, %2 ]
  %14 = phi i32 [ %17, %110 ], [ 1, %2 ]
  %15 = phi i32 [ %16, %110 ], [ 0, %2 ]
  %16 = add nuw nsw i32 %13, %15
  %17 = mul nsw i32 %13, %14
  %18 = and i32 %13, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %70

20:                                               ; preds = %8
  %21 = icmp eq i32* %12, %9
  br i1 %21, label %24, label %22

22:                                               ; preds = %20
  store i32 %17, i32* %12, align 4, !tbaa !3
  %23 = getelementptr inbounds i32, i32* %12, i64 1
  store i32* %23, i32** %3, align 8, !tbaa !7
  br label %110

24:                                               ; preds = %20
  %25 = ptrtoint i32* %9 to i64
  %26 = ptrtoint i32* %10 to i64
  %27 = sub i64 %25, %26
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 9223372036854775804
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %31 unwind label %62

31:                                               ; preds = %30
  unreachable

32:                                               ; preds = %24
  %33 = icmp eq i64 %27, 0
  %34 = select i1 %33, i64 1, i64 %28
  %35 = add nsw i64 %34, %28
  %36 = icmp ult i64 %35, %28
  %37 = icmp ugt i64 %35, 2305843009213693951
  %38 = or i1 %36, %37
  %39 = select i1 %38, i64 2305843009213693951, i64 %35
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %32
  %42 = shl nuw nsw i64 %39, 2
  %43 = invoke noalias nonnull i8* @_Znwm(i64 %42) #7
          to label %44 unwind label %60

44:                                               ; preds = %41
  %45 = bitcast i8* %43 to i32*
  br label %46

46:                                               ; preds = %44, %32
  %47 = phi i32* [ %45, %44 ], [ null, %32 ]
  %48 = getelementptr inbounds i32, i32* %47, i64 %28
  store i32 %17, i32* %48, align 4, !tbaa !3
  %49 = icmp sgt i64 %27, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %46
  %51 = bitcast i32* %47 to i8*
  %52 = bitcast i32* %10 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 %27, i1 false) #8
  br label %53

53:                                               ; preds = %50, %46
  %54 = getelementptr inbounds i32, i32* %48, i64 1
  %55 = icmp eq i32* %10, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* nonnull %57) #8
  br label %58

58:                                               ; preds = %56, %53
  store i32* %47, i32** %5, align 8, !tbaa !10
  store i32* %54, i32** %3, align 8, !tbaa !7
  %59 = getelementptr inbounds i32, i32* %47, i64 %39
  store i32* %59, i32** %4, align 8, !tbaa !11
  br label %110

60:                                               ; preds = %41, %91
  %61 = landingpad { i8*, i32 }
          cleanup
  br label %64

62:                                               ; preds = %30, %80
  %63 = landingpad { i8*, i32 }
          cleanup
  br label %64

64:                                               ; preds = %62, %60
  %65 = phi { i8*, i32 } [ %61, %60 ], [ %63, %62 ]
  %66 = icmp eq i32* %10, null
  br i1 %66, label %69, label %67

67:                                               ; preds = %64
  %68 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* nonnull %68) #8
  br label %69

69:                                               ; preds = %64, %67
  resume { i8*, i32 } %65

70:                                               ; preds = %8
  %71 = icmp eq i32* %12, %11
  br i1 %71, label %74, label %72

72:                                               ; preds = %70
  store i32 %16, i32* %12, align 4, !tbaa !3
  %73 = getelementptr inbounds i32, i32* %12, i64 1
  store i32* %73, i32** %3, align 8, !tbaa !7
  br label %110

74:                                               ; preds = %70
  %75 = ptrtoint i32* %11 to i64
  %76 = ptrtoint i32* %10 to i64
  %77 = sub i64 %75, %76
  %78 = ashr exact i64 %77, 2
  %79 = icmp eq i64 %77, 9223372036854775804
  br i1 %79, label %80, label %82

80:                                               ; preds = %74
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %81 unwind label %62

81:                                               ; preds = %80
  unreachable

82:                                               ; preds = %74
  %83 = icmp eq i64 %77, 0
  %84 = select i1 %83, i64 1, i64 %78
  %85 = add nsw i64 %84, %78
  %86 = icmp ult i64 %85, %78
  %87 = icmp ugt i64 %85, 2305843009213693951
  %88 = or i1 %86, %87
  %89 = select i1 %88, i64 2305843009213693951, i64 %85
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %82
  %92 = shl nuw nsw i64 %89, 2
  %93 = invoke noalias nonnull i8* @_Znwm(i64 %92) #7
          to label %94 unwind label %60

94:                                               ; preds = %91
  %95 = bitcast i8* %93 to i32*
  br label %96

96:                                               ; preds = %94, %82
  %97 = phi i32* [ %95, %94 ], [ null, %82 ]
  %98 = getelementptr inbounds i32, i32* %97, i64 %78
  store i32 %16, i32* %98, align 4, !tbaa !3
  %99 = icmp sgt i64 %77, 0
  br i1 %99, label %100, label %103

100:                                              ; preds = %96
  %101 = bitcast i32* %97 to i8*
  %102 = bitcast i32* %10 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %102, i64 %77, i1 false) #8
  br label %103

103:                                              ; preds = %100, %96
  %104 = getelementptr inbounds i32, i32* %98, i64 1
  %105 = icmp eq i32* %10, null
  br i1 %105, label %108, label %106

106:                                              ; preds = %103
  %107 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* nonnull %107) #8
  br label %108

108:                                              ; preds = %106, %103
  store i32* %97, i32** %5, align 8, !tbaa !10
  store i32* %104, i32** %3, align 8, !tbaa !7
  %109 = getelementptr inbounds i32, i32* %97, i64 %89
  store i32* %109, i32** %4, align 8, !tbaa !11
  br label %110

110:                                              ; preds = %108, %72, %58, %22
  %111 = phi i32* [ %109, %108 ], [ %9, %72 ], [ %59, %58 ], [ %9, %22 ]
  %112 = phi i32* [ %97, %108 ], [ %10, %72 ], [ %47, %58 ], [ %10, %22 ]
  %113 = phi i32* [ %109, %108 ], [ %11, %72 ], [ %59, %58 ], [ %9, %22 ]
  %114 = phi i32* [ %104, %108 ], [ %73, %72 ], [ %54, %58 ], [ %23, %22 ]
  %115 = add nuw i32 %13, 1
  %116 = icmp eq i32 %13, %1
  br i1 %116, label %117, label %8, !llvm.loop !12

117:                                              ; preds = %110, %2
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { noreturn }
attributes #7 = { allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !9, i64 8}
!8 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !9, i64 0, !9, i64 8, !9, i64 16}
!9 = !{!"any pointer", !5, i64 0}
!10 = !{!8, !9, i64 0}
!11 = !{!8, !9, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
