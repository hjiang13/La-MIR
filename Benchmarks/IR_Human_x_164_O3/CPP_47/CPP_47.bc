; ModuleID = '../../Human_xBenchmarks_164/CPP_47/CPP_47.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_47/CPP_47.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }
%"struct.__gnu_cxx::__ops::_Iter_less_iter" = type { i8 }

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_ = comdat any

; Function Attrs: uwtable
define dso_local float @_Z6medianSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load float*, float** %4, align 8, !tbaa !3
  %6 = icmp eq float* %3, %5
  br i1 %6, label %17, label %7

7:                                                ; preds = %1
  %8 = ptrtoint float* %5 to i64
  %9 = ptrtoint float* %3 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = tail call i64 @llvm.ctlz.i64(i64 %11, i1 true) #4, !range !7
  %13 = shl nuw nsw i64 %12, 1
  %14 = xor i64 %13, 126
  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %3, float* %5, i64 %14)
  tail call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %3, float* %5)
  %15 = load float*, float** %4, align 8, !tbaa !8
  %16 = load float*, float** %2, align 8, !tbaa !10
  br label %17

17:                                               ; preds = %1, %7
  %18 = phi float* [ %3, %1 ], [ %16, %7 ]
  %19 = phi float* [ %3, %1 ], [ %15, %7 ]
  %20 = ptrtoint float* %19 to i64
  %21 = ptrtoint float* %18 to i64
  %22 = sub i64 %20, %21
  %23 = ashr exact i64 %22, 2
  %24 = and i64 %22, 4
  %25 = icmp eq i64 %24, 0
  %26 = lshr i64 %23, 1
  %27 = getelementptr inbounds float, float* %18, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !11
  br i1 %25, label %29, label %35

29:                                               ; preds = %17
  %30 = add nsw i64 %26, -1
  %31 = getelementptr inbounds float, float* %18, i64 %30
  %32 = load float, float* %31, align 4, !tbaa !11
  %33 = fadd float %28, %32
  %34 = fmul float %33, 5.000000e-01
  br label %35

35:                                               ; preds = %17, %29
  %36 = phi float [ %34, %29 ], [ %28, %17 ]
  ret float %36
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %0, float* %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.__gnu_cxx::__ops::_Iter_less_iter", align 1
  %5 = ptrtoint float* %0 to i64
  %6 = getelementptr inbounds float, float* %0, i64 1
  %7 = ptrtoint float* %1 to i64
  %8 = sub i64 %7, %5
  %9 = icmp sgt i64 %8, 64
  br i1 %9, label %10, label %123

10:                                               ; preds = %3, %119
  %11 = phi i64 [ %121, %119 ], [ %8, %3 ]
  %12 = phi i64 [ %76, %119 ], [ %2, %3 ]
  %13 = phi float* [ %107, %119 ], [ %1, %3 ]
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %15, label %74

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"struct.__gnu_cxx::__ops::_Iter_less_iter", %"struct.__gnu_cxx::__ops::_Iter_less_iter"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16)
  call void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(float* %0, float* %13, %"struct.__gnu_cxx::__ops::_Iter_less_iter"* nonnull align 1 dereferenceable(1) %4)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16)
  br label %17

17:                                               ; preds = %15, %70
  %18 = phi float* [ %19, %70 ], [ %13, %15 ]
  %19 = getelementptr inbounds float, float* %18, i64 -1
  %20 = load float, float* %19, align 4, !tbaa !11
  %21 = load float, float* %0, align 4, !tbaa !11
  store float %21, float* %19, align 4, !tbaa !11
  %22 = ptrtoint float* %19 to i64
  %23 = sub i64 %22, %5
  %24 = ashr exact i64 %23, 2
  %25 = add nsw i64 %24, -1
  %26 = sdiv i64 %25, 2
  %27 = icmp sgt i64 %23, 8
  br i1 %27, label %28, label %43

28:                                               ; preds = %17, %28
  %29 = phi i64 [ %38, %28 ], [ 0, %17 ]
  %30 = shl i64 %29, 1
  %31 = add i64 %30, 2
  %32 = getelementptr inbounds float, float* %0, i64 %31
  %33 = or i64 %30, 1
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = load float, float* %32, align 4, !tbaa !11
  %36 = load float, float* %34, align 4, !tbaa !11
  %37 = fcmp olt float %35, %36
  %38 = select i1 %37, i64 %33, i64 %31
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = load float, float* %39, align 4, !tbaa !11
  %41 = getelementptr inbounds float, float* %0, i64 %29
  store float %40, float* %41, align 4, !tbaa !11
  %42 = icmp slt i64 %38, %26
  br i1 %42, label %28, label %43, !llvm.loop !13

43:                                               ; preds = %28, %17
  %44 = phi i64 [ 0, %17 ], [ %38, %28 ]
  %45 = and i64 %23, 4
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %57

47:                                               ; preds = %43
  %48 = add nsw i64 %24, -2
  %49 = sdiv i64 %48, 2
  %50 = icmp eq i64 %44, %49
  br i1 %50, label %51, label %57

51:                                               ; preds = %47
  %52 = shl i64 %44, 1
  %53 = or i64 %52, 1
  %54 = getelementptr inbounds float, float* %0, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !11
  %56 = getelementptr inbounds float, float* %0, i64 %44
  store float %55, float* %56, align 4, !tbaa !11
  br label %57

57:                                               ; preds = %51, %47, %43
  %58 = phi i64 [ %53, %51 ], [ %44, %47 ], [ %44, %43 ]
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %70

60:                                               ; preds = %57, %67
  %61 = phi i64 [ %63, %67 ], [ %58, %57 ]
  %62 = add nsw i64 %61, -1
  %63 = lshr i64 %62, 1
  %64 = getelementptr inbounds float, float* %0, i64 %63
  %65 = load float, float* %64, align 4, !tbaa !11
  %66 = fcmp olt float %65, %20
  br i1 %66, label %67, label %70

67:                                               ; preds = %60
  %68 = getelementptr inbounds float, float* %0, i64 %61
  store float %65, float* %68, align 4, !tbaa !11
  %69 = icmp ult i64 %62, 2
  br i1 %69, label %70, label %60, !llvm.loop !15

70:                                               ; preds = %67, %60, %57
  %71 = phi i64 [ %58, %57 ], [ %61, %60 ], [ 0, %67 ]
  %72 = getelementptr inbounds float, float* %0, i64 %71
  store float %20, float* %72, align 4, !tbaa !11
  %73 = icmp sgt i64 %23, 4
  br i1 %73, label %17, label %123, !llvm.loop !16

74:                                               ; preds = %10
  %75 = lshr i64 %11, 3
  %76 = add nsw i64 %12, -1
  %77 = getelementptr inbounds float, float* %0, i64 %75
  %78 = getelementptr inbounds float, float* %13, i64 -1
  %79 = load float, float* %6, align 4, !tbaa !11
  %80 = load float, float* %77, align 4, !tbaa !11
  %81 = fcmp olt float %79, %80
  %82 = load float, float* %78, align 4, !tbaa !11
  br i1 %81, label %83, label %92

83:                                               ; preds = %74
  %84 = fcmp olt float %80, %82
  br i1 %84, label %85, label %87

85:                                               ; preds = %83
  %86 = load float, float* %0, align 4, !tbaa !11
  store float %80, float* %0, align 4, !tbaa !11
  store float %86, float* %77, align 4, !tbaa !11
  br label %101

87:                                               ; preds = %83
  %88 = fcmp olt float %79, %82
  %89 = load float, float* %0, align 4, !tbaa !11
  br i1 %88, label %90, label %91

90:                                               ; preds = %87
  store float %82, float* %0, align 4, !tbaa !11
  store float %89, float* %78, align 4, !tbaa !11
  br label %101

91:                                               ; preds = %87
  store float %79, float* %0, align 4, !tbaa !11
  store float %89, float* %6, align 4, !tbaa !11
  br label %101

92:                                               ; preds = %74
  %93 = fcmp olt float %79, %82
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = load float, float* %0, align 4, !tbaa !11
  store float %79, float* %0, align 4, !tbaa !11
  store float %95, float* %6, align 4, !tbaa !11
  br label %101

96:                                               ; preds = %92
  %97 = fcmp olt float %80, %82
  %98 = load float, float* %0, align 4, !tbaa !11
  br i1 %97, label %99, label %100

99:                                               ; preds = %96
  store float %82, float* %0, align 4, !tbaa !11
  store float %98, float* %78, align 4, !tbaa !11
  br label %101

100:                                              ; preds = %96
  store float %80, float* %0, align 4, !tbaa !11
  store float %98, float* %77, align 4, !tbaa !11
  br label %101

101:                                              ; preds = %100, %99, %94, %91, %90, %85
  br label %102

102:                                              ; preds = %101, %118
  %103 = phi float* [ %110, %118 ], [ %6, %101 ]
  %104 = phi float* [ %113, %118 ], [ %13, %101 ]
  %105 = load float, float* %0, align 4, !tbaa !11
  br label %106

106:                                              ; preds = %106, %102
  %107 = phi float* [ %103, %102 ], [ %110, %106 ]
  %108 = load float, float* %107, align 4, !tbaa !11
  %109 = fcmp olt float %108, %105
  %110 = getelementptr inbounds float, float* %107, i64 1
  br i1 %109, label %106, label %111, !llvm.loop !17

111:                                              ; preds = %106, %111
  %112 = phi float* [ %113, %111 ], [ %104, %106 ]
  %113 = getelementptr inbounds float, float* %112, i64 -1
  %114 = load float, float* %113, align 4, !tbaa !11
  %115 = fcmp olt float %105, %114
  br i1 %115, label %111, label %116, !llvm.loop !18

116:                                              ; preds = %111
  %117 = icmp ult float* %107, %113
  br i1 %117, label %118, label %119

118:                                              ; preds = %116
  store float %114, float* %107, align 4, !tbaa !11
  store float %108, float* %113, align 4, !tbaa !11
  br label %102, !llvm.loop !19

119:                                              ; preds = %116
  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* nonnull %107, float* %13, i64 %76)
  %120 = ptrtoint float* %107 to i64
  %121 = sub i64 %120, %5
  %122 = icmp sgt i64 %121, 64
  br i1 %122, label %10, label %123, !llvm.loop !20

123:                                              ; preds = %119, %70, %3
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %0, float* %1) local_unnamed_addr #0 comdat {
  %3 = ptrtoint float* %1 to i64
  %4 = ptrtoint float* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp sgt i64 %5, 64
  br i1 %6, label %7, label %40

7:                                                ; preds = %2
  %8 = bitcast float* %0 to i8*
  %9 = getelementptr float, float* %0, i64 1
  %10 = load float, float* %9, align 4, !tbaa !11
  %11 = load float, float* %0, align 4, !tbaa !11
  %12 = fcmp olt float %10, %11
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = bitcast float* %0 to i32*
  %15 = bitcast float* %9 to i32*
  %16 = load i32, i32* %14, align 4
  store i32 %16, i32* %15, align 4
  br label %17

17:                                               ; preds = %7, %13
  %18 = phi float* [ %0, %13 ], [ %9, %7 ]
  store float %10, float* %18, align 4, !tbaa !11
  %19 = getelementptr inbounds float, float* %0, i64 2
  %20 = load float, float* %19, align 4, !tbaa !11
  %21 = load float, float* %0, align 4, !tbaa !11
  %22 = fcmp olt float %20, %21
  br i1 %22, label %86, label %76

23:                                               ; preds = %324, %36
  %24 = phi float* [ %38, %36 ], [ %326, %324 ]
  %25 = load float, float* %24, align 4, !tbaa !11
  %26 = getelementptr inbounds float, float* %24, i64 -1
  %27 = load float, float* %26, align 4, !tbaa !11
  %28 = fcmp olt float %25, %27
  br i1 %28, label %29, label %36

29:                                               ; preds = %23, %29
  %30 = phi float [ %34, %29 ], [ %27, %23 ]
  %31 = phi float* [ %33, %29 ], [ %26, %23 ]
  %32 = phi float* [ %31, %29 ], [ %24, %23 ]
  store float %30, float* %32, align 4, !tbaa !11
  %33 = getelementptr inbounds float, float* %31, i64 -1
  %34 = load float, float* %33, align 4, !tbaa !11
  %35 = fcmp olt float %25, %34
  br i1 %35, label %29, label %36, !llvm.loop !21

36:                                               ; preds = %29, %23
  %37 = phi float* [ %24, %23 ], [ %31, %29 ]
  store float %25, float* %37, align 4, !tbaa !11
  %38 = getelementptr inbounds float, float* %24, i64 1
  %39 = icmp eq float* %38, %1
  br i1 %39, label %75, label %23, !llvm.loop !22

40:                                               ; preds = %2
  %41 = icmp eq float* %0, %1
  br i1 %41, label %75, label %42

42:                                               ; preds = %40
  %43 = bitcast float* %0 to i8*
  %44 = getelementptr inbounds float, float* %0, i64 1
  %45 = icmp eq float* %44, %1
  br i1 %45, label %75, label %46

46:                                               ; preds = %42, %71
  %47 = phi float* [ %73, %71 ], [ %44, %42 ]
  %48 = phi float* [ %47, %71 ], [ %0, %42 ]
  %49 = load float, float* %47, align 4, !tbaa !11
  %50 = load float, float* %0, align 4, !tbaa !11
  %51 = fcmp olt float %49, %50
  br i1 %51, label %52, label %61

52:                                               ; preds = %46
  %53 = ptrtoint float* %47 to i64
  %54 = sub i64 %53, %4
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %71, label %56

56:                                               ; preds = %52
  %57 = ashr exact i64 %54, 2
  %58 = sub nsw i64 2, %57
  %59 = getelementptr inbounds float, float* %48, i64 %58
  %60 = bitcast float* %59 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* nonnull align 4 %43, i64 %54, i1 false) #4
  br label %71

61:                                               ; preds = %46
  %62 = load float, float* %48, align 4, !tbaa !11
  %63 = fcmp olt float %49, %62
  br i1 %63, label %64, label %71

64:                                               ; preds = %61, %64
  %65 = phi float [ %69, %64 ], [ %62, %61 ]
  %66 = phi float* [ %68, %64 ], [ %48, %61 ]
  %67 = phi float* [ %66, %64 ], [ %47, %61 ]
  store float %65, float* %67, align 4, !tbaa !11
  %68 = getelementptr inbounds float, float* %66, i64 -1
  %69 = load float, float* %68, align 4, !tbaa !11
  %70 = fcmp olt float %49, %69
  br i1 %70, label %64, label %71, !llvm.loop !21

71:                                               ; preds = %64, %61, %56, %52
  %72 = phi float* [ %0, %52 ], [ %0, %56 ], [ %47, %61 ], [ %66, %64 ]
  store float %49, float* %72, align 4, !tbaa !11
  %73 = getelementptr inbounds float, float* %47, i64 1
  %74 = icmp eq float* %73, %1
  br i1 %74, label %75, label %46, !llvm.loop !23

75:                                               ; preds = %71, %36, %42, %40, %324
  ret void

76:                                               ; preds = %17
  %77 = load float, float* %9, align 4, !tbaa !11
  %78 = fcmp olt float %20, %77
  br i1 %78, label %79, label %90

79:                                               ; preds = %76, %79
  %80 = phi float [ %84, %79 ], [ %77, %76 ]
  %81 = phi float* [ %83, %79 ], [ %9, %76 ]
  %82 = phi float* [ %81, %79 ], [ %19, %76 ]
  store float %80, float* %82, align 4, !tbaa !11
  %83 = getelementptr inbounds float, float* %81, i64 -1
  %84 = load float, float* %83, align 4, !tbaa !11
  %85 = fcmp olt float %20, %84
  br i1 %85, label %79, label %90, !llvm.loop !21

86:                                               ; preds = %17
  %87 = bitcast float* %0 to i64*
  %88 = bitcast float* %9 to i64*
  %89 = load i64, i64* %87, align 4
  store i64 %89, i64* %88, align 4
  br label %90

90:                                               ; preds = %79, %86, %76
  %91 = phi float* [ %0, %86 ], [ %19, %76 ], [ %81, %79 ]
  store float %20, float* %91, align 4, !tbaa !11
  %92 = getelementptr inbounds float, float* %0, i64 3
  %93 = load float, float* %92, align 4, !tbaa !11
  %94 = load float, float* %0, align 4, !tbaa !11
  %95 = fcmp olt float %93, %94
  br i1 %95, label %106, label %96

96:                                               ; preds = %90
  %97 = load float, float* %19, align 4, !tbaa !11
  %98 = fcmp olt float %93, %97
  br i1 %98, label %99, label %108

99:                                               ; preds = %96, %99
  %100 = phi float [ %104, %99 ], [ %97, %96 ]
  %101 = phi float* [ %103, %99 ], [ %19, %96 ]
  %102 = phi float* [ %101, %99 ], [ %92, %96 ]
  store float %100, float* %102, align 4, !tbaa !11
  %103 = getelementptr inbounds float, float* %101, i64 -1
  %104 = load float, float* %103, align 4, !tbaa !11
  %105 = fcmp olt float %93, %104
  br i1 %105, label %99, label %108, !llvm.loop !21

106:                                              ; preds = %90
  %107 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(12) %107, i8* noundef nonnull align 4 dereferenceable(12) %8, i64 12, i1 false) #4
  br label %108

108:                                              ; preds = %99, %106, %96
  %109 = phi float* [ %0, %106 ], [ %92, %96 ], [ %101, %99 ]
  store float %93, float* %109, align 4, !tbaa !11
  %110 = getelementptr inbounds float, float* %0, i64 4
  %111 = load float, float* %110, align 4, !tbaa !11
  %112 = load float, float* %0, align 4, !tbaa !11
  %113 = fcmp olt float %111, %112
  br i1 %113, label %124, label %114

114:                                              ; preds = %108
  %115 = load float, float* %92, align 4, !tbaa !11
  %116 = fcmp olt float %111, %115
  br i1 %116, label %117, label %126

117:                                              ; preds = %114, %117
  %118 = phi float [ %122, %117 ], [ %115, %114 ]
  %119 = phi float* [ %121, %117 ], [ %92, %114 ]
  %120 = phi float* [ %119, %117 ], [ %110, %114 ]
  store float %118, float* %120, align 4, !tbaa !11
  %121 = getelementptr inbounds float, float* %119, i64 -1
  %122 = load float, float* %121, align 4, !tbaa !11
  %123 = fcmp olt float %111, %122
  br i1 %123, label %117, label %126, !llvm.loop !21

124:                                              ; preds = %108
  %125 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(16) %125, i8* noundef nonnull align 4 dereferenceable(16) %8, i64 16, i1 false) #4
  br label %126

126:                                              ; preds = %117, %124, %114
  %127 = phi float* [ %0, %124 ], [ %110, %114 ], [ %119, %117 ]
  store float %111, float* %127, align 4, !tbaa !11
  %128 = getelementptr inbounds float, float* %0, i64 5
  %129 = load float, float* %128, align 4, !tbaa !11
  %130 = load float, float* %0, align 4, !tbaa !11
  %131 = fcmp olt float %129, %130
  br i1 %131, label %142, label %132

132:                                              ; preds = %126
  %133 = load float, float* %110, align 4, !tbaa !11
  %134 = fcmp olt float %129, %133
  br i1 %134, label %135, label %144

135:                                              ; preds = %132, %135
  %136 = phi float [ %140, %135 ], [ %133, %132 ]
  %137 = phi float* [ %139, %135 ], [ %110, %132 ]
  %138 = phi float* [ %137, %135 ], [ %128, %132 ]
  store float %136, float* %138, align 4, !tbaa !11
  %139 = getelementptr inbounds float, float* %137, i64 -1
  %140 = load float, float* %139, align 4, !tbaa !11
  %141 = fcmp olt float %129, %140
  br i1 %141, label %135, label %144, !llvm.loop !21

142:                                              ; preds = %126
  %143 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(20) %143, i8* noundef nonnull align 4 dereferenceable(20) %8, i64 20, i1 false) #4
  br label %144

144:                                              ; preds = %135, %142, %132
  %145 = phi float* [ %0, %142 ], [ %128, %132 ], [ %137, %135 ]
  store float %129, float* %145, align 4, !tbaa !11
  %146 = getelementptr inbounds float, float* %0, i64 6
  %147 = load float, float* %146, align 4, !tbaa !11
  %148 = load float, float* %0, align 4, !tbaa !11
  %149 = fcmp olt float %147, %148
  br i1 %149, label %160, label %150

150:                                              ; preds = %144
  %151 = load float, float* %128, align 4, !tbaa !11
  %152 = fcmp olt float %147, %151
  br i1 %152, label %153, label %162

153:                                              ; preds = %150, %153
  %154 = phi float [ %158, %153 ], [ %151, %150 ]
  %155 = phi float* [ %157, %153 ], [ %128, %150 ]
  %156 = phi float* [ %155, %153 ], [ %146, %150 ]
  store float %154, float* %156, align 4, !tbaa !11
  %157 = getelementptr inbounds float, float* %155, i64 -1
  %158 = load float, float* %157, align 4, !tbaa !11
  %159 = fcmp olt float %147, %158
  br i1 %159, label %153, label %162, !llvm.loop !21

160:                                              ; preds = %144
  %161 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(24) %161, i8* noundef nonnull align 4 dereferenceable(24) %8, i64 24, i1 false) #4
  br label %162

162:                                              ; preds = %153, %160, %150
  %163 = phi float* [ %0, %160 ], [ %146, %150 ], [ %155, %153 ]
  store float %147, float* %163, align 4, !tbaa !11
  %164 = getelementptr inbounds float, float* %0, i64 7
  %165 = load float, float* %164, align 4, !tbaa !11
  %166 = load float, float* %0, align 4, !tbaa !11
  %167 = fcmp olt float %165, %166
  br i1 %167, label %178, label %168

168:                                              ; preds = %162
  %169 = load float, float* %146, align 4, !tbaa !11
  %170 = fcmp olt float %165, %169
  br i1 %170, label %171, label %180

171:                                              ; preds = %168, %171
  %172 = phi float [ %176, %171 ], [ %169, %168 ]
  %173 = phi float* [ %175, %171 ], [ %146, %168 ]
  %174 = phi float* [ %173, %171 ], [ %164, %168 ]
  store float %172, float* %174, align 4, !tbaa !11
  %175 = getelementptr inbounds float, float* %173, i64 -1
  %176 = load float, float* %175, align 4, !tbaa !11
  %177 = fcmp olt float %165, %176
  br i1 %177, label %171, label %180, !llvm.loop !21

178:                                              ; preds = %162
  %179 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(28) %179, i8* noundef nonnull align 4 dereferenceable(28) %8, i64 28, i1 false) #4
  br label %180

180:                                              ; preds = %171, %178, %168
  %181 = phi float* [ %0, %178 ], [ %164, %168 ], [ %173, %171 ]
  store float %165, float* %181, align 4, !tbaa !11
  %182 = getelementptr inbounds float, float* %0, i64 8
  %183 = load float, float* %182, align 4, !tbaa !11
  %184 = load float, float* %0, align 4, !tbaa !11
  %185 = fcmp olt float %183, %184
  br i1 %185, label %196, label %186

186:                                              ; preds = %180
  %187 = load float, float* %164, align 4, !tbaa !11
  %188 = fcmp olt float %183, %187
  br i1 %188, label %189, label %198

189:                                              ; preds = %186, %189
  %190 = phi float [ %194, %189 ], [ %187, %186 ]
  %191 = phi float* [ %193, %189 ], [ %164, %186 ]
  %192 = phi float* [ %191, %189 ], [ %182, %186 ]
  store float %190, float* %192, align 4, !tbaa !11
  %193 = getelementptr inbounds float, float* %191, i64 -1
  %194 = load float, float* %193, align 4, !tbaa !11
  %195 = fcmp olt float %183, %194
  br i1 %195, label %189, label %198, !llvm.loop !21

196:                                              ; preds = %180
  %197 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(32) %197, i8* noundef nonnull align 4 dereferenceable(32) %8, i64 32, i1 false) #4
  br label %198

198:                                              ; preds = %189, %196, %186
  %199 = phi float* [ %0, %196 ], [ %182, %186 ], [ %191, %189 ]
  store float %183, float* %199, align 4, !tbaa !11
  %200 = getelementptr inbounds float, float* %0, i64 9
  %201 = load float, float* %200, align 4, !tbaa !11
  %202 = load float, float* %0, align 4, !tbaa !11
  %203 = fcmp olt float %201, %202
  br i1 %203, label %214, label %204

204:                                              ; preds = %198
  %205 = load float, float* %182, align 4, !tbaa !11
  %206 = fcmp olt float %201, %205
  br i1 %206, label %207, label %216

207:                                              ; preds = %204, %207
  %208 = phi float [ %212, %207 ], [ %205, %204 ]
  %209 = phi float* [ %211, %207 ], [ %182, %204 ]
  %210 = phi float* [ %209, %207 ], [ %200, %204 ]
  store float %208, float* %210, align 4, !tbaa !11
  %211 = getelementptr inbounds float, float* %209, i64 -1
  %212 = load float, float* %211, align 4, !tbaa !11
  %213 = fcmp olt float %201, %212
  br i1 %213, label %207, label %216, !llvm.loop !21

214:                                              ; preds = %198
  %215 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(36) %215, i8* noundef nonnull align 4 dereferenceable(36) %8, i64 36, i1 false) #4
  br label %216

216:                                              ; preds = %207, %214, %204
  %217 = phi float* [ %0, %214 ], [ %200, %204 ], [ %209, %207 ]
  store float %201, float* %217, align 4, !tbaa !11
  %218 = getelementptr inbounds float, float* %0, i64 10
  %219 = load float, float* %218, align 4, !tbaa !11
  %220 = load float, float* %0, align 4, !tbaa !11
  %221 = fcmp olt float %219, %220
  br i1 %221, label %232, label %222

222:                                              ; preds = %216
  %223 = load float, float* %200, align 4, !tbaa !11
  %224 = fcmp olt float %219, %223
  br i1 %224, label %225, label %234

225:                                              ; preds = %222, %225
  %226 = phi float [ %230, %225 ], [ %223, %222 ]
  %227 = phi float* [ %229, %225 ], [ %200, %222 ]
  %228 = phi float* [ %227, %225 ], [ %218, %222 ]
  store float %226, float* %228, align 4, !tbaa !11
  %229 = getelementptr inbounds float, float* %227, i64 -1
  %230 = load float, float* %229, align 4, !tbaa !11
  %231 = fcmp olt float %219, %230
  br i1 %231, label %225, label %234, !llvm.loop !21

232:                                              ; preds = %216
  %233 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(40) %233, i8* noundef nonnull align 4 dereferenceable(40) %8, i64 40, i1 false) #4
  br label %234

234:                                              ; preds = %225, %232, %222
  %235 = phi float* [ %0, %232 ], [ %218, %222 ], [ %227, %225 ]
  store float %219, float* %235, align 4, !tbaa !11
  %236 = getelementptr inbounds float, float* %0, i64 11
  %237 = load float, float* %236, align 4, !tbaa !11
  %238 = load float, float* %0, align 4, !tbaa !11
  %239 = fcmp olt float %237, %238
  br i1 %239, label %250, label %240

240:                                              ; preds = %234
  %241 = load float, float* %218, align 4, !tbaa !11
  %242 = fcmp olt float %237, %241
  br i1 %242, label %243, label %252

243:                                              ; preds = %240, %243
  %244 = phi float [ %248, %243 ], [ %241, %240 ]
  %245 = phi float* [ %247, %243 ], [ %218, %240 ]
  %246 = phi float* [ %245, %243 ], [ %236, %240 ]
  store float %244, float* %246, align 4, !tbaa !11
  %247 = getelementptr inbounds float, float* %245, i64 -1
  %248 = load float, float* %247, align 4, !tbaa !11
  %249 = fcmp olt float %237, %248
  br i1 %249, label %243, label %252, !llvm.loop !21

250:                                              ; preds = %234
  %251 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(44) %251, i8* noundef nonnull align 4 dereferenceable(44) %8, i64 44, i1 false) #4
  br label %252

252:                                              ; preds = %243, %250, %240
  %253 = phi float* [ %0, %250 ], [ %236, %240 ], [ %245, %243 ]
  store float %237, float* %253, align 4, !tbaa !11
  %254 = getelementptr inbounds float, float* %0, i64 12
  %255 = load float, float* %254, align 4, !tbaa !11
  %256 = load float, float* %0, align 4, !tbaa !11
  %257 = fcmp olt float %255, %256
  br i1 %257, label %268, label %258

258:                                              ; preds = %252
  %259 = load float, float* %236, align 4, !tbaa !11
  %260 = fcmp olt float %255, %259
  br i1 %260, label %261, label %270

261:                                              ; preds = %258, %261
  %262 = phi float [ %266, %261 ], [ %259, %258 ]
  %263 = phi float* [ %265, %261 ], [ %236, %258 ]
  %264 = phi float* [ %263, %261 ], [ %254, %258 ]
  store float %262, float* %264, align 4, !tbaa !11
  %265 = getelementptr inbounds float, float* %263, i64 -1
  %266 = load float, float* %265, align 4, !tbaa !11
  %267 = fcmp olt float %255, %266
  br i1 %267, label %261, label %270, !llvm.loop !21

268:                                              ; preds = %252
  %269 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(48) %269, i8* noundef nonnull align 4 dereferenceable(48) %8, i64 48, i1 false) #4
  br label %270

270:                                              ; preds = %261, %268, %258
  %271 = phi float* [ %0, %268 ], [ %254, %258 ], [ %263, %261 ]
  store float %255, float* %271, align 4, !tbaa !11
  %272 = getelementptr inbounds float, float* %0, i64 13
  %273 = load float, float* %272, align 4, !tbaa !11
  %274 = load float, float* %0, align 4, !tbaa !11
  %275 = fcmp olt float %273, %274
  br i1 %275, label %286, label %276

276:                                              ; preds = %270
  %277 = load float, float* %254, align 4, !tbaa !11
  %278 = fcmp olt float %273, %277
  br i1 %278, label %279, label %288

279:                                              ; preds = %276, %279
  %280 = phi float [ %284, %279 ], [ %277, %276 ]
  %281 = phi float* [ %283, %279 ], [ %254, %276 ]
  %282 = phi float* [ %281, %279 ], [ %272, %276 ]
  store float %280, float* %282, align 4, !tbaa !11
  %283 = getelementptr inbounds float, float* %281, i64 -1
  %284 = load float, float* %283, align 4, !tbaa !11
  %285 = fcmp olt float %273, %284
  br i1 %285, label %279, label %288, !llvm.loop !21

286:                                              ; preds = %270
  %287 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(52) %287, i8* noundef nonnull align 4 dereferenceable(52) %8, i64 52, i1 false) #4
  br label %288

288:                                              ; preds = %279, %286, %276
  %289 = phi float* [ %0, %286 ], [ %272, %276 ], [ %281, %279 ]
  store float %273, float* %289, align 4, !tbaa !11
  %290 = getelementptr inbounds float, float* %0, i64 14
  %291 = load float, float* %290, align 4, !tbaa !11
  %292 = load float, float* %0, align 4, !tbaa !11
  %293 = fcmp olt float %291, %292
  br i1 %293, label %304, label %294

294:                                              ; preds = %288
  %295 = load float, float* %272, align 4, !tbaa !11
  %296 = fcmp olt float %291, %295
  br i1 %296, label %297, label %306

297:                                              ; preds = %294, %297
  %298 = phi float [ %302, %297 ], [ %295, %294 ]
  %299 = phi float* [ %301, %297 ], [ %272, %294 ]
  %300 = phi float* [ %299, %297 ], [ %290, %294 ]
  store float %298, float* %300, align 4, !tbaa !11
  %301 = getelementptr inbounds float, float* %299, i64 -1
  %302 = load float, float* %301, align 4, !tbaa !11
  %303 = fcmp olt float %291, %302
  br i1 %303, label %297, label %306, !llvm.loop !21

304:                                              ; preds = %288
  %305 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(56) %305, i8* noundef nonnull align 4 dereferenceable(56) %8, i64 56, i1 false) #4
  br label %306

306:                                              ; preds = %297, %304, %294
  %307 = phi float* [ %0, %304 ], [ %290, %294 ], [ %299, %297 ]
  store float %291, float* %307, align 4, !tbaa !11
  %308 = getelementptr inbounds float, float* %0, i64 15
  %309 = load float, float* %308, align 4, !tbaa !11
  %310 = load float, float* %0, align 4, !tbaa !11
  %311 = fcmp olt float %309, %310
  br i1 %311, label %322, label %312

312:                                              ; preds = %306
  %313 = load float, float* %290, align 4, !tbaa !11
  %314 = fcmp olt float %309, %313
  br i1 %314, label %315, label %324

315:                                              ; preds = %312, %315
  %316 = phi float [ %320, %315 ], [ %313, %312 ]
  %317 = phi float* [ %319, %315 ], [ %290, %312 ]
  %318 = phi float* [ %317, %315 ], [ %308, %312 ]
  store float %316, float* %318, align 4, !tbaa !11
  %319 = getelementptr inbounds float, float* %317, i64 -1
  %320 = load float, float* %319, align 4, !tbaa !11
  %321 = fcmp olt float %309, %320
  br i1 %321, label %315, label %324, !llvm.loop !21

322:                                              ; preds = %306
  %323 = bitcast float* %9 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* noundef nonnull align 4 dereferenceable(60) %323, i8* noundef nonnull align 4 dereferenceable(60) %8, i64 60, i1 false) #4
  br label %324

324:                                              ; preds = %315, %322, %312
  %325 = phi float* [ %0, %322 ], [ %308, %312 ], [ %317, %315 ]
  store float %309, float* %325, align 4, !tbaa !11
  %326 = getelementptr inbounds float, float* %0, i64 16
  %327 = icmp eq float* %326, %1
  br i1 %327, label %75, label %23
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_(float* %0, float* %1, %"struct.__gnu_cxx::__ops::_Iter_less_iter"* nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {
  %4 = ptrtoint float* %1 to i64
  %5 = ptrtoint float* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = icmp slt i64 %6, 8
  br i1 %8, label %100, label %9

9:                                                ; preds = %3
  %10 = add nsw i64 %7, -2
  %11 = lshr i64 %10, 1
  %12 = add nsw i64 %7, -1
  %13 = sdiv i64 %12, 2
  %14 = and i64 %6, 4
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %9
  %17 = or i64 %10, 1
  %18 = getelementptr inbounds float, float* %0, i64 %17
  %19 = getelementptr inbounds float, float* %0, i64 %11
  br label %57

20:                                               ; preds = %9, %52
  %21 = phi i64 [ %56, %52 ], [ %11, %9 ]
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = load float, float* %22, align 4, !tbaa !11
  %24 = icmp sgt i64 %13, %21
  br i1 %24, label %25, label %52

25:                                               ; preds = %20, %25
  %26 = phi i64 [ %35, %25 ], [ %21, %20 ]
  %27 = shl i64 %26, 1
  %28 = add i64 %27, 2
  %29 = getelementptr inbounds float, float* %0, i64 %28
  %30 = or i64 %27, 1
  %31 = getelementptr inbounds float, float* %0, i64 %30
  %32 = load float, float* %29, align 4, !tbaa !11
  %33 = load float, float* %31, align 4, !tbaa !11
  %34 = fcmp olt float %32, %33
  %35 = select i1 %34, i64 %30, i64 %28
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = load float, float* %36, align 4, !tbaa !11
  %38 = getelementptr inbounds float, float* %0, i64 %26
  store float %37, float* %38, align 4, !tbaa !11
  %39 = icmp slt i64 %35, %13
  br i1 %39, label %25, label %40, !llvm.loop !13

40:                                               ; preds = %25
  %41 = icmp sgt i64 %35, %21
  br i1 %41, label %42, label %52

42:                                               ; preds = %40, %49
  %43 = phi i64 [ %45, %49 ], [ %35, %40 ]
  %44 = add nsw i64 %43, -1
  %45 = sdiv i64 %44, 2
  %46 = getelementptr inbounds float, float* %0, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !11
  %48 = fcmp olt float %47, %23
  br i1 %48, label %49, label %52

49:                                               ; preds = %42
  %50 = getelementptr inbounds float, float* %0, i64 %43
  store float %47, float* %50, align 4, !tbaa !11
  %51 = icmp sgt i64 %45, %21
  br i1 %51, label %42, label %52, !llvm.loop !15

52:                                               ; preds = %42, %49, %20, %40
  %53 = phi i64 [ %35, %40 ], [ %21, %20 ], [ %45, %49 ], [ %43, %42 ]
  %54 = getelementptr inbounds float, float* %0, i64 %53
  store float %23, float* %54, align 4, !tbaa !11
  %55 = icmp eq i64 %21, 0
  %56 = add nsw i64 %21, -1
  br i1 %55, label %100, label %20, !llvm.loop !24

57:                                               ; preds = %16, %95
  %58 = phi i64 [ %99, %95 ], [ %11, %16 ]
  %59 = getelementptr inbounds float, float* %0, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !11
  %61 = icmp sgt i64 %13, %58
  br i1 %61, label %62, label %77

62:                                               ; preds = %57, %62
  %63 = phi i64 [ %72, %62 ], [ %58, %57 ]
  %64 = shl i64 %63, 1
  %65 = add i64 %64, 2
  %66 = getelementptr inbounds float, float* %0, i64 %65
  %67 = or i64 %64, 1
  %68 = getelementptr inbounds float, float* %0, i64 %67
  %69 = load float, float* %66, align 4, !tbaa !11
  %70 = load float, float* %68, align 4, !tbaa !11
  %71 = fcmp olt float %69, %70
  %72 = select i1 %71, i64 %67, i64 %65
  %73 = getelementptr inbounds float, float* %0, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !11
  %75 = getelementptr inbounds float, float* %0, i64 %63
  store float %74, float* %75, align 4, !tbaa !11
  %76 = icmp slt i64 %72, %13
  br i1 %76, label %62, label %77, !llvm.loop !13

77:                                               ; preds = %62, %57
  %78 = phi i64 [ %58, %57 ], [ %72, %62 ]
  %79 = icmp eq i64 %78, %11
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  %81 = load float, float* %18, align 4, !tbaa !11
  store float %81, float* %19, align 4, !tbaa !11
  br label %82

82:                                               ; preds = %80, %77
  %83 = phi i64 [ %17, %80 ], [ %78, %77 ]
  %84 = icmp sgt i64 %83, %58
  br i1 %84, label %85, label %95

85:                                               ; preds = %82, %92
  %86 = phi i64 [ %88, %92 ], [ %83, %82 ]
  %87 = add nsw i64 %86, -1
  %88 = sdiv i64 %87, 2
  %89 = getelementptr inbounds float, float* %0, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !11
  %91 = fcmp olt float %90, %60
  br i1 %91, label %92, label %95

92:                                               ; preds = %85
  %93 = getelementptr inbounds float, float* %0, i64 %86
  store float %90, float* %93, align 4, !tbaa !11
  %94 = icmp sgt i64 %88, %58
  br i1 %94, label %85, label %95, !llvm.loop !15

95:                                               ; preds = %85, %92, %82
  %96 = phi i64 [ %83, %82 ], [ %88, %92 ], [ %86, %85 ]
  %97 = getelementptr inbounds float, float* %0, i64 %96
  store float %60, float* %97, align 4, !tbaa !11
  %98 = icmp eq i64 %58, 0
  %99 = add nsw i64 %58, -1
  br i1 %98, label %100, label %57, !llvm.loop !24

100:                                              ; preds = %52, %95, %3
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{i64 0, i64 65}
!8 = !{!9, !4, i64 8}
!9 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !4, i64 0, !4, i64 8, !4, i64 16}
!10 = !{!9, !4, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"float", !5, i64 0}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
!15 = distinct !{!15, !14}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !14}
!18 = distinct !{!18, !14}
!19 = distinct !{!19, !14}
!20 = distinct !{!20, !14}
!21 = distinct !{!21, !14}
!22 = distinct !{!22, !14}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !14}
