; ModuleID = '../../Human_xBenchmarks_164/CPP_109/CPP_109.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_109/CPP_109.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local zeroext i1 @_Z13move_one_ballSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !8
  %6 = ptrtoint i32* %3 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %72, label %11

11:                                               ; preds = %1
  %12 = icmp ugt i64 %9, 1
  %13 = load i32, i32* %5, align 4, !tbaa !9
  br i1 %12, label %14, label %52

14:                                               ; preds = %11
  %15 = add nsw i64 %9, -1
  %16 = icmp ult i64 %15, 8
  br i1 %16, label %48, label %17

17:                                               ; preds = %14
  %18 = and i64 %15, -8
  %19 = or i64 %18, 1
  %20 = insertelement <4 x i32> poison, i32 %13, i32 3
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i64 [ 0, %17 ], [ %41, %21 ]
  %23 = phi <4 x i32> [ %20, %17 ], [ %32, %21 ]
  %24 = phi <4 x i32> [ zeroinitializer, %17 ], [ %39, %21 ]
  %25 = phi <4 x i32> [ zeroinitializer, %17 ], [ %40, %21 ]
  %26 = or i64 %22, 1
  %27 = getelementptr inbounds i32, i32* %5, i64 %26
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !tbaa !9
  %30 = getelementptr inbounds i32, i32* %27, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !tbaa !9
  %33 = shufflevector <4 x i32> %23, <4 x i32> %29, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %34 = shufflevector <4 x i32> %29, <4 x i32> %32, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %35 = icmp slt <4 x i32> %29, %33
  %36 = icmp slt <4 x i32> %32, %34
  %37 = zext <4 x i1> %35 to <4 x i32>
  %38 = zext <4 x i1> %36 to <4 x i32>
  %39 = add <4 x i32> %24, %37
  %40 = add <4 x i32> %25, %38
  %41 = add nuw i64 %22, 8
  %42 = icmp eq i64 %41, %18
  br i1 %42, label %43, label %21, !llvm.loop !11

43:                                               ; preds = %21
  %44 = add <4 x i32> %40, %39
  %45 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %44)
  %46 = icmp eq i64 %15, %18
  %47 = extractelement <4 x i32> %32, i32 3
  br i1 %46, label %52, label %48

48:                                               ; preds = %14, %43
  %49 = phi i32 [ %47, %43 ], [ %13, %14 ]
  %50 = phi i64 [ %19, %43 ], [ 1, %14 ]
  %51 = phi i32 [ %45, %43 ], [ 0, %14 ]
  br label %61

52:                                               ; preds = %61, %43, %11
  %53 = phi i32 [ 0, %11 ], [ %45, %43 ], [ %69, %61 ]
  %54 = add nsw i64 %9, -1
  %55 = getelementptr inbounds i32, i32* %5, i64 %54
  %56 = load i32, i32* %55, align 4, !tbaa !9
  %57 = icmp sgt i32 %56, %13
  %58 = zext i1 %57 to i32
  %59 = add nuw nsw i32 %53, %58
  %60 = icmp ult i32 %59, 2
  br label %72

61:                                               ; preds = %48, %61
  %62 = phi i32 [ %66, %61 ], [ %49, %48 ]
  %63 = phi i64 [ %70, %61 ], [ %50, %48 ]
  %64 = phi i32 [ %69, %61 ], [ %51, %48 ]
  %65 = getelementptr inbounds i32, i32* %5, i64 %63
  %66 = load i32, i32* %65, align 4, !tbaa !9
  %67 = icmp slt i32 %66, %62
  %68 = zext i1 %67 to i32
  %69 = add nuw nsw i32 %64, %68
  %70 = add nuw nsw i64 %63, 1
  %71 = icmp eq i64 %70, %9
  br i1 %71, label %52, label %61, !llvm.loop !14

72:                                               ; preds = %52, %1
  %73 = phi i1 [ true, %1 ], [ %60, %52 ]
  ret i1 %73
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !12, !15, !13}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
