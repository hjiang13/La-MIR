digraph "CFG for '_Z8max_fillSt6vectorIS_IiSaIiEESaIS1_EEi' function" {
	label="CFG for '_Z8max_fillSt6vectorIS_IiSaIiEESaIS1_EEi' function";

	Node0x563220691c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %4 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %3, align 8,\l... !tbaa !3\l  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %6 = load %\"class.std::vector.0\"*, %\"class.std::vector.0\"** %5, align 8,\l... !tbaa !8\l  %7 = ptrtoint %\"class.std::vector.0\"* %4 to i64\l  %8 = ptrtoint %\"class.std::vector.0\"* %6 to i64\l  %9 = sub i64 %7, %8\l  %10 = icmp eq i64 %9, 0\l  br i1 %10, label %114, label %11\l|{<s0>T|<s1>F}}"];
	Node0x563220691c30:s0 -> Node0x563220692fb0;
	Node0x563220691c30:s1 -> Node0x563220693560;
	Node0x563220693560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%11:\l11:                                               \l  %12 = sdiv exact i64 %9, 24\l  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)\l  br label %14\l}"];
	Node0x563220693560 -> Node0x5632206939d0;
	Node0x5632206939d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%14:\l14:                                               \l  %15 = phi i64 [ 0, %11 ], [ %134, %132 ]\l  %16 = phi i32 [ 0, %11 ], [ %133, %132 ]\l  %17 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"*\l... %6, i64 %15, i32 0, i32 0, i32 0, i32 1\l  %18 = load i32*, i32** %17, align 8, !tbaa !9\l  %19 = getelementptr inbounds %\"class.std::vector.0\", %\"class.std::vector.0\"*\l... %6, i64 %15, i32 0, i32 0, i32 0, i32 0\l  %20 = load i32*, i32** %19, align 8, !tbaa !11\l  %21 = ptrtoint i32* %18 to i64\l  %22 = ptrtoint i32* %20 to i64\l  %23 = sub i64 %21, %22\l  %24 = icmp eq i64 %23, 0\l  br i1 %24, label %132, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5632206939d0:s0 -> Node0x563220693ac0;
	Node0x5632206939d0:s1 -> Node0x5632206943b0;
	Node0x5632206943b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%25:\l25:                                               \l  %26 = ashr exact i64 %23, 2\l  %27 = call i64 @llvm.umax.i64(i64 %26, i64 1)\l  %28 = call i64 @llvm.umax.i64(i64 %26, i64 1)\l  %29 = icmp ult i64 %28, 8\l  br i1 %29, label %111, label %30\l|{<s0>T|<s1>F}}"];
	Node0x5632206943b0:s0 -> Node0x5632206948d0;
	Node0x5632206943b0:s1 -> Node0x563220694920;
	Node0x563220694920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%30:\l30:                                               \l  %31 = and i64 %28, -8\l  %32 = add i64 %31, -8\l  %33 = lshr exact i64 %32, 3\l  %34 = add nuw nsw i64 %33, 1\l  %35 = and i64 %34, 3\l  %36 = icmp ult i64 %32, 24\l  br i1 %36, label %82, label %37\l|{<s0>T|<s1>F}}"];
	Node0x563220694920:s0 -> Node0x563220695030;
	Node0x563220694920:s1 -> Node0x563220695080;
	Node0x563220695080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%37:\l37:                                               \l  %38 = and i64 %34, 4611686018427387900\l  br label %39\l}"];
	Node0x563220695080 -> Node0x563220695280;
	Node0x563220695280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%39:\l39:                                               \l  %40 = phi i64 [ 0, %37 ], [ %79, %39 ]\l  %41 = phi \<4 x i32\> [ zeroinitializer, %37 ], [ %77, %39 ]\l  %42 = phi \<4 x i32\> [ zeroinitializer, %37 ], [ %78, %39 ]\l  %43 = phi i64 [ %38, %37 ], [ %80, %39 ]\l  %44 = getelementptr inbounds i32, i32* %20, i64 %40\l  %45 = bitcast i32* %44 to \<4 x i32\>*\l  %46 = load \<4 x i32\>, \<4 x i32\>* %45, align 4, !tbaa !12\l  %47 = getelementptr inbounds i32, i32* %44, i64 4\l  %48 = bitcast i32* %47 to \<4 x i32\>*\l  %49 = load \<4 x i32\>, \<4 x i32\>* %48, align 4, !tbaa !12\l  %50 = add \<4 x i32\> %46, %41\l  %51 = add \<4 x i32\> %49, %42\l  %52 = or i64 %40, 8\l  %53 = getelementptr inbounds i32, i32* %20, i64 %52\l  %54 = bitcast i32* %53 to \<4 x i32\>*\l  %55 = load \<4 x i32\>, \<4 x i32\>* %54, align 4, !tbaa !12\l  %56 = getelementptr inbounds i32, i32* %53, i64 4\l  %57 = bitcast i32* %56 to \<4 x i32\>*\l  %58 = load \<4 x i32\>, \<4 x i32\>* %57, align 4, !tbaa !12\l  %59 = add \<4 x i32\> %55, %50\l  %60 = add \<4 x i32\> %58, %51\l  %61 = or i64 %40, 16\l  %62 = getelementptr inbounds i32, i32* %20, i64 %61\l  %63 = bitcast i32* %62 to \<4 x i32\>*\l  %64 = load \<4 x i32\>, \<4 x i32\>* %63, align 4, !tbaa !12\l  %65 = getelementptr inbounds i32, i32* %62, i64 4\l  %66 = bitcast i32* %65 to \<4 x i32\>*\l  %67 = load \<4 x i32\>, \<4 x i32\>* %66, align 4, !tbaa !12\l  %68 = add \<4 x i32\> %64, %59\l  %69 = add \<4 x i32\> %67, %60\l  %70 = or i64 %40, 24\l  %71 = getelementptr inbounds i32, i32* %20, i64 %70\l  %72 = bitcast i32* %71 to \<4 x i32\>*\l  %73 = load \<4 x i32\>, \<4 x i32\>* %72, align 4, !tbaa !12\l  %74 = getelementptr inbounds i32, i32* %71, i64 4\l  %75 = bitcast i32* %74 to \<4 x i32\>*\l  %76 = load \<4 x i32\>, \<4 x i32\>* %75, align 4, !tbaa !12\l  %77 = add \<4 x i32\> %73, %68\l  %78 = add \<4 x i32\> %76, %69\l  %79 = add nuw i64 %40, 32\l  %80 = add i64 %43, -4\l  %81 = icmp eq i64 %80, 0\l  br i1 %81, label %82, label %39, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x563220695280:s0 -> Node0x563220695030;
	Node0x563220695280:s1 -> Node0x563220695280;
	Node0x563220695030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%82:\l82:                                               \l  %83 = phi \<4 x i32\> [ undef, %30 ], [ %77, %39 ]\l  %84 = phi \<4 x i32\> [ undef, %30 ], [ %78, %39 ]\l  %85 = phi i64 [ 0, %30 ], [ %79, %39 ]\l  %86 = phi \<4 x i32\> [ zeroinitializer, %30 ], [ %77, %39 ]\l  %87 = phi \<4 x i32\> [ zeroinitializer, %30 ], [ %78, %39 ]\l  %88 = icmp eq i64 %35, 0\l  br i1 %88, label %105, label %89\l|{<s0>T|<s1>F}}"];
	Node0x563220695030:s0 -> Node0x563220698a80;
	Node0x563220695030:s1 -> Node0x563220698ad0;
	Node0x563220698ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%89:\l89:                                               \l  %90 = phi i64 [ %102, %89 ], [ %85, %82 ]\l  %91 = phi \<4 x i32\> [ %100, %89 ], [ %86, %82 ]\l  %92 = phi \<4 x i32\> [ %101, %89 ], [ %87, %82 ]\l  %93 = phi i64 [ %103, %89 ], [ %35, %82 ]\l  %94 = getelementptr inbounds i32, i32* %20, i64 %90\l  %95 = bitcast i32* %94 to \<4 x i32\>*\l  %96 = load \<4 x i32\>, \<4 x i32\>* %95, align 4, !tbaa !12\l  %97 = getelementptr inbounds i32, i32* %94, i64 4\l  %98 = bitcast i32* %97 to \<4 x i32\>*\l  %99 = load \<4 x i32\>, \<4 x i32\>* %98, align 4, !tbaa !12\l  %100 = add \<4 x i32\> %96, %91\l  %101 = add \<4 x i32\> %99, %92\l  %102 = add nuw i64 %90, 8\l  %103 = add i64 %93, -1\l  %104 = icmp eq i64 %103, 0\l  br i1 %104, label %105, label %89, !llvm.loop !17\l|{<s0>T|<s1>F}}"];
	Node0x563220698ad0:s0 -> Node0x563220698a80;
	Node0x563220698ad0:s1 -> Node0x563220698ad0;
	Node0x563220698a80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%105:\l105:                                              \l  %106 = phi \<4 x i32\> [ %83, %82 ], [ %100, %89 ]\l  %107 = phi \<4 x i32\> [ %84, %82 ], [ %101, %89 ]\l  %108 = add \<4 x i32\> %107, %106\l  %109 = call i32 @llvm.vector.reduce.add.v4i32(\<4 x i32\> %108)\l  %110 = icmp eq i64 %28, %31\l  br i1 %110, label %116, label %111\l|{<s0>T|<s1>F}}"];
	Node0x563220698a80:s0 -> Node0x563220699b10;
	Node0x563220698a80:s1 -> Node0x5632206948d0;
	Node0x5632206948d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%111:\l111:                                              \l  %112 = phi i64 [ 0, %25 ], [ %31, %105 ]\l  %113 = phi i32 [ 0, %25 ], [ %109, %105 ]\l  br label %119\l}"];
	Node0x5632206948d0 -> Node0x563220699d70;
	Node0x563220692fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a1c0ff70",label="{%114:\l114:                                              \l  %115 = phi i32 [ 0, %2 ], [ %133, %132 ]\l  ret i32 %115\l}"];
	Node0x563220699b10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%116:\l116:                                              \l  %117 = phi i32 [ %109, %105 ], [ %124, %119 ]\l  %118 = icmp sgt i32 %117, 0\l  br i1 %118, label %127, label %132\l|{<s0>T|<s1>F}}"];
	Node0x563220699b10:s0 -> Node0x56322069a090;
	Node0x563220699b10:s1 -> Node0x563220693ac0;
	Node0x563220699d70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%119:\l119:                                              \l  %120 = phi i64 [ %125, %119 ], [ %112, %111 ]\l  %121 = phi i32 [ %124, %119 ], [ %113, %111 ]\l  %122 = getelementptr inbounds i32, i32* %20, i64 %120\l  %123 = load i32, i32* %122, align 4, !tbaa !12\l  %124 = add nsw i32 %123, %121\l  %125 = add nuw nsw i64 %120, 1\l  %126 = icmp eq i64 %125, %27\l  br i1 %126, label %116, label %119, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x563220699d70:s0 -> Node0x563220699b10;
	Node0x563220699d70:s1 -> Node0x563220699d70;
	Node0x56322069a090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ead5c970",label="{%127:\l127:                                              \l  %128 = add nsw i32 %117, -1\l  %129 = sdiv i32 %128, %1\l  %130 = add i32 %16, 1\l  %131 = add i32 %130, %129\l  br label %132\l}"];
	Node0x56322069a090 -> Node0x563220693ac0;
	Node0x563220693ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b99e70",label="{%132:\l132:                                              \l  %133 = phi i32 [ %131, %127 ], [ %16, %116 ], [ %16, %14 ]\l  %134 = add nuw nsw i64 %15, 1\l  %135 = icmp eq i64 %134, %13\l  br i1 %135, label %114, label %14, !llvm.loop !21\l|{<s0>T|<s1>F}}"];
	Node0x563220693ac0:s0 -> Node0x563220692fb0;
	Node0x563220693ac0:s1 -> Node0x5632206939d0;
}
