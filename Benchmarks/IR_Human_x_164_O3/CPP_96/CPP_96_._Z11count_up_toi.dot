digraph "CFG for '_Z11count_up_toi' function" {
	label="CFG for '_Z11count_up_toi' function";

	Node0x55912c2b4a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %5 = icmp sgt i32 %1, 2\l  %6 = bitcast %\"class.std::vector\"* %0 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %6, i8 0, i64 24, i1 false)\l  br i1 %5, label %7, label %94\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b4a40:s0 -> Node0x55912c2b5890;
	Node0x55912c2b4a40:s1 -> Node0x55912c2b58e0;
	Node0x55912c2b5890 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e36c5570",label="{%7:\l7:                                                \l  %8 = bitcast %\"class.std::vector\"* %0 to i8**\l  %9 = bitcast %\"class.std::vector\"* %0 to i8**\l  br label %10\l}"];
	Node0x55912c2b5890 -> Node0x55912c2b53e0;
	Node0x55912c2b53e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%10:\l10:                                               \l  %11 = phi i32* [ %88, %87 ], [ null, %7 ]\l  %12 = phi i32* [ %89, %87 ], [ null, %7 ]\l  %13 = phi i32* [ %90, %87 ], [ null, %7 ]\l  %14 = phi i32* [ %91, %87 ], [ null, %7 ]\l  %15 = phi i32 [ %92, %87 ], [ 2, %7 ]\l  %16 = ptrtoint i32* %14 to i64\l  %17 = ptrtoint i32* %13 to i64\l  %18 = sub i64 %16, %17\l  %19 = ashr exact i64 %18, 2\l  %20 = icmp eq i64 %18, 0\l  br i1 %20, label %25, label %21\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b53e0:s0 -> Node0x55912c2b63f0;
	Node0x55912c2b53e0:s1 -> Node0x55912c2b6480;
	Node0x55912c2b6480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%21:\l21:                                               \l  %22 = load i32, i32* %13, align 4, !tbaa !3\l  %23 = mul nsw i32 %22, %22\l  %24 = icmp ugt i32 %23, %15\l  br i1 %24, label %57, label %42\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b6480:s0 -> Node0x55912c2b7240;
	Node0x55912c2b6480:s1 -> Node0x55912c2b72d0;
	Node0x55912c2b63f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%25:\l25:                                               \l  %26 = icmp eq i32* %14, %11\l  br i1 %26, label %29, label %27\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b63f0:s0 -> Node0x55912c2b74a0;
	Node0x55912c2b63f0:s1 -> Node0x55912c2b74f0;
	Node0x55912c2b74f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%27:\l27:                                               \l  store i32 %15, i32* %14, align 4, !tbaa !3\l  %28 = getelementptr inbounds i32, i32* %14, i64 1\l  store i32* %28, i32** %3, align 8, !tbaa !7\l  br label %87\l}"];
	Node0x55912c2b74f0 -> Node0x55912c2b5c00;
	Node0x55912c2b74a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%29:\l29:                                               \l  %30 = add nuw nsw i64 %19, 1\l  %31 = shl nuw nsw i64 %30, 2\l  %32 = invoke noalias nonnull i8* @_Znwm(i64 %31) #6\l          to label %33 unwind label %95\l}"];
	Node0x55912c2b74a0 -> Node0x55912c2b80c0;
	Node0x55912c2b74a0 -> Node0x55912c2b8110;
	Node0x55912c2b80c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%33:\l33:                                               \l  %34 = bitcast i8* %32 to i32*\l  %35 = getelementptr inbounds i32, i32* %34, i64 %19\l  store i32 %15, i32* %35, align 4, !tbaa !3\l  %36 = getelementptr inbounds i32, i32* %35, i64 1\l  %37 = icmp eq i32* %13, null\l  br i1 %37, label %40, label %38\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b80c0:s0 -> Node0x55912c2b8860;
	Node0x55912c2b80c0:s1 -> Node0x55912c2b88b0;
	Node0x55912c2b88b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%38:\l38:                                               \l  %39 = bitcast i32* %13 to i8*\l  tail call void @_ZdlPv(i8* nonnull %39) #7\l  br label %40\l}"];
	Node0x55912c2b88b0 -> Node0x55912c2b8860;
	Node0x55912c2b8860 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%40:\l40:                                               \l  store i8* %32, i8** %9, align 8, !tbaa !10\l  store i32* %36, i32** %3, align 8, !tbaa !7\l  %41 = getelementptr inbounds i32, i32* %34, i64 %30\l  store i32* %41, i32** %4, align 8, !tbaa !11\l  br label %87\l}"];
	Node0x55912c2b8860 -> Node0x55912c2b5c00;
	Node0x55912c2b72d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%42:\l42:                                               \l  %43 = phi i64 [ %49, %42 ], [ 0, %21 ]\l  %44 = phi i32 [ %51, %42 ], [ %22, %21 ]\l  %45 = phi i8 [ %48, %42 ], [ 1, %21 ]\l  %46 = srem i32 %15, %44\l  %47 = icmp eq i32 %46, 0\l  %48 = select i1 %47, i8 0, i8 %45\l  %49 = add nuw nsw i64 %43, 1\l  %50 = getelementptr inbounds i32, i32* %13, i64 %49\l  %51 = load i32, i32* %50, align 4, !tbaa !3\l  %52 = mul nsw i32 %51, %51\l  %53 = icmp ugt i32 %52, %15\l  br i1 %53, label %54, label %42, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b72d0:s0 -> Node0x55912c2b9f90;
	Node0x55912c2b72d0:s1 -> Node0x55912c2b72d0;
	Node0x55912c2b9f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%54:\l54:                                               \l  %55 = and i8 %48, 1\l  %56 = icmp eq i8 %55, 0\l  br i1 %56, label %87, label %57\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b9f90:s0 -> Node0x55912c2b5c00;
	Node0x55912c2b9f90:s1 -> Node0x55912c2b7240;
	Node0x55912c2b7240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%57:\l57:                                               \l  %58 = icmp eq i32* %14, %12\l  br i1 %58, label %61, label %59\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b7240:s0 -> Node0x55912c2ba390;
	Node0x55912c2b7240:s1 -> Node0x55912c2ba3e0;
	Node0x55912c2ba3e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%59:\l59:                                               \l  store i32 %15, i32* %14, align 4, !tbaa !3\l  %60 = getelementptr inbounds i32, i32* %14, i64 1\l  store i32* %60, i32** %3, align 8, !tbaa !7\l  br label %87\l}"];
	Node0x55912c2ba3e0 -> Node0x55912c2b5c00;
	Node0x55912c2ba390 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%61:\l61:                                               \l  %62 = icmp eq i64 %18, 9223372036854775804\l  br i1 %62, label %63, label %65\l|{<s0>T|<s1>F}}"];
	Node0x55912c2ba390:s0 -> Node0x55912c2ba7c0;
	Node0x55912c2ba390:s1 -> Node0x55912c2ba810;
	Node0x55912c2ba7c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%63:\l63:                                               \l  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x\l... i8], [26 x i8]* @.str, i64 0, i64 0)) #8\l          to label %64 unwind label %85\l}"];
	Node0x55912c2ba7c0 -> Node0x55912c2ba9a0;
	Node0x55912c2ba7c0 -> Node0x55912c2ba9f0;
	Node0x55912c2ba9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%64:\l64:                                               \l  unreachable\l}"];
	Node0x55912c2ba810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%65:\l65:                                               \l  %66 = ashr exact i64 %18, 1\l  %67 = icmp ult i64 %66, %19\l  %68 = icmp ugt i64 %66, 2305843009213693951\l  %69 = or i1 %67, %68\l  %70 = select i1 %69, i64 2305843009213693951, i64 %66\l  %71 = shl nuw nsw i64 %70, 2\l  %72 = invoke noalias nonnull i8* @_Znwm(i64 %71) #6\l          to label %73 unwind label %83\l}"];
	Node0x55912c2ba810 -> Node0x55912c2bb3f0;
	Node0x55912c2ba810 -> Node0x55912c2bb440;
	Node0x55912c2bb3f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%73:\l73:                                               \l  %74 = bitcast i8* %72 to i32*\l  %75 = getelementptr inbounds i32, i32* %74, i64 %19\l  store i32 %15, i32* %75, align 4, !tbaa !3\l  %76 = icmp sgt i64 %18, 0\l  br i1 %76, label %77, label %79\l|{<s0>T|<s1>F}}"];
	Node0x55912c2bb3f0:s0 -> Node0x55912c2bb730;
	Node0x55912c2bb3f0:s1 -> Node0x55912c2bb780;
	Node0x55912c2bb730 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{%77:\l77:                                               \l  %78 = bitcast i32* %13 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %72, i8*\l... nonnull align 4 %78, i64 %18, i1 false) #7\l  br label %79\l}"];
	Node0x55912c2bb730 -> Node0x55912c2bb780;
	Node0x55912c2bb780 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%79:\l79:                                               \l  %80 = bitcast i32* %13 to i8*\l  %81 = getelementptr inbounds i32, i32* %75, i64 1\l  tail call void @_ZdlPv(i8* nonnull %80) #7\l  store i8* %72, i8** %8, align 8, !tbaa !10\l  store i32* %81, i32** %3, align 8, !tbaa !7\l  %82 = getelementptr inbounds i32, i32* %74, i64 %70\l  store i32* %82, i32** %4, align 8, !tbaa !11\l  br label %87\l}"];
	Node0x55912c2bb780 -> Node0x55912c2b5c00;
	Node0x55912c2bb440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%83:\l83:                                               \l  %84 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %98\l}"];
	Node0x55912c2bb440 -> Node0x55912c2bce30;
	Node0x55912c2ba9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%85:\l85:                                               \l  %86 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %98\l}"];
	Node0x55912c2ba9f0 -> Node0x55912c2bce30;
	Node0x55912c2b5c00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%87:\l87:                                               \l  %88 = phi i32* [ %82, %79 ], [ %11, %59 ], [ %41, %40 ], [ %11, %27 ], [\l... %11, %54 ]\l  %89 = phi i32* [ %82, %79 ], [ %12, %59 ], [ %41, %40 ], [ %11, %27 ], [\l... %12, %54 ]\l  %90 = phi i32* [ %74, %79 ], [ %13, %59 ], [ %34, %40 ], [ %13, %27 ], [\l... %13, %54 ]\l  %91 = phi i32* [ %81, %79 ], [ %60, %59 ], [ %36, %40 ], [ %28, %27 ], [\l... %14, %54 ]\l  %92 = add nuw nsw i32 %15, 1\l  %93 = icmp eq i32 %92, %1\l  br i1 %93, label %94, label %10, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b5c00:s0 -> Node0x55912c2b58e0;
	Node0x55912c2b5c00:s1 -> Node0x55912c2b53e0;
	Node0x55912c2b58e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%94:\l94:                                               \l  ret void\l}"];
	Node0x55912c2b8110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ecd3c570",label="{%95:\l95:                                               \l  %96 = landingpad \{ i8*, i32 \}\l          cleanup\l  %97 = icmp eq i32* %13, null\l  br i1 %97, label %101, label %98\l|{<s0>T|<s1>F}}"];
	Node0x55912c2b8110:s0 -> Node0x55912c2bd810;
	Node0x55912c2b8110:s1 -> Node0x55912c2bce30;
	Node0x55912c2bce30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%98:\l98:                                               \l  %99 = phi \{ i8*, i32 \} [ %96, %95 ], [ %84, %83 ], [ %86, %85 ]\l  %100 = bitcast i32* %13 to i8*\l  tail call void @_ZdlPv(i8* nonnull %100) #7\l  br label %101\l}"];
	Node0x55912c2bce30 -> Node0x55912c2bd810;
	Node0x55912c2bd810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%101:\l101:                                              \l  %102 = phi \{ i8*, i32 \} [ %96, %95 ], [ %99, %98 ]\l  resume \{ i8*, i32 \} %102\l}"];
}
