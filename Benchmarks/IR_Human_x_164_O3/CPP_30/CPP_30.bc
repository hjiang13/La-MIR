; ModuleID = '../../Human_xBenchmarks_164/CPP_30/CPP_30.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_30/CPP_30.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z12get_positiveSt6vectorIfSaIfEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)
  %9 = load float*, float** %3, align 8, !tbaa !3
  %10 = load float*, float** %4, align 8, !tbaa !8
  %11 = icmp eq float* %9, %10
  br i1 %11, label %88, label %12

12:                                               ; preds = %2, %76
  %13 = phi float* [ %77, %76 ], [ %10, %2 ]
  %14 = phi float* [ %78, %76 ], [ %9, %2 ]
  %15 = phi float* [ %79, %76 ], [ null, %2 ]
  %16 = phi float* [ %80, %76 ], [ null, %2 ]
  %17 = phi float* [ %81, %76 ], [ null, %2 ]
  %18 = phi i64 [ %82, %76 ], [ 0, %2 ]
  %19 = getelementptr inbounds float, float* %13, i64 %18
  %20 = load float, float* %19, align 4, !tbaa !9
  %21 = fcmp ogt float %20, 0.000000e+00
  br i1 %21, label %22, label %76

22:                                               ; preds = %12
  %23 = icmp eq float* %17, %16
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  store float %20, float* %17, align 4, !tbaa !9
  %25 = getelementptr inbounds float, float* %17, i64 1
  store float* %25, float** %5, align 8, !tbaa !3
  br label %76

26:                                               ; preds = %22
  %27 = ptrtoint float* %16 to i64
  %28 = ptrtoint float* %15 to i64
  %29 = sub i64 %27, %28
  %30 = ashr exact i64 %29, 2
  %31 = icmp eq i64 %29, 9223372036854775804
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %33 unwind label %68

33:                                               ; preds = %32
  unreachable

34:                                               ; preds = %26
  %35 = icmp eq i64 %29, 0
  %36 = select i1 %35, i64 1, i64 %30
  %37 = add nsw i64 %36, %30
  %38 = icmp ult i64 %37, %30
  %39 = icmp ugt i64 %37, 2305843009213693951
  %40 = or i1 %38, %39
  %41 = select i1 %40, i64 2305843009213693951, i64 %37
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %34
  %44 = shl nuw nsw i64 %41, 2
  %45 = invoke noalias nonnull i8* @_Znwm(i64 %44) #7
          to label %46 unwind label %66

46:                                               ; preds = %43
  %47 = bitcast i8* %45 to float*
  %48 = load float, float* %19, align 4, !tbaa !9
  br label %49

49:                                               ; preds = %46, %34
  %50 = phi float [ %48, %46 ], [ %20, %34 ]
  %51 = phi float* [ %47, %46 ], [ null, %34 ]
  %52 = getelementptr inbounds float, float* %51, i64 %30
  store float %50, float* %52, align 4, !tbaa !9
  %53 = icmp sgt i64 %29, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %49
  %55 = bitcast float* %51 to i8*
  %56 = bitcast float* %15 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 %29, i1 false) #8
  br label %57

57:                                               ; preds = %49, %54
  %58 = getelementptr inbounds float, float* %52, i64 1
  %59 = icmp eq float* %15, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %57
  %61 = bitcast float* %15 to i8*
  tail call void @_ZdlPv(i8* nonnull %61) #8
  br label %62

62:                                               ; preds = %60, %57
  store float* %51, float** %7, align 8, !tbaa !8
  store float* %58, float** %5, align 8, !tbaa !3
  %63 = getelementptr inbounds float, float* %51, i64 %41
  store float* %63, float** %6, align 8, !tbaa !11
  %64 = load float*, float** %3, align 8, !tbaa !3
  %65 = load float*, float** %4, align 8, !tbaa !8
  br label %76

66:                                               ; preds = %43
  %67 = landingpad { i8*, i32 }
          cleanup
  br label %70

68:                                               ; preds = %32
  %69 = landingpad { i8*, i32 }
          cleanup
  br label %70

70:                                               ; preds = %68, %66
  %71 = phi { i8*, i32 } [ %67, %66 ], [ %69, %68 ]
  %72 = icmp eq float* %15, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %70
  %74 = bitcast float* %15 to i8*
  tail call void @_ZdlPv(i8* nonnull %74) #8
  br label %75

75:                                               ; preds = %70, %73
  resume { i8*, i32 } %71

76:                                               ; preds = %62, %24, %12
  %77 = phi float* [ %65, %62 ], [ %13, %24 ], [ %13, %12 ]
  %78 = phi float* [ %64, %62 ], [ %14, %24 ], [ %14, %12 ]
  %79 = phi float* [ %51, %62 ], [ %15, %24 ], [ %15, %12 ]
  %80 = phi float* [ %63, %62 ], [ %16, %24 ], [ %16, %12 ]
  %81 = phi float* [ %58, %62 ], [ %25, %24 ], [ %17, %12 ]
  %82 = add nuw i64 %18, 1
  %83 = ptrtoint float* %78 to i64
  %84 = ptrtoint float* %77 to i64
  %85 = sub i64 %83, %84
  %86 = ashr exact i64 %85, 2
  %87 = icmp ugt i64 %86, %82
  br i1 %87, label %12, label %88, !llvm.loop !12

88:                                               ; preds = %76, %2
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { noreturn }
attributes #7 = { allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = !{!4, !5, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
