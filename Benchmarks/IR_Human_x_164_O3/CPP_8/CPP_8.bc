; ModuleID = '../../Human_xBenchmarks_164/CPP_8/CPP_8.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_8/CPP_8.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: uwtable
define dso_local void @_Z11sum_productSt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load i32*, i32** %3, align 8, !tbaa !3
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8, !tbaa !8
  %7 = ptrtoint i32* %4 to i64
  %8 = ptrtoint i32* %6 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %91, label %11

11:                                               ; preds = %2
  %12 = ashr exact i64 %9, 2
  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)
  %14 = icmp ult i64 %13, 8
  br i1 %14, label %87, label %15

15:                                               ; preds = %11
  %16 = and i64 %13, -8
  %17 = add i64 %16, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %55, label %22

22:                                               ; preds = %15
  %23 = and i64 %19, 4611686018427387902
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %52, %24 ]
  %26 = phi <4 x i32> [ zeroinitializer, %22 ], [ %48, %24 ]
  %27 = phi <4 x i32> [ zeroinitializer, %22 ], [ %49, %24 ]
  %28 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %50, %24 ]
  %29 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %51, %24 ]
  %30 = phi i64 [ %23, %22 ], [ %53, %24 ]
  %31 = getelementptr inbounds i32, i32* %6, i64 %25
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4, !tbaa !9
  %34 = getelementptr inbounds i32, i32* %31, i64 4
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4, !tbaa !9
  %37 = add <4 x i32> %33, %26
  %38 = add <4 x i32> %36, %27
  %39 = mul <4 x i32> %33, %28
  %40 = mul <4 x i32> %36, %29
  %41 = or i64 %25, 8
  %42 = getelementptr inbounds i32, i32* %6, i64 %41
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !tbaa !9
  %45 = getelementptr inbounds i32, i32* %42, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4, !tbaa !9
  %48 = add <4 x i32> %44, %37
  %49 = add <4 x i32> %47, %38
  %50 = mul <4 x i32> %44, %39
  %51 = mul <4 x i32> %47, %40
  %52 = add nuw i64 %25, 16
  %53 = add i64 %30, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %24, !llvm.loop !11

55:                                               ; preds = %24, %15
  %56 = phi <4 x i32> [ undef, %15 ], [ %48, %24 ]
  %57 = phi <4 x i32> [ undef, %15 ], [ %49, %24 ]
  %58 = phi <4 x i32> [ undef, %15 ], [ %50, %24 ]
  %59 = phi <4 x i32> [ undef, %15 ], [ %51, %24 ]
  %60 = phi i64 [ 0, %15 ], [ %52, %24 ]
  %61 = phi <4 x i32> [ zeroinitializer, %15 ], [ %48, %24 ]
  %62 = phi <4 x i32> [ zeroinitializer, %15 ], [ %49, %24 ]
  %63 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %15 ], [ %50, %24 ]
  %64 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %15 ], [ %51, %24 ]
  %65 = icmp eq i64 %20, 0
  br i1 %65, label %77, label %66

66:                                               ; preds = %55
  %67 = getelementptr inbounds i32, i32* %6, i64 %60
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !tbaa !9
  %70 = getelementptr inbounds i32, i32* %67, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !9
  %73 = mul <4 x i32> %72, %64
  %74 = mul <4 x i32> %69, %63
  %75 = add <4 x i32> %72, %62
  %76 = add <4 x i32> %69, %61
  br label %77

77:                                               ; preds = %55, %66
  %78 = phi <4 x i32> [ %56, %55 ], [ %76, %66 ]
  %79 = phi <4 x i32> [ %57, %55 ], [ %75, %66 ]
  %80 = phi <4 x i32> [ %58, %55 ], [ %74, %66 ]
  %81 = phi <4 x i32> [ %59, %55 ], [ %73, %66 ]
  %82 = mul <4 x i32> %81, %80
  %83 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %82)
  %84 = add <4 x i32> %79, %78
  %85 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %84)
  %86 = icmp eq i64 %13, %16
  br i1 %86, label %91, label %87

87:                                               ; preds = %11, %77
  %88 = phi i64 [ 0, %11 ], [ %16, %77 ]
  %89 = phi i32 [ 0, %11 ], [ %85, %77 ]
  %90 = phi i32 [ 1, %11 ], [ %83, %77 ]
  br label %105

91:                                               ; preds = %105, %77, %2
  %92 = phi i32 [ 1, %2 ], [ %83, %77 ], [ %112, %105 ]
  %93 = phi i32 [ 0, %2 ], [ %85, %77 ], [ %111, %105 ]
  %94 = bitcast %"class.std::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %94, i8 0, i64 24, i1 false) #5
  %95 = call noalias nonnull i8* @_Znwm(i64 8) #6
  %96 = bitcast i8* %95 to i32*
  %97 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %95, i8** %97, align 8, !tbaa !8
  %98 = getelementptr inbounds i8, i8* %95, i64 8
  %99 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %100 = bitcast i32** %99 to i8**
  store i8* %98, i8** %100, align 8, !tbaa !14
  store i32 %93, i32* %96, align 4
  %101 = getelementptr inbounds i8, i8* %95, i64 4
  %102 = bitcast i8* %101 to i32*
  store i32 %92, i32* %102, align 4
  %103 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %104 = bitcast i32** %103 to i8**
  store i8* %98, i8** %104, align 8, !tbaa !3
  ret void

105:                                              ; preds = %87, %105
  %106 = phi i64 [ %113, %105 ], [ %88, %87 ]
  %107 = phi i32 [ %111, %105 ], [ %89, %87 ]
  %108 = phi i32 [ %112, %105 ], [ %90, %87 ]
  %109 = getelementptr inbounds i32, i32* %6, i64 %106
  %110 = load i32, i32* %109, align 4, !tbaa !9
  %111 = add nsw i32 %110, %107
  %112 = mul nsw i32 %110, %108
  %113 = add nuw nsw i64 %106, 1
  %114 = icmp eq i64 %113, %13
  br i1 %114, label %91, label %105, !llvm.loop !15
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #3

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #4

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #4

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { argmemonly nofree nounwind willreturn writeonly }
attributes #3 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nofree nosync nounwind readnone willreturn }
attributes #5 = { nounwind }
attributes #6 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = !{!4, !5, i64 16}
!15 = distinct !{!15, !12, !16, !13}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
