digraph "CFG for '_Z21find_closest_elementsSt6vectorIfSaIfEE' function" {
	label="CFG for '_Z21find_closest_elementsSt6vectorIfSaIfEE' function";

	Node0x5621ffa0fab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%2:\l  %3 = alloca i64, align 8\l  %4 = bitcast i64* %3 to [2 x float]*\l  %5 = alloca i64, align 8\l  %6 = bitcast i64* %5 to [2 x float]*\l  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %9 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %11 = bitcast i64* %3 to i8*\l  %12 = bitcast i64* %3 to float*\l  %13 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1\l  %14 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %15 = bitcast %\"class.std::vector\"* %0 to i8**\l  %16 = bitcast float** %9 to i8**\l  %17 = bitcast float** %14 to i8**\l  %18 = bitcast %\"class.std::vector\"* %0 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %18, i8 0, i64 24, i1 false)\l  %19 = load float*, float** %7, align 8, !tbaa !3\l  %20 = load float*, float** %8, align 8, !tbaa !8\l  %21 = icmp eq float* %19, %20\l  br i1 %21, label %41, label %50\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa0fab0:s0 -> Node0x5621ffa123c0;
	Node0x5621ffa0fab0:s1 -> Node0x5621ffa12450;
	Node0x5621ffa12590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%22:\l22:                                               \l  %23 = ptrtoint float* %156 to i64\l  %24 = ptrtoint float* %155 to i64\l  %25 = sub i64 %23, %24\l  %26 = ashr exact i64 %25, 2\l  br label %27\l}"];
	Node0x5621ffa12590 -> Node0x5621ffa128c0;
	Node0x5621ffa128c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%27:\l27:                                               \l  %28 = phi i64 [ %26, %22 ], [ %65, %50 ]\l  %29 = phi float* [ %152, %22 ], [ %51, %50 ]\l  %30 = phi float* [ %153, %22 ], [ %52, %50 ]\l  %31 = phi float* [ %154, %22 ], [ %53, %50 ]\l  %32 = phi float* [ %155, %22 ], [ %54, %50 ]\l  %33 = phi float* [ %156, %22 ], [ %55, %50 ]\l  %34 = phi float* [ %159, %22 ], [ %56, %50 ]\l  %35 = phi float* [ %160, %22 ], [ %57, %50 ]\l  %36 = phi float* [ %161, %22 ], [ %58, %50 ]\l  %37 = icmp ugt i64 %28, %61\l  %38 = add i64 %60, 1\l  br i1 %37, label %50, label %39, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa128c0:s0 -> Node0x5621ffa12450;
	Node0x5621ffa128c0:s1 -> Node0x5621ffa13a50;
	Node0x5621ffa13a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%39:\l39:                                               \l  %40 = load float*, float** %10, align 8, !tbaa !8\l  br label %41\l}"];
	Node0x5621ffa13a50 -> Node0x5621ffa123c0;
	Node0x5621ffa123c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%41:\l41:                                               \l  %42 = phi float* [ %29, %39 ], [ null, %2 ]\l  %43 = phi float* [ %30, %39 ], [ null, %2 ]\l  %44 = phi float* [ %31, %39 ], [ null, %2 ]\l  %45 = phi float* [ %40, %39 ], [ null, %2 ]\l  %46 = load float, float* %45, align 4, !tbaa !11\l  %47 = getelementptr inbounds float, float* %45, i64 1\l  %48 = load float, float* %47, align 4, !tbaa !11\l  %49 = fcmp ogt float %46, %48\l  br i1 %49, label %168, label %213\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa123c0:s0 -> Node0x5621ffa14f40;
	Node0x5621ffa123c0:s1 -> Node0x5621ffa14fd0;
	Node0x5621ffa12450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%50:\l50:                                               \l  %51 = phi float* [ %29, %27 ], [ null, %2 ]\l  %52 = phi float* [ %30, %27 ], [ null, %2 ]\l  %53 = phi float* [ %31, %27 ], [ null, %2 ]\l  %54 = phi float* [ %32, %27 ], [ %20, %2 ]\l  %55 = phi float* [ %33, %27 ], [ %19, %2 ]\l  %56 = phi float* [ %34, %27 ], [ null, %2 ]\l  %57 = phi float* [ %35, %27 ], [ null, %2 ]\l  %58 = phi float* [ %36, %27 ], [ null, %2 ]\l  %59 = phi i64 [ %61, %27 ], [ 0, %2 ]\l  %60 = phi i64 [ %38, %27 ], [ 1, %2 ]\l  %61 = add nuw i64 %59, 1\l  %62 = ptrtoint float* %55 to i64\l  %63 = ptrtoint float* %54 to i64\l  %64 = sub i64 %62, %63\l  %65 = ashr exact i64 %64, 2\l  %66 = icmp ugt i64 %65, %61\l  br i1 %66, label %67, label %27\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa12450:s0 -> Node0x5621ffa13850;
	Node0x5621ffa12450:s1 -> Node0x5621ffa128c0;
	Node0x5621ffa13850 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%67:\l67:                                               \l  %68 = phi float* [ %152, %151 ], [ %51, %50 ]\l  %69 = phi float* [ %153, %151 ], [ %52, %50 ]\l  %70 = phi float* [ %154, %151 ], [ %53, %50 ]\l  %71 = phi float* [ %155, %151 ], [ %54, %50 ]\l  %72 = phi float* [ %156, %151 ], [ %55, %50 ]\l  %73 = phi float* [ %157, %151 ], [ %54, %50 ]\l  %74 = phi float* [ %158, %151 ], [ %55, %50 ]\l  %75 = phi float* [ %159, %151 ], [ %56, %50 ]\l  %76 = phi float* [ %160, %151 ], [ %57, %50 ]\l  %77 = phi float* [ %161, %151 ], [ %58, %50 ]\l  %78 = phi i64 [ %162, %151 ], [ %60, %50 ]\l  %79 = load float*, float** %10, align 8, !tbaa !8\l  %80 = ptrtoint float* %77 to i64\l  %81 = ptrtoint float* %79 to i64\l  %82 = sub i64 %80, %81\l  %83 = ashr exact i64 %82, 2\l  %84 = icmp eq i64 %82, 0\l  %85 = getelementptr inbounds float, float* %73, i64 %59\l  %86 = load float, float* %85, align 4, !tbaa !11\l  br i1 %84, label %102, label %87\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa13850:s0 -> Node0x5621ffa16b20;
	Node0x5621ffa13850:s1 -> Node0x5621ffa16b70;
	Node0x5621ffa16b70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%87:\l87:                                               \l  %88 = getelementptr inbounds float, float* %73, i64 %78\l  %89 = load float, float* %88, align 4, !tbaa !11\l  %90 = load float, float* %79, align 4, !tbaa !11\l  %91 = getelementptr inbounds float, float* %79, i64 1\l  %92 = load float, float* %91, align 4, !tbaa !11\l  %93 = insertelement \<2 x float\> poison, float %86, i32 0\l  %94 = insertelement \<2 x float\> %93, float %90, i32 1\l  %95 = insertelement \<2 x float\> poison, float %89, i32 0\l  %96 = insertelement \<2 x float\> %95, float %92, i32 1\l  %97 = fsub \<2 x float\> %94, %96\l  %98 = call \<2 x float\> @llvm.fabs.v2f32(\<2 x float\> %97)\l  %99 = extractelement \<2 x float\> %98, i32 0\l  %100 = extractelement \<2 x float\> %98, i32 1\l  %101 = fcmp olt float %99, %100\l  br i1 %101, label %102, label %151\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa16b70:s0 -> Node0x5621ffa16b20;
	Node0x5621ffa16b70:s1 -> Node0x5621ffa13950;
	Node0x5621ffa16b20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%102:\l102:                                              \l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #7\l  store float %86, float* %12, align 8, !tbaa !11\l  %103 = getelementptr inbounds float, float* %73, i64 %78\l  %104 = load float, float* %103, align 4, !tbaa !11\l  store float %104, float* %13, align 4, !tbaa !11\l  %105 = load float*, float** %14, align 8, !tbaa !13\l  %106 = ptrtoint float* %105 to i64\l  %107 = sub i64 %106, %81\l  %108 = ashr exact i64 %107, 2\l  %109 = icmp ult i64 %108, 2\l  br i1 %109, label %110, label %121\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa16b20:s0 -> Node0x5621ffa187f0;
	Node0x5621ffa16b20:s1 -> Node0x5621ffa18840;
	Node0x5621ffa187f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%110:\l110:                                              \l  %111 = invoke noalias nonnull i8* @_Znwm(i64 8) #8\l          to label %112 unwind label %214\l}"];
	Node0x5621ffa187f0 -> Node0x5621ffa18960;
	Node0x5621ffa187f0 -> Node0x5621ffa189b0;
	Node0x5621ffa18960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%112:\l112:                                              \l  %113 = bitcast i8* %111 to i64*\l  %114 = load i64, i64* %3, align 8\l  store i64 %114, i64* %113, align 4\l  %115 = icmp eq float* %79, null\l  br i1 %115, label %118, label %116\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa18960:s0 -> Node0x5621ffa18df0;
	Node0x5621ffa18960:s1 -> Node0x5621ffa18e40;
	Node0x5621ffa18e40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%116:\l116:                                              \l  %117 = bitcast float* %79 to i8*\l  tail call void @_ZdlPv(i8* nonnull %117) #7\l  br label %118\l}"];
	Node0x5621ffa18e40 -> Node0x5621ffa18df0;
	Node0x5621ffa18df0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%118:\l118:                                              \l  store i8* %111, i8** %15, align 8, !tbaa !8\l  %119 = getelementptr inbounds i8, i8* %111, i64 8\l  store i8* %119, i8** %16, align 8, !tbaa !3\l  store i8* %119, i8** %17, align 8, !tbaa !13\l  %120 = bitcast i8* %119 to float*\l  br label %143\l}"];
	Node0x5621ffa18df0 -> Node0x5621ffa1a170;
	Node0x5621ffa18840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%121:\l121:                                              \l  %122 = icmp ult i64 %83, 2\l  br i1 %122, label %129, label %123\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa18840:s0 -> Node0x5621ffa1a2c0;
	Node0x5621ffa18840:s1 -> Node0x5621ffa1a310;
	Node0x5621ffa1a310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%123:\l123:                                              \l  %124 = bitcast float* %79 to i64*\l  %125 = load i64, i64* %3, align 8\l  store i64 %125, i64* %124, align 4\l  %126 = getelementptr inbounds float, float* %79, i64 2\l  %127 = icmp eq float* %76, %126\l  br i1 %127, label %143, label %128\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa1a310:s0 -> Node0x5621ffa1a170;
	Node0x5621ffa1a310:s1 -> Node0x5621ffa1a6b0;
	Node0x5621ffa1a6b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%128:\l128:                                              \l  store float* %126, float** %9, align 8, !tbaa !3\l  br label %143\l}"];
	Node0x5621ffa1a6b0 -> Node0x5621ffa1a170;
	Node0x5621ffa1a2c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%129:\l129:                                              \l  %130 = getelementptr inbounds float, float* %12, i64 %83\l  %131 = icmp eq i64 %82, 0\l  br i1 %131, label %136, label %132\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa1a2c0:s0 -> Node0x5621ffa1b1f0;
	Node0x5621ffa1a2c0:s1 -> Node0x5621ffa1b240;
	Node0x5621ffa1b240 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670",label="{%132:\l132:                                              \l  %133 = bitcast float* %79 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %133, i8* nonnull align 8\l... %11, i64 %82, i1 false) #7\l  %134 = mul nsw i64 %83, -4\l  %135 = add nsw i64 %134, 8\l  br label %136\l}"];
	Node0x5621ffa1b240 -> Node0x5621ffa1b1f0;
	Node0x5621ffa1b1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%136:\l136:                                              \l  %137 = phi i64 [ %135, %132 ], [ 8, %129 ]\l  %138 = phi float* [ %75, %132 ], [ %77, %129 ]\l  %139 = bitcast float* %138 to i8*\l  %140 = bitcast float* %130 to i8*\l  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %139, i8* nonnull align 4\l... %140, i64 %137, i1 false) #7\l  %141 = lshr exact i64 %137, 2\l  %142 = getelementptr inbounds float, float* %138, i64 %141\l  store float* %142, float** %9, align 8, !tbaa !3\l  br label %143\l}"];
	Node0x5621ffa1b1f0 -> Node0x5621ffa1a170;
	Node0x5621ffa1a170 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%143:\l143:                                              \l  %144 = phi float* [ %120, %118 ], [ %68, %123 ], [ %126, %128 ], [ %142,\l... %136 ]\l  %145 = phi float* [ %120, %118 ], [ %69, %123 ], [ %126, %128 ], [ %142,\l... %136 ]\l  %146 = phi float* [ %120, %118 ], [ %70, %123 ], [ %126, %128 ], [ %142,\l... %136 ]\l  %147 = phi float* [ %120, %118 ], [ %75, %123 ], [ %126, %128 ], [ %142,\l... %136 ]\l  %148 = phi float* [ %120, %118 ], [ %76, %123 ], [ %126, %128 ], [ %142,\l... %136 ]\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7\l  %149 = load float*, float** %7, align 8, !tbaa !3\l  %150 = load float*, float** %8, align 8, !tbaa !8\l  br label %151\l}"];
	Node0x5621ffa1a170 -> Node0x5621ffa13950;
	Node0x5621ffa13950 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%151:\l151:                                              \l  %152 = phi float* [ %68, %87 ], [ %144, %143 ]\l  %153 = phi float* [ %69, %87 ], [ %145, %143 ]\l  %154 = phi float* [ %70, %87 ], [ %146, %143 ]\l  %155 = phi float* [ %71, %87 ], [ %150, %143 ]\l  %156 = phi float* [ %72, %87 ], [ %149, %143 ]\l  %157 = phi float* [ %73, %87 ], [ %150, %143 ]\l  %158 = phi float* [ %74, %87 ], [ %149, %143 ]\l  %159 = phi float* [ %75, %87 ], [ %147, %143 ]\l  %160 = phi float* [ %76, %87 ], [ %148, %143 ]\l  %161 = phi float* [ %77, %87 ], [ %148, %143 ]\l  %162 = add i64 %78, 1\l  %163 = ptrtoint float* %158 to i64\l  %164 = ptrtoint float* %157 to i64\l  %165 = sub i64 %163, %164\l  %166 = ashr exact i64 %165, 2\l  %167 = icmp ugt i64 %166, %162\l  br i1 %167, label %67, label %22, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa13950:s0 -> Node0x5621ffa13850;
	Node0x5621ffa13950:s1 -> Node0x5621ffa12590;
	Node0x5621ffa14f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%168:\l168:                                              \l  %169 = bitcast i64* %5 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #7\l  %170 = bitcast i64* %5 to float*\l  store float %48, float* %170, align 8, !tbaa !11\l  %171 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 1\l  store float %46, float* %171, align 4, !tbaa !11\l  %172 = load float*, float** %14, align 8, !tbaa !13\l  %173 = ptrtoint float* %172 to i64\l  %174 = ptrtoint float* %45 to i64\l  %175 = sub i64 %173, %174\l  %176 = ashr exact i64 %175, 2\l  %177 = icmp ult i64 %176, 2\l  br i1 %177, label %178, label %185\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa14f40:s0 -> Node0x5621ffa1db50;
	Node0x5621ffa14f40:s1 -> Node0x5621ffa1dba0;
	Node0x5621ffa1db50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%178:\l178:                                              \l  %179 = invoke noalias nonnull i8* @_Znwm(i64 8) #8\l          to label %180 unwind label %211\l}"];
	Node0x5621ffa1db50 -> Node0x5621ffa1dca0;
	Node0x5621ffa1db50 -> Node0x5621ffa1dcf0;
	Node0x5621ffa1dca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%180:\l180:                                              \l  %181 = bitcast i8* %179 to i64*\l  %182 = load i64, i64* %5, align 8\l  store i64 %182, i64* %181, align 4\l  %183 = bitcast float* %45 to i8*\l  tail call void @_ZdlPv(i8* nonnull %183) #7\l  store i8* %179, i8** %15, align 8, !tbaa !8\l  %184 = getelementptr inbounds i8, i8* %179, i64 8\l  store i8* %184, i8** %16, align 8, !tbaa !3\l  store i8* %184, i8** %17, align 8, !tbaa !13\l  br label %210\l}"];
	Node0x5621ffa1dca0 -> Node0x5621ffa1e2d0;
	Node0x5621ffa1dba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7b39670",label="{%185:\l185:                                              \l  %186 = ptrtoint float* %44 to i64\l  %187 = sub i64 %186, %174\l  %188 = ashr exact i64 %187, 2\l  %189 = icmp ult i64 %188, 2\l  br i1 %189, label %196, label %190\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa1dba0:s0 -> Node0x5621ffa1e5b0;
	Node0x5621ffa1dba0:s1 -> Node0x5621ffa1e600;
	Node0x5621ffa1e600 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%190:\l190:                                              \l  %191 = bitcast float* %45 to i64*\l  %192 = load i64, i64* %5, align 8\l  store i64 %192, i64* %191, align 4\l  %193 = getelementptr inbounds float, float* %45, i64 2\l  %194 = icmp eq float* %43, %193\l  br i1 %194, label %210, label %195\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa1e600:s0 -> Node0x5621ffa1e2d0;
	Node0x5621ffa1e600:s1 -> Node0x5621ffa1e9a0;
	Node0x5621ffa1e9a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%195:\l195:                                              \l  store float* %193, float** %9, align 8, !tbaa !3\l  br label %210\l}"];
	Node0x5621ffa1e9a0 -> Node0x5621ffa1e2d0;
	Node0x5621ffa1e5b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%196:\l196:                                              \l  %197 = getelementptr inbounds float, float* %170, i64 %188\l  %198 = icmp eq i64 %187, 0\l  br i1 %198, label %203, label %199\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa1e5b0:s0 -> Node0x5621ffa1ecd0;
	Node0x5621ffa1e5b0:s1 -> Node0x5621ffa1ed20;
	Node0x5621ffa1ed20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%199:\l199:                                              \l  %200 = bitcast float* %45 to i8*\l  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %200, i8* nonnull\l... align 8 %169, i64 %187, i1 false) #7\l  %201 = mul nsw i64 %188, -4\l  %202 = add nsw i64 %201, 8\l  br label %203\l}"];
	Node0x5621ffa1ed20 -> Node0x5621ffa1ecd0;
	Node0x5621ffa1ecd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7bca170",label="{%203:\l203:                                              \l  %204 = phi i64 [ %202, %199 ], [ 8, %196 ]\l  %205 = phi float* [ %42, %199 ], [ %44, %196 ]\l  %206 = bitcast float* %205 to i8*\l  %207 = bitcast float* %197 to i8*\l  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %206, i8* nonnull align 4\l... %207, i64 %204, i1 false) #7\l  %208 = lshr exact i64 %204, 2\l  %209 = getelementptr inbounds float, float* %205, i64 %208\l  store float* %209, float** %9, align 8, !tbaa !3\l  br label %210\l}"];
	Node0x5621ffa1ecd0 -> Node0x5621ffa1e2d0;
	Node0x5621ffa1e2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%210:\l210:                                              \l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #7\l  br label %213\l}"];
	Node0x5621ffa1e2d0 -> Node0x5621ffa14fd0;
	Node0x5621ffa1dcf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5977e370",label="{%211:\l211:                                              \l  %212 = landingpad \{ i8*, i32 \}\l          cleanup\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #7\l  br label %217\l}"];
	Node0x5621ffa1dcf0 -> Node0x5621ffa1fad0;
	Node0x5621ffa14fd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f59c7d70",label="{%213:\l213:                                              \l  ret void\l}"];
	Node0x5621ffa189b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%214:\l214:                                              \l  %215 = landingpad \{ i8*, i32 \}\l          cleanup\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #7\l  %216 = icmp eq float* %79, null\l  br i1 %216, label %221, label %217\l|{<s0>T|<s1>F}}"];
	Node0x5621ffa189b0:s0 -> Node0x5621ffa1fe10;
	Node0x5621ffa189b0:s1 -> Node0x5621ffa1fad0;
	Node0x5621ffa1fad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{%217:\l217:                                              \l  %218 = phi \{ i8*, i32 \} [ %212, %211 ], [ %215, %214 ]\l  %219 = phi float* [ %45, %211 ], [ %79, %214 ]\l  %220 = bitcast float* %219 to i8*\l  tail call void @_ZdlPv(i8* nonnull %220) #7\l  br label %221\l}"];
	Node0x5621ffa1fad0 -> Node0x5621ffa1fe10;
	Node0x5621ffa1fe10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%221:\l221:                                              \l  %222 = phi \{ i8*, i32 \} [ %215, %214 ], [ %218, %217 ]\l  resume \{ i8*, i32 \} %222\l}"];
}
