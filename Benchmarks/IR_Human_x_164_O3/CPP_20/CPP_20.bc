; ModuleID = '../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: uwtable
define dso_local void @_Z21find_closest_elementsSt6vectorIfSaIfEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to [2 x float]*
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to [2 x float]*
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast i64* %3 to i8*
  %12 = bitcast i64* %3 to float*
  %13 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %14 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %15 = bitcast %"class.std::vector"* %0 to i8**
  %16 = bitcast float** %9 to i8**
  %17 = bitcast float** %14 to i8**
  %18 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %18, i8 0, i64 24, i1 false)
  %19 = load float*, float** %7, align 8, !tbaa !3
  %20 = load float*, float** %8, align 8, !tbaa !8
  %21 = icmp eq float* %19, %20
  br i1 %21, label %41, label %50

22:                                               ; preds = %151
  %23 = ptrtoint float* %156 to i64
  %24 = ptrtoint float* %155 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 2
  br label %27

27:                                               ; preds = %22, %50
  %28 = phi i64 [ %26, %22 ], [ %65, %50 ]
  %29 = phi float* [ %152, %22 ], [ %51, %50 ]
  %30 = phi float* [ %153, %22 ], [ %52, %50 ]
  %31 = phi float* [ %154, %22 ], [ %53, %50 ]
  %32 = phi float* [ %155, %22 ], [ %54, %50 ]
  %33 = phi float* [ %156, %22 ], [ %55, %50 ]
  %34 = phi float* [ %159, %22 ], [ %56, %50 ]
  %35 = phi float* [ %160, %22 ], [ %57, %50 ]
  %36 = phi float* [ %161, %22 ], [ %58, %50 ]
  %37 = icmp ugt i64 %28, %61
  %38 = add i64 %60, 1
  br i1 %37, label %50, label %39, !llvm.loop !9

39:                                               ; preds = %27
  %40 = load float*, float** %10, align 8, !tbaa !8
  br label %41

41:                                               ; preds = %39, %2
  %42 = phi float* [ %29, %39 ], [ null, %2 ]
  %43 = phi float* [ %30, %39 ], [ null, %2 ]
  %44 = phi float* [ %31, %39 ], [ null, %2 ]
  %45 = phi float* [ %40, %39 ], [ null, %2 ]
  %46 = load float, float* %45, align 4, !tbaa !11
  %47 = getelementptr inbounds float, float* %45, i64 1
  %48 = load float, float* %47, align 4, !tbaa !11
  %49 = fcmp ogt float %46, %48
  br i1 %49, label %168, label %213

50:                                               ; preds = %2, %27
  %51 = phi float* [ %29, %27 ], [ null, %2 ]
  %52 = phi float* [ %30, %27 ], [ null, %2 ]
  %53 = phi float* [ %31, %27 ], [ null, %2 ]
  %54 = phi float* [ %32, %27 ], [ %20, %2 ]
  %55 = phi float* [ %33, %27 ], [ %19, %2 ]
  %56 = phi float* [ %34, %27 ], [ null, %2 ]
  %57 = phi float* [ %35, %27 ], [ null, %2 ]
  %58 = phi float* [ %36, %27 ], [ null, %2 ]
  %59 = phi i64 [ %61, %27 ], [ 0, %2 ]
  %60 = phi i64 [ %38, %27 ], [ 1, %2 ]
  %61 = add nuw i64 %59, 1
  %62 = ptrtoint float* %55 to i64
  %63 = ptrtoint float* %54 to i64
  %64 = sub i64 %62, %63
  %65 = ashr exact i64 %64, 2
  %66 = icmp ugt i64 %65, %61
  br i1 %66, label %67, label %27

67:                                               ; preds = %50, %151
  %68 = phi float* [ %152, %151 ], [ %51, %50 ]
  %69 = phi float* [ %153, %151 ], [ %52, %50 ]
  %70 = phi float* [ %154, %151 ], [ %53, %50 ]
  %71 = phi float* [ %155, %151 ], [ %54, %50 ]
  %72 = phi float* [ %156, %151 ], [ %55, %50 ]
  %73 = phi float* [ %157, %151 ], [ %54, %50 ]
  %74 = phi float* [ %158, %151 ], [ %55, %50 ]
  %75 = phi float* [ %159, %151 ], [ %56, %50 ]
  %76 = phi float* [ %160, %151 ], [ %57, %50 ]
  %77 = phi float* [ %161, %151 ], [ %58, %50 ]
  %78 = phi i64 [ %162, %151 ], [ %60, %50 ]
  %79 = load float*, float** %10, align 8, !tbaa !8
  %80 = ptrtoint float* %77 to i64
  %81 = ptrtoint float* %79 to i64
  %82 = sub i64 %80, %81
  %83 = ashr exact i64 %82, 2
  %84 = icmp eq i64 %82, 0
  %85 = getelementptr inbounds float, float* %73, i64 %59
  %86 = load float, float* %85, align 4, !tbaa !11
  br i1 %84, label %102, label %87

87:                                               ; preds = %67
  %88 = getelementptr inbounds float, float* %73, i64 %78
  %89 = load float, float* %88, align 4, !tbaa !11
  %90 = load float, float* %79, align 4, !tbaa !11
  %91 = getelementptr inbounds float, float* %79, i64 1
  %92 = load float, float* %91, align 4, !tbaa !11
  %93 = insertelement <2 x float> poison, float %86, i32 0
  %94 = insertelement <2 x float> %93, float %90, i32 1
  %95 = insertelement <2 x float> poison, float %89, i32 0
  %96 = insertelement <2 x float> %95, float %92, i32 1
  %97 = fsub <2 x float> %94, %96
  %98 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %97)
  %99 = extractelement <2 x float> %98, i32 0
  %100 = extractelement <2 x float> %98, i32 1
  %101 = fcmp olt float %99, %100
  br i1 %101, label %102, label %151

102:                                              ; preds = %67, %87
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  store float %86, float* %12, align 8, !tbaa !11
  %103 = getelementptr inbounds float, float* %73, i64 %78
  %104 = load float, float* %103, align 4, !tbaa !11
  store float %104, float* %13, align 4, !tbaa !11
  %105 = load float*, float** %14, align 8, !tbaa !13
  %106 = ptrtoint float* %105 to i64
  %107 = sub i64 %106, %81
  %108 = ashr exact i64 %107, 2
  %109 = icmp ult i64 %108, 2
  br i1 %109, label %110, label %121

110:                                              ; preds = %102
  %111 = invoke noalias nonnull i8* @_Znwm(i64 8) #9
          to label %112 unwind label %214

112:                                              ; preds = %110
  %113 = bitcast i8* %111 to i64*
  %114 = load i64, i64* %3, align 8
  store i64 %114, i64* %113, align 4
  %115 = icmp eq float* %79, null
  br i1 %115, label %118, label %116

116:                                              ; preds = %112
  %117 = bitcast float* %79 to i8*
  tail call void @_ZdlPv(i8* nonnull %117) #8
  br label %118

118:                                              ; preds = %116, %112
  store i8* %111, i8** %15, align 8, !tbaa !8
  %119 = getelementptr inbounds i8, i8* %111, i64 8
  store i8* %119, i8** %16, align 8, !tbaa !3
  store i8* %119, i8** %17, align 8, !tbaa !13
  %120 = bitcast i8* %119 to float*
  br label %143

121:                                              ; preds = %102
  %122 = icmp ult i64 %83, 2
  br i1 %122, label %129, label %123

123:                                              ; preds = %121
  %124 = bitcast float* %79 to i64*
  %125 = load i64, i64* %3, align 8
  store i64 %125, i64* %124, align 4
  %126 = getelementptr inbounds float, float* %79, i64 2
  %127 = icmp eq float* %76, %126
  br i1 %127, label %143, label %128

128:                                              ; preds = %123
  store float* %126, float** %9, align 8, !tbaa !3
  br label %143

129:                                              ; preds = %121
  %130 = getelementptr inbounds float, float* %12, i64 %83
  %131 = icmp eq i64 %82, 0
  br i1 %131, label %136, label %132

132:                                              ; preds = %129
  %133 = bitcast float* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %133, i8* nonnull align 8 %11, i64 %82, i1 false) #8
  %134 = mul nsw i64 %83, -4
  %135 = add nsw i64 %134, 8
  br label %136

136:                                              ; preds = %129, %132
  %137 = phi i64 [ %135, %132 ], [ 8, %129 ]
  %138 = phi float* [ %75, %132 ], [ %77, %129 ]
  %139 = bitcast float* %138 to i8*
  %140 = bitcast float* %130 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %139, i8* nonnull align 4 %140, i64 %137, i1 false) #8
  %141 = lshr exact i64 %137, 2
  %142 = getelementptr inbounds float, float* %138, i64 %141
  store float* %142, float** %9, align 8, !tbaa !3
  br label %143

143:                                              ; preds = %118, %123, %128, %136
  %144 = phi float* [ %120, %118 ], [ %68, %123 ], [ %126, %128 ], [ %142, %136 ]
  %145 = phi float* [ %120, %118 ], [ %69, %123 ], [ %126, %128 ], [ %142, %136 ]
  %146 = phi float* [ %120, %118 ], [ %70, %123 ], [ %126, %128 ], [ %142, %136 ]
  %147 = phi float* [ %120, %118 ], [ %75, %123 ], [ %126, %128 ], [ %142, %136 ]
  %148 = phi float* [ %120, %118 ], [ %76, %123 ], [ %126, %128 ], [ %142, %136 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  %149 = load float*, float** %7, align 8, !tbaa !3
  %150 = load float*, float** %8, align 8, !tbaa !8
  br label %151

151:                                              ; preds = %87, %143
  %152 = phi float* [ %68, %87 ], [ %144, %143 ]
  %153 = phi float* [ %69, %87 ], [ %145, %143 ]
  %154 = phi float* [ %70, %87 ], [ %146, %143 ]
  %155 = phi float* [ %71, %87 ], [ %150, %143 ]
  %156 = phi float* [ %72, %87 ], [ %149, %143 ]
  %157 = phi float* [ %73, %87 ], [ %150, %143 ]
  %158 = phi float* [ %74, %87 ], [ %149, %143 ]
  %159 = phi float* [ %75, %87 ], [ %147, %143 ]
  %160 = phi float* [ %76, %87 ], [ %148, %143 ]
  %161 = phi float* [ %77, %87 ], [ %148, %143 ]
  %162 = add i64 %78, 1
  %163 = ptrtoint float* %158 to i64
  %164 = ptrtoint float* %157 to i64
  %165 = sub i64 %163, %164
  %166 = ashr exact i64 %165, 2
  %167 = icmp ugt i64 %166, %162
  br i1 %167, label %67, label %22, !llvm.loop !14

168:                                              ; preds = %41
  %169 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #8
  %170 = bitcast i64* %5 to float*
  store float %48, float* %170, align 8, !tbaa !11
  %171 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 1
  store float %46, float* %171, align 4, !tbaa !11
  %172 = load float*, float** %14, align 8, !tbaa !13
  %173 = ptrtoint float* %172 to i64
  %174 = ptrtoint float* %45 to i64
  %175 = sub i64 %173, %174
  %176 = ashr exact i64 %175, 2
  %177 = icmp ult i64 %176, 2
  br i1 %177, label %178, label %185

178:                                              ; preds = %168
  %179 = invoke noalias nonnull i8* @_Znwm(i64 8) #9
          to label %180 unwind label %211

180:                                              ; preds = %178
  %181 = bitcast i8* %179 to i64*
  %182 = load i64, i64* %5, align 8
  store i64 %182, i64* %181, align 4
  %183 = bitcast float* %45 to i8*
  tail call void @_ZdlPv(i8* nonnull %183) #8
  store i8* %179, i8** %15, align 8, !tbaa !8
  %184 = getelementptr inbounds i8, i8* %179, i64 8
  store i8* %184, i8** %16, align 8, !tbaa !3
  store i8* %184, i8** %17, align 8, !tbaa !13
  br label %210

185:                                              ; preds = %168
  %186 = ptrtoint float* %44 to i64
  %187 = sub i64 %186, %174
  %188 = ashr exact i64 %187, 2
  %189 = icmp ult i64 %188, 2
  br i1 %189, label %196, label %190

190:                                              ; preds = %185
  %191 = bitcast float* %45 to i64*
  %192 = load i64, i64* %5, align 8
  store i64 %192, i64* %191, align 4
  %193 = getelementptr inbounds float, float* %45, i64 2
  %194 = icmp eq float* %43, %193
  br i1 %194, label %210, label %195

195:                                              ; preds = %190
  store float* %193, float** %9, align 8, !tbaa !3
  br label %210

196:                                              ; preds = %185
  %197 = getelementptr inbounds float, float* %170, i64 %188
  %198 = icmp eq i64 %187, 0
  br i1 %198, label %203, label %199

199:                                              ; preds = %196
  %200 = bitcast float* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %200, i8* nonnull align 8 %169, i64 %187, i1 false) #8
  %201 = mul nsw i64 %188, -4
  %202 = add nsw i64 %201, 8
  br label %203

203:                                              ; preds = %196, %199
  %204 = phi i64 [ %202, %199 ], [ 8, %196 ]
  %205 = phi float* [ %42, %199 ], [ %44, %196 ]
  %206 = bitcast float* %205 to i8*
  %207 = bitcast float* %197 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %206, i8* nonnull align 4 %207, i64 %204, i1 false) #8
  %208 = lshr exact i64 %204, 2
  %209 = getelementptr inbounds float, float* %205, i64 %208
  store float* %209, float** %9, align 8, !tbaa !3
  br label %210

210:                                              ; preds = %180, %190, %195, %203
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #8
  br label %213

211:                                              ; preds = %178
  %212 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #8
  br label %217

213:                                              ; preds = %41, %210
  ret void

214:                                              ; preds = %110
  %215 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  %216 = icmp eq float* %79, null
  br i1 %216, label %221, label %217

217:                                              ; preds = %211, %214
  %218 = phi { i8*, i32 } [ %212, %211 ], [ %215, %214 ]
  %219 = phi float* [ %45, %211 ], [ %79, %214 ]
  %220 = bitcast float* %219 to i8*
  tail call void @_ZdlPv(i8* nonnull %220) #8
  br label %221

221:                                              ; preds = %214, %217
  %222 = phi { i8*, i32 } [ %215, %214 ], [ %218, %217 ]
  resume { i8*, i32 } %222
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #7

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { argmemonly nofree nounwind willreturn }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }
attributes #9 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!12, !12, i64 0}
!12 = !{!"float", !6, i64 0}
!13 = !{!4, !5, i64 16}
!14 = distinct !{!14, !10}
