; ModuleID = '../../Human_xBenchmarks_164/CPP_16/CPP_16.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_16/CPP_16.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local i32 @_Z25count_distinct_charactersNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8, !tbaa !10
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %41, label %8

8:                                                ; preds = %1, %8
  %9 = phi i8* [ %14, %8 ], [ %3, %1 ]
  %10 = load i8, i8* %9, align 1, !tbaa !11
  %11 = sext i8 %10 to i32
  %12 = tail call i32 @tolower(i32 %11)
  %13 = trunc i32 %12 to i8
  store i8 %13, i8* %9, align 1, !tbaa !11
  %14 = getelementptr inbounds i8, i8* %9, i64 1
  %15 = icmp eq i8* %14, %6
  br i1 %15, label %16, label %8, !llvm.loop !12

16:                                               ; preds = %8
  %17 = load i64, i64* %4, align 8, !tbaa !10
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %41, label %19

19:                                               ; preds = %16, %136
  %20 = phi i64 [ %140, %136 ], [ 0, %16 ]
  %21 = phi i8* [ %139, %136 ], [ null, %16 ]
  %22 = phi i8* [ %138, %136 ], [ null, %16 ]
  %23 = phi i8* [ %137, %136 ], [ null, %16 ]
  %24 = ptrtoint i8* %22 to i64
  %25 = ptrtoint i8* %23 to i64
  %26 = sub i64 %24, %25
  %27 = icmp eq i64 %26, 0
  %28 = load i8*, i8** %2, align 8, !tbaa !3
  %29 = getelementptr inbounds i8, i8* %28, i64 %20
  br i1 %27, label %98, label %30

30:                                               ; preds = %19
  %31 = load i8, i8* %29, align 1, !tbaa !11
  %32 = xor i64 %25, -1
  %33 = add i64 %32, %24
  %34 = and i64 %26, 3
  %35 = icmp ult i64 %33, 3
  br i1 %35, label %48, label %36

36:                                               ; preds = %30
  %37 = and i64 %26, -4
  br label %68

38:                                               ; preds = %136
  %39 = icmp eq i8* %137, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  tail call void @_ZdlPv(i8* nonnull %137) #6
  br label %41

41:                                               ; preds = %1, %16, %38, %40
  %42 = phi i8* [ %138, %38 ], [ %138, %40 ], [ null, %16 ], [ null, %1 ]
  %43 = phi i8* [ null, %38 ], [ %137, %40 ], [ null, %16 ], [ null, %1 ]
  %44 = ptrtoint i8* %42 to i64
  %45 = ptrtoint i8* %43 to i64
  %46 = sub i64 %44, %45
  %47 = trunc i64 %46 to i32
  ret i32 %47

48:                                               ; preds = %68, %30
  %49 = phi i8 [ undef, %30 ], [ %90, %68 ]
  %50 = phi i64 [ 0, %30 ], [ %91, %68 ]
  %51 = phi i8 [ 0, %30 ], [ %90, %68 ]
  %52 = icmp eq i64 %34, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %48, %53
  %54 = phi i64 [ %61, %53 ], [ %50, %48 ]
  %55 = phi i8 [ %60, %53 ], [ %51, %48 ]
  %56 = phi i64 [ %62, %53 ], [ %34, %48 ]
  %57 = getelementptr inbounds i8, i8* %23, i64 %54
  %58 = load i8, i8* %57, align 1, !tbaa !11
  %59 = icmp eq i8 %58, %31
  %60 = select i1 %59, i8 1, i8 %55
  %61 = add nuw nsw i64 %54, 1
  %62 = add i64 %56, -1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %53, !llvm.loop !14

64:                                               ; preds = %53, %48
  %65 = phi i8 [ %49, %48 ], [ %60, %53 ]
  %66 = and i8 %65, 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %94, label %136

68:                                               ; preds = %68, %36
  %69 = phi i64 [ 0, %36 ], [ %91, %68 ]
  %70 = phi i8 [ 0, %36 ], [ %90, %68 ]
  %71 = phi i64 [ %37, %36 ], [ %92, %68 ]
  %72 = getelementptr inbounds i8, i8* %23, i64 %69
  %73 = load i8, i8* %72, align 1, !tbaa !11
  %74 = icmp eq i8 %73, %31
  %75 = or i64 %69, 1
  %76 = getelementptr inbounds i8, i8* %23, i64 %75
  %77 = load i8, i8* %76, align 1, !tbaa !11
  %78 = icmp eq i8 %77, %31
  %79 = or i64 %69, 2
  %80 = getelementptr inbounds i8, i8* %23, i64 %79
  %81 = load i8, i8* %80, align 1, !tbaa !11
  %82 = icmp eq i8 %81, %31
  %83 = or i64 %69, 3
  %84 = getelementptr inbounds i8, i8* %23, i64 %83
  %85 = load i8, i8* %84, align 1, !tbaa !11
  %86 = icmp eq i8 %85, %31
  %87 = select i1 %86, i1 true, i1 %82
  %88 = select i1 %87, i1 true, i1 %78
  %89 = select i1 %88, i1 true, i1 %74
  %90 = select i1 %89, i8 1, i8 %70
  %91 = add nuw nsw i64 %69, 4
  %92 = add i64 %71, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %48, label %68, !llvm.loop !16

94:                                               ; preds = %64
  %95 = load i8*, i8** %2, align 8, !tbaa !3
  %96 = getelementptr inbounds i8, i8* %95, i64 %20
  %97 = icmp eq i8* %22, %21
  br i1 %97, label %104, label %100

98:                                               ; preds = %19
  %99 = icmp eq i8* %22, %21
  br i1 %99, label %108, label %100

100:                                              ; preds = %98, %94
  %101 = phi i8* [ %29, %98 ], [ %96, %94 ]
  %102 = load i8, i8* %101, align 1, !tbaa !11
  store i8 %102, i8* %22, align 1, !tbaa !11
  %103 = getelementptr inbounds i8, i8* %22, i64 1
  br label %136

104:                                              ; preds = %94
  %105 = icmp eq i64 %26, 9223372036854775807
  br i1 %105, label %106, label %108

106:                                              ; preds = %104
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %107 unwind label %131

107:                                              ; preds = %106
  unreachable

108:                                              ; preds = %98, %104
  %109 = phi i64 [ 1, %98 ], [ %26, %104 ]
  %110 = phi i8* [ %29, %98 ], [ %96, %104 ]
  %111 = add i64 %109, %26
  %112 = icmp ult i64 %111, %26
  %113 = icmp slt i64 %111, 0
  %114 = or i1 %112, %113
  %115 = select i1 %114, i64 9223372036854775807, i64 %111
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %108
  %118 = invoke noalias nonnull i8* @_Znwm(i64 %115) #8
          to label %119 unwind label %133

119:                                              ; preds = %117, %108
  %120 = phi i8* [ null, %108 ], [ %118, %117 ]
  %121 = getelementptr inbounds i8, i8* %120, i64 %26
  %122 = load i8, i8* %110, align 1, !tbaa !11
  store i8 %122, i8* %121, align 1, !tbaa !11
  %123 = icmp sgt i64 %26, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %120, i8* align 1 %23, i64 %26, i1 false) #6
  br label %125

125:                                              ; preds = %119, %124
  %126 = getelementptr inbounds i8, i8* %121, i64 1
  %127 = icmp eq i8* %23, null
  br i1 %127, label %129, label %128

128:                                              ; preds = %125
  tail call void @_ZdlPv(i8* nonnull %23) #6
  br label %129

129:                                              ; preds = %128, %125
  %130 = getelementptr inbounds i8, i8* %120, i64 %115
  br label %136

131:                                              ; preds = %106
  %132 = landingpad { i8*, i32 }
          cleanup
  br label %143

133:                                              ; preds = %117
  %134 = landingpad { i8*, i32 }
          cleanup
  %135 = icmp eq i8* %23, null
  br i1 %135, label %145, label %143

136:                                              ; preds = %129, %100, %64
  %137 = phi i8* [ %23, %64 ], [ %120, %129 ], [ %23, %100 ]
  %138 = phi i8* [ %22, %64 ], [ %126, %129 ], [ %103, %100 ]
  %139 = phi i8* [ %21, %64 ], [ %130, %129 ], [ %21, %100 ]
  %140 = add nuw i64 %20, 1
  %141 = load i64, i64* %4, align 8, !tbaa !10
  %142 = icmp ugt i64 %141, %140
  br i1 %142, label %19, label %38, !llvm.loop !17

143:                                              ; preds = %131, %133
  %144 = phi { i8*, i32 } [ %132, %131 ], [ %134, %133 ]
  tail call void @_ZdlPv(i8* nonnull %23) #6
  br label %145

145:                                              ; preds = %133, %143
  %146 = phi { i8*, i32 } [ %134, %133 ], [ %144, %143 ]
  resume { i8*, i32 } %146
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare dso_local i32 @tolower(i32) local_unnamed_addr #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { noreturn }
attributes #8 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !6, i64 0}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !5, i64 0, !9, i64 8, !7, i64 16}
!5 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!4, !9, i64 8}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !13}
!17 = distinct !{!17, !13}
