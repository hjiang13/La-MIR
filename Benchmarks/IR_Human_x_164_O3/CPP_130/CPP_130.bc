; ModuleID = '../../Human_xBenchmarks_164/CPP_130/CPP_130.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_130/CPP_130.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str.1 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z3trii(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = tail call noalias nonnull i8* @_Znwm(i64 8) #6
  %4 = bitcast i8* %3 to i32*
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i32*
  store i32 1, i32* %4, align 4
  %7 = getelementptr inbounds i8, i8* %3, i64 4
  %8 = bitcast i8* %7 to i32*
  store i32 3, i32* %8, align 4
  %9 = icmp eq i32 %1, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = icmp slt i32 %1, 2
  br i1 %11, label %20, label %12

12:                                               ; preds = %10
  %13 = add nuw i32 %1, 1
  %14 = zext i32 %13 to i64
  br label %27

15:                                               ; preds = %2
  %16 = bitcast %"class.std::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %16, i8 0, i64 24, i1 false) #7
  %17 = invoke noalias nonnull i8* @_Znwm(i64 4) #6
          to label %136 unwind label %18

18:                                               ; preds = %15
  %19 = landingpad { i8*, i32 }
          cleanup
  br label %152

20:                                               ; preds = %130, %10
  %21 = phi i32* [ %6, %10 ], [ %131, %130 ]
  %22 = phi i32* [ %6, %10 ], [ %132, %130 ]
  %23 = phi i32* [ %4, %10 ], [ %133, %130 ]
  %24 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32* %23, i32** %24, align 8, !tbaa !3
  %25 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32* %22, i32** %25, align 8, !tbaa !8
  %26 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store i32* %21, i32** %26, align 8, !tbaa !9
  br label %144

27:                                               ; preds = %12, %130
  %28 = phi i64 [ 2, %12 ], [ %134, %130 ]
  %29 = phi i32* [ %4, %12 ], [ %133, %130 ]
  %30 = phi i32* [ %6, %12 ], [ %132, %130 ]
  %31 = phi i32* [ %6, %12 ], [ %131, %130 ]
  %32 = trunc i64 %28 to i32
  %33 = and i32 %32, 1
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %77

35:                                               ; preds = %27
  %36 = lshr i32 %32, 1
  %37 = add nuw nsw i32 %36, 1
  %38 = icmp eq i32* %30, %31
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  store i32 %37, i32* %30, align 4, !tbaa !10
  %40 = getelementptr inbounds i32, i32* %30, i64 1
  br label %130

41:                                               ; preds = %35
  %42 = ptrtoint i32* %30 to i64
  %43 = ptrtoint i32* %29 to i64
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 2
  %46 = icmp eq i64 %44, 9223372036854775804
  br i1 %46, label %47, label %49

47:                                               ; preds = %41
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #8
          to label %48 unwind label %147

48:                                               ; preds = %47
  unreachable

49:                                               ; preds = %41
  %50 = icmp eq i64 %44, 0
  %51 = select i1 %50, i64 1, i64 %45
  %52 = add nsw i64 %51, %45
  %53 = icmp ult i64 %52, %45
  %54 = icmp ugt i64 %52, 2305843009213693951
  %55 = or i1 %53, %54
  %56 = select i1 %55, i64 2305843009213693951, i64 %52
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %49
  %59 = shl nuw nsw i64 %56, 2
  %60 = invoke noalias nonnull i8* @_Znwm(i64 %59) #6
          to label %61 unwind label %145

61:                                               ; preds = %58
  %62 = bitcast i8* %60 to i32*
  br label %63

63:                                               ; preds = %61, %49
  %64 = phi i32* [ %62, %61 ], [ null, %49 ]
  %65 = getelementptr inbounds i32, i32* %64, i64 %45
  store i32 %37, i32* %65, align 4, !tbaa !10
  %66 = icmp sgt i64 %44, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %63
  %68 = bitcast i32* %64 to i8*
  %69 = bitcast i32* %29 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %69, i64 %44, i1 false) #7
  br label %70

70:                                               ; preds = %67, %63
  %71 = getelementptr inbounds i32, i32* %65, i64 1
  %72 = icmp eq i32* %29, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %70
  %74 = bitcast i32* %29 to i8*
  tail call void @_ZdlPv(i8* nonnull %74) #7
  br label %75

75:                                               ; preds = %73, %70
  %76 = getelementptr inbounds i32, i32* %64, i64 %56
  br label %130

77:                                               ; preds = %27
  %78 = add nsw i64 %28, -1
  %79 = getelementptr inbounds i32, i32* %29, i64 %78
  %80 = load i32, i32* %79, align 4, !tbaa !10
  %81 = add nsw i64 %28, -2
  %82 = getelementptr inbounds i32, i32* %29, i64 %81
  %83 = load i32, i32* %82, align 4, !tbaa !10
  %84 = trunc i64 %28 to i32
  %85 = add i32 %84, 1
  %86 = lshr i32 %85, 1
  %87 = add nuw nsw i32 %86, 1
  %88 = add i32 %87, %80
  %89 = add i32 %88, %83
  %90 = icmp eq i32* %30, %31
  br i1 %90, label %93, label %91

91:                                               ; preds = %77
  store i32 %89, i32* %30, align 4, !tbaa !10
  %92 = getelementptr inbounds i32, i32* %30, i64 1
  br label %130

93:                                               ; preds = %77
  %94 = ptrtoint i32* %30 to i64
  %95 = ptrtoint i32* %29 to i64
  %96 = sub i64 %94, %95
  %97 = ashr exact i64 %96, 2
  %98 = icmp eq i64 %96, 9223372036854775804
  br i1 %98, label %99, label %101

99:                                               ; preds = %93
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #8
          to label %100 unwind label %128

100:                                              ; preds = %99
  unreachable

101:                                              ; preds = %93
  %102 = icmp eq i64 %96, 0
  %103 = select i1 %102, i64 1, i64 %97
  %104 = add nsw i64 %103, %97
  %105 = icmp ult i64 %104, %97
  %106 = icmp ugt i64 %104, 2305843009213693951
  %107 = or i1 %105, %106
  %108 = select i1 %107, i64 2305843009213693951, i64 %104
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %115, label %110

110:                                              ; preds = %101
  %111 = shl nuw nsw i64 %108, 2
  %112 = invoke noalias nonnull i8* @_Znwm(i64 %111) #6
          to label %113 unwind label %126

113:                                              ; preds = %110
  %114 = bitcast i8* %112 to i32*
  br label %115

115:                                              ; preds = %113, %101
  %116 = phi i32* [ %114, %113 ], [ null, %101 ]
  %117 = getelementptr inbounds i32, i32* %116, i64 %97
  store i32 %89, i32* %117, align 4, !tbaa !10
  %118 = icmp sgt i64 %96, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %115
  %120 = bitcast i32* %116 to i8*
  %121 = bitcast i32* %29 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %121, i64 %96, i1 false) #7
  br label %122

122:                                              ; preds = %115, %119
  %123 = bitcast i32* %29 to i8*
  %124 = getelementptr inbounds i32, i32* %117, i64 1
  tail call void @_ZdlPv(i8* nonnull %123) #7
  %125 = getelementptr inbounds i32, i32* %116, i64 %108
  br label %130

126:                                              ; preds = %110
  %127 = landingpad { i8*, i32 }
          cleanup
  br label %152

128:                                              ; preds = %99
  %129 = landingpad { i8*, i32 }
          cleanup
  br label %152

130:                                              ; preds = %91, %122, %39, %75
  %131 = phi i32* [ %76, %75 ], [ %31, %39 ], [ %125, %122 ], [ %31, %91 ]
  %132 = phi i32* [ %71, %75 ], [ %40, %39 ], [ %124, %122 ], [ %92, %91 ]
  %133 = phi i32* [ %64, %75 ], [ %29, %39 ], [ %116, %122 ], [ %29, %91 ]
  %134 = add nuw nsw i64 %28, 1
  %135 = icmp eq i64 %134, %14
  br i1 %135, label %20, label %27, !llvm.loop !12

136:                                              ; preds = %15
  %137 = bitcast i8* %17 to i32*
  %138 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %17, i8** %138, align 8, !tbaa !3
  %139 = getelementptr inbounds i8, i8* %17, i64 4
  %140 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %141 = bitcast i32** %140 to i8**
  store i8* %139, i8** %141, align 8, !tbaa !9
  store i32 1, i32* %137, align 4
  %142 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %143 = bitcast i32** %142 to i8**
  store i8* %139, i8** %143, align 8, !tbaa !8
  tail call void @_ZdlPv(i8* nonnull %3) #7
  br label %144

144:                                              ; preds = %20, %136
  ret void

145:                                              ; preds = %58
  %146 = landingpad { i8*, i32 }
          cleanup
  br label %149

147:                                              ; preds = %47
  %148 = landingpad { i8*, i32 }
          cleanup
  br label %149

149:                                              ; preds = %147, %145
  %150 = phi { i8*, i32 } [ %146, %145 ], [ %148, %147 ]
  %151 = icmp eq i32* %29, null
  br i1 %151, label %156, label %152

152:                                              ; preds = %18, %126, %128, %149
  %153 = phi { i8*, i32 } [ %150, %149 ], [ %19, %18 ], [ %127, %126 ], [ %129, %128 ]
  %154 = phi i32* [ %29, %149 ], [ %4, %18 ], [ %29, %126 ], [ %29, %128 ]
  %155 = bitcast i32* %154 to i8*
  tail call void @_ZdlPv(i8* nonnull %155) #7
  br label %156

156:                                              ; preds = %152, %149
  %157 = phi { i8*, i32 } [ %150, %149 ], [ %153, %152 ]
  resume { i8*, i32 } %157
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #4 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly nofree nounwind willreturn writeonly }
attributes #6 = { allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 8}
!9 = !{!4, !5, i64 16}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
