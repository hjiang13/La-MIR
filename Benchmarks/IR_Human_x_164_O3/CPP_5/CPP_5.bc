; ModuleID = '../../Human_xBenchmarks_164/CPP_5/CPP_5.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_5/CPP_5.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z11intersperseSt6vectorIiSaIiEEi(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  %6 = load i32*, i32** %4, align 8, !tbaa !3
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8, !tbaa !8
  %9 = icmp eq i32* %6, %8
  br i1 %9, label %23, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %13 = call noalias nonnull i8* @_Znwm(i64 4) #6
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %8, align 4, !tbaa !9
  store i32 %15, i32* %14, align 4, !tbaa !9
  %16 = getelementptr inbounds i8, i8* %13, i64 4
  %17 = bitcast i8* %16 to i32*
  %18 = load i32*, i32** %4, align 8, !tbaa !3
  %19 = load i32*, i32** %7, align 8, !tbaa !8
  %20 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %13, i8** %20, align 8, !tbaa !8
  %21 = bitcast i32** %11 to i8**
  store i8* %16, i8** %21, align 8, !tbaa !3
  %22 = bitcast i32** %12 to i8**
  store i8* %16, i8** %22, align 8, !tbaa !11
  br label %23

23:                                               ; preds = %10, %3
  %24 = phi i32* [ %14, %10 ], [ null, %3 ]
  %25 = phi i32* [ %17, %10 ], [ null, %3 ]
  %26 = phi i32* [ %19, %10 ], [ %6, %3 ]
  %27 = phi i32* [ %18, %10 ], [ %6, %3 ]
  %28 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = ptrtoint i32* %27 to i64
  %32 = ptrtoint i32* %26 to i64
  %33 = sub i64 %31, %32
  %34 = ashr exact i64 %33, 2
  %35 = icmp ugt i64 %34, 1
  br i1 %35, label %36, label %148

36:                                               ; preds = %23, %130
  %37 = phi i32* [ %131, %130 ], [ %26, %23 ]
  %38 = phi i32* [ %132, %130 ], [ %25, %23 ]
  %39 = phi i32* [ %133, %130 ], [ %24, %23 ]
  %40 = phi i32* [ %134, %130 ], [ %25, %23 ]
  %41 = phi i64 [ %135, %130 ], [ 1, %23 ]
  %42 = icmp eq i32* %40, %38
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  store i32 %2, i32* %40, align 4, !tbaa !9
  %44 = getelementptr inbounds i32, i32* %40, i64 1
  store i32* %44, i32** %28, align 8, !tbaa !3
  br label %82

45:                                               ; preds = %36
  %46 = ptrtoint i32* %38 to i64
  %47 = ptrtoint i32* %39 to i64
  %48 = sub i64 %46, %47
  %49 = ashr exact i64 %48, 2
  %50 = icmp eq i64 %48, 9223372036854775804
  br i1 %50, label %51, label %53

51:                                               ; preds = %45
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %52 unwind label %145

52:                                               ; preds = %51
  unreachable

53:                                               ; preds = %45
  %54 = icmp eq i64 %48, 0
  %55 = select i1 %54, i64 1, i64 %49
  %56 = add nsw i64 %55, %49
  %57 = icmp ult i64 %56, %49
  %58 = icmp ugt i64 %56, 2305843009213693951
  %59 = or i1 %57, %58
  %60 = select i1 %59, i64 2305843009213693951, i64 %56
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %53
  %63 = shl nuw nsw i64 %60, 2
  %64 = invoke noalias nonnull i8* @_Znwm(i64 %63) #6
          to label %65 unwind label %142

65:                                               ; preds = %62
  %66 = bitcast i8* %64 to i32*
  br label %67

67:                                               ; preds = %65, %53
  %68 = phi i32* [ %66, %65 ], [ null, %53 ]
  %69 = getelementptr inbounds i32, i32* %68, i64 %49
  store i32 %2, i32* %69, align 4, !tbaa !9
  %70 = icmp sgt i64 %48, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %67
  %72 = bitcast i32* %68 to i8*
  %73 = bitcast i32* %39 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %73, i64 %48, i1 false) #8
  br label %74

74:                                               ; preds = %71, %67
  %75 = getelementptr inbounds i32, i32* %69, i64 1
  %76 = icmp eq i32* %39, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* nonnull %78) #8
  br label %79

79:                                               ; preds = %77, %74
  store i32* %68, i32** %30, align 8, !tbaa !8
  store i32* %75, i32** %28, align 8, !tbaa !3
  %80 = getelementptr inbounds i32, i32* %68, i64 %60
  store i32* %80, i32** %29, align 8, !tbaa !11
  %81 = load i32*, i32** %7, align 8, !tbaa !8
  br label %82

82:                                               ; preds = %79, %43
  %83 = phi i32* [ %81, %79 ], [ %37, %43 ]
  %84 = phi i32* [ %80, %79 ], [ %38, %43 ]
  %85 = phi i32* [ %75, %79 ], [ %44, %43 ]
  %86 = phi i32* [ %68, %79 ], [ %39, %43 ]
  %87 = getelementptr inbounds i32, i32* %83, i64 %41
  %88 = icmp eq i32* %85, %84
  br i1 %88, label %92, label %89

89:                                               ; preds = %82
  %90 = load i32, i32* %87, align 4, !tbaa !9
  store i32 %90, i32* %85, align 4, !tbaa !9
  %91 = getelementptr inbounds i32, i32* %85, i64 1
  store i32* %91, i32** %28, align 8, !tbaa !3
  br label %130

92:                                               ; preds = %82
  %93 = ptrtoint i32* %84 to i64
  %94 = ptrtoint i32* %86 to i64
  %95 = sub i64 %93, %94
  %96 = ashr exact i64 %95, 2
  %97 = icmp eq i64 %95, 9223372036854775804
  br i1 %97, label %98, label %100

98:                                               ; preds = %92
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %99 unwind label %145

99:                                               ; preds = %98
  unreachable

100:                                              ; preds = %92
  %101 = icmp eq i64 %95, 0
  %102 = select i1 %101, i64 1, i64 %96
  %103 = add nsw i64 %102, %96
  %104 = icmp ult i64 %103, %96
  %105 = icmp ugt i64 %103, 2305843009213693951
  %106 = or i1 %104, %105
  %107 = select i1 %106, i64 2305843009213693951, i64 %103
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %114, label %109

109:                                              ; preds = %100
  %110 = shl nuw nsw i64 %107, 2
  %111 = invoke noalias nonnull i8* @_Znwm(i64 %110) #6
          to label %112 unwind label %142

112:                                              ; preds = %109
  %113 = bitcast i8* %111 to i32*
  br label %114

114:                                              ; preds = %112, %100
  %115 = phi i32* [ %113, %112 ], [ null, %100 ]
  %116 = getelementptr inbounds i32, i32* %115, i64 %96
  %117 = load i32, i32* %87, align 4, !tbaa !9
  store i32 %117, i32* %116, align 4, !tbaa !9
  %118 = icmp sgt i64 %95, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %114
  %120 = bitcast i32* %115 to i8*
  %121 = bitcast i32* %86 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %121, i64 %95, i1 false) #8
  br label %122

122:                                              ; preds = %119, %114
  %123 = getelementptr inbounds i32, i32* %116, i64 1
  %124 = icmp eq i32* %86, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %122
  %126 = bitcast i32* %86 to i8*
  tail call void @_ZdlPv(i8* nonnull %126) #8
  br label %127

127:                                              ; preds = %125, %122
  store i32* %115, i32** %30, align 8, !tbaa !8
  store i32* %123, i32** %28, align 8, !tbaa !3
  %128 = getelementptr inbounds i32, i32* %115, i64 %107
  store i32* %128, i32** %29, align 8, !tbaa !11
  %129 = load i32*, i32** %7, align 8, !tbaa !8
  br label %130

130:                                              ; preds = %127, %89
  %131 = phi i32* [ %129, %127 ], [ %83, %89 ]
  %132 = phi i32* [ %128, %127 ], [ %84, %89 ]
  %133 = phi i32* [ %115, %127 ], [ %86, %89 ]
  %134 = phi i32* [ %123, %127 ], [ %91, %89 ]
  %135 = add nuw i64 %41, 1
  %136 = load i32*, i32** %4, align 8, !tbaa !3
  %137 = ptrtoint i32* %136 to i64
  %138 = ptrtoint i32* %131 to i64
  %139 = sub i64 %137, %138
  %140 = ashr exact i64 %139, 2
  %141 = icmp ugt i64 %140, %135
  br i1 %141, label %36, label %148, !llvm.loop !12

142:                                              ; preds = %62, %109
  %143 = phi i32* [ %39, %62 ], [ %86, %109 ]
  %144 = landingpad { i8*, i32 }
          cleanup
  br label %149

145:                                              ; preds = %51, %98
  %146 = phi i32* [ %39, %51 ], [ %86, %98 ]
  %147 = landingpad { i8*, i32 }
          cleanup
  br label %149

148:                                              ; preds = %130, %23
  ret void

149:                                              ; preds = %142, %145
  %150 = phi i32* [ %143, %142 ], [ %146, %145 ]
  %151 = phi { i8*, i32 } [ %144, %142 ], [ %147, %145 ]
  %152 = icmp eq i32* %150, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %149
  %154 = bitcast i32* %150 to i8*
  tail call void @_ZdlPv(i8* nonnull %154) #8
  br label %155

155:                                              ; preds = %149, %153
  resume { i8*, i32 } %151
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { allocsize(0) }
attributes #7 = { noreturn }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = !{!4, !5, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
