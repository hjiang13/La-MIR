digraph "CFG for '_Z11intersperseSt6vectorIiSaIiEEi' function" {
	label="CFG for '_Z11intersperseSt6vectorIiSaIiEEi' function";

	Node0x5638b5e5a740 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%3:\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %5 = bitcast %\"class.std::vector\"* %0 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %5, i8 0, i64 24, i1 false)\l  %6 = load i32*, i32** %4, align 8, !tbaa !3\l  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %8 = load i32*, i32** %7, align 8, !tbaa !8\l  %9 = icmp eq i32* %6, %8\l  br i1 %9, label %23, label %10\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5a740:s0 -> Node0x5638b5e5af60;
	Node0x5638b5e5a740:s1 -> Node0x5638b5e5c2d0;
	Node0x5638b5e5c2d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%10:\l10:                                               \l  %11 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %13 = call noalias nonnull i8* @_Znwm(i64 4) #6\l  %14 = bitcast i8* %13 to i32*\l  %15 = load i32, i32* %8, align 4, !tbaa !9\l  store i32 %15, i32* %14, align 4, !tbaa !9\l  %16 = getelementptr inbounds i8, i8* %13, i64 4\l  %17 = bitcast i8* %16 to i32*\l  %18 = load i32*, i32** %4, align 8, !tbaa !3\l  %19 = load i32*, i32** %7, align 8, !tbaa !8\l  %20 = bitcast %\"class.std::vector\"* %0 to i8**\l  store i8* %13, i8** %20, align 8, !tbaa !8\l  %21 = bitcast i32** %11 to i8**\l  store i8* %16, i8** %21, align 8, !tbaa !3\l  %22 = bitcast i32** %12 to i8**\l  store i8* %16, i8** %22, align 8, !tbaa !11\l  br label %23\l}"];
	Node0x5638b5e5c2d0 -> Node0x5638b5e5af60;
	Node0x5638b5e5af60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%23:\l23:                                               \l  %24 = phi i32* [ %14, %10 ], [ null, %3 ]\l  %25 = phi i32* [ %17, %10 ], [ null, %3 ]\l  %26 = phi i32* [ %19, %10 ], [ %6, %3 ]\l  %27 = phi i32* [ %18, %10 ], [ %6, %3 ]\l  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %30 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %31 = ptrtoint i32* %27 to i64\l  %32 = ptrtoint i32* %26 to i64\l  %33 = sub i64 %31, %32\l  %34 = ashr exact i64 %33, 2\l  %35 = icmp ugt i64 %34, 1\l  br i1 %35, label %36, label %148\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5af60:s0 -> Node0x5638b5e5eeb0;
	Node0x5638b5e5af60:s1 -> Node0x5638b5e5ef00;
	Node0x5638b5e5eeb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%36:\l36:                                               \l  %37 = phi i32* [ %131, %130 ], [ %26, %23 ]\l  %38 = phi i32* [ %132, %130 ], [ %25, %23 ]\l  %39 = phi i32* [ %133, %130 ], [ %24, %23 ]\l  %40 = phi i32* [ %134, %130 ], [ %25, %23 ]\l  %41 = phi i64 [ %135, %130 ], [ 1, %23 ]\l  %42 = icmp eq i32* %40, %38\l  br i1 %42, label %45, label %43\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5eeb0:s0 -> Node0x5638b5e5f6c0;
	Node0x5638b5e5eeb0:s1 -> Node0x5638b5e5f750;
	Node0x5638b5e5f750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%43:\l43:                                               \l  store i32 %2, i32* %40, align 4, !tbaa !9\l  %44 = getelementptr inbounds i32, i32* %40, i64 1\l  store i32* %44, i32** %28, align 8, !tbaa !3\l  br label %82\l}"];
	Node0x5638b5e5f750 -> Node0x5638b5e5fa50;
	Node0x5638b5e5f6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%45:\l45:                                               \l  %46 = ptrtoint i32* %38 to i64\l  %47 = ptrtoint i32* %39 to i64\l  %48 = sub i64 %46, %47\l  %49 = ashr exact i64 %48, 2\l  %50 = icmp eq i64 %48, 9223372036854775804\l  br i1 %50, label %51, label %53\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5f6c0:s0 -> Node0x5638b5e5fdf0;
	Node0x5638b5e5f6c0:s1 -> Node0x5638b5e5fe40;
	Node0x5638b5e5fdf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%51:\l51:                                               \l  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x\l... i8], [26 x i8]* @.str, i64 0, i64 0)) #7\l          to label %52 unwind label %145\l}"];
	Node0x5638b5e5fdf0 -> Node0x5638b5e60040;
	Node0x5638b5e5fdf0 -> Node0x5638b5e60090;
	Node0x5638b5e60040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%52:\l52:                                               \l  unreachable\l}"];
	Node0x5638b5e5fe40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%53:\l53:                                               \l  %54 = icmp eq i64 %48, 0\l  %55 = select i1 %54, i64 1, i64 %49\l  %56 = add nsw i64 %55, %49\l  %57 = icmp ult i64 %56, %49\l  %58 = icmp ugt i64 %56, 2305843009213693951\l  %59 = or i1 %57, %58\l  %60 = select i1 %59, i64 2305843009213693951, i64 %56\l  %61 = icmp eq i64 %60, 0\l  br i1 %61, label %67, label %62\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5fe40:s0 -> Node0x5638b5e607f0;
	Node0x5638b5e5fe40:s1 -> Node0x5638b5e60840;
	Node0x5638b5e60840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%62:\l62:                                               \l  %63 = shl nuw nsw i64 %60, 2\l  %64 = invoke noalias nonnull i8* @_Znwm(i64 %63) #6\l          to label %65 unwind label %142\l}"];
	Node0x5638b5e60840 -> Node0x5638b5e609d0;
	Node0x5638b5e60840 -> Node0x5638b5e60a20;
	Node0x5638b5e609d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%65:\l65:                                               \l  %66 = bitcast i8* %64 to i32*\l  br label %67\l}"];
	Node0x5638b5e609d0 -> Node0x5638b5e607f0;
	Node0x5638b5e607f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%67:\l67:                                               \l  %68 = phi i32* [ %66, %65 ], [ null, %53 ]\l  %69 = getelementptr inbounds i32, i32* %68, i64 %49\l  store i32 %2, i32* %69, align 4, !tbaa !9\l  %70 = icmp sgt i64 %48, 0\l  br i1 %70, label %71, label %74\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e607f0:s0 -> Node0x5638b5e61280;
	Node0x5638b5e607f0:s1 -> Node0x5638b5e612d0;
	Node0x5638b5e61280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%71:\l71:                                               \l  %72 = bitcast i32* %68 to i8*\l  %73 = bitcast i32* %39 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %73,\l... i64 %48, i1 false) #8\l  br label %74\l}"];
	Node0x5638b5e61280 -> Node0x5638b5e612d0;
	Node0x5638b5e612d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%74:\l74:                                               \l  %75 = getelementptr inbounds i32, i32* %69, i64 1\l  %76 = icmp eq i32* %39, null\l  br i1 %76, label %79, label %77\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e612d0:s0 -> Node0x5638b5e61960;
	Node0x5638b5e612d0:s1 -> Node0x5638b5e619b0;
	Node0x5638b5e619b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%77:\l77:                                               \l  %78 = bitcast i32* %39 to i8*\l  tail call void @_ZdlPv(i8* nonnull %78) #8\l  br label %79\l}"];
	Node0x5638b5e619b0 -> Node0x5638b5e61960;
	Node0x5638b5e61960 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%79:\l79:                                               \l  store i32* %68, i32** %30, align 8, !tbaa !8\l  store i32* %75, i32** %28, align 8, !tbaa !3\l  %80 = getelementptr inbounds i32, i32* %68, i64 %60\l  store i32* %80, i32** %29, align 8, !tbaa !11\l  %81 = load i32*, i32** %7, align 8, !tbaa !8\l  br label %82\l}"];
	Node0x5638b5e61960 -> Node0x5638b5e5fa50;
	Node0x5638b5e5fa50 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%82:\l82:                                               \l  %83 = phi i32* [ %81, %79 ], [ %37, %43 ]\l  %84 = phi i32* [ %80, %79 ], [ %38, %43 ]\l  %85 = phi i32* [ %75, %79 ], [ %44, %43 ]\l  %86 = phi i32* [ %68, %79 ], [ %39, %43 ]\l  %87 = getelementptr inbounds i32, i32* %83, i64 %41\l  %88 = icmp eq i32* %85, %84\l  br i1 %88, label %92, label %89\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5fa50:s0 -> Node0x5638b5e62ae0;
	Node0x5638b5e5fa50:s1 -> Node0x5638b5e62b30;
	Node0x5638b5e62b30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%89:\l89:                                               \l  %90 = load i32, i32* %87, align 4, !tbaa !9\l  store i32 %90, i32* %85, align 4, !tbaa !9\l  %91 = getelementptr inbounds i32, i32* %85, i64 1\l  store i32* %91, i32** %28, align 8, !tbaa !3\l  br label %130\l}"];
	Node0x5638b5e62b30 -> Node0x5638b5e5f070;
	Node0x5638b5e62ae0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%92:\l92:                                               \l  %93 = ptrtoint i32* %84 to i64\l  %94 = ptrtoint i32* %86 to i64\l  %95 = sub i64 %93, %94\l  %96 = ashr exact i64 %95, 2\l  %97 = icmp eq i64 %95, 9223372036854775804\l  br i1 %97, label %98, label %100\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e62ae0:s0 -> Node0x5638b5e63160;
	Node0x5638b5e62ae0:s1 -> Node0x5638b5e631b0;
	Node0x5638b5e63160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%98:\l98:                                               \l  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x\l... i8], [26 x i8]* @.str, i64 0, i64 0)) #7\l          to label %99 unwind label %145\l}"];
	Node0x5638b5e63160 -> Node0x5638b5e632e0;
	Node0x5638b5e63160 -> Node0x5638b5e60090;
	Node0x5638b5e632e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%99:\l99:                                               \l  unreachable\l}"];
	Node0x5638b5e631b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%100:\l100:                                              \l  %101 = icmp eq i64 %95, 0\l  %102 = select i1 %101, i64 1, i64 %96\l  %103 = add nsw i64 %102, %96\l  %104 = icmp ult i64 %103, %96\l  %105 = icmp ugt i64 %103, 2305843009213693951\l  %106 = or i1 %104, %105\l  %107 = select i1 %106, i64 2305843009213693951, i64 %103\l  %108 = icmp eq i64 %107, 0\l  br i1 %108, label %114, label %109\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e631b0:s0 -> Node0x5638b5e638e0;
	Node0x5638b5e631b0:s1 -> Node0x5638b5e63930;
	Node0x5638b5e63930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%109:\l109:                                              \l  %110 = shl nuw nsw i64 %107, 2\l  %111 = invoke noalias nonnull i8* @_Znwm(i64 %110) #6\l          to label %112 unwind label %142\l}"];
	Node0x5638b5e63930 -> Node0x5638b5e63ac0;
	Node0x5638b5e63930 -> Node0x5638b5e60a20;
	Node0x5638b5e63ac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%112:\l112:                                              \l  %113 = bitcast i8* %111 to i32*\l  br label %114\l}"];
	Node0x5638b5e63ac0 -> Node0x5638b5e638e0;
	Node0x5638b5e638e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%114:\l114:                                              \l  %115 = phi i32* [ %113, %112 ], [ null, %100 ]\l  %116 = getelementptr inbounds i32, i32* %115, i64 %96\l  %117 = load i32, i32* %87, align 4, !tbaa !9\l  store i32 %117, i32* %116, align 4, !tbaa !9\l  %118 = icmp sgt i64 %95, 0\l  br i1 %118, label %119, label %122\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e638e0:s0 -> Node0x5638b5e63f40;
	Node0x5638b5e638e0:s1 -> Node0x5638b5e63f90;
	Node0x5638b5e63f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%119:\l119:                                              \l  %120 = bitcast i32* %115 to i8*\l  %121 = bitcast i32* %86 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4\l... %121, i64 %95, i1 false) #8\l  br label %122\l}"];
	Node0x5638b5e63f40 -> Node0x5638b5e63f90;
	Node0x5638b5e63f90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%122:\l122:                                              \l  %123 = getelementptr inbounds i32, i32* %116, i64 1\l  %124 = icmp eq i32* %86, null\l  br i1 %124, label %127, label %125\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e63f90:s0 -> Node0x5638b5e644a0;
	Node0x5638b5e63f90:s1 -> Node0x5638b5e644f0;
	Node0x5638b5e644f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%125:\l125:                                              \l  %126 = bitcast i32* %86 to i8*\l  tail call void @_ZdlPv(i8* nonnull %126) #8\l  br label %127\l}"];
	Node0x5638b5e644f0 -> Node0x5638b5e644a0;
	Node0x5638b5e644a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%127:\l127:                                              \l  store i32* %115, i32** %30, align 8, !tbaa !8\l  store i32* %123, i32** %28, align 8, !tbaa !3\l  %128 = getelementptr inbounds i32, i32* %115, i64 %107\l  store i32* %128, i32** %29, align 8, !tbaa !11\l  %129 = load i32*, i32** %7, align 8, !tbaa !8\l  br label %130\l}"];
	Node0x5638b5e644a0 -> Node0x5638b5e5f070;
	Node0x5638b5e5f070 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%130:\l130:                                              \l  %131 = phi i32* [ %129, %127 ], [ %83, %89 ]\l  %132 = phi i32* [ %128, %127 ], [ %84, %89 ]\l  %133 = phi i32* [ %115, %127 ], [ %86, %89 ]\l  %134 = phi i32* [ %123, %127 ], [ %91, %89 ]\l  %135 = add nuw i64 %41, 1\l  %136 = load i32*, i32** %4, align 8, !tbaa !3\l  %137 = ptrtoint i32* %136 to i64\l  %138 = ptrtoint i32* %131 to i64\l  %139 = sub i64 %137, %138\l  %140 = ashr exact i64 %139, 2\l  %141 = icmp ugt i64 %140, %135\l  br i1 %141, label %36, label %148, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e5f070:s0 -> Node0x5638b5e5eeb0;
	Node0x5638b5e5f070:s1 -> Node0x5638b5e5ef00;
	Node0x5638b5e60a20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%142:\l142:                                              \l  %143 = phi i32* [ %39, %62 ], [ %86, %109 ]\l  %144 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %149\l}"];
	Node0x5638b5e60a20 -> Node0x5638b5e65ba0;
	Node0x5638b5e60090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%145:\l145:                                              \l  %146 = phi i32* [ %39, %51 ], [ %86, %98 ]\l  %147 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %149\l}"];
	Node0x5638b5e60090 -> Node0x5638b5e65ba0;
	Node0x5638b5e5ef00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%148:\l148:                                              \l  ret void\l}"];
	Node0x5638b5e65ba0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%149:\l149:                                              \l  %150 = phi i32* [ %143, %142 ], [ %146, %145 ]\l  %151 = phi \{ i8*, i32 \} [ %144, %142 ], [ %147, %145 ]\l  %152 = icmp eq i32* %150, null\l  br i1 %152, label %155, label %153\l|{<s0>T|<s1>F}}"];
	Node0x5638b5e65ba0:s0 -> Node0x5638b5e66030;
	Node0x5638b5e65ba0:s1 -> Node0x5638b5e66080;
	Node0x5638b5e66080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%153:\l153:                                              \l  %154 = bitcast i32* %150 to i8*\l  tail call void @_ZdlPv(i8* nonnull %154) #8\l  br label %155\l}"];
	Node0x5638b5e66080 -> Node0x5638b5e66030;
	Node0x5638b5e66030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%155:\l155:                                              \l  resume \{ i8*, i32 \} %151\l}"];
}
