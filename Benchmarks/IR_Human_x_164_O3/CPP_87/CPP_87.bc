; ModuleID = '../../Human_xBenchmarks_164/CPP_87/CPP_87.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_87/CPP_87.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" = type { %"class.std::vector.0"*, %"class.std::vector.0"*, %"class.std::vector.0"* }
%"class.std::vector.0" = type { %"struct.std::_Vector_base.1" }
%"struct.std::_Vector_base.1" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z7get_rowSt6vectorIS_IiSaIiEESaIS1_EEi(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %8 = bitcast %"class.std::vector"* %0 to i8**
  %9 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %9, i8 0, i64 24, i1 false)
  %10 = load %"class.std::vector.0"*, %"class.std::vector.0"** %4, align 8, !tbaa !3
  %11 = load %"class.std::vector.0"*, %"class.std::vector.0"** %5, align 8, !tbaa !8
  %12 = icmp eq %"class.std::vector.0"* %10, %11
  br i1 %12, label %141, label %13

13:                                               ; preds = %3, %36
  %14 = phi %"class.std::vector.0"* [ %37, %36 ], [ %11, %3 ]
  %15 = phi %"class.std::vector.0"* [ %38, %36 ], [ %10, %3 ]
  %16 = phi %"class.std::vector.0"* [ %39, %36 ], [ null, %3 ]
  %17 = phi %"class.std::vector.0"* [ %40, %36 ], [ null, %3 ]
  %18 = phi %"class.std::vector.0"* [ %41, %36 ], [ null, %3 ]
  %19 = phi i64 [ %42, %36 ], [ 0, %3 ]
  %20 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %14, i64 %19, i32 0, i32 0, i32 0, i32 1
  %21 = load i32*, i32** %20, align 8, !tbaa !9
  %22 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %14, i64 %19, i32 0, i32 0, i32 0, i32 0
  %23 = load i32*, i32** %22, align 8, !tbaa !11
  %24 = ptrtoint i32* %21 to i64
  %25 = ptrtoint i32* %23 to i64
  %26 = sub i64 %24, %25
  %27 = lshr exact i64 %26, 2
  %28 = trunc i64 %27 to i32
  %29 = add i32 %28, -1
  %30 = icmp sgt i32 %29, -1
  br i1 %30, label %31, label %36

31:                                               ; preds = %13
  %32 = trunc i64 %19 to i32
  br label %48

33:                                               ; preds = %131
  %34 = load %"class.std::vector.0"*, %"class.std::vector.0"** %4, align 8, !tbaa !3
  %35 = load %"class.std::vector.0"*, %"class.std::vector.0"** %5, align 8, !tbaa !8
  br label %36

36:                                               ; preds = %33, %13
  %37 = phi %"class.std::vector.0"* [ %14, %13 ], [ %35, %33 ]
  %38 = phi %"class.std::vector.0"* [ %15, %13 ], [ %34, %33 ]
  %39 = phi %"class.std::vector.0"* [ %16, %13 ], [ %132, %33 ]
  %40 = phi %"class.std::vector.0"* [ %17, %13 ], [ %133, %33 ]
  %41 = phi %"class.std::vector.0"* [ %18, %13 ], [ %134, %33 ]
  %42 = add nuw i64 %19, 1
  %43 = ptrtoint %"class.std::vector.0"* %38 to i64
  %44 = ptrtoint %"class.std::vector.0"* %37 to i64
  %45 = sub i64 %43, %44
  %46 = sdiv exact i64 %45, 24
  %47 = icmp ugt i64 %46, %42
  br i1 %47, label %13, label %141, !llvm.loop !12

48:                                               ; preds = %137, %31
  %49 = phi %"class.std::vector.0"* [ %132, %137 ], [ %16, %31 ]
  %50 = phi %"class.std::vector.0"* [ %133, %137 ], [ %17, %31 ]
  %51 = phi %"class.std::vector.0"* [ %134, %137 ], [ %18, %31 ]
  %52 = phi i32* [ %140, %137 ], [ %23, %31 ]
  %53 = phi i32 [ %135, %137 ], [ %29, %31 ]
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %52, i64 %54
  %56 = load i32, i32* %55, align 4, !tbaa !14
  %57 = icmp eq i32 %56, %2
  br i1 %57, label %58, label %131

58:                                               ; preds = %48
  %59 = invoke noalias nonnull i8* @_Znwm(i64 8) #6
          to label %62 unwind label %60

60:                                               ; preds = %58
  %61 = landingpad { i8*, i32 }
          cleanup
  br label %129

62:                                               ; preds = %58
  %63 = bitcast i8* %59 to i32*
  %64 = getelementptr inbounds i8, i8* %59, i64 8
  store i32 %32, i32* %63, align 4
  %65 = getelementptr inbounds i8, i8* %59, i64 4
  %66 = bitcast i8* %65 to i32*
  store i32 %53, i32* %66, align 4
  %67 = icmp eq %"class.std::vector.0"* %51, %50
  br i1 %67, label %75, label %68

68:                                               ; preds = %62
  %69 = bitcast %"class.std::vector.0"* %51 to i8**
  store i8* %59, i8** %69, align 8, !tbaa !11
  %70 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %51, i64 0, i32 0, i32 0, i32 0, i32 1
  %71 = bitcast i32** %70 to i8**
  store i8* %64, i8** %71, align 8, !tbaa !9
  %72 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %51, i64 0, i32 0, i32 0, i32 0, i32 2
  %73 = bitcast i32** %72 to i8**
  store i8* %64, i8** %73, align 8, !tbaa !16
  %74 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %51, i64 1
  store %"class.std::vector.0"* %74, %"class.std::vector.0"** %6, align 8, !tbaa !3
  br label %131

75:                                               ; preds = %62
  %76 = ptrtoint %"class.std::vector.0"* %50 to i64
  %77 = ptrtoint %"class.std::vector.0"* %49 to i64
  %78 = sub i64 %76, %77
  %79 = sdiv exact i64 %78, 24
  %80 = icmp eq i64 %78, 9223372036854775800
  br i1 %80, label %81, label %83

81:                                               ; preds = %75
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %82 unwind label %125

82:                                               ; preds = %81
  unreachable

83:                                               ; preds = %75
  %84 = icmp eq i64 %78, 0
  %85 = select i1 %84, i64 1, i64 %79
  %86 = add nsw i64 %85, %79
  %87 = icmp ult i64 %86, %79
  %88 = icmp ugt i64 %86, 384307168202282325
  %89 = or i1 %87, %88
  %90 = select i1 %89, i64 384307168202282325, i64 %86
  %91 = mul nuw nsw i64 %90, 24
  %92 = invoke noalias nonnull i8* @_Znwm(i64 %91) #6
          to label %93 unwind label %123

93:                                               ; preds = %83
  %94 = bitcast i8* %92 to %"class.std::vector.0"*
  %95 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %94, i64 %79, i32 0, i32 0, i32 0, i32 0
  %96 = bitcast i32** %95 to i8**
  store i8* %59, i8** %96, align 8, !tbaa !11
  %97 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %94, i64 %79, i32 0, i32 0, i32 0, i32 1
  %98 = bitcast i32** %97 to i8**
  store i8* %64, i8** %98, align 8, !tbaa !9
  %99 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %94, i64 %79, i32 0, i32 0, i32 0, i32 2
  %100 = bitcast i32** %99 to i8**
  store i8* %64, i8** %100, align 8, !tbaa !16
  %101 = icmp eq %"class.std::vector.0"* %49, %50
  br i1 %101, label %115, label %102

102:                                              ; preds = %93, %102
  %103 = phi %"class.std::vector.0"* [ %113, %102 ], [ %94, %93 ]
  %104 = phi %"class.std::vector.0"* [ %112, %102 ], [ %49, %93 ]
  %105 = bitcast %"class.std::vector.0"* %104 to <2 x i32*>*
  %106 = load <2 x i32*>, <2 x i32*>* %105, align 8, !tbaa !17
  %107 = bitcast %"class.std::vector.0"* %103 to <2 x i32*>*
  store <2 x i32*> %106, <2 x i32*>* %107, align 8, !tbaa !17
  %108 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %103, i64 0, i32 0, i32 0, i32 0, i32 2
  %109 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %104, i64 0, i32 0, i32 0, i32 0, i32 2
  %110 = load i32*, i32** %109, align 8, !tbaa !16
  store i32* %110, i32** %108, align 8, !tbaa !16
  %111 = bitcast %"class.std::vector.0"* %104 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %111, i8 0, i64 24, i1 false) #8
  %112 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %104, i64 1
  %113 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %103, i64 1
  %114 = icmp eq %"class.std::vector.0"* %112, %50
  br i1 %114, label %115, label %102, !llvm.loop !18

115:                                              ; preds = %102, %93
  %116 = phi %"class.std::vector.0"* [ %94, %93 ], [ %113, %102 ]
  %117 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %116, i64 1
  %118 = icmp eq %"class.std::vector.0"* %49, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %115
  %120 = bitcast %"class.std::vector.0"* %49 to i8*
  tail call void @_ZdlPv(i8* nonnull %120) #8
  br label %121

121:                                              ; preds = %119, %115
  store i8* %92, i8** %8, align 8, !tbaa !8
  store %"class.std::vector.0"* %117, %"class.std::vector.0"** %6, align 8, !tbaa !3
  %122 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %94, i64 %90
  store %"class.std::vector.0"* %122, %"class.std::vector.0"** %7, align 8, !tbaa !19
  br label %131

123:                                              ; preds = %83
  %124 = landingpad { i8*, i32 }
          cleanup
  br label %127

125:                                              ; preds = %81
  %126 = landingpad { i8*, i32 }
          cleanup
  br label %127

127:                                              ; preds = %125, %123
  %128 = phi { i8*, i32 } [ %124, %123 ], [ %126, %125 ]
  tail call void @_ZdlPv(i8* nonnull %59) #8
  br label %129

129:                                              ; preds = %60, %127
  %130 = phi { i8*, i32 } [ %128, %127 ], [ %61, %60 ]
  tail call void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0) #8
  resume { i8*, i32 } %130

131:                                              ; preds = %121, %68, %48
  %132 = phi %"class.std::vector.0"* [ %49, %48 ], [ %49, %68 ], [ %94, %121 ]
  %133 = phi %"class.std::vector.0"* [ %50, %48 ], [ %50, %68 ], [ %122, %121 ]
  %134 = phi %"class.std::vector.0"* [ %51, %48 ], [ %74, %68 ], [ %117, %121 ]
  %135 = add i32 %53, -1
  %136 = icmp sgt i32 %135, -1
  br i1 %136, label %137, label %33, !llvm.loop !20

137:                                              ; preds = %131
  %138 = load %"class.std::vector.0"*, %"class.std::vector.0"** %5, align 8, !tbaa !8
  %139 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %138, i64 %19, i32 0, i32 0, i32 0, i32 0
  %140 = load i32*, i32** %139, align 8, !tbaa !11
  br label %48

141:                                              ; preds = %36, %3
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIS_IiSaIiEESaIS1_EED2Ev(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0) unnamed_addr #2 comdat align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::vector.0"*, %"class.std::vector.0"** %2, align 8, !tbaa !8
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::vector.0"*, %"class.std::vector.0"** %4, align 8, !tbaa !3
  %6 = icmp eq %"class.std::vector.0"* %3, %5
  br i1 %6, label %19, label %7

7:                                                ; preds = %1, %14
  %8 = phi %"class.std::vector.0"* [ %15, %14 ], [ %3, %1 ]
  %9 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8, !tbaa !11
  %11 = icmp eq i32* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = bitcast i32* %10 to i8*
  tail call void @_ZdlPv(i8* nonnull %13) #8
  br label %14

14:                                               ; preds = %12, %7
  %15 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %8, i64 1
  %16 = icmp eq %"class.std::vector.0"* %15, %5
  br i1 %16, label %17, label %7, !llvm.loop !21

17:                                               ; preds = %14
  %18 = load %"class.std::vector.0"*, %"class.std::vector.0"** %2, align 8, !tbaa !8
  br label %19

19:                                               ; preds = %17, %1
  %20 = phi %"class.std::vector.0"* [ %18, %17 ], [ %3, %1 ]
  %21 = icmp eq %"class.std::vector.0"* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  %23 = bitcast %"class.std::vector.0"* %20 to i8*
  tail call void @_ZdlPv(i8* nonnull %23) #8
  br label %24

24:                                               ; preds = %19, %22
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { allocsize(0) }
attributes #7 = { noreturn }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !5, i64 8}
!10 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!11 = !{!10, !5, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !6, i64 0}
!16 = !{!10, !5, i64 16}
!17 = !{!5, !5, i64 0}
!18 = distinct !{!18, !13}
!19 = !{!4, !5, i64 16}
!20 = distinct !{!20, !13}
!21 = distinct !{!21, !13}
