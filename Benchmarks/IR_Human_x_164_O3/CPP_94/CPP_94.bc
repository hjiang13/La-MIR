; ModuleID = '../../Human_xBenchmarks_164/CPP_94/CPP_94.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_94/CPP_94.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: uwtable
define dso_local i32 @_Z9skjkasdkdSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::__cxx11::basic_string", align 8
  %3 = alloca %"class.std::__cxx11::basic_string", align 8
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = ashr exact i64 %10, 2
  %14 = call i64 @llvm.umax.i64(i64 %13, i64 1)
  br label %23

15:                                               ; preds = %45, %1
  %16 = phi i32 [ 0, %1 ], [ %46, %45 ]
  %17 = bitcast %"class.std::__cxx11::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #9
  %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 2
  %19 = bitcast %"class.std::__cxx11::basic_string"* %2 to %union.anon**
  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !9
  %20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 1
  store i64 0, i64* %20, align 8, !tbaa !11
  %21 = bitcast %union.anon* %18 to i8*
  store i8 0, i8* %21, align 8, !tbaa !14
  %22 = bitcast %"class.std::__cxx11::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #9
  invoke void (%"class.std::__cxx11::basic_string"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* nonnull sret(%"class.std::__cxx11::basic_string") align 8 %3, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %16)
          to label %49 unwind label %175

23:                                               ; preds = %12, %45
  %24 = phi i64 [ 0, %12 ], [ %47, %45 ]
  %25 = phi i32 [ 0, %12 ], [ %46, %45 ]
  %26 = getelementptr inbounds i32, i32* %7, i64 %24
  %27 = load i32, i32* %26, align 4, !tbaa !15
  %28 = icmp sgt i32 %27, %25
  br i1 %28, label %29, label %45

29:                                               ; preds = %23
  %30 = icmp slt i32 %27, 4
  br i1 %30, label %31, label %36

31:                                               ; preds = %36, %29
  %32 = phi i8 [ 1, %29 ], [ %41, %36 ]
  %33 = and i8 %32, 1
  %34 = icmp eq i8 %33, 0
  %35 = select i1 %34, i32 %25, i32 %27
  br label %45

36:                                               ; preds = %29, %36
  %37 = phi i32 [ %42, %36 ], [ 2, %29 ]
  %38 = phi i8 [ %41, %36 ], [ 1, %29 ]
  %39 = srem i32 %27, %37
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %40, i8 0, i8 %38
  %42 = add nuw nsw i32 %37, 1
  %43 = mul nsw i32 %42, %42
  %44 = icmp sgt i32 %43, %27
  br i1 %44, label %31, label %36, !llvm.loop !17

45:                                               ; preds = %31, %23
  %46 = phi i32 [ %25, %23 ], [ %35, %31 ]
  %47 = add nuw nsw i64 %24, 1
  %48 = icmp eq i64 %47, %14
  br i1 %48, label %15, label %23, !llvm.loop !19

49:                                               ; preds = %15
  %50 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 0, i32 0
  %51 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8, !tbaa !20
  %53 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2
  %54 = bitcast %union.anon* %53 to i8*
  %55 = icmp eq i8* %52, %54
  br i1 %55, label %56, label %71

56:                                               ; preds = %49
  %57 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1
  %58 = load i64, i64* %57, align 8, !tbaa !11
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %56
  %61 = load i8*, i8** %50, align 8, !tbaa !20
  %62 = icmp eq i64 %58, 1
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = load i8, i8* %52, align 1, !tbaa !14
  store i8 %64, i8* %61, align 1, !tbaa !14
  br label %66

65:                                               ; preds = %60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %52, i64 %58, i1 false) #9
  br label %66

66:                                               ; preds = %65, %63, %56
  %67 = load i64, i64* %57, align 8, !tbaa !11
  store i64 %67, i64* %20, align 8, !tbaa !11
  %68 = load i8*, i8** %50, align 8, !tbaa !20
  %69 = getelementptr inbounds i8, i8* %68, i64 %67
  store i8 0, i8* %69, align 1, !tbaa !14
  %70 = load i8*, i8** %51, align 8, !tbaa !20
  br label %86

71:                                               ; preds = %49
  %72 = load i8*, i8** %50, align 8, !tbaa !20
  %73 = icmp eq i8* %72, %21
  %74 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 2, i32 0
  %75 = load i64, i64* %74, align 8
  store i8* %52, i8** %50, align 8, !tbaa !20
  %76 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1
  %77 = bitcast i64* %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !14
  %79 = bitcast i64* %20 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %79, align 8, !tbaa !14
  %80 = icmp eq i8* %72, null
  %81 = or i1 %73, %80
  br i1 %81, label %84, label %82

82:                                               ; preds = %71
  store i8* %72, i8** %51, align 8, !tbaa !20
  %83 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2, i32 0
  store i64 %75, i64* %83, align 8, !tbaa !14
  br label %86

84:                                               ; preds = %71
  %85 = bitcast %"class.std::__cxx11::basic_string"* %3 to %union.anon**
  store %union.anon* %53, %union.anon** %85, align 8, !tbaa !20
  br label %86

86:                                               ; preds = %66, %82, %84
  %87 = phi i8* [ %70, %66 ], [ %72, %82 ], [ %54, %84 ]
  %88 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1
  store i64 0, i64* %88, align 8, !tbaa !11
  store i8 0, i8* %87, align 1, !tbaa !14
  %89 = load i8*, i8** %51, align 8, !tbaa !20
  %90 = icmp eq i8* %89, %54
  br i1 %90, label %92, label %91

91:                                               ; preds = %86
  call void @_ZdlPv(i8* %89) #9
  br label %92

92:                                               ; preds = %86, %91
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9
  %93 = load i64, i64* %20, align 8, !tbaa !11
  %94 = load i8*, i8** %50, align 8
  %95 = icmp eq i64 %93, 0
  br i1 %95, label %170, label %96

96:                                               ; preds = %92
  %97 = icmp ult i64 %93, 8
  br i1 %97, label %167, label %98

98:                                               ; preds = %96
  %99 = and i64 %93, -8
  %100 = add i64 %99, -8
  %101 = lshr exact i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = and i64 %102, 1
  %104 = icmp eq i64 %100, 0
  br i1 %104, label %143, label %105

105:                                              ; preds = %98
  %106 = and i64 %102, 4611686018427387902
  br label %107

107:                                              ; preds = %107, %105
  %108 = phi i64 [ 0, %105 ], [ %137, %107 ]
  %109 = phi <4 x i32> [ zeroinitializer, %105 ], [ %135, %107 ]
  %110 = phi <4 x i32> [ zeroinitializer, %105 ], [ %136, %107 ]
  %111 = phi i64 [ %106, %105 ], [ %138, %107 ]
  %112 = getelementptr inbounds i8, i8* %94, i64 %108
  %113 = bitcast i8* %112 to <4 x i8>*
  %114 = load <4 x i8>, <4 x i8>* %113, align 1, !tbaa !14
  %115 = getelementptr inbounds i8, i8* %112, i64 4
  %116 = bitcast i8* %115 to <4 x i8>*
  %117 = load <4 x i8>, <4 x i8>* %116, align 1, !tbaa !14
  %118 = sext <4 x i8> %114 to <4 x i32>
  %119 = sext <4 x i8> %117 to <4 x i32>
  %120 = add <4 x i32> %109, <i32 -48, i32 -48, i32 -48, i32 -48>
  %121 = add <4 x i32> %110, <i32 -48, i32 -48, i32 -48, i32 -48>
  %122 = add <4 x i32> %120, %118
  %123 = add <4 x i32> %121, %119
  %124 = or i64 %108, 8
  %125 = getelementptr inbounds i8, i8* %94, i64 %124
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1, !tbaa !14
  %128 = getelementptr inbounds i8, i8* %125, i64 4
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1, !tbaa !14
  %131 = sext <4 x i8> %127 to <4 x i32>
  %132 = sext <4 x i8> %130 to <4 x i32>
  %133 = add <4 x i32> %122, <i32 -48, i32 -48, i32 -48, i32 -48>
  %134 = add <4 x i32> %123, <i32 -48, i32 -48, i32 -48, i32 -48>
  %135 = add <4 x i32> %133, %131
  %136 = add <4 x i32> %134, %132
  %137 = add nuw i64 %108, 16
  %138 = add i64 %111, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %107, !llvm.loop !21

140:                                              ; preds = %107
  %141 = add <4 x i32> %135, <i32 -48, i32 -48, i32 -48, i32 -48>
  %142 = add <4 x i32> %136, <i32 -48, i32 -48, i32 -48, i32 -48>
  br label %143

143:                                              ; preds = %140, %98
  %144 = phi <4 x i32> [ undef, %98 ], [ %135, %140 ]
  %145 = phi <4 x i32> [ undef, %98 ], [ %136, %140 ]
  %146 = phi i64 [ 0, %98 ], [ %137, %140 ]
  %147 = phi <4 x i32> [ <i32 -48, i32 -48, i32 -48, i32 -48>, %98 ], [ %141, %140 ]
  %148 = phi <4 x i32> [ <i32 -48, i32 -48, i32 -48, i32 -48>, %98 ], [ %142, %140 ]
  %149 = icmp eq i64 %103, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %143
  %151 = getelementptr inbounds i8, i8* %94, i64 %146
  %152 = getelementptr inbounds i8, i8* %151, i64 4
  %153 = bitcast i8* %152 to <4 x i8>*
  %154 = load <4 x i8>, <4 x i8>* %153, align 1, !tbaa !14
  %155 = sext <4 x i8> %154 to <4 x i32>
  %156 = add <4 x i32> %148, %155
  %157 = bitcast i8* %151 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1, !tbaa !14
  %159 = sext <4 x i8> %158 to <4 x i32>
  %160 = add <4 x i32> %147, %159
  br label %161

161:                                              ; preds = %143, %150
  %162 = phi <4 x i32> [ %144, %143 ], [ %160, %150 ]
  %163 = phi <4 x i32> [ %145, %143 ], [ %156, %150 ]
  %164 = add <4 x i32> %163, %162
  %165 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %164)
  %166 = icmp eq i64 %93, %99
  br i1 %166, label %170, label %167

167:                                              ; preds = %96, %161
  %168 = phi i64 [ 0, %96 ], [ %99, %161 ]
  %169 = phi i32 [ 0, %96 ], [ %165, %161 ]
  br label %182

170:                                              ; preds = %182, %161, %92
  %171 = phi i32 [ 0, %92 ], [ %165, %161 ], [ %189, %182 ]
  %172 = icmp eq i8* %94, %21
  br i1 %172, label %174, label %173

173:                                              ; preds = %170
  call void @_ZdlPv(i8* %94) #9
  br label %174

174:                                              ; preds = %170, %173
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #9
  ret i32 %171

175:                                              ; preds = %15
  %176 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #9
  %177 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8, !tbaa !20
  %179 = icmp eq i8* %178, %21
  br i1 %179, label %181, label %180

180:                                              ; preds = %175
  call void @_ZdlPv(i8* %178) #9
  br label %181

181:                                              ; preds = %175, %180
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #9
  resume { i8*, i32 } %176

182:                                              ; preds = %167, %182
  %183 = phi i64 [ %190, %182 ], [ %168, %167 ]
  %184 = phi i32 [ %189, %182 ], [ %169, %167 ]
  %185 = getelementptr inbounds i8, i8* %94, i64 %183
  %186 = load i8, i8* %185, align 1, !tbaa !14
  %187 = sext i8 %186 to i32
  %188 = add i32 %184, -48
  %189 = add i32 %188, %187
  %190 = add nuw nsw i64 %183, 1
  %191 = icmp eq i64 %190, %93
  br i1 %191, label %170, label %182, !llvm.loop !23
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = alloca i64, align 8
  %6 = alloca [1 x %struct.__va_list_tag], align 16
  %7 = alloca i8, i64 %2, align 16
  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #9
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %8)
  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)
  call void @llvm.va_end(i8* nonnull %8)
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %13 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !9
  %14 = bitcast %union.anon* %12 to i8*
  %15 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #9
  store i64 %11, i64* %5, align 8, !tbaa !25
  %16 = icmp ugt i32 %10, 15
  br i1 %16, label %17, label %22

17:                                               ; preds = %4
  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %18, i8** %19, align 8, !tbaa !20
  %20 = load i64, i64* %5, align 8, !tbaa !25
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %20, i64* %21, align 8, !tbaa !14
  br label %22

22:                                               ; preds = %17, %4
  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]
  switch i64 %11, label %26 [
    i64 1, label %24
    i64 0, label %27
  ]

24:                                               ; preds = %22
  %25 = load i8, i8* %7, align 16, !tbaa !14
  store i8 %25, i8* %23, align 1, !tbaa !14
  br label %27

26:                                               ; preds = %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #9
  br label %27

27:                                               ; preds = %26, %24, %22
  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %29 = load i64, i64* %5, align 8, !tbaa !25
  %30 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %29, i64* %30, align 8, !tbaa !11
  %31 = load i8*, i8** %28, align 8, !tbaa !20
  %32 = getelementptr inbounds i8, i8* %31, i64 %29
  store i8 0, i8* %32, align 1, !tbaa !14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #9
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #3

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #3

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #7

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #8

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nosync nounwind willreturn }
attributes #4 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nofree nosync nounwind readnone willreturn }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !5, i64 0}
!10 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!11 = !{!12, !13, i64 8}
!12 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !10, i64 0, !13, i64 8, !6, i64 16}
!13 = !{!"long", !6, i64 0}
!14 = !{!6, !6, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"int", !6, i64 0}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.mustprogress"}
!19 = distinct !{!19, !18}
!20 = !{!12, !5, i64 0}
!21 = distinct !{!21, !18, !22}
!22 = !{!"llvm.loop.isvectorized", i32 1}
!23 = distinct !{!23, !18, !24, !22}
!24 = !{!"llvm.loop.unroll.runtime.disable"}
!25 = !{!13, !13, i64 0}
