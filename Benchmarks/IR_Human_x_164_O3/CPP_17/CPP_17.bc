; ModuleID = '../../Human_xBenchmarks_164/CPP_17/CPP_17.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_17/CPP_17.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"o|\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c".|\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z11parse_musicNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::__cxx11::basic_string"* %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = alloca %"class.std::__cxx11::basic_string", align 8
  %5 = alloca %"class.std::__cxx11::basic_string", align 8
  %6 = bitcast %"class.std::__cxx11::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2
  %8 = bitcast %"class.std::__cxx11::basic_string"* %4 to %union.anon**
  store %union.anon* %7, %union.anon** %8, align 8, !tbaa !3
  %9 = bitcast %union.anon* %7 to i8*
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 1
  store i64 0, i64* %11, align 8, !tbaa !8
  store i8 0, i8* %9, align 8, !tbaa !11
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %13 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false)
  %14 = load i64, i64* %12, align 8, !tbaa !8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %299, label %16

16:                                               ; preds = %2
  %17 = bitcast %"class.std::__cxx11::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #10
  call void @llvm.experimental.noalias.scope.decl(metadata !12)
  %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2
  %19 = bitcast %"class.std::__cxx11::basic_string"* %5 to %union.anon**
  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !3, !alias.scope !12
  %20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8, !tbaa !15, !noalias !12
  %22 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10, !noalias !12
  store i64 %14, i64* %3, align 8, !tbaa !16, !noalias !12
  %23 = icmp ugt i64 %14, 15
  br i1 %23, label %24, label %30

24:                                               ; preds = %16
  %25 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)
          to label %26 unwind label %89

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 0, i32 0
  store i8* %25, i8** %27, align 8, !tbaa !15, !alias.scope !12
  %28 = load i64, i64* %3, align 8, !tbaa !16, !noalias !12
  %29 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2, i32 0
  store i64 %28, i64* %29, align 8, !tbaa !11, !alias.scope !12
  br label %35

30:                                               ; preds = %16
  %31 = bitcast %union.anon* %18 to i8*
  %32 = icmp eq i64 %14, 1
  br i1 %32, label %33, label %35

33:                                               ; preds = %30
  %34 = load i8, i8* %21, align 1, !tbaa !11
  store i8 %34, i8* %31, align 8, !tbaa !11
  br label %37

35:                                               ; preds = %26, %30
  %36 = phi i8* [ %25, %26 ], [ %31, %30 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %21, i64 %14, i1 false) #10
  br label %37

37:                                               ; preds = %35, %33
  %38 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 0, i32 0
  %39 = load i64, i64* %3, align 8, !tbaa !16, !noalias !12
  %40 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 1
  store i64 %39, i64* %40, align 8, !tbaa !8, !alias.scope !12
  %41 = load i8*, i8** %38, align 8, !tbaa !15, !alias.scope !12
  %42 = getelementptr inbounds i8, i8* %41, i64 %39
  store i8 0, i8* %42, align 1, !tbaa !11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10, !noalias !12
  %43 = load i64, i64* %40, align 8, !tbaa !8, !alias.scope !12
  %44 = invoke nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %5, i64 %43, i64 0, i64 1, i8 signext 32)
          to label %51 unwind label %45

45:                                               ; preds = %37
  %46 = landingpad { i8*, i32 }
          cleanup
  %47 = load i8*, i8** %38, align 8, !tbaa !15, !alias.scope !12
  %48 = bitcast %union.anon* %18 to i8*
  %49 = icmp eq i8* %47, %48
  br i1 %49, label %91, label %50

50:                                               ; preds = %45
  call void @_ZdlPv(i8* %47) #10
  br label %91

51:                                               ; preds = %37
  %52 = load i8*, i8** %38, align 8, !tbaa !15
  %53 = bitcast %union.anon* %18 to i8*
  %54 = icmp eq i8* %52, %53
  br i1 %54, label %55, label %69

55:                                               ; preds = %51
  %56 = load i64, i64* %40, align 8, !tbaa !8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %55
  %59 = load i8*, i8** %20, align 8, !tbaa !15
  %60 = icmp eq i64 %56, 1
  br i1 %60, label %61, label %63

61:                                               ; preds = %58
  %62 = load i8, i8* %53, align 8, !tbaa !11
  store i8 %62, i8* %59, align 1, !tbaa !11
  br label %64

63:                                               ; preds = %58
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* nonnull align 8 %53, i64 %56, i1 false) #10
  br label %64

64:                                               ; preds = %63, %61, %55
  %65 = load i64, i64* %40, align 8, !tbaa !8
  store i64 %65, i64* %12, align 8, !tbaa !8
  %66 = load i8*, i8** %20, align 8, !tbaa !15
  %67 = getelementptr inbounds i8, i8* %66, i64 %65
  store i8 0, i8* %67, align 1, !tbaa !11
  %68 = load i8*, i8** %38, align 8, !tbaa !15
  br label %84

69:                                               ; preds = %51
  %70 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 2
  %71 = bitcast %union.anon* %70 to i8*
  %72 = load i8*, i8** %20, align 8, !tbaa !15
  %73 = icmp eq i8* %72, %71
  %74 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 2, i32 0
  %75 = load i64, i64* %74, align 8
  store i8* %52, i8** %20, align 8, !tbaa !15
  %76 = bitcast i64* %40 to <2 x i64>*
  %77 = load <2 x i64>, <2 x i64>* %76, align 8, !tbaa !11
  %78 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %78, align 8, !tbaa !11
  %79 = icmp eq i8* %72, null
  %80 = or i1 %73, %79
  br i1 %80, label %83, label %81

81:                                               ; preds = %69
  store i8* %72, i8** %38, align 8, !tbaa !15
  %82 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2, i32 0
  store i64 %75, i64* %82, align 8, !tbaa !11
  br label %84

83:                                               ; preds = %69
  store %union.anon* %18, %union.anon** %19, align 8, !tbaa !15
  br label %84

84:                                               ; preds = %64, %81, %83
  %85 = phi i8* [ %68, %64 ], [ %72, %81 ], [ %53, %83 ]
  store i64 0, i64* %40, align 8, !tbaa !8
  store i8 0, i8* %85, align 1, !tbaa !11
  %86 = load i8*, i8** %38, align 8, !tbaa !15
  %87 = icmp eq i8* %86, %53
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  call void @_ZdlPv(i8* %86) #10
  br label %93

89:                                               ; preds = %24
  %90 = landingpad { i8*, i32 }
          cleanup
  br label %91

91:                                               ; preds = %89, %50, %45
  %92 = phi { i8*, i32 } [ %90, %89 ], [ %46, %50 ], [ %46, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #10
  br label %310

93:                                               ; preds = %88, %84
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #10
  %94 = load i64, i64* %12, align 8, !tbaa !8
  %95 = icmp eq i64 %94, 0
  %96 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %97 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2, i32 0
  %98 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %99 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %100 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  br i1 %95, label %299, label %101

101:                                              ; preds = %93, %290
  %102 = phi i32* [ %291, %290 ], [ null, %93 ]
  %103 = phi i32* [ %292, %290 ], [ null, %93 ]
  %104 = phi i32* [ %293, %290 ], [ null, %93 ]
  %105 = phi i32* [ %294, %290 ], [ null, %93 ]
  %106 = phi i32* [ %295, %290 ], [ null, %93 ]
  %107 = phi i64 [ %296, %290 ], [ 0, %93 ]
  %108 = load i8*, i8** %96, align 8, !tbaa !15
  %109 = getelementptr inbounds i8, i8* %108, i64 %107
  %110 = load i8, i8* %109, align 1, !tbaa !11
  %111 = icmp eq i8 %110, 32
  br i1 %111, label %112, label %274

112:                                              ; preds = %101
  %113 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #10
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %162

115:                                              ; preds = %112
  %116 = icmp eq i32* %106, %105
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  store i32 4, i32* %106, align 4, !tbaa !17
  %118 = getelementptr inbounds i32, i32* %106, i64 1
  store i32* %118, i32** %98, align 8, !tbaa !19
  br label %162

119:                                              ; preds = %115
  %120 = ptrtoint i32* %105 to i64
  %121 = ptrtoint i32* %104 to i64
  %122 = sub i64 %120, %121
  %123 = ashr exact i64 %122, 2
  %124 = icmp eq i64 %122, 9223372036854775804
  br i1 %124, label %125, label %127

125:                                              ; preds = %119
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #11
          to label %126 unwind label %160

126:                                              ; preds = %125
  unreachable

127:                                              ; preds = %119
  %128 = icmp eq i64 %122, 0
  %129 = select i1 %128, i64 1, i64 %123
  %130 = add nsw i64 %129, %123
  %131 = icmp ult i64 %130, %123
  %132 = icmp ugt i64 %130, 2305843009213693951
  %133 = or i1 %131, %132
  %134 = select i1 %133, i64 2305843009213693951, i64 %130
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %141, label %136

136:                                              ; preds = %127
  %137 = shl nuw nsw i64 %134, 2
  %138 = invoke noalias nonnull i8* @_Znwm(i64 %137) #12
          to label %139 unwind label %158

139:                                              ; preds = %136
  %140 = bitcast i8* %138 to i32*
  br label %141

141:                                              ; preds = %139, %127
  %142 = phi i32* [ %140, %139 ], [ null, %127 ]
  %143 = getelementptr inbounds i32, i32* %142, i64 %123
  store i32 4, i32* %143, align 4, !tbaa !17
  %144 = icmp sgt i64 %122, 0
  br i1 %144, label %145, label %148

145:                                              ; preds = %141
  %146 = bitcast i32* %142 to i8*
  %147 = bitcast i32* %104 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %146, i8* align 4 %147, i64 %122, i1 false) #10
  br label %148

148:                                              ; preds = %145, %141
  %149 = getelementptr inbounds i32, i32* %143, i64 1
  %150 = icmp eq i32* %104, null
  br i1 %150, label %153, label %151

151:                                              ; preds = %148
  %152 = bitcast i32* %104 to i8*
  call void @_ZdlPv(i8* nonnull %152) #10
  br label %153

153:                                              ; preds = %151, %148
  store i32* %142, i32** %100, align 8, !tbaa !21
  store i32* %149, i32** %98, align 8, !tbaa !19
  %154 = getelementptr inbounds i32, i32* %142, i64 %134
  store i32* %154, i32** %99, align 8, !tbaa !22
  br label %162

155:                                              ; preds = %282, %266
  %156 = phi i32* [ %104, %282 ], [ %269, %266 ]
  %157 = landingpad { i8*, i32 }
          cleanup
  br label %304

158:                                              ; preds = %136
  %159 = landingpad { i8*, i32 }
          cleanup
  br label %304

160:                                              ; preds = %125
  %161 = landingpad { i8*, i32 }
          cleanup
  br label %304

162:                                              ; preds = %117, %153, %112
  %163 = phi i32* [ %102, %117 ], [ %154, %153 ], [ %102, %112 ]
  %164 = phi i32* [ %103, %117 ], [ %154, %153 ], [ %103, %112 ]
  %165 = phi i32* [ %104, %117 ], [ %142, %153 ], [ %104, %112 ]
  %166 = phi i32* [ %105, %117 ], [ %154, %153 ], [ %105, %112 ]
  %167 = phi i32* [ %118, %117 ], [ %149, %153 ], [ %106, %112 ]
  %168 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #10
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %214

170:                                              ; preds = %162
  %171 = icmp eq i32* %167, %164
  br i1 %171, label %174, label %172

172:                                              ; preds = %170
  store i32 2, i32* %167, align 4, !tbaa !17
  %173 = getelementptr inbounds i32, i32* %167, i64 1
  store i32* %173, i32** %98, align 8, !tbaa !19
  br label %214

174:                                              ; preds = %170
  %175 = ptrtoint i32* %164 to i64
  %176 = ptrtoint i32* %165 to i64
  %177 = sub i64 %175, %176
  %178 = ashr exact i64 %177, 2
  %179 = icmp eq i64 %177, 9223372036854775804
  br i1 %179, label %180, label %182

180:                                              ; preds = %174
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #11
          to label %181 unwind label %212

181:                                              ; preds = %180
  unreachable

182:                                              ; preds = %174
  %183 = icmp eq i64 %177, 0
  %184 = select i1 %183, i64 1, i64 %178
  %185 = add nsw i64 %184, %178
  %186 = icmp ult i64 %185, %178
  %187 = icmp ugt i64 %185, 2305843009213693951
  %188 = or i1 %186, %187
  %189 = select i1 %188, i64 2305843009213693951, i64 %185
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %196, label %191

191:                                              ; preds = %182
  %192 = shl nuw nsw i64 %189, 2
  %193 = invoke noalias nonnull i8* @_Znwm(i64 %192) #12
          to label %194 unwind label %210

194:                                              ; preds = %191
  %195 = bitcast i8* %193 to i32*
  br label %196

196:                                              ; preds = %194, %182
  %197 = phi i32* [ %195, %194 ], [ null, %182 ]
  %198 = getelementptr inbounds i32, i32* %197, i64 %178
  store i32 2, i32* %198, align 4, !tbaa !17
  %199 = icmp sgt i64 %177, 0
  br i1 %199, label %200, label %203

200:                                              ; preds = %196
  %201 = bitcast i32* %197 to i8*
  %202 = bitcast i32* %165 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %201, i8* align 4 %202, i64 %177, i1 false) #10
  br label %203

203:                                              ; preds = %200, %196
  %204 = getelementptr inbounds i32, i32* %198, i64 1
  %205 = icmp eq i32* %165, null
  br i1 %205, label %208, label %206

206:                                              ; preds = %203
  %207 = bitcast i32* %165 to i8*
  call void @_ZdlPv(i8* nonnull %207) #10
  br label %208

208:                                              ; preds = %206, %203
  store i32* %197, i32** %100, align 8, !tbaa !21
  store i32* %204, i32** %98, align 8, !tbaa !19
  %209 = getelementptr inbounds i32, i32* %197, i64 %189
  store i32* %209, i32** %99, align 8, !tbaa !22
  br label %214

210:                                              ; preds = %191
  %211 = landingpad { i8*, i32 }
          cleanup
  br label %304

212:                                              ; preds = %180
  %213 = landingpad { i8*, i32 }
          cleanup
  br label %304

214:                                              ; preds = %172, %208, %162
  %215 = phi i32* [ %163, %172 ], [ %209, %208 ], [ %163, %162 ]
  %216 = phi i32* [ %164, %172 ], [ %209, %208 ], [ %164, %162 ]
  %217 = phi i32* [ %165, %172 ], [ %197, %208 ], [ %165, %162 ]
  %218 = phi i32* [ %164, %172 ], [ %209, %208 ], [ %166, %162 ]
  %219 = phi i32* [ %173, %172 ], [ %204, %208 ], [ %167, %162 ]
  %220 = call i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #10
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %266

222:                                              ; preds = %214
  %223 = icmp eq i32* %219, %215
  br i1 %223, label %226, label %224

224:                                              ; preds = %222
  store i32 1, i32* %219, align 4, !tbaa !17
  %225 = getelementptr inbounds i32, i32* %219, i64 1
  store i32* %225, i32** %98, align 8, !tbaa !19
  br label %266

226:                                              ; preds = %222
  %227 = ptrtoint i32* %215 to i64
  %228 = ptrtoint i32* %217 to i64
  %229 = sub i64 %227, %228
  %230 = ashr exact i64 %229, 2
  %231 = icmp eq i64 %229, 9223372036854775804
  br i1 %231, label %232, label %234

232:                                              ; preds = %226
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0)) #11
          to label %233 unwind label %264

233:                                              ; preds = %232
  unreachable

234:                                              ; preds = %226
  %235 = icmp eq i64 %229, 0
  %236 = select i1 %235, i64 1, i64 %230
  %237 = add nsw i64 %236, %230
  %238 = icmp ult i64 %237, %230
  %239 = icmp ugt i64 %237, 2305843009213693951
  %240 = or i1 %238, %239
  %241 = select i1 %240, i64 2305843009213693951, i64 %237
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %248, label %243

243:                                              ; preds = %234
  %244 = shl nuw nsw i64 %241, 2
  %245 = invoke noalias nonnull i8* @_Znwm(i64 %244) #12
          to label %246 unwind label %262

246:                                              ; preds = %243
  %247 = bitcast i8* %245 to i32*
  br label %248

248:                                              ; preds = %246, %234
  %249 = phi i32* [ %247, %246 ], [ null, %234 ]
  %250 = getelementptr inbounds i32, i32* %249, i64 %230
  store i32 1, i32* %250, align 4, !tbaa !17
  %251 = icmp sgt i64 %229, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %248
  %253 = bitcast i32* %249 to i8*
  %254 = bitcast i32* %217 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %253, i8* align 4 %254, i64 %229, i1 false) #10
  br label %255

255:                                              ; preds = %252, %248
  %256 = getelementptr inbounds i32, i32* %250, i64 1
  %257 = icmp eq i32* %217, null
  br i1 %257, label %260, label %258

258:                                              ; preds = %255
  %259 = bitcast i32* %217 to i8*
  call void @_ZdlPv(i8* nonnull %259) #10
  br label %260

260:                                              ; preds = %258, %255
  store i32* %249, i32** %100, align 8, !tbaa !21
  store i32* %256, i32** %98, align 8, !tbaa !19
  %261 = getelementptr inbounds i32, i32* %249, i64 %241
  store i32* %261, i32** %99, align 8, !tbaa !22
  br label %266

262:                                              ; preds = %243
  %263 = landingpad { i8*, i32 }
          cleanup
  br label %304

264:                                              ; preds = %232
  %265 = landingpad { i8*, i32 }
          cleanup
  br label %304

266:                                              ; preds = %224, %260, %214
  %267 = phi i32* [ %215, %224 ], [ %261, %260 ], [ %215, %214 ]
  %268 = phi i32* [ %215, %224 ], [ %261, %260 ], [ %216, %214 ]
  %269 = phi i32* [ %217, %224 ], [ %249, %260 ], [ %217, %214 ]
  %270 = phi i32* [ %215, %224 ], [ %261, %260 ], [ %218, %214 ]
  %271 = phi i32* [ %225, %224 ], [ %256, %260 ], [ %219, %214 ]
  %272 = load i64, i64* %11, align 8, !tbaa !8
  %273 = invoke nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i64 0, i64 %272, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)
          to label %290 unwind label %155

274:                                              ; preds = %101
  %275 = load i64, i64* %11, align 8, !tbaa !8
  %276 = add i64 %275, 1
  %277 = load i8*, i8** %10, align 8, !tbaa !15
  %278 = icmp eq i8* %277, %9
  %279 = load i64, i64* %97, align 8
  %280 = select i1 %278, i64 15, i64 %279
  %281 = icmp ugt i64 %276, %280
  br i1 %281, label %282, label %285

282:                                              ; preds = %274
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i64 %275, i64 0, i8* null, i64 1)
          to label %283 unwind label %155

283:                                              ; preds = %282
  %284 = load i8*, i8** %10, align 8, !tbaa !15
  br label %285

285:                                              ; preds = %274, %283
  %286 = phi i8* [ %284, %283 ], [ %277, %274 ]
  %287 = getelementptr inbounds i8, i8* %286, i64 %275
  store i8 %110, i8* %287, align 1, !tbaa !11
  store i64 %276, i64* %11, align 8, !tbaa !8
  %288 = load i8*, i8** %10, align 8, !tbaa !15
  %289 = getelementptr inbounds i8, i8* %288, i64 %276
  store i8 0, i8* %289, align 1, !tbaa !11
  br label %290

290:                                              ; preds = %266, %285
  %291 = phi i32* [ %267, %266 ], [ %102, %285 ]
  %292 = phi i32* [ %268, %266 ], [ %103, %285 ]
  %293 = phi i32* [ %269, %266 ], [ %104, %285 ]
  %294 = phi i32* [ %270, %266 ], [ %105, %285 ]
  %295 = phi i32* [ %271, %266 ], [ %106, %285 ]
  %296 = add nuw i64 %107, 1
  %297 = load i64, i64* %12, align 8, !tbaa !8
  %298 = icmp ugt i64 %297, %296
  br i1 %298, label %101, label %299, !llvm.loop !23

299:                                              ; preds = %290, %2, %93
  %300 = load i8*, i8** %10, align 8, !tbaa !15
  %301 = icmp eq i8* %300, %9
  br i1 %301, label %303, label %302

302:                                              ; preds = %299
  call void @_ZdlPv(i8* %300) #10
  br label %303

303:                                              ; preds = %299, %302
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret void

304:                                              ; preds = %262, %264, %210, %212, %158, %160, %155
  %305 = phi i32* [ %156, %155 ], [ %104, %158 ], [ %104, %160 ], [ %165, %210 ], [ %165, %212 ], [ %217, %262 ], [ %217, %264 ]
  %306 = phi { i8*, i32 } [ %157, %155 ], [ %159, %158 ], [ %161, %160 ], [ %211, %210 ], [ %213, %212 ], [ %263, %262 ], [ %265, %264 ]
  %307 = icmp eq i32* %305, null
  br i1 %307, label %310, label %308

308:                                              ; preds = %304
  %309 = bitcast i32* %305 to i8*
  call void @_ZdlPv(i8* nonnull %309) #10
  br label %310

310:                                              ; preds = %91, %304, %308
  %311 = phi { i8*, i32 } [ %92, %91 ], [ %306, %304 ], [ %306, %308 ]
  %312 = load i8*, i8** %10, align 8, !tbaa !15
  %313 = icmp eq i8* %312, %9
  br i1 %313, label %315, label %314

314:                                              ; preds = %310
  call void @_ZdlPv(i8* %312) #10
  br label %315

315:                                              ; preds = %314, %310
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  resume { i8*, i32 } %311
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

declare dso_local nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #4

; Function Attrs: nounwind
declare dso_local i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare dso_local nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #4

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #9

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #10 = { nounwind }
attributes #11 = { noreturn }
attributes #12 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !10, i64 8}
!9 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !4, i64 0, !10, i64 8, !6, i64 16}
!10 = !{!"long", !6, i64 0}
!11 = !{!6, !6, i64 0}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0"}
!14 = distinct !{!14, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_"}
!15 = !{!9, !5, i64 0}
!16 = !{!10, !10, i64 0}
!17 = !{!18, !18, i64 0}
!18 = !{!"int", !6, i64 0}
!19 = !{!20, !5, i64 8}
!20 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!21 = !{!20, !5, i64 0}
!22 = !{!20, !5, i64 16}
!23 = distinct !{!23, !24}
!24 = !{!"llvm.loop.mustprogress"}
