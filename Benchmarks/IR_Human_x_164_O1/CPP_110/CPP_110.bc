; ModuleID = '../../Human_xBenchmarks_164/CPP_110/CPP_110.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_110/CPP_110.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [4 x i8] c"YES\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z8exchangeB5cxx11St6vectorIiSaIiEES1_(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::vector"* nocapture readonly %1, %"class.std::vector"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = call i64 @llvm.umax.i64(i64 %11, i64 1)
  br label %28

15:                                               ; preds = %28, %3
  %16 = phi i32 [ 0, %3 ], [ %35, %28 ]
  %17 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i32*, i32** %17, align 8, !tbaa !3
  %19 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i32*, i32** %19, align 8, !tbaa !8
  %21 = ptrtoint i32* %18 to i64
  %22 = ptrtoint i32* %20 to i64
  %23 = sub i64 %21, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %15
  %26 = ashr exact i64 %23, 2
  %27 = call i64 @llvm.umax.i64(i64 %26, i64 1)
  br label %44

28:                                               ; preds = %13, %28
  %29 = phi i64 [ 0, %13 ], [ %36, %28 ]
  %30 = phi i32 [ 0, %13 ], [ %35, %28 ]
  %31 = getelementptr inbounds i32, i32* %7, i64 %29
  %32 = load i32, i32* %31, align 4, !tbaa !9
  %33 = and i32 %32, 1
  %34 = xor i32 %33, 1
  %35 = add nuw nsw i32 %34, %30
  %36 = add nuw nsw i64 %29, 1
  %37 = icmp eq i64 %36, %14
  br i1 %37, label %15, label %28, !llvm.loop !11

38:                                               ; preds = %44, %15
  %39 = phi i32 [ %16, %15 ], [ %51, %44 ]
  %40 = zext i32 %39 to i64
  %41 = icmp ugt i64 %11, %40
  %42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %43 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %42, %union.anon** %43, align 8, !tbaa !14
  br i1 %41, label %59, label %54

44:                                               ; preds = %25, %44
  %45 = phi i64 [ 0, %25 ], [ %52, %44 ]
  %46 = phi i32 [ %16, %25 ], [ %51, %44 ]
  %47 = getelementptr inbounds i32, i32* %20, i64 %45
  %48 = load i32, i32* %47, align 4, !tbaa !9
  %49 = and i32 %48, 1
  %50 = xor i32 %49, 1
  %51 = add nuw nsw i32 %50, %46
  %52 = add nuw nsw i64 %45, 1
  %53 = icmp eq i64 %52, %27
  br i1 %53, label %38, label %44, !llvm.loop !16

54:                                               ; preds = %38
  %55 = bitcast %union.anon* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %55, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #3
  %56 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 3, i64* %56, align 8, !tbaa !17
  %57 = bitcast %union.anon* %42 to i8*
  %58 = getelementptr inbounds i8, i8* %57, i64 3
  store i8 0, i8* %58, align 1, !tbaa !20
  br label %64

59:                                               ; preds = %38
  %60 = bitcast %union.anon* %42 to i16*
  store i16 20302, i16* %60, align 8
  %61 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 2, i64* %61, align 8, !tbaa !17
  %62 = bitcast %union.anon* %42 to i8*
  %63 = getelementptr inbounds i8, i8* %62, i64 2
  store i8 0, i8* %63, align 2, !tbaa !20
  br label %64

64:                                               ; preds = %59, %54
  ret void
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = !{!15, !5, i64 0}
!15 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!16 = distinct !{!16, !12, !13}
!17 = !{!18, !19, i64 8}
!18 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !15, i64 0, !19, i64 8, !6, i64 16}
!19 = !{!"long", !6, i64 0}
!20 = !{!6, !6, i64 0}
