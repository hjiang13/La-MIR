; ModuleID = '../../Human_xBenchmarks_164/CPP_57/CPP_57.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_57/CPP_57.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local zeroext i1 @_Z9monotonicSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8, !tbaa !8
  %6 = ptrtoint float* %3 to i64
  %7 = ptrtoint float* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp ugt i64 %9, 1
  br i1 %10, label %16, label %11

11:                                               ; preds = %16, %1
  %12 = phi i32 [ 0, %1 ], [ %26, %16 ]
  %13 = phi i32 [ 0, %1 ], [ %28, %16 ]
  %14 = add nsw i32 %13, %12
  %15 = icmp ne i32 %14, 2
  ret i1 %15

16:                                               ; preds = %1, %16
  %17 = phi i64 [ %29, %16 ], [ 1, %1 ]
  %18 = phi i32 [ %28, %16 ], [ 0, %1 ]
  %19 = phi i32 [ %26, %16 ], [ 0, %1 ]
  %20 = getelementptr inbounds float, float* %5, i64 %17
  %21 = load float, float* %20, align 4, !tbaa !9
  %22 = add nsw i64 %17, -1
  %23 = getelementptr inbounds float, float* %5, i64 %22
  %24 = load float, float* %23, align 4, !tbaa !9
  %25 = fcmp ogt float %21, %24
  %26 = select i1 %25, i32 1, i32 %19
  %27 = fcmp olt float %21, %24
  %28 = select i1 %27, i32 1, i32 %18
  %29 = add nuw nsw i64 %17, 1
  %30 = icmp eq i64 %29, %9
  br i1 %30, label %11, label %16, !llvm.loop !11
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
