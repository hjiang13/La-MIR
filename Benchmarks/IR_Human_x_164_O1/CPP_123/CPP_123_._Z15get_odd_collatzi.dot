digraph "CFG for '_Z15get_odd_collatzi' function" {
	label="CFG for '_Z15get_odd_collatzi' function";

	Node0x55d646423590 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%2:\l  %3 = alloca i32, align 4\l  store i32 %1, i32* %3, align 4, !tbaa !3\l  %4 = bitcast %\"class.std::vector\"* %0 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %4, i8 0, i64 24, i1 false) #7\l  %5 = invoke noalias nonnull i8* @_Znwm(i64 4) #8\l          to label %11 unwind label %6\l}"];
	Node0x55d646423590 -> Node0x55d646424c20;
	Node0x55d646423590 -> Node0x55d646424cb0;
	Node0x55d646424cb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5f7fe870",label="{%6:\l6:                                                \l  %7 = landingpad \{ i8*, i32 \}\l          cleanup\l  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %9 = load i32*, i32** %8, align 8, !tbaa !7\l  %10 = icmp eq i32* %9, null\l  br i1 %10, label %67, label %63\l|{<s0>T|<s1>F}}"];
	Node0x55d646424cb0:s0 -> Node0x55d646424830;
	Node0x55d646424cb0:s1 -> Node0x55d6464255d0;
	Node0x55d646424c20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%11:\l11:                                               \l  %12 = bitcast i8* %5 to i32*\l  %13 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %14 = bitcast %\"class.std::vector\"* %0 to i8**\l  store i8* %5, i8** %14, align 8, !tbaa !7\l  %15 = getelementptr inbounds i8, i8* %5, i64 4\l  %16 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %17 = bitcast i32** %16 to i8**\l  store i8* %15, i8** %17, align 8, !tbaa !10\l  store i32 1, i32* %12, align 4\l  %18 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %19 = bitcast i32** %18 to i8**\l  store i8* %15, i8** %19, align 8, !tbaa !11\l  %20 = load i32, i32* %3, align 4, !tbaa !3\l  %21 = icmp eq i32 %20, 1\l  br i1 %21, label %49, label %22\l|{<s0>T|<s1>F}}"];
	Node0x55d646424c20:s0 -> Node0x55d646426dd0;
	Node0x55d646424c20:s1 -> Node0x55d646426e60;
	Node0x55d646426e60 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%22:\l22:                                               \l  %23 = phi i32 [ %47, %46 ], [ %20, %11 ]\l  %24 = srem i32 %23, 2\l  %25 = sdiv i32 %23, 2\l  %26 = icmp eq i32 %24, 1\l  br i1 %26, label %27, label %46\l|{<s0>T|<s1>F}}"];
	Node0x55d646426e60:s0 -> Node0x55d6464272c0;
	Node0x55d646426e60:s1 -> Node0x55d646426fd0;
	Node0x55d6464272c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%27:\l27:                                               \l  %28 = load i32*, i32** %18, align 8, !tbaa !11\l  %29 = load i32*, i32** %16, align 8, !tbaa !10\l  %30 = icmp eq i32* %28, %29\l  br i1 %30, label %33, label %31\l|{<s0>T|<s1>F}}"];
	Node0x55d6464272c0:s0 -> Node0x55d646428190;
	Node0x55d6464272c0:s1 -> Node0x55d6464281e0;
	Node0x55d6464281e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cc403a70",label="{%31:\l31:                                               \l  store i32 %23, i32* %28, align 4, !tbaa !3\l  %32 = getelementptr inbounds i32, i32* %28, i64 1\l  store i32* %32, i32** %18, align 8, !tbaa !11\l  br label %34\l}"];
	Node0x55d6464281e0 -> Node0x55d646428720;
	Node0x55d646428190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%33:\l33:                                               \l  invoke void\l... @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iterato\l...rIPiS1_EEDpOT_(%\"class.std::vector\"* nonnull align 8 dereferenceable(24) %0,\l... i32* %28, i32* nonnull align 4 dereferenceable(4) %3)\l          to label %34 unwind label %38\l}"];
	Node0x55d646428190 -> Node0x55d646428720;
	Node0x55d646428190 -> Node0x55d6464288f0;
	Node0x55d646428720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%34:\l34:                                               \l  %35 = load i32, i32* %3, align 4, !tbaa !3\l  %36 = mul nsw i32 %35, 3\l  %37 = add nsw i32 %36, 1\l  br label %46\l}"];
	Node0x55d646428720 -> Node0x55d646426fd0;
	Node0x55d6464288f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%38:\l38:                                               \l  %39 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %42\l}"];
	Node0x55d6464288f0 -> Node0x55d646428e90;
	Node0x55d646428f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6282ea70",label="{%40:\l40:                                               \l  %41 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %42\l}"];
	Node0x55d646428f50 -> Node0x55d646428e90;
	Node0x55d646428e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#779af770",label="{%42:\l42:                                               \l  %43 = phi \{ i8*, i32 \} [ %39, %38 ], [ %41, %40 ]\l  %44 = load i32*, i32** %13, align 8, !tbaa !7\l  %45 = icmp eq i32* %44, null\l  br i1 %45, label %67, label %63\l|{<s0>T|<s1>F}}"];
	Node0x55d646428e90:s0 -> Node0x55d646424830;
	Node0x55d646428e90:s1 -> Node0x55d6464255d0;
	Node0x55d646426fd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%46:\l46:                                               \l  %47 = phi i32 [ %37, %34 ], [ %25, %22 ]\l  store i32 %47, i32* %3, align 4, !tbaa !3\l  %48 = icmp eq i32 %47, 1\l  br i1 %48, label %49, label %22, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x55d646426fd0:s0 -> Node0x55d646426dd0;
	Node0x55d646426fd0:s1 -> Node0x55d646426e60;
	Node0x55d646426dd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%49:\l49:                                               \l  %50 = load i32*, i32** %13, align 8, !tbaa !15\l  %51 = load i32*, i32** %18, align 8, !tbaa !15\l  %52 = icmp eq i32* %50, %51\l  br i1 %52, label %62, label %53\l|{<s0>T|<s1>F}}"];
	Node0x55d646426dd0:s0 -> Node0x55d646429e00;
	Node0x55d646426dd0:s1 -> Node0x55d646429e50;
	Node0x55d646429e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%53:\l53:                                               \l  %54 = ptrtoint i32* %51 to i64\l  %55 = ptrtoint i32* %50 to i64\l  %56 = sub i64 %54, %55\l  %57 = ashr exact i64 %56, 2\l  %58 = call i64 @llvm.ctlz.i64(i64 %57, i1 true) #7, !range !16\l  %59 = shl nuw nsw i64 %58, 1\l  %60 = xor i64 %59, 126\l  invoke void\l... @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElN\l...S0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %50, i32* %51, i64 %60)\l          to label %61 unwind label %40\l}"];
	Node0x55d646429e50 -> Node0x55d64642a6e0;
	Node0x55d646429e50 -> Node0x55d646428f50;
	Node0x55d64642a6e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e97a5f70",label="{%61:\l61:                                               \l  invoke void\l... @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIi\l...EEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %50, i32* %51)\l          to label %62 unwind label %40\l}"];
	Node0x55d64642a6e0 -> Node0x55d646429e00;
	Node0x55d64642a6e0 -> Node0x55d646428f50;
	Node0x55d646429e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%62:\l62:                                               \l  ret void\l}"];
	Node0x55d6464255d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%63:\l63:                                               \l  %64 = phi i32* [ %9, %6 ], [ %44, %42 ]\l  %65 = phi \{ i8*, i32 \} [ %7, %6 ], [ %43, %42 ]\l  %66 = bitcast i32* %64 to i8*\l  call void @_ZdlPv(i8* nonnull %66) #7\l  br label %67\l}"];
	Node0x55d6464255d0 -> Node0x55d646424830;
	Node0x55d646424830 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%67:\l67:                                               \l  %68 = phi \{ i8*, i32 \} [ %7, %6 ], [ %43, %42 ], [ %65, %63 ]\l  resume \{ i8*, i32 \} %68\l}"];
}
