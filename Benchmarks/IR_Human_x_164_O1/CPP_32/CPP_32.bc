; ModuleID = '../../Human_xBenchmarks_164/CPP_32/CPP_32.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_32/CPP_32.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" = type { double*, double*, double* }

; Function Attrs: mustprogress nofree nounwind uwtable
define dso_local double @_Z4polySt6vectorIdSaIdEEd(%"class.std::vector"* nocapture readonly %0, double %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load double*, double** %3, align 8, !tbaa !3
  %6 = load double*, double** %4, align 8, !tbaa !8
  %7 = icmp eq double* %5, %6
  br i1 %7, label %27, label %8

8:                                                ; preds = %2, %8
  %9 = phi i64 [ %19, %8 ], [ 0, %2 ]
  %10 = phi double* [ %21, %8 ], [ %6, %2 ]
  %11 = phi double [ %18, %8 ], [ 0.000000e+00, %2 ]
  %12 = getelementptr inbounds double, double* %10, i64 %9
  %13 = load double, double* %12, align 8, !tbaa !9
  %14 = trunc i64 %9 to i32
  %15 = sitofp i32 %14 to double
  %16 = call double @pow(double %1, double %15) #9
  %17 = fmul double %13, %16
  %18 = fadd double %11, %17
  %19 = add nuw nsw i64 %9, 1
  %20 = load double*, double** %3, align 8, !tbaa !3
  %21 = load double*, double** %4, align 8, !tbaa !8
  %22 = ptrtoint double* %20 to i64
  %23 = ptrtoint double* %21 to i64
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 3
  %26 = icmp ugt i64 %25, %19
  br i1 %26, label %8, label %27, !llvm.loop !11

27:                                               ; preds = %8, %2
  %28 = phi double [ 0.000000e+00, %2 ], [ %18, %8 ]
  ret double %28
}

; Function Attrs: uwtable
define dso_local double @_Z9find_zeroSt6vectorIdSaIdEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #1 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load double*, double** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load double*, double** %4, align 8, !tbaa !8
  %6 = ptrtoint double* %3 to i64
  %7 = ptrtoint double* %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %17, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 3
  %12 = icmp ugt i64 %11, 1152921504606846975
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  call void @_ZSt17__throw_bad_allocv() #10
  unreachable

14:                                               ; preds = %10
  %15 = call noalias nonnull i8* @_Znwm(i64 %8) #11
  %16 = bitcast i8* %15 to double*
  br label %17

17:                                               ; preds = %14, %1
  %18 = phi double* [ %16, %14 ], [ null, %1 ]
  %19 = load double*, double** %4, align 8, !tbaa !14
  %20 = load double*, double** %2, align 8, !tbaa !14
  %21 = ptrtoint double* %20 to i64
  %22 = ptrtoint double* %19 to i64
  %23 = sub i64 %21, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %25

25:                                               ; preds = %17
  %26 = bitcast double* %18 to i8*
  %27 = bitcast double* %19 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 %23, i1 false) #9
  %28 = ashr exact i64 %23, 3
  %29 = call i64 @llvm.umax.i64(i64 %28, i64 1)
  br label %30

30:                                               ; preds = %25, %30
  %31 = phi i64 [ %40, %30 ], [ 0, %25 ]
  %32 = phi double [ %39, %30 ], [ 0.000000e+00, %25 ]
  %33 = getelementptr inbounds double, double* %18, i64 %31
  %34 = load double, double* %33, align 8, !tbaa !9
  %35 = trunc i64 %31 to i32
  %36 = sitofp i32 %35 to double
  %37 = call double @pow(double 0.000000e+00, double %36) #9
  %38 = fmul double %34, %37
  %39 = fadd double %32, %38
  %40 = add nuw nsw i64 %31, 1
  %41 = icmp eq i64 %40, %29
  br i1 %41, label %42, label %30, !llvm.loop !11

42:                                               ; preds = %30, %17
  %43 = phi double [ 0.000000e+00, %17 ], [ %39, %30 ]
  %44 = icmp eq double* %18, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %42
  %46 = bitcast double* %18 to i8*
  call void @_ZdlPv(i8* nonnull %46) #9
  br label %47

47:                                               ; preds = %42, %45
  %48 = call double @llvm.fabs.f64(double %43) #9
  %49 = fcmp ogt double %48, 0x3EB0C6F7A0B5ED8D
  br i1 %49, label %50, label %129

50:                                               ; preds = %47, %126
  %51 = phi double [ %122, %126 ], [ %43, %47 ]
  %52 = phi double [ %65, %126 ], [ 0.000000e+00, %47 ]
  %53 = load double*, double** %2, align 8, !tbaa !3
  %54 = load double*, double** %4, align 8, !tbaa !8
  %55 = ptrtoint double* %53 to i64
  %56 = ptrtoint double* %54 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = icmp ugt i64 %58, 1
  br i1 %59, label %98, label %60

60:                                               ; preds = %98, %50
  %61 = phi double [ 0.000000e+00, %50 ], [ %112, %98 ]
  %62 = phi i64 [ %57, %50 ], [ %118, %98 ]
  %63 = phi i64 [ %58, %50 ], [ %119, %98 ]
  %64 = fdiv double %51, %61
  %65 = fsub double %52, %64
  %66 = icmp eq i64 %62, 0
  br i1 %66, label %73, label %67

67:                                               ; preds = %60
  %68 = icmp ugt i64 %63, 1152921504606846975
  br i1 %68, label %69, label %70

69:                                               ; preds = %67
  call void @_ZSt17__throw_bad_allocv() #10
  unreachable

70:                                               ; preds = %67
  %71 = call noalias nonnull i8* @_Znwm(i64 %62) #11
  %72 = bitcast i8* %71 to double*
  br label %73

73:                                               ; preds = %70, %60
  %74 = phi double* [ %72, %70 ], [ null, %60 ]
  %75 = load double*, double** %4, align 8, !tbaa !14
  %76 = load double*, double** %2, align 8, !tbaa !14
  %77 = ptrtoint double* %76 to i64
  %78 = ptrtoint double* %75 to i64
  %79 = sub i64 %77, %78
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %121, label %81

81:                                               ; preds = %73
  %82 = bitcast double* %74 to i8*
  %83 = bitcast double* %75 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 %79, i1 false) #9
  %84 = ashr exact i64 %79, 3
  %85 = call i64 @llvm.umax.i64(i64 %84, i64 1)
  br label %86

86:                                               ; preds = %81, %86
  %87 = phi i64 [ %96, %86 ], [ 0, %81 ]
  %88 = phi double [ %95, %86 ], [ 0.000000e+00, %81 ]
  %89 = getelementptr inbounds double, double* %74, i64 %87
  %90 = load double, double* %89, align 8, !tbaa !9
  %91 = trunc i64 %87 to i32
  %92 = sitofp i32 %91 to double
  %93 = call double @pow(double %65, double %92) #9
  %94 = fmul double %90, %93
  %95 = fadd double %88, %94
  %96 = add nuw nsw i64 %87, 1
  %97 = icmp eq i64 %96, %85
  br i1 %97, label %121, label %86, !llvm.loop !11

98:                                               ; preds = %50, %98
  %99 = phi i64 [ %113, %98 ], [ 1, %50 ]
  %100 = phi double* [ %115, %98 ], [ %54, %50 ]
  %101 = phi double [ %112, %98 ], [ 0.000000e+00, %50 ]
  %102 = getelementptr inbounds double, double* %100, i64 %99
  %103 = load double, double* %102, align 8, !tbaa !9
  %104 = trunc i64 %99 to i32
  %105 = add i32 %104, -1
  %106 = sitofp i32 %105 to double
  %107 = call double @pow(double %52, double %106) #9
  %108 = fmul double %103, %107
  %109 = trunc i64 %99 to i32
  %110 = sitofp i32 %109 to double
  %111 = fmul double %108, %110
  %112 = fadd double %101, %111
  %113 = add nuw nsw i64 %99, 1
  %114 = load double*, double** %2, align 8, !tbaa !3
  %115 = load double*, double** %4, align 8, !tbaa !8
  %116 = ptrtoint double* %114 to i64
  %117 = ptrtoint double* %115 to i64
  %118 = sub i64 %116, %117
  %119 = ashr exact i64 %118, 3
  %120 = icmp ugt i64 %119, %113
  br i1 %120, label %98, label %60, !llvm.loop !15

121:                                              ; preds = %86, %73
  %122 = phi double [ 0.000000e+00, %73 ], [ %95, %86 ]
  %123 = icmp eq double* %74, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %121
  %125 = bitcast double* %74 to i8*
  call void @_ZdlPv(i8* nonnull %125) #9
  br label %126

126:                                              ; preds = %121, %124
  %127 = call double @llvm.fabs.f64(double %122) #9
  %128 = fcmp ogt double %127, 0x3EB0C6F7A0B5ED8D
  br i1 %128, label %50, label %129, !llvm.loop !16

129:                                              ; preds = %126, %47
  %130 = phi double [ 0.000000e+00, %47 ], [ %65, %126 ]
  ret double %130
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: mustprogress nofree nounwind willreturn
declare dso_local double @pow(double, double) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #3

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #8

attributes #0 = { mustprogress nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { mustprogress nofree nounwind willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }
attributes #10 = { noreturn }
attributes #11 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"double", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = !{!5, !5, i64 0}
!15 = distinct !{!15, !12, !13}
!16 = distinct !{!16, !12, !13}
