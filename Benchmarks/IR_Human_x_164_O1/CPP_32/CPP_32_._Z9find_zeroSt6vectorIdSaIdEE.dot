digraph "CFG for '_Z9find_zeroSt6vectorIdSaIdEE' function" {
	label="CFG for '_Z9find_zeroSt6vectorIdSaIdEE' function";

	Node0x5568a5d58c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%1:\l  %2 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %3 = load double*, double** %2, align 8, !tbaa !3\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %5 = load double*, double** %4, align 8, !tbaa !8\l  %6 = ptrtoint double* %3 to i64\l  %7 = ptrtoint double* %5 to i64\l  %8 = sub i64 %6, %7\l  %9 = icmp eq i64 %8, 0\l  br i1 %9, label %17, label %10\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d58c70:s0 -> Node0x5568a5d58fb0;
	Node0x5568a5d58c70:s1 -> Node0x5568a5d59300;
	Node0x5568a5d59300 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%10:\l10:                                               \l  %11 = ashr exact i64 %8, 3\l  %12 = icmp ugt i64 %11, 1152921504606846975\l  br i1 %12, label %13, label %14\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d59300:s0 -> Node0x5568a5d59560;
	Node0x5568a5d59300:s1 -> Node0x5568a5d595b0;
	Node0x5568a5d59560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5977e370",label="{%13:\l13:                                               \l  call void @_ZSt17__throw_bad_allocv() #8\l  unreachable\l}"];
	Node0x5568a5d595b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%14:\l14:                                               \l  %15 = call noalias nonnull i8* @_Znwm(i64 %8) #9\l  %16 = bitcast i8* %15 to double*\l  br label %17\l}"];
	Node0x5568a5d595b0 -> Node0x5568a5d58fb0;
	Node0x5568a5d58fb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%17:\l17:                                               \l  %18 = phi double* [ %16, %14 ], [ null, %1 ]\l  %19 = load double*, double** %4, align 8, !tbaa !9\l  %20 = load double*, double** %2, align 8, !tbaa !9\l  %21 = ptrtoint double* %20 to i64\l  %22 = ptrtoint double* %19 to i64\l  %23 = sub i64 %21, %22\l  %24 = icmp eq i64 %23, 0\l  br i1 %24, label %42, label %25\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d58fb0:s0 -> Node0x5568a5d5a670;
	Node0x5568a5d58fb0:s1 -> Node0x5568a5d5a6c0;
	Node0x5568a5d5a6c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%25:\l25:                                               \l  %26 = bitcast double* %18 to i8*\l  %27 = bitcast double* %19 to i8*\l  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64\l... %23, i1 false) #10\l  %28 = ashr exact i64 %23, 3\l  %29 = call i64 @llvm.umax.i64(i64 %28, i64 1)\l  br label %30\l}"];
	Node0x5568a5d5a6c0 -> Node0x5568a5d5aed0;
	Node0x5568a5d5aed0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%30:\l30:                                               \l  %31 = phi i64 [ %40, %30 ], [ 0, %25 ]\l  %32 = phi double [ %39, %30 ], [ 0.000000e+00, %25 ]\l  %33 = getelementptr inbounds double, double* %18, i64 %31\l  %34 = load double, double* %33, align 8, !tbaa !10\l  %35 = trunc i64 %31 to i32\l  %36 = sitofp i32 %35 to double\l  %37 = call double @pow(double 0.000000e+00, double %36) #10\l  %38 = fmul double %34, %37\l  %39 = fadd double %32, %38\l  %40 = add nuw nsw i64 %31, 1\l  %41 = icmp eq i64 %40, %29\l  br i1 %41, label %42, label %30, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5aed0:s0 -> Node0x5568a5d5a670;
	Node0x5568a5d5aed0:s1 -> Node0x5568a5d5aed0;
	Node0x5568a5d5a670 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%42:\l42:                                               \l  %43 = phi double [ 0.000000e+00, %17 ], [ %39, %30 ]\l  %44 = icmp eq double* %18, null\l  br i1 %44, label %47, label %45\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5a670:s0 -> Node0x5568a5d5c750;
	Node0x5568a5d5a670:s1 -> Node0x5568a5d5c7a0;
	Node0x5568a5d5c7a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%45:\l45:                                               \l  %46 = bitcast double* %18 to i8*\l  call void @_ZdlPv(i8* nonnull %46) #10\l  br label %47\l}"];
	Node0x5568a5d5c7a0 -> Node0x5568a5d5c750;
	Node0x5568a5d5c750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%47:\l47:                                               \l  %48 = call double @llvm.fabs.f64(double %43) #10\l  %49 = fcmp ogt double %48, 0x3EB0C6F7A0B5ED8D\l  br i1 %49, label %50, label %129\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5c750:s0 -> Node0x5568a5d5cdf0;
	Node0x5568a5d5c750:s1 -> Node0x5568a5d5ce40;
	Node0x5568a5d5cdf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%50:\l50:                                               \l  %51 = phi double [ %122, %126 ], [ %43, %47 ]\l  %52 = phi double [ %65, %126 ], [ 0.000000e+00, %47 ]\l  %53 = load double*, double** %2, align 8, !tbaa !3\l  %54 = load double*, double** %4, align 8, !tbaa !8\l  %55 = ptrtoint double* %53 to i64\l  %56 = ptrtoint double* %54 to i64\l  %57 = sub i64 %55, %56\l  %58 = ashr exact i64 %57, 3\l  %59 = icmp ugt i64 %58, 1\l  br i1 %59, label %98, label %60\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5cdf0:s0 -> Node0x5568a5d5d580;
	Node0x5568a5d5cdf0:s1 -> Node0x5568a5d5d610;
	Node0x5568a5d5d610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%60:\l60:                                               \l  %61 = phi double [ 0.000000e+00, %50 ], [ %112, %98 ]\l  %62 = phi i64 [ %57, %50 ], [ %118, %98 ]\l  %63 = phi i64 [ %58, %50 ], [ %119, %98 ]\l  %64 = fdiv double %51, %61\l  %65 = fsub double %52, %64\l  %66 = icmp eq i64 %62, 0\l  br i1 %66, label %73, label %67\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5d610:s0 -> Node0x5568a5d5e030;
	Node0x5568a5d5d610:s1 -> Node0x5568a5d5e080;
	Node0x5568a5d5e080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%67:\l67:                                               \l  %68 = icmp ugt i64 %63, 1152921504606846975\l  br i1 %68, label %69, label %70\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5e080:s0 -> Node0x5568a5d5e250;
	Node0x5568a5d5e080:s1 -> Node0x5568a5d5e2a0;
	Node0x5568a5d5e250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#85a8fc70",label="{%69:\l69:                                               \l  call void @_ZSt17__throw_bad_allocv() #8\l  unreachable\l}"];
	Node0x5568a5d5e2a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%70:\l70:                                               \l  %71 = call noalias nonnull i8* @_Znwm(i64 %62) #9\l  %72 = bitcast i8* %71 to double*\l  br label %73\l}"];
	Node0x5568a5d5e2a0 -> Node0x5568a5d5e030;
	Node0x5568a5d5e030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%73:\l73:                                               \l  %74 = phi double* [ %72, %70 ], [ null, %60 ]\l  %75 = load double*, double** %4, align 8, !tbaa !9\l  %76 = load double*, double** %2, align 8, !tbaa !9\l  %77 = ptrtoint double* %76 to i64\l  %78 = ptrtoint double* %75 to i64\l  %79 = sub i64 %77, %78\l  %80 = icmp eq i64 %79, 0\l  br i1 %80, label %121, label %81\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5e030:s0 -> Node0x5568a5d5ead0;
	Node0x5568a5d5e030:s1 -> Node0x5568a5d5eb20;
	Node0x5568a5d5eb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%81:\l81:                                               \l  %82 = bitcast double* %74 to i8*\l  %83 = bitcast double* %75 to i8*\l  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64\l... %79, i1 false) #10\l  %84 = ashr exact i64 %79, 3\l  %85 = call i64 @llvm.umax.i64(i64 %84, i64 1)\l  br label %86\l}"];
	Node0x5568a5d5eb20 -> Node0x5568a5d5f030;
	Node0x5568a5d5f030 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%86:\l86:                                               \l  %87 = phi i64 [ %96, %86 ], [ 0, %81 ]\l  %88 = phi double [ %95, %86 ], [ 0.000000e+00, %81 ]\l  %89 = getelementptr inbounds double, double* %74, i64 %87\l  %90 = load double, double* %89, align 8, !tbaa !10\l  %91 = trunc i64 %87 to i32\l  %92 = sitofp i32 %91 to double\l  %93 = call double @pow(double %65, double %92) #10\l  %94 = fmul double %90, %93\l  %95 = fadd double %88, %94\l  %96 = add nuw nsw i64 %87, 1\l  %97 = icmp eq i64 %96, %85\l  br i1 %97, label %121, label %86, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5f030:s0 -> Node0x5568a5d5ead0;
	Node0x5568a5d5f030:s1 -> Node0x5568a5d5f030;
	Node0x5568a5d5d580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%98:\l98:                                               \l  %99 = phi i64 [ %113, %98 ], [ 1, %50 ]\l  %100 = phi double* [ %115, %98 ], [ %54, %50 ]\l  %101 = phi double [ %112, %98 ], [ 0.000000e+00, %50 ]\l  %102 = getelementptr inbounds double, double* %100, i64 %99\l  %103 = load double, double* %102, align 8, !tbaa !10\l  %104 = trunc i64 %99 to i32\l  %105 = add i32 %104, -1\l  %106 = sitofp i32 %105 to double\l  %107 = call double @pow(double %52, double %106) #10\l  %108 = fmul double %103, %107\l  %109 = trunc i64 %99 to i32\l  %110 = sitofp i32 %109 to double\l  %111 = fmul double %108, %110\l  %112 = fadd double %101, %111\l  %113 = add nuw nsw i64 %99, 1\l  %114 = load double*, double** %2, align 8, !tbaa !3\l  %115 = load double*, double** %4, align 8, !tbaa !8\l  %116 = ptrtoint double* %114 to i64\l  %117 = ptrtoint double* %115 to i64\l  %118 = sub i64 %116, %117\l  %119 = ashr exact i64 %118, 3\l  %120 = icmp ugt i64 %119, %113\l  br i1 %120, label %98, label %60, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5d580:s0 -> Node0x5568a5d5d580;
	Node0x5568a5d5d580:s1 -> Node0x5568a5d5d610;
	Node0x5568a5d5ead0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%121:\l121:                                              \l  %122 = phi double [ 0.000000e+00, %73 ], [ %95, %86 ]\l  %123 = icmp eq double* %74, null\l  br i1 %123, label %126, label %124\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5ead0:s0 -> Node0x5568a5d5cfb0;
	Node0x5568a5d5ead0:s1 -> Node0x5568a5d60750;
	Node0x5568a5d60750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%124:\l124:                                              \l  %125 = bitcast double* %74 to i8*\l  call void @_ZdlPv(i8* nonnull %125) #10\l  br label %126\l}"];
	Node0x5568a5d60750 -> Node0x5568a5d5cfb0;
	Node0x5568a5d5cfb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%126:\l126:                                              \l  %127 = call double @llvm.fabs.f64(double %122) #10\l  %128 = fcmp ogt double %127, 0x3EB0C6F7A0B5ED8D\l  br i1 %128, label %50, label %129, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0x5568a5d5cfb0:s0 -> Node0x5568a5d5cdf0;
	Node0x5568a5d5cfb0:s1 -> Node0x5568a5d5ce40;
	Node0x5568a5d5ce40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5a08170",label="{%129:\l129:                                              \l  %130 = phi double [ 0.000000e+00, %47 ], [ %65, %126 ]\l  ret double %130\l}"];
}
