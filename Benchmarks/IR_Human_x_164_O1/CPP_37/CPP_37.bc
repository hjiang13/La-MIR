; ModuleID = '../../Human_xBenchmarks_164/CPP_37/CPP_37.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_37/CPP_37.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

$_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_ = comdat any

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z9sort_evenSt6vectorIfSaIfEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector", align 8
  %4 = bitcast %"class.std::vector"* %3 to i8*
  %5 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %10 = bitcast %"class.std::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false)
  %11 = load float*, float** %6, align 8, !tbaa !3
  %12 = load float*, float** %7, align 8, !tbaa !8
  %13 = icmp eq float* %11, %12
  br i1 %13, label %14, label %39

14:                                               ; preds = %51, %2
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load float*, float** %17, align 8, !tbaa !9
  %19 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %20 = load float*, float** %19, align 8, !tbaa !9
  %21 = icmp eq float* %18, %20
  br i1 %21, label %31, label %22

22:                                               ; preds = %14
  %23 = ptrtoint float* %20 to i64
  %24 = ptrtoint float* %18 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 2
  %27 = call i64 @llvm.ctlz.i64(i64 %26, i1 true) #8, !range !10
  %28 = shl nuw nsw i64 %27, 1
  %29 = xor i64 %28, 126
  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %18, float* %20, i64 %29)
          to label %30 unwind label %70

30:                                               ; preds = %22
  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %18, float* %20)
          to label %31 unwind label %70

31:                                               ; preds = %30, %14
  %32 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %34 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %36 = load float*, float** %15, align 8, !tbaa !3
  %37 = load float*, float** %16, align 8, !tbaa !8
  %38 = icmp eq float* %36, %37
  br i1 %38, label %64, label %72

39:                                               ; preds = %2, %51
  %40 = phi i64 [ %52, %51 ], [ 0, %2 ]
  %41 = phi float* [ %56, %51 ], [ %12, %2 ]
  %42 = phi i64 [ %54, %51 ], [ 0, %2 ]
  %43 = getelementptr inbounds float, float* %41, i64 %42
  %44 = load float*, float** %8, align 8, !tbaa !3
  %45 = load float*, float** %9, align 8, !tbaa !11
  %46 = icmp eq float* %44, %45
  br i1 %46, label %50, label %47

47:                                               ; preds = %39
  %48 = load float, float* %43, align 4, !tbaa !12
  store float %48, float* %44, align 4, !tbaa !12
  %49 = getelementptr inbounds float, float* %44, i64 1
  store float* %49, float** %8, align 8, !tbaa !3
  br label %51

50:                                               ; preds = %39
  invoke void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %3, float* %44, float* nonnull align 4 dereferenceable(4) %43)
          to label %51 unwind label %62

51:                                               ; preds = %47, %50
  %52 = add nuw i64 %40, 1
  %53 = shl i64 %52, 1
  %54 = and i64 %53, 4294967294
  %55 = load float*, float** %6, align 8, !tbaa !3
  %56 = load float*, float** %7, align 8, !tbaa !8
  %57 = ptrtoint float* %55 to i64
  %58 = ptrtoint float* %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 2
  %61 = icmp ugt i64 %60, %54
  br i1 %61, label %39, label %14, !llvm.loop !14

62:                                               ; preds = %50
  %63 = landingpad { i8*, i32 }
          cleanup
  br label %109

64:                                               ; preds = %100, %31
  %65 = load float*, float** %17, align 8, !tbaa !8
  %66 = icmp eq float* %65, null
  br i1 %66, label %69, label %67

67:                                               ; preds = %64
  %68 = bitcast float* %65 to i8*
  call void @_ZdlPv(i8* nonnull %68) #8
  br label %69

69:                                               ; preds = %64, %67
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  ret void

70:                                               ; preds = %30, %22
  %71 = landingpad { i8*, i32 }
          cleanup
  br label %109

72:                                               ; preds = %31, %100
  %73 = phi i64 [ %101, %100 ], [ 0, %31 ]
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %87

76:                                               ; preds = %72
  %77 = lshr i64 %73, 1
  %78 = and i64 %77, 2147483647
  %79 = load float*, float** %17, align 8, !tbaa !8
  %80 = getelementptr inbounds float, float* %79, i64 %78
  %81 = load float*, float** %34, align 8, !tbaa !3
  %82 = load float*, float** %35, align 8, !tbaa !11
  %83 = icmp eq float* %81, %82
  br i1 %83, label %84, label %94

84:                                               ; preds = %76
  invoke void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %81, float* nonnull align 4 dereferenceable(4) %80)
          to label %100 unwind label %85

85:                                               ; preds = %93, %84
  %86 = landingpad { i8*, i32 }
          cleanup
  br label %109

87:                                               ; preds = %72
  %88 = load float*, float** %16, align 8, !tbaa !8
  %89 = getelementptr inbounds float, float* %88, i64 %73
  %90 = load float*, float** %32, align 8, !tbaa !3
  %91 = load float*, float** %33, align 8, !tbaa !11
  %92 = icmp eq float* %90, %91
  br i1 %92, label %93, label %94

93:                                               ; preds = %87
  invoke void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %90, float* nonnull align 4 dereferenceable(4) %89)
          to label %100 unwind label %85

94:                                               ; preds = %87, %76
  %95 = phi float* [ %80, %76 ], [ %89, %87 ]
  %96 = phi float* [ %81, %76 ], [ %90, %87 ]
  %97 = phi float** [ %34, %76 ], [ %32, %87 ]
  %98 = load float, float* %95, align 4, !tbaa !12
  store float %98, float* %96, align 4, !tbaa !12
  %99 = getelementptr inbounds float, float* %96, i64 1
  store float* %99, float** %97, align 8, !tbaa !3
  br label %100

100:                                              ; preds = %94, %93, %84
  %101 = add nuw i64 %73, 1
  %102 = load float*, float** %15, align 8, !tbaa !3
  %103 = load float*, float** %16, align 8, !tbaa !8
  %104 = ptrtoint float* %102 to i64
  %105 = ptrtoint float* %103 to i64
  %106 = sub i64 %104, %105
  %107 = ashr exact i64 %106, 2
  %108 = icmp ugt i64 %107, %101
  br i1 %108, label %72, label %64, !llvm.loop !17

109:                                              ; preds = %85, %70, %62
  %110 = phi { i8*, i32 } [ %63, %62 ], [ %86, %85 ], [ %71, %70 ]
  %111 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %112 = load float*, float** %111, align 8, !tbaa !8
  %113 = icmp eq float* %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %109
  %115 = bitcast float* %112 to i8*
  call void @_ZdlPv(i8* nonnull %115) #8
  br label %116

116:                                              ; preds = %109, %114
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8
  %117 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %118 = load float*, float** %117, align 8, !tbaa !8
  %119 = icmp eq float* %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %116
  %121 = bitcast float* %118 to i8*
  call void @_ZdlPv(i8* nonnull %121) #8
  br label %122

122:                                              ; preds = %116, %120
  resume { i8*, i32 } %110
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %1, float* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load float*, float** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8, !tbaa !8
  %8 = ptrtoint float* %5 to i64
  %9 = ptrtoint float* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint float* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %14
  %27 = icmp ugt i64 %21, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  call void @_ZSt17__throw_bad_allocv() #9
  unreachable

29:                                               ; preds = %26
  %30 = shl i64 %21, 2
  %31 = call noalias nonnull i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to float*
  br label %33

33:                                               ; preds = %14, %29
  %34 = phi float* [ %32, %29 ], [ null, %14 ]
  %35 = getelementptr inbounds float, float* %34, i64 %24
  %36 = load float, float* %2, align 4, !tbaa !12
  store float %36, float* %35, align 4, !tbaa !12
  %37 = icmp sgt i64 %23, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = bitcast float* %34 to i8*
  %40 = bitcast float* %7 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %23, i1 false) #8
  br label %41

41:                                               ; preds = %33, %38
  %42 = getelementptr inbounds float, float* %35, i64 1
  %43 = sub i64 %8, %22
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = bitcast float* %42 to i8*
  %47 = bitcast float* %1 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 %47, i64 %43, i1 false) #8
  br label %48

48:                                               ; preds = %41, %45
  %49 = icmp eq float* %7, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %48
  %51 = bitcast float* %7 to i8*
  call void @_ZdlPv(i8* nonnull %51) #8
  br label %52

52:                                               ; preds = %48, %50
  %53 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %54 = ashr exact i64 %43, 2
  %55 = getelementptr inbounds float, float* %42, i64 %54
  store float* %34, float** %6, align 8, !tbaa !8
  store float* %55, float** %4, align 8, !tbaa !3
  %56 = getelementptr inbounds float, float* %34, i64 %21
  store float* %56, float** %53, align 8, !tbaa !11
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %0, float* %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = ptrtoint float* %0 to i64
  %5 = getelementptr inbounds float, float* %0, i64 1
  %6 = ptrtoint float* %1 to i64
  %7 = sub i64 %6, %4
  %8 = icmp sgt i64 %7, 64
  br i1 %8, label %9, label %182

9:                                                ; preds = %3, %178
  %10 = phi i64 [ %180, %178 ], [ %7, %3 ]
  %11 = phi i64 [ %134, %178 ], [ %2, %3 ]
  %12 = phi float* [ %166, %178 ], [ %1, %3 ]
  %13 = ashr exact i64 %10, 2
  %14 = icmp eq i64 %11, 0
  br i1 %14, label %15, label %133

15:                                               ; preds = %9
  %16 = ptrtoint float* %0 to i64
  %17 = icmp slt i64 %10, 8
  br i1 %17, label %74, label %18

18:                                               ; preds = %15
  %19 = add nsw i64 %13, -2
  %20 = sdiv i64 %19, 2
  %21 = add nsw i64 %13, -1
  %22 = sdiv i64 %21, 2
  %23 = and i64 %10, 4
  %24 = icmp eq i64 %23, 0
  br label %25

25:                                               ; preds = %68, %18
  %26 = phi i64 [ %20, %18 ], [ %73, %68 ]
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !12
  %29 = icmp sgt i64 %22, %26
  br i1 %29, label %30, label %45

30:                                               ; preds = %25, %30
  %31 = phi i64 [ %40, %30 ], [ %26, %25 ]
  %32 = shl i64 %31, 1
  %33 = add i64 %32, 2
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = or i64 %32, 1
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = load float, float* %34, align 4, !tbaa !12
  %38 = load float, float* %36, align 4, !tbaa !12
  %39 = fcmp olt float %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = getelementptr inbounds float, float* %0, i64 %40
  %42 = load float, float* %41, align 4, !tbaa !12
  %43 = getelementptr inbounds float, float* %0, i64 %31
  store float %42, float* %43, align 4, !tbaa !12
  %44 = icmp slt i64 %40, %22
  br i1 %44, label %30, label %45, !llvm.loop !18

45:                                               ; preds = %30, %25
  %46 = phi i64 [ %26, %25 ], [ %40, %30 ]
  %47 = icmp eq i64 %46, %20
  %48 = select i1 %24, i1 %47, i1 false
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = shl i64 %46, 1
  %51 = or i64 %50, 1
  %52 = getelementptr inbounds float, float* %0, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !12
  %54 = getelementptr inbounds float, float* %0, i64 %46
  store float %53, float* %54, align 4, !tbaa !12
  br label %55

55:                                               ; preds = %49, %45
  %56 = phi i64 [ %51, %49 ], [ %46, %45 ]
  %57 = icmp sgt i64 %56, %26
  br i1 %57, label %58, label %68

58:                                               ; preds = %55, %65
  %59 = phi i64 [ %61, %65 ], [ %56, %55 ]
  %60 = add nsw i64 %59, -1
  %61 = sdiv i64 %60, 2
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !12
  %64 = fcmp olt float %63, %28
  br i1 %64, label %65, label %68

65:                                               ; preds = %58
  %66 = getelementptr inbounds float, float* %0, i64 %59
  store float %63, float* %66, align 4, !tbaa !12
  %67 = icmp sgt i64 %61, %26
  br i1 %67, label %58, label %68, !llvm.loop !19

68:                                               ; preds = %65, %58, %55
  %69 = phi i64 [ %56, %55 ], [ %59, %58 ], [ %61, %65 ]
  %70 = getelementptr inbounds float, float* %0, i64 %69
  store float %28, float* %70, align 4, !tbaa !12
  %71 = icmp eq i64 %26, 0
  %72 = add nsw i64 %26, -1
  %73 = select i1 %71, i64 0, i64 %72
  br i1 %71, label %74, label %25, !llvm.loop !20

74:                                               ; preds = %68, %15
  %75 = icmp sgt i64 %10, 4
  br i1 %75, label %76, label %182

76:                                               ; preds = %74, %129
  %77 = phi float* [ %78, %129 ], [ %12, %74 ]
  %78 = getelementptr inbounds float, float* %77, i64 -1
  %79 = load float, float* %78, align 4, !tbaa !12
  %80 = load float, float* %0, align 4, !tbaa !12
  store float %80, float* %78, align 4, !tbaa !12
  %81 = ptrtoint float* %78 to i64
  %82 = sub i64 %81, %16
  %83 = ashr exact i64 %82, 2
  %84 = add nsw i64 %83, -1
  %85 = sdiv i64 %84, 2
  %86 = icmp sgt i64 %82, 8
  br i1 %86, label %87, label %102

87:                                               ; preds = %76, %87
  %88 = phi i64 [ %97, %87 ], [ 0, %76 ]
  %89 = shl i64 %88, 1
  %90 = add i64 %89, 2
  %91 = getelementptr inbounds float, float* %0, i64 %90
  %92 = or i64 %89, 1
  %93 = getelementptr inbounds float, float* %0, i64 %92
  %94 = load float, float* %91, align 4, !tbaa !12
  %95 = load float, float* %93, align 4, !tbaa !12
  %96 = fcmp olt float %94, %95
  %97 = select i1 %96, i64 %92, i64 %90
  %98 = getelementptr inbounds float, float* %0, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !12
  %100 = getelementptr inbounds float, float* %0, i64 %88
  store float %99, float* %100, align 4, !tbaa !12
  %101 = icmp slt i64 %97, %85
  br i1 %101, label %87, label %102, !llvm.loop !18

102:                                              ; preds = %87, %76
  %103 = phi i64 [ 0, %76 ], [ %97, %87 ]
  %104 = and i64 %82, 4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %116

106:                                              ; preds = %102
  %107 = add nsw i64 %83, -2
  %108 = sdiv i64 %107, 2
  %109 = icmp eq i64 %103, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = shl i64 %103, 1
  %112 = or i64 %111, 1
  %113 = getelementptr inbounds float, float* %0, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !12
  %115 = getelementptr inbounds float, float* %0, i64 %103
  store float %114, float* %115, align 4, !tbaa !12
  br label %116

116:                                              ; preds = %110, %106, %102
  %117 = phi i64 [ %112, %110 ], [ %103, %106 ], [ %103, %102 ]
  %118 = icmp sgt i64 %117, 0
  br i1 %118, label %119, label %129

119:                                              ; preds = %116, %126
  %120 = phi i64 [ %122, %126 ], [ %117, %116 ]
  %121 = add nsw i64 %120, -1
  %122 = sdiv i64 %121, 2
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !12
  %125 = fcmp olt float %124, %79
  br i1 %125, label %126, label %129

126:                                              ; preds = %119
  %127 = getelementptr inbounds float, float* %0, i64 %120
  store float %124, float* %127, align 4, !tbaa !12
  %128 = icmp sgt i64 %120, 2
  br i1 %128, label %119, label %129, !llvm.loop !19

129:                                              ; preds = %126, %119, %116
  %130 = phi i64 [ %117, %116 ], [ %120, %119 ], [ %122, %126 ]
  %131 = getelementptr inbounds float, float* %0, i64 %130
  store float %79, float* %131, align 4, !tbaa !12
  %132 = icmp sgt i64 %82, 4
  br i1 %132, label %76, label %182, !llvm.loop !21

133:                                              ; preds = %9
  %134 = add nsw i64 %11, -1
  %135 = sdiv i64 %13, 2
  %136 = getelementptr inbounds float, float* %0, i64 %135
  %137 = getelementptr inbounds float, float* %12, i64 -1
  %138 = load float, float* %5, align 4, !tbaa !12
  %139 = load float, float* %136, align 4, !tbaa !12
  %140 = fcmp olt float %138, %139
  %141 = load float, float* %137, align 4, !tbaa !12
  br i1 %140, label %142, label %151

142:                                              ; preds = %133
  %143 = fcmp olt float %139, %141
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = load float, float* %0, align 4, !tbaa !12
  store float %139, float* %0, align 4, !tbaa !12
  store float %145, float* %136, align 4, !tbaa !12
  br label %160

146:                                              ; preds = %142
  %147 = fcmp olt float %138, %141
  %148 = load float, float* %0, align 4, !tbaa !12
  br i1 %147, label %149, label %150

149:                                              ; preds = %146
  store float %141, float* %0, align 4, !tbaa !12
  store float %148, float* %137, align 4, !tbaa !12
  br label %160

150:                                              ; preds = %146
  store float %138, float* %0, align 4, !tbaa !12
  store float %148, float* %5, align 4, !tbaa !12
  br label %160

151:                                              ; preds = %133
  %152 = fcmp olt float %138, %141
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = load float, float* %0, align 4, !tbaa !12
  store float %138, float* %0, align 4, !tbaa !12
  store float %154, float* %5, align 4, !tbaa !12
  br label %160

155:                                              ; preds = %151
  %156 = fcmp olt float %139, %141
  %157 = load float, float* %0, align 4, !tbaa !12
  br i1 %156, label %158, label %159

158:                                              ; preds = %155
  store float %141, float* %0, align 4, !tbaa !12
  store float %157, float* %137, align 4, !tbaa !12
  br label %160

159:                                              ; preds = %155
  store float %139, float* %0, align 4, !tbaa !12
  store float %157, float* %136, align 4, !tbaa !12
  br label %160

160:                                              ; preds = %159, %158, %153, %150, %149, %144
  br label %161

161:                                              ; preds = %160, %177
  %162 = phi float* [ %169, %177 ], [ %5, %160 ]
  %163 = phi float* [ %172, %177 ], [ %12, %160 ]
  %164 = load float, float* %0, align 4, !tbaa !12
  br label %165

165:                                              ; preds = %165, %161
  %166 = phi float* [ %162, %161 ], [ %169, %165 ]
  %167 = load float, float* %166, align 4, !tbaa !12
  %168 = fcmp olt float %167, %164
  %169 = getelementptr inbounds float, float* %166, i64 1
  br i1 %168, label %165, label %170, !llvm.loop !22

170:                                              ; preds = %165, %170
  %171 = phi float* [ %172, %170 ], [ %163, %165 ]
  %172 = getelementptr inbounds float, float* %171, i64 -1
  %173 = load float, float* %172, align 4, !tbaa !12
  %174 = fcmp olt float %164, %173
  br i1 %174, label %170, label %175, !llvm.loop !23

175:                                              ; preds = %170
  %176 = icmp ult float* %166, %172
  br i1 %176, label %177, label %178

177:                                              ; preds = %175
  store float %173, float* %166, align 4, !tbaa !12
  store float %167, float* %172, align 4, !tbaa !12
  br label %161, !llvm.loop !24

178:                                              ; preds = %175
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* nonnull %166, float* %12, i64 %134)
  %179 = ptrtoint float* %166 to i64
  %180 = sub i64 %179, %4
  %181 = icmp sgt i64 %180, 64
  br i1 %181, label %9, label %182, !llvm.loop !25

182:                                              ; preds = %178, %129, %3, %74
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %0, float* %1) local_unnamed_addr #0 comdat {
  %3 = ptrtoint float* %1 to i64
  %4 = ptrtoint float* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp sgt i64 %5, 64
  br i1 %6, label %7, label %54

7:                                                ; preds = %2
  %8 = bitcast float* %0 to i8*
  %9 = getelementptr float, float* %0, i64 1
  %10 = bitcast float* %9 to i8*
  br label %11

11:                                               ; preds = %7, %30
  %12 = phi i64 [ %32, %30 ], [ 1, %7 ]
  %13 = phi float* [ %14, %30 ], [ %0, %7 ]
  %14 = getelementptr inbounds float, float* %0, i64 %12
  %15 = load float, float* %14, align 4, !tbaa !12
  %16 = load float, float* %0, align 4, !tbaa !12
  %17 = fcmp olt float %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = shl nsw i64 %12, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %10, i8* nonnull align 4 %8, i64 %19, i1 false) #8
  br label %30

20:                                               ; preds = %11
  %21 = load float, float* %13, align 4, !tbaa !12
  %22 = fcmp olt float %15, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %20, %23
  %24 = phi float [ %28, %23 ], [ %21, %20 ]
  %25 = phi float* [ %27, %23 ], [ %13, %20 ]
  %26 = phi float* [ %25, %23 ], [ %14, %20 ]
  store float %24, float* %26, align 4, !tbaa !12
  %27 = getelementptr inbounds float, float* %25, i64 -1
  %28 = load float, float* %27, align 4, !tbaa !12
  %29 = fcmp olt float %15, %28
  br i1 %29, label %23, label %30, !llvm.loop !26

30:                                               ; preds = %23, %20, %18
  %31 = phi float* [ %0, %18 ], [ %14, %20 ], [ %25, %23 ]
  store float %15, float* %31, align 4, !tbaa !12
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, 16
  br i1 %33, label %34, label %11, !llvm.loop !27

34:                                               ; preds = %30
  %35 = getelementptr inbounds float, float* %0, i64 16
  %36 = icmp eq float* %35, %1
  br i1 %36, label %89, label %37

37:                                               ; preds = %34, %50
  %38 = phi float* [ %52, %50 ], [ %35, %34 ]
  %39 = load float, float* %38, align 4, !tbaa !12
  %40 = getelementptr inbounds float, float* %38, i64 -1
  %41 = load float, float* %40, align 4, !tbaa !12
  %42 = fcmp olt float %39, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %37, %43
  %44 = phi float [ %48, %43 ], [ %41, %37 ]
  %45 = phi float* [ %47, %43 ], [ %40, %37 ]
  %46 = phi float* [ %45, %43 ], [ %38, %37 ]
  store float %44, float* %46, align 4, !tbaa !12
  %47 = getelementptr inbounds float, float* %45, i64 -1
  %48 = load float, float* %47, align 4, !tbaa !12
  %49 = fcmp olt float %39, %48
  br i1 %49, label %43, label %50, !llvm.loop !26

50:                                               ; preds = %43, %37
  %51 = phi float* [ %38, %37 ], [ %45, %43 ]
  store float %39, float* %51, align 4, !tbaa !12
  %52 = getelementptr inbounds float, float* %38, i64 1
  %53 = icmp eq float* %52, %1
  br i1 %53, label %89, label %37, !llvm.loop !28

54:                                               ; preds = %2
  %55 = icmp eq float* %0, %1
  br i1 %55, label %89, label %56

56:                                               ; preds = %54
  %57 = bitcast float* %0 to i8*
  %58 = getelementptr inbounds float, float* %0, i64 1
  %59 = icmp eq float* %58, %1
  br i1 %59, label %89, label %60

60:                                               ; preds = %56, %85
  %61 = phi float* [ %87, %85 ], [ %58, %56 ]
  %62 = phi float* [ %61, %85 ], [ %0, %56 ]
  %63 = load float, float* %61, align 4, !tbaa !12
  %64 = load float, float* %0, align 4, !tbaa !12
  %65 = fcmp olt float %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %60
  %67 = ptrtoint float* %61 to i64
  %68 = sub i64 %67, %4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %66
  %71 = ashr exact i64 %68, 2
  %72 = sub nsw i64 2, %71
  %73 = getelementptr inbounds float, float* %62, i64 %72
  %74 = bitcast float* %73 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %74, i8* nonnull align 4 %57, i64 %68, i1 false) #8
  br label %85

75:                                               ; preds = %60
  %76 = load float, float* %62, align 4, !tbaa !12
  %77 = fcmp olt float %63, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %75, %78
  %79 = phi float [ %83, %78 ], [ %76, %75 ]
  %80 = phi float* [ %82, %78 ], [ %62, %75 ]
  %81 = phi float* [ %80, %78 ], [ %61, %75 ]
  store float %79, float* %81, align 4, !tbaa !12
  %82 = getelementptr inbounds float, float* %80, i64 -1
  %83 = load float, float* %82, align 4, !tbaa !12
  %84 = fcmp olt float %63, %83
  br i1 %84, label %78, label %85, !llvm.loop !26

85:                                               ; preds = %78, %75, %66, %70
  %86 = phi float* [ %0, %70 ], [ %0, %66 ], [ %61, %75 ], [ %80, %78 ]
  store float %63, float* %86, align 4, !tbaa !12
  %87 = getelementptr inbounds float, float* %61, i64 1
  %88 = icmp eq float* %87, %1
  br i1 %88, label %89, label %60, !llvm.loop !27

89:                                               ; preds = %85, %50, %56, %54, %34
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }
attributes #9 = { noreturn }
attributes #10 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!5, !5, i64 0}
!10 = !{i64 0, i64 65}
!11 = !{!4, !5, i64 16}
!12 = !{!13, !13, i64 0}
!13 = !{!"float", !6, i64 0}
!14 = distinct !{!14, !15, !16}
!15 = !{!"llvm.loop.mustprogress"}
!16 = !{!"llvm.loop.unroll.disable"}
!17 = distinct !{!17, !15, !16}
!18 = distinct !{!18, !15, !16}
!19 = distinct !{!19, !15, !16}
!20 = distinct !{!20, !15, !16}
!21 = distinct !{!21, !15, !16}
!22 = distinct !{!22, !15, !16}
!23 = distinct !{!23, !15, !16}
!24 = distinct !{!24, !15, !16}
!25 = distinct !{!25, !15, !16}
!26 = distinct !{!26, !15, !16}
!27 = distinct !{!27, !15, !16}
!28 = distinct !{!28, !15, !16}
