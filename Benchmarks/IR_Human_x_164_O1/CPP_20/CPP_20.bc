; ModuleID = '../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

$_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag = comdat any

@.str = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z21find_closest_elementsSt6vectorIfSaIfEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca [2 x float], align 4
  %4 = alloca [2 x float], align 4
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = bitcast [2 x float]* %3 to i8*
  %10 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  %11 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  %12 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 2
  %13 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false)
  %14 = load float*, float** %5, align 8, !tbaa !3
  %15 = load float*, float** %6, align 8, !tbaa !8
  %16 = icmp eq float* %14, %15
  br i1 %16, label %26, label %33

17:                                               ; preds = %72, %33
  %18 = load float*, float** %5, align 8, !tbaa !3
  %19 = load float*, float** %6, align 8, !tbaa !8
  %20 = ptrtoint float* %18 to i64
  %21 = ptrtoint float* %19 to i64
  %22 = sub i64 %20, %21
  %23 = ashr exact i64 %22, 2
  %24 = icmp ugt i64 %23, %36
  %25 = add i64 %35, 1
  br i1 %24, label %33, label %26, !llvm.loop !9

26:                                               ; preds = %17, %2
  %27 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load float*, float** %27, align 8, !tbaa !8
  %29 = load float, float* %28, align 4, !tbaa !12
  %30 = getelementptr inbounds float, float* %28, i64 1
  %31 = load float, float* %30, align 4, !tbaa !12
  %32 = fcmp ogt float %29, %31
  br i1 %32, label %81, label %91

33:                                               ; preds = %2, %17
  %34 = phi i64 [ %36, %17 ], [ 0, %2 ]
  %35 = phi i64 [ %25, %17 ], [ 1, %2 ]
  %36 = add nuw i64 %34, 1
  %37 = load float*, float** %5, align 8, !tbaa !3
  %38 = load float*, float** %6, align 8, !tbaa !8
  %39 = ptrtoint float* %37 to i64
  %40 = ptrtoint float* %38 to i64
  %41 = sub i64 %39, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp ugt i64 %42, %36
  br i1 %43, label %44, label %17

44:                                               ; preds = %33, %72
  %45 = phi i64 [ %73, %72 ], [ %35, %33 ]
  %46 = phi float* [ %75, %72 ], [ %38, %33 ]
  %47 = load float*, float** %7, align 8, !tbaa !3
  %48 = load float*, float** %8, align 8, !tbaa !8
  %49 = icmp eq float* %47, %48
  br i1 %49, label %63, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds float, float* %46, i64 %34
  %52 = load float, float* %51, align 4, !tbaa !12
  %53 = getelementptr inbounds float, float* %46, i64 %45
  %54 = load float, float* %53, align 4, !tbaa !12
  %55 = fsub float %52, %54
  %56 = call float @llvm.fabs.f32(float %55) #9
  %57 = load float, float* %48, align 4, !tbaa !12
  %58 = getelementptr inbounds float, float* %48, i64 1
  %59 = load float, float* %58, align 4, !tbaa !12
  %60 = fsub float %57, %59
  %61 = call float @llvm.fabs.f32(float %60) #9
  %62 = fcmp olt float %56, %61
  br i1 %62, label %63, label %72

63:                                               ; preds = %50, %44
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  %64 = getelementptr inbounds float, float* %46, i64 %34
  %65 = load float, float* %64, align 4, !tbaa !12
  store float %65, float* %10, align 4, !tbaa !12
  %66 = getelementptr inbounds float, float* %46, i64 %45
  %67 = load float, float* %66, align 4, !tbaa !12
  store float %67, float* %11, align 4, !tbaa !12
  invoke void @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* nonnull %10, float* nonnull %12)
          to label %68 unwind label %69

68:                                               ; preds = %63
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  br label %72

69:                                               ; preds = %63
  %70 = landingpad { i8*, i32 }
          cleanup
  %71 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #9
  br label %92

72:                                               ; preds = %50, %68
  %73 = add i64 %45, 1
  %74 = load float*, float** %5, align 8, !tbaa !3
  %75 = load float*, float** %6, align 8, !tbaa !8
  %76 = ptrtoint float* %74 to i64
  %77 = ptrtoint float* %75 to i64
  %78 = sub i64 %76, %77
  %79 = ashr exact i64 %78, 2
  %80 = icmp ugt i64 %79, %73
  br i1 %80, label %44, label %17, !llvm.loop !14

81:                                               ; preds = %26
  %82 = bitcast [2 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #9
  %83 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %84 = load float, float* %30, align 4, !tbaa !12
  store float %84, float* %83, align 4, !tbaa !12
  %85 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %86 = load float, float* %28, align 4, !tbaa !12
  store float %86, float* %85, align 4, !tbaa !12
  %87 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 2
  invoke void @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* nonnull %83, float* nonnull %87)
          to label %88 unwind label %89

88:                                               ; preds = %81
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #9
  br label %91

89:                                               ; preds = %81
  %90 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #9
  br label %92

91:                                               ; preds = %26, %88
  ret void

92:                                               ; preds = %89, %69
  %93 = phi { i8*, i32 } [ %70, %69 ], [ %90, %89 ]
  %94 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = load float*, float** %94, align 8, !tbaa !8
  %96 = icmp eq float* %95, null
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = bitcast float* %95 to i8*
  call void @_ZdlPv(i8* nonnull %98) #9
  br label %99

99:                                               ; preds = %92, %97
  resume { i8*, i32 } %93
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %1, float* %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = ptrtoint float* %2 to i64
  %5 = ptrtoint float* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = load float*, float** %8, align 8, !tbaa !15
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load float*, float** %10, align 8, !tbaa !8
  %12 = ptrtoint float* %9 to i64
  %13 = ptrtoint float* %11 to i64
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp ugt i64 %7, %15
  br i1 %16, label %17, label %35

17:                                               ; preds = %3
  %18 = icmp ugt i64 %7, 2305843009213693951
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #10
  unreachable

20:                                               ; preds = %17
  %21 = call noalias nonnull i8* @_Znwm(i64 %6) #11
  %22 = bitcast i8* %21 to float*
  %23 = icmp eq i64 %6, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = bitcast float* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %25, i64 %6, i1 false) #9
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = load float*, float** %10, align 8, !tbaa !8
  %29 = icmp eq float* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = bitcast float* %28 to i8*
  call void @_ZdlPv(i8* nonnull %31) #9
  br label %32

32:                                               ; preds = %26, %30
  %33 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %21, i8** %33, align 8, !tbaa !8
  %34 = getelementptr inbounds float, float* %22, i64 %7
  store float* %34, float** %27, align 8, !tbaa !3
  store float* %34, float** %8, align 8, !tbaa !15
  br label %69

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %37 = load float*, float** %36, align 8, !tbaa !3
  %38 = ptrtoint float* %37 to i64
  %39 = sub i64 %38, %13
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, %7
  br i1 %41, label %52, label %42

42:                                               ; preds = %35
  %43 = icmp eq i64 %6, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %42
  %45 = bitcast float* %11 to i8*
  %46 = bitcast float* %1 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %46, i64 %6, i1 false) #9
  br label %47

47:                                               ; preds = %42, %44
  %48 = getelementptr inbounds float, float* %11, i64 %7
  %49 = load float*, float** %36, align 8, !tbaa !3
  %50 = icmp eq float* %49, %48
  br i1 %50, label %69, label %51

51:                                               ; preds = %47
  store float* %48, float** %36, align 8, !tbaa !3
  br label %69

52:                                               ; preds = %35
  %53 = getelementptr inbounds float, float* %1, i64 %40
  %54 = ptrtoint float* %53 to i64
  %55 = icmp eq i64 %39, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = bitcast float* %11 to i8*
  %58 = bitcast float* %1 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58, i64 %39, i1 false) #9
  br label %59

59:                                               ; preds = %52, %56
  %60 = load float*, float** %36, align 8, !tbaa !3
  %61 = sub i64 %4, %54
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = bitcast float* %60 to i8*
  %65 = bitcast float* %53 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 %61, i1 false) #9
  br label %66

66:                                               ; preds = %59, %63
  %67 = ashr exact i64 %61, 2
  %68 = getelementptr inbounds float, float* %60, i64 %67
  store float* %68, float** %36, align 8, !tbaa !3
  br label %69

69:                                               ; preds = %51, %47, %66, %32
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #8

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #8 = { argmemonly nofree nounwind willreturn }
attributes #9 = { nounwind }
attributes #10 = { noreturn }
attributes #11 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = !{!13, !13, i64 0}
!13 = !{!"float", !6, i64 0}
!14 = distinct !{!14, !10, !11}
!15 = !{!4, !5, i64 16}
