; ModuleID = '../../Human_xBenchmarks_164/CPP_90/CPP_90.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_90/CPP_90.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

; Function Attrs: uwtable
define dso_local i32 @_Z13next_smallestSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = icmp eq i32* %3, %5
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %3 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = call i64 @llvm.ctlz.i64(i64 %11, i1 true) #3, !range !7
  %13 = shl nuw nsw i64 %12, 1
  %14 = xor i64 %13, 126
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %3, i32* %5, i64 %14)
  call void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %3, i32* %5)
  br label %15

15:                                               ; preds = %1, %7
  %16 = load i32*, i32** %4, align 8, !tbaa !8
  %17 = load i32*, i32** %2, align 8, !tbaa !10
  %18 = ptrtoint i32* %16 to i64
  %19 = ptrtoint i32* %17 to i64
  %20 = sub i64 %18, %19
  %21 = ashr exact i64 %20, 2
  %22 = icmp ugt i64 %21, 1
  br i1 %22, label %25, label %34

23:                                               ; preds = %25
  %24 = icmp eq i64 %33, %21
  br i1 %24, label %34, label %25, !llvm.loop !11

25:                                               ; preds = %15, %23
  %26 = phi i64 [ %33, %23 ], [ 1, %15 ]
  %27 = getelementptr inbounds i32, i32* %17, i64 %26
  %28 = load i32, i32* %27, align 4, !tbaa !14
  %29 = add nsw i64 %26, -1
  %30 = getelementptr inbounds i32, i32* %17, i64 %29
  %31 = load i32, i32* %30, align 4, !tbaa !14
  %32 = icmp eq i32 %28, %31
  %33 = add nuw i64 %26, 1
  br i1 %32, label %23, label %34

34:                                               ; preds = %23, %25, %15
  %35 = phi i32 [ -1, %15 ], [ -1, %23 ], [ %28, %25 ]
  ret i32 %35
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = ptrtoint i32* %0 to i64
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = ptrtoint i32* %1 to i64
  %7 = sub i64 %6, %4
  %8 = icmp sgt i64 %7, 64
  br i1 %8, label %9, label %182

9:                                                ; preds = %3, %178
  %10 = phi i64 [ %180, %178 ], [ %7, %3 ]
  %11 = phi i64 [ %134, %178 ], [ %2, %3 ]
  %12 = phi i32* [ %166, %178 ], [ %1, %3 ]
  %13 = ashr exact i64 %10, 2
  %14 = icmp eq i64 %11, 0
  br i1 %14, label %15, label %133

15:                                               ; preds = %9
  %16 = ptrtoint i32* %0 to i64
  %17 = icmp slt i64 %10, 8
  br i1 %17, label %74, label %18

18:                                               ; preds = %15
  %19 = add nsw i64 %13, -2
  %20 = sdiv i64 %19, 2
  %21 = add nsw i64 %13, -1
  %22 = sdiv i64 %21, 2
  %23 = and i64 %10, 4
  %24 = icmp eq i64 %23, 0
  br label %25

25:                                               ; preds = %68, %18
  %26 = phi i64 [ %20, %18 ], [ %73, %68 ]
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  %28 = load i32, i32* %27, align 4, !tbaa !14
  %29 = icmp sgt i64 %22, %26
  br i1 %29, label %30, label %45

30:                                               ; preds = %25, %30
  %31 = phi i64 [ %40, %30 ], [ %26, %25 ]
  %32 = shl i64 %31, 1
  %33 = add i64 %32, 2
  %34 = getelementptr inbounds i32, i32* %0, i64 %33
  %35 = or i64 %32, 1
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  %37 = load i32, i32* %34, align 4, !tbaa !14
  %38 = load i32, i32* %36, align 4, !tbaa !14
  %39 = icmp slt i32 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = getelementptr inbounds i32, i32* %0, i64 %40
  %42 = load i32, i32* %41, align 4, !tbaa !14
  %43 = getelementptr inbounds i32, i32* %0, i64 %31
  store i32 %42, i32* %43, align 4, !tbaa !14
  %44 = icmp slt i64 %40, %22
  br i1 %44, label %30, label %45, !llvm.loop !16

45:                                               ; preds = %30, %25
  %46 = phi i64 [ %26, %25 ], [ %40, %30 ]
  %47 = icmp eq i64 %46, %20
  %48 = select i1 %24, i1 %47, i1 false
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = shl i64 %46, 1
  %51 = or i64 %50, 1
  %52 = getelementptr inbounds i32, i32* %0, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !14
  %54 = getelementptr inbounds i32, i32* %0, i64 %46
  store i32 %53, i32* %54, align 4, !tbaa !14
  br label %55

55:                                               ; preds = %49, %45
  %56 = phi i64 [ %51, %49 ], [ %46, %45 ]
  %57 = icmp sgt i64 %56, %26
  br i1 %57, label %58, label %68

58:                                               ; preds = %55, %65
  %59 = phi i64 [ %61, %65 ], [ %56, %55 ]
  %60 = add nsw i64 %59, -1
  %61 = sdiv i64 %60, 2
  %62 = getelementptr inbounds i32, i32* %0, i64 %61
  %63 = load i32, i32* %62, align 4, !tbaa !14
  %64 = icmp slt i32 %63, %28
  br i1 %64, label %65, label %68

65:                                               ; preds = %58
  %66 = getelementptr inbounds i32, i32* %0, i64 %59
  store i32 %63, i32* %66, align 4, !tbaa !14
  %67 = icmp sgt i64 %61, %26
  br i1 %67, label %58, label %68, !llvm.loop !17

68:                                               ; preds = %65, %58, %55
  %69 = phi i64 [ %56, %55 ], [ %59, %58 ], [ %61, %65 ]
  %70 = getelementptr inbounds i32, i32* %0, i64 %69
  store i32 %28, i32* %70, align 4, !tbaa !14
  %71 = icmp eq i64 %26, 0
  %72 = add nsw i64 %26, -1
  %73 = select i1 %71, i64 0, i64 %72
  br i1 %71, label %74, label %25, !llvm.loop !18

74:                                               ; preds = %68, %15
  %75 = icmp sgt i64 %10, 4
  br i1 %75, label %76, label %182

76:                                               ; preds = %74, %129
  %77 = phi i32* [ %78, %129 ], [ %12, %74 ]
  %78 = getelementptr inbounds i32, i32* %77, i64 -1
  %79 = load i32, i32* %78, align 4, !tbaa !14
  %80 = load i32, i32* %0, align 4, !tbaa !14
  store i32 %80, i32* %78, align 4, !tbaa !14
  %81 = ptrtoint i32* %78 to i64
  %82 = sub i64 %81, %16
  %83 = ashr exact i64 %82, 2
  %84 = add nsw i64 %83, -1
  %85 = sdiv i64 %84, 2
  %86 = icmp sgt i64 %82, 8
  br i1 %86, label %87, label %102

87:                                               ; preds = %76, %87
  %88 = phi i64 [ %97, %87 ], [ 0, %76 ]
  %89 = shl i64 %88, 1
  %90 = add i64 %89, 2
  %91 = getelementptr inbounds i32, i32* %0, i64 %90
  %92 = or i64 %89, 1
  %93 = getelementptr inbounds i32, i32* %0, i64 %92
  %94 = load i32, i32* %91, align 4, !tbaa !14
  %95 = load i32, i32* %93, align 4, !tbaa !14
  %96 = icmp slt i32 %94, %95
  %97 = select i1 %96, i64 %92, i64 %90
  %98 = getelementptr inbounds i32, i32* %0, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !14
  %100 = getelementptr inbounds i32, i32* %0, i64 %88
  store i32 %99, i32* %100, align 4, !tbaa !14
  %101 = icmp slt i64 %97, %85
  br i1 %101, label %87, label %102, !llvm.loop !16

102:                                              ; preds = %87, %76
  %103 = phi i64 [ 0, %76 ], [ %97, %87 ]
  %104 = and i64 %82, 4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %116

106:                                              ; preds = %102
  %107 = add nsw i64 %83, -2
  %108 = sdiv i64 %107, 2
  %109 = icmp eq i64 %103, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = shl i64 %103, 1
  %112 = or i64 %111, 1
  %113 = getelementptr inbounds i32, i32* %0, i64 %112
  %114 = load i32, i32* %113, align 4, !tbaa !14
  %115 = getelementptr inbounds i32, i32* %0, i64 %103
  store i32 %114, i32* %115, align 4, !tbaa !14
  br label %116

116:                                              ; preds = %110, %106, %102
  %117 = phi i64 [ %112, %110 ], [ %103, %106 ], [ %103, %102 ]
  %118 = icmp sgt i64 %117, 0
  br i1 %118, label %119, label %129

119:                                              ; preds = %116, %126
  %120 = phi i64 [ %122, %126 ], [ %117, %116 ]
  %121 = add nsw i64 %120, -1
  %122 = sdiv i64 %121, 2
  %123 = getelementptr inbounds i32, i32* %0, i64 %122
  %124 = load i32, i32* %123, align 4, !tbaa !14
  %125 = icmp slt i32 %124, %79
  br i1 %125, label %126, label %129

126:                                              ; preds = %119
  %127 = getelementptr inbounds i32, i32* %0, i64 %120
  store i32 %124, i32* %127, align 4, !tbaa !14
  %128 = icmp sgt i64 %120, 2
  br i1 %128, label %119, label %129, !llvm.loop !17

129:                                              ; preds = %126, %119, %116
  %130 = phi i64 [ %117, %116 ], [ %120, %119 ], [ %122, %126 ]
  %131 = getelementptr inbounds i32, i32* %0, i64 %130
  store i32 %79, i32* %131, align 4, !tbaa !14
  %132 = icmp sgt i64 %82, 4
  br i1 %132, label %76, label %182, !llvm.loop !19

133:                                              ; preds = %9
  %134 = add nsw i64 %11, -1
  %135 = sdiv i64 %13, 2
  %136 = getelementptr inbounds i32, i32* %0, i64 %135
  %137 = getelementptr inbounds i32, i32* %12, i64 -1
  %138 = load i32, i32* %5, align 4, !tbaa !14
  %139 = load i32, i32* %136, align 4, !tbaa !14
  %140 = icmp slt i32 %138, %139
  %141 = load i32, i32* %137, align 4, !tbaa !14
  br i1 %140, label %142, label %151

142:                                              ; preds = %133
  %143 = icmp slt i32 %139, %141
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = load i32, i32* %0, align 4, !tbaa !14
  store i32 %139, i32* %0, align 4, !tbaa !14
  store i32 %145, i32* %136, align 4, !tbaa !14
  br label %160

146:                                              ; preds = %142
  %147 = icmp slt i32 %138, %141
  %148 = load i32, i32* %0, align 4, !tbaa !14
  br i1 %147, label %149, label %150

149:                                              ; preds = %146
  store i32 %141, i32* %0, align 4, !tbaa !14
  store i32 %148, i32* %137, align 4, !tbaa !14
  br label %160

150:                                              ; preds = %146
  store i32 %138, i32* %0, align 4, !tbaa !14
  store i32 %148, i32* %5, align 4, !tbaa !14
  br label %160

151:                                              ; preds = %133
  %152 = icmp slt i32 %138, %141
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = load i32, i32* %0, align 4, !tbaa !14
  store i32 %138, i32* %0, align 4, !tbaa !14
  store i32 %154, i32* %5, align 4, !tbaa !14
  br label %160

155:                                              ; preds = %151
  %156 = icmp slt i32 %139, %141
  %157 = load i32, i32* %0, align 4, !tbaa !14
  br i1 %156, label %158, label %159

158:                                              ; preds = %155
  store i32 %141, i32* %0, align 4, !tbaa !14
  store i32 %157, i32* %137, align 4, !tbaa !14
  br label %160

159:                                              ; preds = %155
  store i32 %139, i32* %0, align 4, !tbaa !14
  store i32 %157, i32* %136, align 4, !tbaa !14
  br label %160

160:                                              ; preds = %159, %158, %153, %150, %149, %144
  br label %161

161:                                              ; preds = %160, %177
  %162 = phi i32* [ %169, %177 ], [ %5, %160 ]
  %163 = phi i32* [ %172, %177 ], [ %12, %160 ]
  %164 = load i32, i32* %0, align 4, !tbaa !14
  br label %165

165:                                              ; preds = %165, %161
  %166 = phi i32* [ %162, %161 ], [ %169, %165 ]
  %167 = load i32, i32* %166, align 4, !tbaa !14
  %168 = icmp slt i32 %167, %164
  %169 = getelementptr inbounds i32, i32* %166, i64 1
  br i1 %168, label %165, label %170, !llvm.loop !20

170:                                              ; preds = %165, %170
  %171 = phi i32* [ %172, %170 ], [ %163, %165 ]
  %172 = getelementptr inbounds i32, i32* %171, i64 -1
  %173 = load i32, i32* %172, align 4, !tbaa !14
  %174 = icmp slt i32 %164, %173
  br i1 %174, label %170, label %175, !llvm.loop !21

175:                                              ; preds = %170
  %176 = icmp ult i32* %166, %172
  br i1 %176, label %177, label %178

177:                                              ; preds = %175
  store i32 %173, i32* %166, align 4, !tbaa !14
  store i32 %167, i32* %172, align 4, !tbaa !14
  br label %161, !llvm.loop !22

178:                                              ; preds = %175
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %166, i32* %12, i64 %134)
  %179 = ptrtoint i32* %166 to i64
  %180 = sub i64 %179, %4
  %181 = icmp sgt i64 %180, 64
  br i1 %181, label %9, label %182, !llvm.loop !23

182:                                              ; preds = %178, %129, %3, %74
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {
  %3 = ptrtoint i32* %1 to i64
  %4 = ptrtoint i32* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp sgt i64 %5, 64
  br i1 %6, label %7, label %54

7:                                                ; preds = %2
  %8 = bitcast i32* %0 to i8*
  %9 = getelementptr i32, i32* %0, i64 1
  %10 = bitcast i32* %9 to i8*
  br label %11

11:                                               ; preds = %7, %30
  %12 = phi i64 [ %32, %30 ], [ 1, %7 ]
  %13 = phi i32* [ %14, %30 ], [ %0, %7 ]
  %14 = getelementptr inbounds i32, i32* %0, i64 %12
  %15 = load i32, i32* %14, align 4, !tbaa !14
  %16 = load i32, i32* %0, align 4, !tbaa !14
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = shl nsw i64 %12, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %10, i8* nonnull align 4 %8, i64 %19, i1 false) #3
  br label %30

20:                                               ; preds = %11
  %21 = load i32, i32* %13, align 4, !tbaa !14
  %22 = icmp slt i32 %15, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %20, %23
  %24 = phi i32 [ %28, %23 ], [ %21, %20 ]
  %25 = phi i32* [ %27, %23 ], [ %13, %20 ]
  %26 = phi i32* [ %25, %23 ], [ %14, %20 ]
  store i32 %24, i32* %26, align 4, !tbaa !14
  %27 = getelementptr inbounds i32, i32* %25, i64 -1
  %28 = load i32, i32* %27, align 4, !tbaa !14
  %29 = icmp slt i32 %15, %28
  br i1 %29, label %23, label %30, !llvm.loop !24

30:                                               ; preds = %23, %20, %18
  %31 = phi i32* [ %0, %18 ], [ %14, %20 ], [ %25, %23 ]
  store i32 %15, i32* %31, align 4, !tbaa !14
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, 16
  br i1 %33, label %34, label %11, !llvm.loop !25

34:                                               ; preds = %30
  %35 = getelementptr inbounds i32, i32* %0, i64 16
  %36 = icmp eq i32* %35, %1
  br i1 %36, label %89, label %37

37:                                               ; preds = %34, %50
  %38 = phi i32* [ %52, %50 ], [ %35, %34 ]
  %39 = load i32, i32* %38, align 4, !tbaa !14
  %40 = getelementptr inbounds i32, i32* %38, i64 -1
  %41 = load i32, i32* %40, align 4, !tbaa !14
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %37, %43
  %44 = phi i32 [ %48, %43 ], [ %41, %37 ]
  %45 = phi i32* [ %47, %43 ], [ %40, %37 ]
  %46 = phi i32* [ %45, %43 ], [ %38, %37 ]
  store i32 %44, i32* %46, align 4, !tbaa !14
  %47 = getelementptr inbounds i32, i32* %45, i64 -1
  %48 = load i32, i32* %47, align 4, !tbaa !14
  %49 = icmp slt i32 %39, %48
  br i1 %49, label %43, label %50, !llvm.loop !24

50:                                               ; preds = %43, %37
  %51 = phi i32* [ %38, %37 ], [ %45, %43 ]
  store i32 %39, i32* %51, align 4, !tbaa !14
  %52 = getelementptr inbounds i32, i32* %38, i64 1
  %53 = icmp eq i32* %52, %1
  br i1 %53, label %89, label %37, !llvm.loop !26

54:                                               ; preds = %2
  %55 = icmp eq i32* %0, %1
  br i1 %55, label %89, label %56

56:                                               ; preds = %54
  %57 = bitcast i32* %0 to i8*
  %58 = getelementptr inbounds i32, i32* %0, i64 1
  %59 = icmp eq i32* %58, %1
  br i1 %59, label %89, label %60

60:                                               ; preds = %56, %85
  %61 = phi i32* [ %87, %85 ], [ %58, %56 ]
  %62 = phi i32* [ %61, %85 ], [ %0, %56 ]
  %63 = load i32, i32* %61, align 4, !tbaa !14
  %64 = load i32, i32* %0, align 4, !tbaa !14
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %60
  %67 = ptrtoint i32* %61 to i64
  %68 = sub i64 %67, %4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %66
  %71 = ashr exact i64 %68, 2
  %72 = sub nsw i64 2, %71
  %73 = getelementptr inbounds i32, i32* %62, i64 %72
  %74 = bitcast i32* %73 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %74, i8* nonnull align 4 %57, i64 %68, i1 false) #3
  br label %85

75:                                               ; preds = %60
  %76 = load i32, i32* %62, align 4, !tbaa !14
  %77 = icmp slt i32 %63, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %75, %78
  %79 = phi i32 [ %83, %78 ], [ %76, %75 ]
  %80 = phi i32* [ %82, %78 ], [ %62, %75 ]
  %81 = phi i32* [ %80, %78 ], [ %61, %75 ]
  store i32 %79, i32* %81, align 4, !tbaa !14
  %82 = getelementptr inbounds i32, i32* %80, i64 -1
  %83 = load i32, i32* %82, align 4, !tbaa !14
  %84 = icmp slt i32 %63, %83
  br i1 %84, label %78, label %85, !llvm.loop !24

85:                                               ; preds = %78, %75, %66, %70
  %86 = phi i32* [ %0, %70 ], [ %0, %66 ], [ %61, %75 ], [ %80, %78 ]
  store i32 %63, i32* %86, align 4, !tbaa !14
  %87 = getelementptr inbounds i32, i32* %61, i64 1
  %88 = icmp eq i32* %87, %1
  br i1 %88, label %89, label %60, !llvm.loop !25

89:                                               ; preds = %85, %50, %56, %54, %34
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{i64 0, i64 65}
!8 = !{!9, !4, i64 8}
!9 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !4, i64 0, !4, i64 8, !4, i64 16}
!10 = !{!9, !4, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = !{!15, !15, i64 0}
!15 = !{!"int", !5, i64 0}
!16 = distinct !{!16, !12, !13}
!17 = distinct !{!17, !12, !13}
!18 = distinct !{!18, !12, !13}
!19 = distinct !{!19, !12, !13}
!20 = distinct !{!20, !12, !13}
!21 = distinct !{!21, !12, !13}
!22 = distinct !{!22, !12, !13}
!23 = distinct !{!23, !12, !13}
!24 = distinct !{!24, !12, !13}
!25 = distinct !{!25, !12, !13}
!26 = distinct !{!26, !12, !13}
