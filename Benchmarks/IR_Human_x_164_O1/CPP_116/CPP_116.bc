; ModuleID = '../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z10sort_arraySt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector", align 8
  %4 = alloca i32, align 4
  %5 = bitcast %"class.std::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast i32* %4 to i8*
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %11 = bitcast %"class.std::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %11, i8 0, i64 24, i1 false)
  %12 = load i32*, i32** %6, align 8, !tbaa !3
  %13 = load i32*, i32** %7, align 8, !tbaa !8
  %14 = ptrtoint i32* %12 to i64
  %15 = ptrtoint i32* %13 to i64
  %16 = sub i64 %14, %15
  %17 = ashr exact i64 %16, 2
  %18 = icmp eq i64 %16, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %51, %2
  %20 = phi i32* [ %12, %2 ], [ %53, %51 ]
  %21 = phi i32* [ %13, %2 ], [ %54, %51 ]
  %22 = phi i64 [ %17, %2 ], [ %58, %51 ]
  %23 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = icmp ugt i64 %22, 1
  %25 = icmp eq i64 %22, 0
  br i1 %25, label %72, label %69

26:                                               ; preds = %2, %51
  %27 = phi i64 [ %52, %51 ], [ 0, %2 ]
  %28 = phi i32* [ %54, %51 ], [ %13, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #8
  store i32 0, i32* %4, align 4, !tbaa !9
  %29 = getelementptr inbounds i32, i32* %28, i64 %27
  %30 = load i32, i32* %29, align 4, !tbaa !9
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %43, label %32

32:                                               ; preds = %26
  %33 = call i32 @llvm.abs.i32(i32 %30, i1 true)
  %34 = load i32, i32* %4, align 4, !tbaa !9
  br label %35

35:                                               ; preds = %32, %35
  %36 = phi i32 [ %34, %32 ], [ %39, %35 ]
  %37 = phi i32 [ %33, %32 ], [ %40, %35 ]
  %38 = srem i32 %37, 2
  %39 = add nsw i32 %36, %38
  %40 = sdiv i32 %37, 2
  %41 = icmp sgt i32 %37, 1
  br i1 %41, label %35, label %42, !llvm.loop !11

42:                                               ; preds = %35
  store i32 %39, i32* %4, align 4, !tbaa !9
  br label %43

43:                                               ; preds = %42, %26
  %44 = load i32*, i32** %9, align 8, !tbaa !3
  %45 = load i32*, i32** %10, align 8, !tbaa !14
  %46 = icmp eq i32* %44, %45
  br i1 %46, label %50, label %47

47:                                               ; preds = %43
  %48 = load i32, i32* %4, align 4, !tbaa !9
  store i32 %48, i32* %44, align 4, !tbaa !9
  %49 = getelementptr inbounds i32, i32* %44, i64 1
  store i32* %49, i32** %9, align 8, !tbaa !3
  br label %51

50:                                               ; preds = %43
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %3, i32* %44, i32* nonnull align 4 dereferenceable(4) %4)
          to label %51 unwind label %60

51:                                               ; preds = %47, %50
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #8
  %52 = add nuw i64 %27, 1
  %53 = load i32*, i32** %6, align 8, !tbaa !3
  %54 = load i32*, i32** %7, align 8, !tbaa !8
  %55 = ptrtoint i32* %53 to i64
  %56 = ptrtoint i32* %54 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 2
  %59 = icmp ugt i64 %58, %52
  br i1 %59, label %26, label %19, !llvm.loop !15

60:                                               ; preds = %50
  %61 = landingpad { i8*, i32 }
          cleanup
  %62 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #8
  %63 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i32*, i32** %63, align 8, !tbaa !8
  %65 = icmp eq i32* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %60
  %67 = bitcast i32* %64 to i8*
  call void @_ZdlPv(i8* nonnull %67) #8
  br label %68

68:                                               ; preds = %60, %66
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  resume { i8*, i32 } %61

69:                                               ; preds = %19, %85
  %70 = phi i64 [ %86, %85 ], [ 0, %19 ]
  %71 = load i32*, i32** %23, align 8
  br i1 %24, label %88, label %85

72:                                               ; preds = %85, %19
  %73 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32* %21, i32** %73, align 8, !tbaa !8
  %74 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32* %20, i32** %74, align 8, !tbaa !3
  %75 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %76 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %77 = load i32*, i32** %76, align 8, !tbaa !14
  store i32* %77, i32** %75, align 8, !tbaa !14
  %78 = bitcast %"class.std::vector"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %78, i8 0, i64 24, i1 false) #8
  %79 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %80 = load i32*, i32** %79, align 8, !tbaa !8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %72
  %83 = bitcast i32* %80 to i8*
  call void @_ZdlPv(i8* nonnull %83) #8
  br label %84

84:                                               ; preds = %72, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  ret void

85:                                               ; preds = %111, %69
  %86 = add nuw nsw i64 %70, 1
  %87 = icmp eq i64 %86, %22
  br i1 %87, label %72, label %69, !llvm.loop !16

88:                                               ; preds = %69, %111
  %89 = phi i64 [ %112, %111 ], [ 1, %69 ]
  %90 = getelementptr inbounds i32, i32* %71, i64 %89
  %91 = load i32, i32* %90, align 4, !tbaa !9
  %92 = add nsw i64 %89, -1
  %93 = getelementptr inbounds i32, i32* %71, i64 %92
  %94 = load i32, i32* %93, align 4, !tbaa !9
  %95 = icmp slt i32 %91, %94
  br i1 %95, label %104, label %96

96:                                               ; preds = %88
  %97 = icmp eq i32 %91, %94
  br i1 %97, label %98, label %111

98:                                               ; preds = %96
  %99 = getelementptr inbounds i32, i32* %21, i64 %89
  %100 = load i32, i32* %99, align 4, !tbaa !9
  %101 = getelementptr inbounds i32, i32* %21, i64 %92
  %102 = load i32, i32* %101, align 4, !tbaa !9
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %111

104:                                              ; preds = %98, %88
  %105 = getelementptr inbounds i32, i32* %21, i64 %89
  %106 = load i32, i32* %105, align 4, !tbaa !9
  %107 = getelementptr inbounds i32, i32* %21, i64 %92
  %108 = load i32, i32* %107, align 4, !tbaa !9
  store i32 %108, i32* %105, align 4, !tbaa !9
  store i32 %106, i32* %107, align 4, !tbaa !9
  %109 = load i32, i32* %90, align 4, !tbaa !9
  %110 = load i32, i32* %93, align 4, !tbaa !9
  store i32 %110, i32* %90, align 4, !tbaa !9
  store i32 %109, i32* %93, align 4, !tbaa !9
  br label %111

111:                                              ; preds = %96, %98, %104
  %112 = add nuw nsw i64 %89, 1
  %113 = icmp eq i64 %112, %22
  br i1 %113, label %85, label %88, !llvm.loop !17
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #9
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint i32* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %14
  %27 = icmp ugt i64 %21, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  call void @_ZSt17__throw_bad_allocv() #9
  unreachable

29:                                               ; preds = %26
  %30 = shl i64 %21, 2
  %31 = call noalias nonnull i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to i32*
  br label %33

33:                                               ; preds = %14, %29
  %34 = phi i32* [ %32, %29 ], [ null, %14 ]
  %35 = getelementptr inbounds i32, i32* %34, i64 %24
  %36 = load i32, i32* %2, align 4, !tbaa !9
  store i32 %36, i32* %35, align 4, !tbaa !9
  %37 = icmp sgt i64 %23, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = bitcast i32* %34 to i8*
  %40 = bitcast i32* %7 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %23, i1 false) #8
  br label %41

41:                                               ; preds = %33, %38
  %42 = getelementptr inbounds i32, i32* %35, i64 1
  %43 = sub i64 %8, %22
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = bitcast i32* %42 to i8*
  %47 = bitcast i32* %1 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 %47, i64 %43, i1 false) #8
  br label %48

48:                                               ; preds = %41, %45
  %49 = icmp eq i32* %7, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %48
  %51 = bitcast i32* %7 to i8*
  call void @_ZdlPv(i8* nonnull %51) #8
  br label %52

52:                                               ; preds = %48, %50
  %53 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %54 = ashr exact i64 %43, 2
  %55 = getelementptr inbounds i32, i32* %42, i64 %54
  store i32* %34, i32** %6, align 8, !tbaa !8
  store i32* %55, i32** %4, align 8, !tbaa !3
  %56 = getelementptr inbounds i32, i32* %34, i64 %21
  store i32* %56, i32** %53, align 8, !tbaa !14
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #7

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind }
attributes #9 = { noreturn }
attributes #10 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = !{!4, !5, i64 16}
!15 = distinct !{!15, !12, !13}
!16 = distinct !{!16, !12, !13}
!17 = distinct !{!17, !12, !13}
