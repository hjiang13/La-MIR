; ModuleID = '../../Human_xBenchmarks_164/CPP_11/CPP_11.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_11/CPP_11.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

; Function Attrs: uwtable
define dso_local void @_Z10string_xorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1, %"class.std::__cxx11::basic_string"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %5 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 0, i64* %7, align 8, !tbaa !8
  %8 = bitcast %union.anon* %4 to i8*
  store i8 0, i8* %8, align 8, !tbaa !11
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 1
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 0, i32 0
  %13 = bitcast %union.anon* %4 to i8*
  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  %15 = bitcast %union.anon* %4 to i8*
  %16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  %17 = load i64, i64* %9, align 8, !tbaa !8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %61, label %19

19:                                               ; preds = %3, %52
  %20 = phi i64 [ %58, %52 ], [ 0, %3 ]
  %21 = load i64, i64* %10, align 8, !tbaa !8
  %22 = icmp ugt i64 %21, %20
  br i1 %22, label %23, label %61

23:                                               ; preds = %19
  %24 = load i8*, i8** %11, align 8, !tbaa !12
  %25 = getelementptr inbounds i8, i8* %24, i64 %20
  %26 = load i8, i8* %25, align 1, !tbaa !11
  %27 = load i8*, i8** %12, align 8, !tbaa !12
  %28 = getelementptr inbounds i8, i8* %27, i64 %20
  %29 = load i8, i8* %28, align 1, !tbaa !11
  %30 = icmp eq i8 %26, %29
  %31 = load i64, i64* %7, align 8, !tbaa !8
  %32 = add i64 %31, 1
  %33 = load i8*, i8** %6, align 8, !tbaa !12
  br i1 %30, label %34, label %46

34:                                               ; preds = %23
  %35 = icmp eq i8* %33, %15
  %36 = load i64, i64* %16, align 8
  %37 = select i1 %35, i64 15, i64 %36
  %38 = icmp ugt i64 %32, %37
  br i1 %38, label %39, label %52

39:                                               ; preds = %34
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64 %31, i64 0, i8* null, i64 1)
          to label %52 unwind label %40

40:                                               ; preds = %51, %39
  %41 = landingpad { i8*, i32 }
          cleanup
  %42 = load i8*, i8** %6, align 8, !tbaa !12
  %43 = bitcast %union.anon* %4 to i8*
  %44 = icmp eq i8* %42, %43
  br i1 %44, label %62, label %45

45:                                               ; preds = %40
  call void @_ZdlPv(i8* %42) #3
  br label %62

46:                                               ; preds = %23
  %47 = icmp eq i8* %33, %13
  %48 = load i64, i64* %14, align 8
  %49 = select i1 %47, i64 15, i64 %48
  %50 = icmp ugt i64 %32, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %46
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64 %31, i64 0, i8* null, i64 1)
          to label %52 unwind label %40

52:                                               ; preds = %46, %51, %34, %39
  %53 = phi i8 [ 48, %39 ], [ 48, %34 ], [ 49, %51 ], [ 49, %46 ]
  %54 = load i8*, i8** %6, align 8, !tbaa !12
  %55 = getelementptr inbounds i8, i8* %54, i64 %31
  store i8 %53, i8* %55, align 1, !tbaa !11
  store i64 %32, i64* %7, align 8, !tbaa !8
  %56 = load i8*, i8** %6, align 8, !tbaa !12
  %57 = getelementptr inbounds i8, i8* %56, i64 %32
  store i8 0, i8* %57, align 1, !tbaa !11
  %58 = add nuw i64 %20, 1
  %59 = load i64, i64* %9, align 8, !tbaa !8
  %60 = icmp ugt i64 %59, %58
  br i1 %60, label %19, label %61, !llvm.loop !13

61:                                               ; preds = %52, %19, %3
  ret void

62:                                               ; preds = %45, %40
  resume { i8*, i32 } %41
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #2

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !10, i64 8}
!9 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !4, i64 0, !10, i64 8, !6, i64 16}
!10 = !{!"long", !6, i64 0}
!11 = !{!6, !6, i64 0}
!12 = !{!9, !5, i64 0}
!13 = distinct !{!13, !14, !15}
!14 = !{!"llvm.loop.mustprogress"}
!15 = !{!"llvm.loop.unroll.disable"}
