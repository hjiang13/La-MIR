; ModuleID = '../../Human_xBenchmarks_164/CPP_159/CPP_159.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_159/CPP_159.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: uwtable
define dso_local void @_Z3eatiii(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = icmp slt i32 %3, %2
  %6 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false) #4
  br i1 %5, label %7, label %21

7:                                                ; preds = %4
  %8 = invoke noalias nonnull i8* @_Znwm(i64 8) #5
          to label %14 unwind label %9

9:                                                ; preds = %7
  %10 = landingpad { i8*, i32 }
          cleanup
  %11 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8, !tbaa !3
  %13 = icmp eq i32* %12, null
  br i1 %13, label %48, label %44

14:                                               ; preds = %7
  %15 = add nsw i32 %3, %1
  %16 = bitcast i8* %8 to i32*
  %17 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %8, i8** %17, align 8, !tbaa !3
  %18 = getelementptr inbounds i8, i8* %8, i64 8
  %19 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %20 = bitcast i32** %19 to i8**
  store i8* %18, i8** %20, align 8, !tbaa !8
  store i32 %15, i32* %16, align 4
  br label %36

21:                                               ; preds = %4
  %22 = invoke noalias nonnull i8* @_Znwm(i64 8) #5
          to label %28 unwind label %23

23:                                               ; preds = %21
  %24 = landingpad { i8*, i32 }
          cleanup
  %25 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8, !tbaa !3
  %27 = icmp eq i32* %26, null
  br i1 %27, label %48, label %44

28:                                               ; preds = %21
  %29 = sub nsw i32 %3, %2
  %30 = add nsw i32 %2, %1
  %31 = bitcast i8* %22 to i32*
  %32 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %22, i8** %32, align 8, !tbaa !3
  %33 = getelementptr inbounds i8, i8* %22, i64 8
  %34 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %35 = bitcast i32** %34 to i8**
  store i8* %33, i8** %35, align 8, !tbaa !8
  store i32 %30, i32* %31, align 4
  br label %36

36:                                               ; preds = %28, %14
  %37 = phi i8* [ %22, %28 ], [ %8, %14 ]
  %38 = phi i32 [ %29, %28 ], [ 0, %14 ]
  %39 = phi i8* [ %33, %28 ], [ %18, %14 ]
  %40 = getelementptr inbounds i8, i8* %37, i64 4
  %41 = bitcast i8* %40 to i32*
  store i32 %38, i32* %41, align 4
  %42 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %43 = bitcast i32** %42 to i8**
  store i8* %39, i8** %43, align 8, !tbaa !9
  ret void

44:                                               ; preds = %23, %9
  %45 = phi i32* [ %12, %9 ], [ %26, %23 ]
  %46 = phi { i8*, i32 } [ %10, %9 ], [ %24, %23 ]
  %47 = bitcast i32* %45 to i8*
  call void @_ZdlPv(i8* nonnull %47) #4
  br label %48

48:                                               ; preds = %44, %23, %9
  %49 = phi { i8*, i32 } [ %10, %9 ], [ %24, %23 ], [ %46, %44 ]
  resume { i8*, i32 } %49
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
attributes #4 = { nounwind }
attributes #5 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 16}
!9 = !{!4, !5, i64 8}
