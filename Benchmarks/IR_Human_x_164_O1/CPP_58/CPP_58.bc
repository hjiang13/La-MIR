; ModuleID = '../../Human_xBenchmarks_164/CPP_58/CPP_58.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_58/CPP_58.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_ = comdat any

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z6commonSt6vectorIiSaIiEES1_(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1, %"class.std::vector"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %11 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %11, i8 0, i64 24, i1 false)
  %12 = load i32*, i32** %4, align 8, !tbaa !3
  %13 = load i32*, i32** %5, align 8, !tbaa !8
  %14 = icmp eq i32* %12, %13
  br i1 %14, label %15, label %30

15:                                               ; preds = %170, %3
  %16 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8, !tbaa !9
  %18 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8, !tbaa !9
  %20 = icmp eq i32* %17, %19
  br i1 %20, label %181, label %21

21:                                               ; preds = %15
  %22 = ptrtoint i32* %19 to i64
  %23 = ptrtoint i32* %17 to i64
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 2
  %26 = call i64 @llvm.ctlz.i64(i64 %25, i1 true) #7, !range !10
  %27 = shl nuw nsw i64 %26, 1
  %28 = xor i64 %27, 126
  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %17, i32* %19, i64 %28)
          to label %29 unwind label %179

29:                                               ; preds = %21
  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %17, i32* %19)
          to label %181 unwind label %179

30:                                               ; preds = %3, %170
  %31 = phi i64 [ %171, %170 ], [ 0, %3 ]
  %32 = phi i32* [ %173, %170 ], [ %13, %3 ]
  %33 = load i32*, i32** %6, align 8, !tbaa !9
  %34 = load i32*, i32** %7, align 8, !tbaa !9
  %35 = getelementptr inbounds i32, i32* %32, i64 %31
  %36 = ptrtoint i32* %34 to i64
  %37 = ptrtoint i32* %33 to i64
  %38 = sub i64 %36, %37
  %39 = icmp sgt i64 %38, 15
  br i1 %39, label %40, label %64

40:                                               ; preds = %30
  %41 = ashr i64 %38, 4
  %42 = load i32, i32* %35, align 4, !tbaa !11
  br label %43

43:                                               ; preds = %60, %40
  %44 = phi i64 [ %41, %40 ], [ %62, %60 ]
  %45 = phi i32* [ %33, %40 ], [ %61, %60 ]
  %46 = load i32, i32* %45, align 4, !tbaa !11
  %47 = icmp eq i32 %46, %42
  br i1 %47, label %94, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i32, i32* %45, i64 1
  %50 = load i32, i32* %49, align 4, !tbaa !11
  %51 = icmp eq i32 %50, %42
  br i1 %51, label %92, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i32, i32* %45, i64 2
  %54 = load i32, i32* %53, align 4, !tbaa !11
  %55 = icmp eq i32 %54, %42
  br i1 %55, label %90, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds i32, i32* %45, i64 3
  %58 = load i32, i32* %57, align 4, !tbaa !11
  %59 = icmp eq i32 %58, %42
  br i1 %59, label %88, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds i32, i32* %45, i64 4
  %62 = add nsw i64 %44, -1
  %63 = icmp sgt i64 %44, 1
  br i1 %63, label %43, label %64, !llvm.loop !13

64:                                               ; preds = %60, %30
  %65 = phi i32* [ %33, %30 ], [ %61, %60 ]
  %66 = ptrtoint i32* %65 to i64
  %67 = sub i64 %36, %66
  %68 = ashr exact i64 %67, 2
  switch i64 %68, label %87 [
    i64 3, label %69
    i64 2, label %75
    i64 1, label %82
  ]

69:                                               ; preds = %64
  %70 = load i32, i32* %65, align 4, !tbaa !11
  %71 = load i32, i32* %35, align 4, !tbaa !11
  %72 = icmp eq i32 %70, %71
  br i1 %72, label %94, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds i32, i32* %65, i64 1
  br label %75

75:                                               ; preds = %73, %64
  %76 = phi i32* [ %65, %64 ], [ %74, %73 ]
  %77 = load i32, i32* %76, align 4, !tbaa !11
  %78 = load i32, i32* %35, align 4, !tbaa !11
  %79 = icmp eq i32 %77, %78
  br i1 %79, label %94, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds i32, i32* %76, i64 1
  br label %82

82:                                               ; preds = %80, %64
  %83 = phi i32* [ %65, %64 ], [ %81, %80 ]
  %84 = load i32, i32* %83, align 4, !tbaa !11
  %85 = load i32, i32* %35, align 4, !tbaa !11
  %86 = icmp eq i32 %84, %85
  br i1 %86, label %94, label %87

87:                                               ; preds = %82, %64
  br label %94

88:                                               ; preds = %56
  %89 = getelementptr inbounds i32, i32* %45, i64 3
  br label %94

90:                                               ; preds = %52
  %91 = getelementptr inbounds i32, i32* %45, i64 2
  br label %94

92:                                               ; preds = %48
  %93 = getelementptr inbounds i32, i32* %45, i64 1
  br label %94

94:                                               ; preds = %43, %88, %90, %92, %87, %82, %75, %69
  %95 = phi i32* [ %34, %87 ], [ %65, %69 ], [ %76, %75 ], [ %83, %82 ], [ %89, %88 ], [ %91, %90 ], [ %93, %92 ], [ %45, %43 ]
  %96 = icmp eq i32* %95, %34
  br i1 %96, label %97, label %170

97:                                               ; preds = %94
  %98 = load i32*, i32** %8, align 8, !tbaa !9
  %99 = load i32*, i32** %9, align 8, !tbaa !9
  %100 = ptrtoint i32* %99 to i64
  %101 = ptrtoint i32* %98 to i64
  %102 = sub i64 %100, %101
  %103 = icmp sgt i64 %102, 15
  br i1 %103, label %104, label %128

104:                                              ; preds = %97
  %105 = ashr i64 %102, 4
  %106 = load i32, i32* %35, align 4, !tbaa !11
  br label %107

107:                                              ; preds = %124, %104
  %108 = phi i64 [ %105, %104 ], [ %126, %124 ]
  %109 = phi i32* [ %98, %104 ], [ %125, %124 ]
  %110 = load i32, i32* %109, align 4, !tbaa !11
  %111 = icmp eq i32 %110, %106
  br i1 %111, label %158, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds i32, i32* %109, i64 1
  %114 = load i32, i32* %113, align 4, !tbaa !11
  %115 = icmp eq i32 %114, %106
  br i1 %115, label %156, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds i32, i32* %109, i64 2
  %118 = load i32, i32* %117, align 4, !tbaa !11
  %119 = icmp eq i32 %118, %106
  br i1 %119, label %154, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds i32, i32* %109, i64 3
  %122 = load i32, i32* %121, align 4, !tbaa !11
  %123 = icmp eq i32 %122, %106
  br i1 %123, label %152, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds i32, i32* %109, i64 4
  %126 = add nsw i64 %108, -1
  %127 = icmp sgt i64 %108, 1
  br i1 %127, label %107, label %128, !llvm.loop !13

128:                                              ; preds = %124, %97
  %129 = phi i32* [ %98, %97 ], [ %125, %124 ]
  %130 = ptrtoint i32* %129 to i64
  %131 = sub i64 %100, %130
  %132 = ashr exact i64 %131, 2
  switch i64 %132, label %151 [
    i64 3, label %133
    i64 2, label %139
    i64 1, label %146
  ]

133:                                              ; preds = %128
  %134 = load i32, i32* %129, align 4, !tbaa !11
  %135 = load i32, i32* %35, align 4, !tbaa !11
  %136 = icmp eq i32 %134, %135
  br i1 %136, label %158, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds i32, i32* %129, i64 1
  br label %139

139:                                              ; preds = %137, %128
  %140 = phi i32* [ %129, %128 ], [ %138, %137 ]
  %141 = load i32, i32* %140, align 4, !tbaa !11
  %142 = load i32, i32* %35, align 4, !tbaa !11
  %143 = icmp eq i32 %141, %142
  br i1 %143, label %158, label %144

144:                                              ; preds = %139
  %145 = getelementptr inbounds i32, i32* %140, i64 1
  br label %146

146:                                              ; preds = %144, %128
  %147 = phi i32* [ %129, %128 ], [ %145, %144 ]
  %148 = load i32, i32* %147, align 4, !tbaa !11
  %149 = load i32, i32* %35, align 4, !tbaa !11
  %150 = icmp eq i32 %148, %149
  br i1 %150, label %158, label %151

151:                                              ; preds = %146, %128
  br label %158

152:                                              ; preds = %120
  %153 = getelementptr inbounds i32, i32* %109, i64 3
  br label %158

154:                                              ; preds = %116
  %155 = getelementptr inbounds i32, i32* %109, i64 2
  br label %158

156:                                              ; preds = %112
  %157 = getelementptr inbounds i32, i32* %109, i64 1
  br label %158

158:                                              ; preds = %107, %152, %154, %156, %151, %146, %139, %133
  %159 = phi i32* [ %99, %151 ], [ %129, %133 ], [ %140, %139 ], [ %147, %146 ], [ %153, %152 ], [ %155, %154 ], [ %157, %156 ], [ %109, %107 ]
  %160 = icmp eq i32* %159, %99
  br i1 %160, label %170, label %161

161:                                              ; preds = %158
  %162 = load i32*, i32** %10, align 8, !tbaa !16
  %163 = icmp eq i32* %34, %162
  br i1 %163, label %167, label %164

164:                                              ; preds = %161
  %165 = load i32, i32* %35, align 4, !tbaa !11
  store i32 %165, i32* %34, align 4, !tbaa !11
  %166 = getelementptr inbounds i32, i32* %34, i64 1
  store i32* %166, i32** %7, align 8, !tbaa !3
  br label %170

167:                                              ; preds = %161
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %34, i32* nonnull align 4 dereferenceable(4) %35)
          to label %170 unwind label %168

168:                                              ; preds = %167
  %169 = landingpad { i8*, i32 }
          cleanup
  br label %182

170:                                              ; preds = %164, %167, %94, %158
  %171 = add nuw i64 %31, 1
  %172 = load i32*, i32** %4, align 8, !tbaa !3
  %173 = load i32*, i32** %5, align 8, !tbaa !8
  %174 = ptrtoint i32* %172 to i64
  %175 = ptrtoint i32* %173 to i64
  %176 = sub i64 %174, %175
  %177 = ashr exact i64 %176, 2
  %178 = icmp ugt i64 %177, %171
  br i1 %178, label %30, label %15, !llvm.loop !17

179:                                              ; preds = %29, %21
  %180 = landingpad { i8*, i32 }
          cleanup
  br label %182

181:                                              ; preds = %15, %29
  ret void

182:                                              ; preds = %168, %179
  %183 = phi { i8*, i32 } [ %180, %179 ], [ %169, %168 ]
  %184 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %185 = load i32*, i32** %184, align 8, !tbaa !8
  %186 = icmp eq i32* %185, null
  br i1 %186, label %189, label %187

187:                                              ; preds = %182
  %188 = bitcast i32* %185 to i8*
  call void @_ZdlPv(i8* nonnull %188) #7
  br label %189

189:                                              ; preds = %182, %187
  resume { i8*, i32 } %183
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint i32* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %14
  %27 = icmp ugt i64 %21, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  call void @_ZSt17__throw_bad_allocv() #8
  unreachable

29:                                               ; preds = %26
  %30 = shl i64 %21, 2
  %31 = call noalias nonnull i8* @_Znwm(i64 %30) #9
  %32 = bitcast i8* %31 to i32*
  br label %33

33:                                               ; preds = %14, %29
  %34 = phi i32* [ %32, %29 ], [ null, %14 ]
  %35 = getelementptr inbounds i32, i32* %34, i64 %24
  %36 = load i32, i32* %2, align 4, !tbaa !11
  store i32 %36, i32* %35, align 4, !tbaa !11
  %37 = icmp sgt i64 %23, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = bitcast i32* %34 to i8*
  %40 = bitcast i32* %7 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %23, i1 false) #7
  br label %41

41:                                               ; preds = %33, %38
  %42 = getelementptr inbounds i32, i32* %35, i64 1
  %43 = sub i64 %8, %22
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = bitcast i32* %42 to i8*
  %47 = bitcast i32* %1 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 %47, i64 %43, i1 false) #7
  br label %48

48:                                               ; preds = %41, %45
  %49 = icmp eq i32* %7, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %48
  %51 = bitcast i32* %7 to i8*
  call void @_ZdlPv(i8* nonnull %51) #7
  br label %52

52:                                               ; preds = %48, %50
  %53 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %54 = ashr exact i64 %43, 2
  %55 = getelementptr inbounds i32, i32* %42, i64 %54
  store i32* %34, i32** %6, align 8, !tbaa !8
  store i32* %55, i32** %4, align 8, !tbaa !3
  %56 = getelementptr inbounds i32, i32* %34, i64 %21
  store i32* %56, i32** %53, align 8, !tbaa !16
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = ptrtoint i32* %0 to i64
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = ptrtoint i32* %1 to i64
  %7 = sub i64 %6, %4
  %8 = icmp sgt i64 %7, 64
  br i1 %8, label %9, label %182

9:                                                ; preds = %3, %178
  %10 = phi i64 [ %180, %178 ], [ %7, %3 ]
  %11 = phi i64 [ %134, %178 ], [ %2, %3 ]
  %12 = phi i32* [ %166, %178 ], [ %1, %3 ]
  %13 = ashr exact i64 %10, 2
  %14 = icmp eq i64 %11, 0
  br i1 %14, label %15, label %133

15:                                               ; preds = %9
  %16 = ptrtoint i32* %0 to i64
  %17 = icmp slt i64 %10, 8
  br i1 %17, label %74, label %18

18:                                               ; preds = %15
  %19 = add nsw i64 %13, -2
  %20 = sdiv i64 %19, 2
  %21 = add nsw i64 %13, -1
  %22 = sdiv i64 %21, 2
  %23 = and i64 %10, 4
  %24 = icmp eq i64 %23, 0
  br label %25

25:                                               ; preds = %68, %18
  %26 = phi i64 [ %20, %18 ], [ %73, %68 ]
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  %28 = load i32, i32* %27, align 4, !tbaa !11
  %29 = icmp sgt i64 %22, %26
  br i1 %29, label %30, label %45

30:                                               ; preds = %25, %30
  %31 = phi i64 [ %40, %30 ], [ %26, %25 ]
  %32 = shl i64 %31, 1
  %33 = add i64 %32, 2
  %34 = getelementptr inbounds i32, i32* %0, i64 %33
  %35 = or i64 %32, 1
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  %37 = load i32, i32* %34, align 4, !tbaa !11
  %38 = load i32, i32* %36, align 4, !tbaa !11
  %39 = icmp slt i32 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = getelementptr inbounds i32, i32* %0, i64 %40
  %42 = load i32, i32* %41, align 4, !tbaa !11
  %43 = getelementptr inbounds i32, i32* %0, i64 %31
  store i32 %42, i32* %43, align 4, !tbaa !11
  %44 = icmp slt i64 %40, %22
  br i1 %44, label %30, label %45, !llvm.loop !18

45:                                               ; preds = %30, %25
  %46 = phi i64 [ %26, %25 ], [ %40, %30 ]
  %47 = icmp eq i64 %46, %20
  %48 = select i1 %24, i1 %47, i1 false
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = shl i64 %46, 1
  %51 = or i64 %50, 1
  %52 = getelementptr inbounds i32, i32* %0, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !11
  %54 = getelementptr inbounds i32, i32* %0, i64 %46
  store i32 %53, i32* %54, align 4, !tbaa !11
  br label %55

55:                                               ; preds = %49, %45
  %56 = phi i64 [ %51, %49 ], [ %46, %45 ]
  %57 = icmp sgt i64 %56, %26
  br i1 %57, label %58, label %68

58:                                               ; preds = %55, %65
  %59 = phi i64 [ %61, %65 ], [ %56, %55 ]
  %60 = add nsw i64 %59, -1
  %61 = sdiv i64 %60, 2
  %62 = getelementptr inbounds i32, i32* %0, i64 %61
  %63 = load i32, i32* %62, align 4, !tbaa !11
  %64 = icmp slt i32 %63, %28
  br i1 %64, label %65, label %68

65:                                               ; preds = %58
  %66 = getelementptr inbounds i32, i32* %0, i64 %59
  store i32 %63, i32* %66, align 4, !tbaa !11
  %67 = icmp sgt i64 %61, %26
  br i1 %67, label %58, label %68, !llvm.loop !19

68:                                               ; preds = %65, %58, %55
  %69 = phi i64 [ %56, %55 ], [ %59, %58 ], [ %61, %65 ]
  %70 = getelementptr inbounds i32, i32* %0, i64 %69
  store i32 %28, i32* %70, align 4, !tbaa !11
  %71 = icmp eq i64 %26, 0
  %72 = add nsw i64 %26, -1
  %73 = select i1 %71, i64 0, i64 %72
  br i1 %71, label %74, label %25, !llvm.loop !20

74:                                               ; preds = %68, %15
  %75 = icmp sgt i64 %10, 4
  br i1 %75, label %76, label %182

76:                                               ; preds = %74, %129
  %77 = phi i32* [ %78, %129 ], [ %12, %74 ]
  %78 = getelementptr inbounds i32, i32* %77, i64 -1
  %79 = load i32, i32* %78, align 4, !tbaa !11
  %80 = load i32, i32* %0, align 4, !tbaa !11
  store i32 %80, i32* %78, align 4, !tbaa !11
  %81 = ptrtoint i32* %78 to i64
  %82 = sub i64 %81, %16
  %83 = ashr exact i64 %82, 2
  %84 = add nsw i64 %83, -1
  %85 = sdiv i64 %84, 2
  %86 = icmp sgt i64 %82, 8
  br i1 %86, label %87, label %102

87:                                               ; preds = %76, %87
  %88 = phi i64 [ %97, %87 ], [ 0, %76 ]
  %89 = shl i64 %88, 1
  %90 = add i64 %89, 2
  %91 = getelementptr inbounds i32, i32* %0, i64 %90
  %92 = or i64 %89, 1
  %93 = getelementptr inbounds i32, i32* %0, i64 %92
  %94 = load i32, i32* %91, align 4, !tbaa !11
  %95 = load i32, i32* %93, align 4, !tbaa !11
  %96 = icmp slt i32 %94, %95
  %97 = select i1 %96, i64 %92, i64 %90
  %98 = getelementptr inbounds i32, i32* %0, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !11
  %100 = getelementptr inbounds i32, i32* %0, i64 %88
  store i32 %99, i32* %100, align 4, !tbaa !11
  %101 = icmp slt i64 %97, %85
  br i1 %101, label %87, label %102, !llvm.loop !18

102:                                              ; preds = %87, %76
  %103 = phi i64 [ 0, %76 ], [ %97, %87 ]
  %104 = and i64 %82, 4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %116

106:                                              ; preds = %102
  %107 = add nsw i64 %83, -2
  %108 = sdiv i64 %107, 2
  %109 = icmp eq i64 %103, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = shl i64 %103, 1
  %112 = or i64 %111, 1
  %113 = getelementptr inbounds i32, i32* %0, i64 %112
  %114 = load i32, i32* %113, align 4, !tbaa !11
  %115 = getelementptr inbounds i32, i32* %0, i64 %103
  store i32 %114, i32* %115, align 4, !tbaa !11
  br label %116

116:                                              ; preds = %110, %106, %102
  %117 = phi i64 [ %112, %110 ], [ %103, %106 ], [ %103, %102 ]
  %118 = icmp sgt i64 %117, 0
  br i1 %118, label %119, label %129

119:                                              ; preds = %116, %126
  %120 = phi i64 [ %122, %126 ], [ %117, %116 ]
  %121 = add nsw i64 %120, -1
  %122 = sdiv i64 %121, 2
  %123 = getelementptr inbounds i32, i32* %0, i64 %122
  %124 = load i32, i32* %123, align 4, !tbaa !11
  %125 = icmp slt i32 %124, %79
  br i1 %125, label %126, label %129

126:                                              ; preds = %119
  %127 = getelementptr inbounds i32, i32* %0, i64 %120
  store i32 %124, i32* %127, align 4, !tbaa !11
  %128 = icmp sgt i64 %120, 2
  br i1 %128, label %119, label %129, !llvm.loop !19

129:                                              ; preds = %126, %119, %116
  %130 = phi i64 [ %117, %116 ], [ %120, %119 ], [ %122, %126 ]
  %131 = getelementptr inbounds i32, i32* %0, i64 %130
  store i32 %79, i32* %131, align 4, !tbaa !11
  %132 = icmp sgt i64 %82, 4
  br i1 %132, label %76, label %182, !llvm.loop !21

133:                                              ; preds = %9
  %134 = add nsw i64 %11, -1
  %135 = sdiv i64 %13, 2
  %136 = getelementptr inbounds i32, i32* %0, i64 %135
  %137 = getelementptr inbounds i32, i32* %12, i64 -1
  %138 = load i32, i32* %5, align 4, !tbaa !11
  %139 = load i32, i32* %136, align 4, !tbaa !11
  %140 = icmp slt i32 %138, %139
  %141 = load i32, i32* %137, align 4, !tbaa !11
  br i1 %140, label %142, label %151

142:                                              ; preds = %133
  %143 = icmp slt i32 %139, %141
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = load i32, i32* %0, align 4, !tbaa !11
  store i32 %139, i32* %0, align 4, !tbaa !11
  store i32 %145, i32* %136, align 4, !tbaa !11
  br label %160

146:                                              ; preds = %142
  %147 = icmp slt i32 %138, %141
  %148 = load i32, i32* %0, align 4, !tbaa !11
  br i1 %147, label %149, label %150

149:                                              ; preds = %146
  store i32 %141, i32* %0, align 4, !tbaa !11
  store i32 %148, i32* %137, align 4, !tbaa !11
  br label %160

150:                                              ; preds = %146
  store i32 %138, i32* %0, align 4, !tbaa !11
  store i32 %148, i32* %5, align 4, !tbaa !11
  br label %160

151:                                              ; preds = %133
  %152 = icmp slt i32 %138, %141
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = load i32, i32* %0, align 4, !tbaa !11
  store i32 %138, i32* %0, align 4, !tbaa !11
  store i32 %154, i32* %5, align 4, !tbaa !11
  br label %160

155:                                              ; preds = %151
  %156 = icmp slt i32 %139, %141
  %157 = load i32, i32* %0, align 4, !tbaa !11
  br i1 %156, label %158, label %159

158:                                              ; preds = %155
  store i32 %141, i32* %0, align 4, !tbaa !11
  store i32 %157, i32* %137, align 4, !tbaa !11
  br label %160

159:                                              ; preds = %155
  store i32 %139, i32* %0, align 4, !tbaa !11
  store i32 %157, i32* %136, align 4, !tbaa !11
  br label %160

160:                                              ; preds = %159, %158, %153, %150, %149, %144
  br label %161

161:                                              ; preds = %160, %177
  %162 = phi i32* [ %169, %177 ], [ %5, %160 ]
  %163 = phi i32* [ %172, %177 ], [ %12, %160 ]
  %164 = load i32, i32* %0, align 4, !tbaa !11
  br label %165

165:                                              ; preds = %165, %161
  %166 = phi i32* [ %162, %161 ], [ %169, %165 ]
  %167 = load i32, i32* %166, align 4, !tbaa !11
  %168 = icmp slt i32 %167, %164
  %169 = getelementptr inbounds i32, i32* %166, i64 1
  br i1 %168, label %165, label %170, !llvm.loop !22

170:                                              ; preds = %165, %170
  %171 = phi i32* [ %172, %170 ], [ %163, %165 ]
  %172 = getelementptr inbounds i32, i32* %171, i64 -1
  %173 = load i32, i32* %172, align 4, !tbaa !11
  %174 = icmp slt i32 %164, %173
  br i1 %174, label %170, label %175, !llvm.loop !23

175:                                              ; preds = %170
  %176 = icmp ult i32* %166, %172
  br i1 %176, label %177, label %178

177:                                              ; preds = %175
  store i32 %173, i32* %166, align 4, !tbaa !11
  store i32 %167, i32* %172, align 4, !tbaa !11
  br label %161, !llvm.loop !24

178:                                              ; preds = %175
  call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %166, i32* %12, i64 %134)
  %179 = ptrtoint i32* %166 to i64
  %180 = sub i64 %179, %4
  %181 = icmp sgt i64 %180, 64
  br i1 %181, label %9, label %182, !llvm.loop !25

182:                                              ; preds = %178, %129, %3, %74
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {
  %3 = ptrtoint i32* %1 to i64
  %4 = ptrtoint i32* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp sgt i64 %5, 64
  br i1 %6, label %7, label %54

7:                                                ; preds = %2
  %8 = bitcast i32* %0 to i8*
  %9 = getelementptr i32, i32* %0, i64 1
  %10 = bitcast i32* %9 to i8*
  br label %11

11:                                               ; preds = %7, %30
  %12 = phi i64 [ %32, %30 ], [ 1, %7 ]
  %13 = phi i32* [ %14, %30 ], [ %0, %7 ]
  %14 = getelementptr inbounds i32, i32* %0, i64 %12
  %15 = load i32, i32* %14, align 4, !tbaa !11
  %16 = load i32, i32* %0, align 4, !tbaa !11
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = shl nsw i64 %12, 2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %10, i8* nonnull align 4 %8, i64 %19, i1 false) #7
  br label %30

20:                                               ; preds = %11
  %21 = load i32, i32* %13, align 4, !tbaa !11
  %22 = icmp slt i32 %15, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %20, %23
  %24 = phi i32 [ %28, %23 ], [ %21, %20 ]
  %25 = phi i32* [ %27, %23 ], [ %13, %20 ]
  %26 = phi i32* [ %25, %23 ], [ %14, %20 ]
  store i32 %24, i32* %26, align 4, !tbaa !11
  %27 = getelementptr inbounds i32, i32* %25, i64 -1
  %28 = load i32, i32* %27, align 4, !tbaa !11
  %29 = icmp slt i32 %15, %28
  br i1 %29, label %23, label %30, !llvm.loop !26

30:                                               ; preds = %23, %20, %18
  %31 = phi i32* [ %0, %18 ], [ %14, %20 ], [ %25, %23 ]
  store i32 %15, i32* %31, align 4, !tbaa !11
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, 16
  br i1 %33, label %34, label %11, !llvm.loop !27

34:                                               ; preds = %30
  %35 = getelementptr inbounds i32, i32* %0, i64 16
  %36 = icmp eq i32* %35, %1
  br i1 %36, label %89, label %37

37:                                               ; preds = %34, %50
  %38 = phi i32* [ %52, %50 ], [ %35, %34 ]
  %39 = load i32, i32* %38, align 4, !tbaa !11
  %40 = getelementptr inbounds i32, i32* %38, i64 -1
  %41 = load i32, i32* %40, align 4, !tbaa !11
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %37, %43
  %44 = phi i32 [ %48, %43 ], [ %41, %37 ]
  %45 = phi i32* [ %47, %43 ], [ %40, %37 ]
  %46 = phi i32* [ %45, %43 ], [ %38, %37 ]
  store i32 %44, i32* %46, align 4, !tbaa !11
  %47 = getelementptr inbounds i32, i32* %45, i64 -1
  %48 = load i32, i32* %47, align 4, !tbaa !11
  %49 = icmp slt i32 %39, %48
  br i1 %49, label %43, label %50, !llvm.loop !26

50:                                               ; preds = %43, %37
  %51 = phi i32* [ %38, %37 ], [ %45, %43 ]
  store i32 %39, i32* %51, align 4, !tbaa !11
  %52 = getelementptr inbounds i32, i32* %38, i64 1
  %53 = icmp eq i32* %52, %1
  br i1 %53, label %89, label %37, !llvm.loop !28

54:                                               ; preds = %2
  %55 = icmp eq i32* %0, %1
  br i1 %55, label %89, label %56

56:                                               ; preds = %54
  %57 = bitcast i32* %0 to i8*
  %58 = getelementptr inbounds i32, i32* %0, i64 1
  %59 = icmp eq i32* %58, %1
  br i1 %59, label %89, label %60

60:                                               ; preds = %56, %85
  %61 = phi i32* [ %87, %85 ], [ %58, %56 ]
  %62 = phi i32* [ %61, %85 ], [ %0, %56 ]
  %63 = load i32, i32* %61, align 4, !tbaa !11
  %64 = load i32, i32* %0, align 4, !tbaa !11
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %60
  %67 = ptrtoint i32* %61 to i64
  %68 = sub i64 %67, %4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %66
  %71 = ashr exact i64 %68, 2
  %72 = sub nsw i64 2, %71
  %73 = getelementptr inbounds i32, i32* %62, i64 %72
  %74 = bitcast i32* %73 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %74, i8* nonnull align 4 %57, i64 %68, i1 false) #7
  br label %85

75:                                               ; preds = %60
  %76 = load i32, i32* %62, align 4, !tbaa !11
  %77 = icmp slt i32 %63, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %75, %78
  %79 = phi i32 [ %83, %78 ], [ %76, %75 ]
  %80 = phi i32* [ %82, %78 ], [ %62, %75 ]
  %81 = phi i32* [ %80, %78 ], [ %61, %75 ]
  store i32 %79, i32* %81, align 4, !tbaa !11
  %82 = getelementptr inbounds i32, i32* %80, i64 -1
  %83 = load i32, i32* %82, align 4, !tbaa !11
  %84 = icmp slt i32 %63, %83
  br i1 %84, label %78, label %85, !llvm.loop !26

85:                                               ; preds = %78, %75, %66, %70
  %86 = phi i32* [ %0, %70 ], [ %0, %66 ], [ %61, %75 ], [ %80, %78 ]
  store i32 %63, i32* %86, align 4, !tbaa !11
  %87 = getelementptr inbounds i32, i32* %61, i64 1
  %88 = icmp eq i32* %87, %1
  br i1 %88, label %89, label %60, !llvm.loop !27

89:                                               ; preds = %85, %50, %56, %54, %34
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!5, !5, i64 0}
!10 = !{i64 0, i64 65}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !6, i64 0}
!13 = distinct !{!13, !14, !15}
!14 = !{!"llvm.loop.mustprogress"}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = !{!4, !5, i64 16}
!17 = distinct !{!17, !14, !15}
!18 = distinct !{!18, !14, !15}
!19 = distinct !{!19, !14, !15}
!20 = distinct !{!20, !14, !15}
!21 = distinct !{!21, !14, !15}
!22 = distinct !{!22, !14, !15}
!23 = distinct !{!23, !14, !15}
!24 = distinct !{!24, !14, !15}
!25 = distinct !{!25, !14, !15}
!26 = distinct !{!26, !14, !15}
!27 = distinct !{!27, !14, !15}
!28 = distinct !{!28, !14, !15}
