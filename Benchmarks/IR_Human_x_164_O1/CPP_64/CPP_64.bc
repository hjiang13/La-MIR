; ModuleID = '../../Human_xBenchmarks_164/CPP_64/CPP_64.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_64/CPP_64.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@.str = private unnamed_addr constant [11 x i8] c"aeiouAEIOU\00", align 1

; Function Attrs: uwtable
define dso_local i32 @_Z12vowels_countNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = alloca %"class.std::__cxx11::basic_string", align 8
  %3 = bitcast %"class.std::__cxx11::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #4
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 2
  %5 = bitcast %"class.std::__cxx11::basic_string"* %2 to %union.anon**
  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 0, i32 0
  %7 = bitcast %union.anon* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %7, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i64 10, i1 false) #4
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 1
  store i64 10, i64* %8, align 8, !tbaa !8
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %2, i64 0, i32 2, i32 1, i64 2
  store i8 0, i8* %9, align 2, !tbaa !11
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8, !tbaa !8
  %12 = load i8*, i8** %6, align 8
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8, !tbaa !12
  %17 = getelementptr inbounds i8, i8* %12, i64 8
  %18 = getelementptr inbounds i8, i8* %12, i64 9
  br label %26

19:                                               ; preds = %68, %1
  %20 = phi i32 [ 0, %1 ], [ %72, %68 ]
  %21 = add i64 %11, -1
  %22 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8, !tbaa !12
  %24 = getelementptr inbounds i8, i8* %23, i64 %21
  %25 = load i8, i8* %24, align 1, !tbaa !11
  switch i8 %25, label %77 [
    i8 121, label %75
    i8 89, label %75
  ]

26:                                               ; preds = %14, %68
  %27 = phi i64 [ 0, %14 ], [ %73, %68 ]
  %28 = phi i32 [ 0, %14 ], [ %72, %68 ]
  %29 = getelementptr inbounds i8, i8* %16, i64 %27
  %30 = load i8, i8* %29, align 1, !tbaa !11
  br label %31

31:                                               ; preds = %49, %26
  %32 = phi i64 [ 2, %26 ], [ %51, %49 ]
  %33 = phi i64 [ 0, %26 ], [ %50, %49 ]
  %34 = getelementptr inbounds i8, i8* %12, i64 %33
  %35 = load i8, i8* %34, align 1, !tbaa !11
  %36 = icmp eq i8 %35, %30
  br i1 %36, label %68, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds i8, i8* %34, i64 1
  %39 = load i8, i8* %38, align 1, !tbaa !11
  %40 = icmp eq i8 %39, %30
  br i1 %40, label %66, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds i8, i8* %34, i64 2
  %43 = load i8, i8* %42, align 1, !tbaa !11
  %44 = icmp eq i8 %43, %30
  br i1 %44, label %64, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds i8, i8* %34, i64 3
  %47 = load i8, i8* %46, align 1, !tbaa !11
  %48 = icmp eq i8 %47, %30
  br i1 %48, label %62, label %49

49:                                               ; preds = %45
  %50 = add nuw nsw i64 %33, 4
  %51 = add nsw i64 %32, -1
  %52 = icmp ugt i64 %32, 1
  br i1 %52, label %31, label %53, !llvm.loop !13

53:                                               ; preds = %49
  %54 = load i8, i8* %17, align 1, !tbaa !11
  %55 = load i8, i8* %29, align 1, !tbaa !11
  %56 = icmp eq i8 %54, %55
  br i1 %56, label %68, label %57

57:                                               ; preds = %53
  %58 = load i8, i8* %18, align 1, !tbaa !11
  %59 = load i8, i8* %29, align 1, !tbaa !11
  %60 = icmp eq i8 %58, %59
  %61 = select i1 %60, i64 9, i64 10
  br label %68

62:                                               ; preds = %45
  %63 = or i64 %33, 3
  br label %68

64:                                               ; preds = %41
  %65 = or i64 %33, 2
  br label %68

66:                                               ; preds = %37
  %67 = or i64 %33, 1
  br label %68

68:                                               ; preds = %31, %57, %62, %64, %66, %53
  %69 = phi i64 [ 8, %53 ], [ %63, %62 ], [ %65, %64 ], [ %67, %66 ], [ %61, %57 ], [ %33, %31 ]
  %70 = icmp ne i64 %69, 10
  %71 = zext i1 %70 to i32
  %72 = add nuw nsw i32 %28, %71
  %73 = add nuw nsw i64 %27, 1
  %74 = icmp eq i64 %73, %11
  br i1 %74, label %19, label %26, !llvm.loop !16

75:                                               ; preds = %19, %19
  %76 = add nuw nsw i32 %20, 1
  br label %77

77:                                               ; preds = %19, %75
  %78 = phi i32 [ %76, %75 ], [ %20, %19 ]
  %79 = load i8*, i8** %6, align 8, !tbaa !12
  %80 = bitcast %union.anon* %4 to i8*
  %81 = icmp eq i8* %79, %80
  br i1 %81, label %83, label %82

82:                                               ; preds = %77
  call void @_ZdlPv(i8* %79) #4
  br label %83

83:                                               ; preds = %77, %82
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #4
  ret i32 %78
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !10, i64 8}
!9 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !4, i64 0, !10, i64 8, !6, i64 16}
!10 = !{!"long", !6, i64 0}
!11 = !{!6, !6, i64 0}
!12 = !{!9, !5, i64 0}
!13 = distinct !{!13, !14, !15}
!14 = !{!"llvm.loop.mustprogress"}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !14, !15}
