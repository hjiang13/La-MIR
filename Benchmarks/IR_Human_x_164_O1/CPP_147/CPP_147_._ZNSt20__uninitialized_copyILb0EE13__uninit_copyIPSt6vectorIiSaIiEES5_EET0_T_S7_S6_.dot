digraph "CFG for '_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIiSaIiEES5_EET0_T_S7_S6_' function" {
	label="CFG for '_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIiSaIiEES5_EET0_T_S7_S6_' function";

	Node0x55b22b2b19a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%3:\l  %4 = icmp eq %\"class.std::vector\"* %0, %1\l  br i1 %4, label %67, label %5\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2b19a0:s0 -> Node0x55b22b2b1a40;
	Node0x55b22b2b19a0:s1 -> Node0x55b22b2b1a90;
	Node0x55b22b2b1a90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%5:\l5:                                                \l  %6 = phi %\"class.std::vector\"* [ %45, %41 ], [ %2, %3 ]\l  %7 = phi %\"class.std::vector\"* [ %44, %41 ], [ %0, %3 ]\l  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %9 = load i32*, i32** %8, align 8, !tbaa !3\l  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %11 = load i32*, i32** %10, align 8, !tbaa !8\l  %12 = ptrtoint i32* %9 to i64\l  %13 = ptrtoint i32* %11 to i64\l  %14 = sub i64 %12, %13\l  %15 = ashr exact i64 %14, 2\l  %16 = bitcast %\"class.std::vector\"* %6 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %16, i8 0, i64 24, i1 false) #10\l  %17 = icmp eq i64 %14, 0\l  br i1 %17, label %26, label %18\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2b1a90:s0 -> Node0x55b22b2b23c0;
	Node0x55b22b2b1a90:s1 -> Node0x55b22b2b2410;
	Node0x55b22b2b2410 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%18:\l18:                                               \l  %19 = icmp ugt i64 %15, 2305843009213693951\l  br i1 %19, label %20, label %22\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2b2410:s0 -> Node0x55b22b2b25e0;
	Node0x55b22b2b2410:s1 -> Node0x55b22b2b2630;
	Node0x55b22b2b25e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%20:\l20:                                               \l  invoke void @_ZSt17__throw_bad_allocv() #11\l          to label %21 unwind label %49\l}"];
	Node0x55b22b2b25e0 -> Node0x55b22b2b2770;
	Node0x55b22b2b25e0 -> Node0x55b22b2b27c0;
	Node0x55b22b2b2770 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%21:\l21:                                               \l  unreachable\l}"];
	Node0x55b22b2b2630 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%22:\l22:                                               \l  %23 = invoke noalias nonnull i8* @_Znwm(i64 %14) #12\l          to label %24 unwind label %47\l}"];
	Node0x55b22b2b2630 -> Node0x55b22b2b29b0;
	Node0x55b22b2b2630 -> Node0x55b22b2b2a00;
	Node0x55b22b2b29b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%24:\l24:                                               \l  %25 = bitcast i8* %23 to i32*\l  br label %26\l}"];
	Node0x55b22b2b29b0 -> Node0x55b22b2b23c0;
	Node0x55b22b2b23c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i32* [ %25, %24 ], [ null, %5 ]\l  %28 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  store i32* %27, i32** %28, align 8, !tbaa !8\l  %29 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  store i32* %27, i32** %29, align 8, !tbaa !3\l  %30 = getelementptr inbounds i32, i32* %27, i64 %15\l  %31 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  store i32* %30, i32** %31, align 8, !tbaa !9\l  %32 = load i32*, i32** %10, align 8, !tbaa !10\l  %33 = load i32*, i32** %8, align 8, !tbaa !10\l  %34 = ptrtoint i32* %33 to i64\l  %35 = ptrtoint i32* %32 to i64\l  %36 = sub i64 %34, %35\l  %37 = icmp eq i64 %36, 0\l  br i1 %37, label %41, label %38\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2b23c0:s0 -> Node0x55b22b2b1b90;
	Node0x55b22b2b23c0:s1 -> Node0x55b22b2b3560;
	Node0x55b22b2b3560 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%38:\l38:                                               \l  %39 = bitcast i32* %27 to i8*\l  %40 = bitcast i32* %32 to i8*\l  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64\l... %36, i1 false) #10\l  br label %41\l}"];
	Node0x55b22b2b3560 -> Node0x55b22b2b1b90;
	Node0x55b22b2b1b90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%41:\l41:                                               \l  %42 = ashr exact i64 %36, 2\l  %43 = getelementptr inbounds i32, i32* %27, i64 %42\l  store i32* %43, i32** %29, align 8, !tbaa !3\l  %44 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %7,\l... i64 1\l  %45 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %6,\l... i64 1\l  %46 = icmp eq %\"class.std::vector\"* %44, %1\l  br i1 %46, label %67, label %5, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2b1b90:s0 -> Node0x55b22b2b1a40;
	Node0x55b22b2b1b90:s1 -> Node0x55b22b2b1a90;
	Node0x55b22b2b2a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%47:\l47:                                               \l  %48 = landingpad \{ i8*, i32 \}\l          catch i8* null\l  br label %51\l}"];
	Node0x55b22b2b2a00 -> Node0x55b22b2b3ea0;
	Node0x55b22b2b27c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%49:\l49:                                               \l  %50 = landingpad \{ i8*, i32 \}\l          catch i8* null\l  br label %51\l}"];
	Node0x55b22b2b27c0 -> Node0x55b22b2b3ea0;
	Node0x55b22b2b3ea0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%51:\l51:                                               \l  %52 = phi \{ i8*, i32 \} [ %48, %47 ], [ %50, %49 ]\l  %53 = extractvalue \{ i8*, i32 \} %52, 0\l  %54 = call i8* @__cxa_begin_catch(i8* %53) #10\l  %55 = icmp eq %\"class.std::vector\"* %6, %2\l  br i1 %55, label %66, label %56\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2b3ea0:s0 -> Node0x55b22b2d9530;
	Node0x55b22b2b3ea0:s1 -> Node0x55b22b2d9580;
	Node0x55b22b2d9580 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%56:\l56:                                               \l  %57 = phi %\"class.std::vector\"* [ %64, %63 ], [ %2, %51 ]\l  %58 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %57, i64 0, i32 0, i32 0, i32 0, i32 0\l  %59 = load i32*, i32** %58, align 8, !tbaa !8\l  %60 = icmp eq i32* %59, null\l  br i1 %60, label %63, label %61\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2d9580:s0 -> Node0x55b22b2d9680;
	Node0x55b22b2d9580:s1 -> Node0x55b22b2d99a0;
	Node0x55b22b2d99a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70",label="{%61:\l61:                                               \l  %62 = bitcast i32* %59 to i8*\l  call void @_ZdlPv(i8* nonnull %62) #10\l  br label %63\l}"];
	Node0x55b22b2d99a0 -> Node0x55b22b2d9680;
	Node0x55b22b2d9680 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{%63:\l63:                                               \l  %64 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %57, i64 1\l  %65 = icmp eq %\"class.std::vector\"* %64, %6\l  br i1 %65, label %66, label %56, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x55b22b2d9680:s0 -> Node0x55b22b2d9530;
	Node0x55b22b2d9680:s1 -> Node0x55b22b2d9580;
	Node0x55b22b2d9530 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%66:\l66:                                               \l  invoke void @__cxa_rethrow() #11\l          to label %75 unwind label %69\l}"];
	Node0x55b22b2d9530 -> Node0x55b22b2d9e70;
	Node0x55b22b2d9530 -> Node0x55b22b2d9ec0;
	Node0x55b22b2b1a40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%67:\l67:                                               \l  %68 = phi %\"class.std::vector\"* [ %2, %3 ], [ %45, %41 ]\l  ret %\"class.std::vector\"* %68\l}"];
	Node0x55b22b2d9ec0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%69:\l69:                                               \l  %70 = landingpad \{ i8*, i32 \}\l          cleanup\l  invoke void @__cxa_end_catch()\l          to label %71 unwind label %72\l}"];
	Node0x55b22b2d9ec0 -> Node0x55b22b2da1b0;
	Node0x55b22b2d9ec0 -> Node0x55b22b2da200;
	Node0x55b22b2da1b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f5c1a970",label="{%71:\l71:                                               \l  resume \{ i8*, i32 \} %70\l}"];
	Node0x55b22b2da200 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#96b7ff70",label="{%72:\l72:                                               \l  %73 = landingpad \{ i8*, i32 \}\l          catch i8* null\l  %74 = extractvalue \{ i8*, i32 \} %73, 0\l  call void @__clang_call_terminate(i8* %74) #13\l  unreachable\l}"];
	Node0x55b22b2d9e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#536edd70",label="{%75:\l75:                                               \l  unreachable\l}"];
}
