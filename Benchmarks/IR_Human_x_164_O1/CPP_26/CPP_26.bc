; ModuleID = '../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z17remove_duplicatesSt6vectorIiSaIiEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::vector", align 8
  %4 = alloca %"class.std::vector", align 8
  %5 = bitcast %"class.std::vector"* %3 to i8*
  %6 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7
  %7 = bitcast %"class.std::vector"* %4 to i8*
  %8 = bitcast %"class.std::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %8, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  %16 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 2
  %17 = bitcast %"class.std::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %17, i8 0, i64 24, i1 false)
  %18 = load i32*, i32** %9, align 8, !tbaa !3
  %19 = load i32*, i32** %10, align 8, !tbaa !8
  %20 = icmp eq i32* %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %177, %2
  %22 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %26 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %28 = load i32*, i32** %22, align 8, !tbaa !3
  %29 = load i32*, i32** %23, align 8, !tbaa !8
  %30 = icmp eq i32* %28, %29
  br i1 %30, label %186, label %199

31:                                               ; preds = %2, %177
  %32 = phi i64 [ %178, %177 ], [ 0, %2 ]
  %33 = phi i32* [ %180, %177 ], [ %19, %2 ]
  %34 = load i32*, i32** %11, align 8, !tbaa !9
  %35 = load i32*, i32** %12, align 8, !tbaa !9
  %36 = getelementptr inbounds i32, i32* %33, i64 %32
  %37 = ptrtoint i32* %35 to i64
  %38 = ptrtoint i32* %34 to i64
  %39 = sub i64 %37, %38
  %40 = icmp sgt i64 %39, 15
  br i1 %40, label %41, label %65

41:                                               ; preds = %31
  %42 = ashr i64 %39, 4
  %43 = load i32, i32* %36, align 4, !tbaa !10
  br label %44

44:                                               ; preds = %61, %41
  %45 = phi i64 [ %42, %41 ], [ %63, %61 ]
  %46 = phi i32* [ %34, %41 ], [ %62, %61 ]
  %47 = load i32, i32* %46, align 4, !tbaa !10
  %48 = icmp eq i32 %47, %43
  br i1 %48, label %95, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds i32, i32* %46, i64 1
  %51 = load i32, i32* %50, align 4, !tbaa !10
  %52 = icmp eq i32 %51, %43
  br i1 %52, label %93, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds i32, i32* %46, i64 2
  %55 = load i32, i32* %54, align 4, !tbaa !10
  %56 = icmp eq i32 %55, %43
  br i1 %56, label %91, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds i32, i32* %46, i64 3
  %59 = load i32, i32* %58, align 4, !tbaa !10
  %60 = icmp eq i32 %59, %43
  br i1 %60, label %89, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds i32, i32* %46, i64 4
  %63 = add nsw i64 %45, -1
  %64 = icmp sgt i64 %45, 1
  br i1 %64, label %44, label %65, !llvm.loop !12

65:                                               ; preds = %61, %31
  %66 = phi i32* [ %34, %31 ], [ %62, %61 ]
  %67 = ptrtoint i32* %66 to i64
  %68 = sub i64 %37, %67
  %69 = ashr exact i64 %68, 2
  switch i64 %69, label %88 [
    i64 3, label %70
    i64 2, label %76
    i64 1, label %83
  ]

70:                                               ; preds = %65
  %71 = load i32, i32* %66, align 4, !tbaa !10
  %72 = load i32, i32* %36, align 4, !tbaa !10
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %95, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds i32, i32* %66, i64 1
  br label %76

76:                                               ; preds = %74, %65
  %77 = phi i32* [ %66, %65 ], [ %75, %74 ]
  %78 = load i32, i32* %77, align 4, !tbaa !10
  %79 = load i32, i32* %36, align 4, !tbaa !10
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %95, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds i32, i32* %77, i64 1
  br label %83

83:                                               ; preds = %81, %65
  %84 = phi i32* [ %66, %65 ], [ %82, %81 ]
  %85 = load i32, i32* %84, align 4, !tbaa !10
  %86 = load i32, i32* %36, align 4, !tbaa !10
  %87 = icmp eq i32 %85, %86
  br i1 %87, label %95, label %88

88:                                               ; preds = %83, %65
  br label %95

89:                                               ; preds = %57
  %90 = getelementptr inbounds i32, i32* %46, i64 3
  br label %95

91:                                               ; preds = %53
  %92 = getelementptr inbounds i32, i32* %46, i64 2
  br label %95

93:                                               ; preds = %49
  %94 = getelementptr inbounds i32, i32* %46, i64 1
  br label %95

95:                                               ; preds = %44, %89, %91, %93, %88, %83, %76, %70
  %96 = phi i32* [ %35, %88 ], [ %66, %70 ], [ %77, %76 ], [ %84, %83 ], [ %90, %89 ], [ %92, %91 ], [ %94, %93 ], [ %46, %44 ]
  %97 = icmp eq i32* %96, %35
  br i1 %97, label %98, label %177

98:                                               ; preds = %95
  %99 = load i32*, i32** %13, align 8, !tbaa !9
  %100 = load i32*, i32** %14, align 8, !tbaa !9
  %101 = ptrtoint i32* %100 to i64
  %102 = ptrtoint i32* %99 to i64
  %103 = sub i64 %101, %102
  %104 = icmp sgt i64 %103, 15
  br i1 %104, label %105, label %129

105:                                              ; preds = %98
  %106 = ashr i64 %103, 4
  %107 = load i32, i32* %36, align 4, !tbaa !10
  br label %108

108:                                              ; preds = %125, %105
  %109 = phi i64 [ %106, %105 ], [ %127, %125 ]
  %110 = phi i32* [ %99, %105 ], [ %126, %125 ]
  %111 = load i32, i32* %110, align 4, !tbaa !10
  %112 = icmp eq i32 %111, %107
  br i1 %112, label %159, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds i32, i32* %110, i64 1
  %115 = load i32, i32* %114, align 4, !tbaa !10
  %116 = icmp eq i32 %115, %107
  br i1 %116, label %157, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds i32, i32* %110, i64 2
  %119 = load i32, i32* %118, align 4, !tbaa !10
  %120 = icmp eq i32 %119, %107
  br i1 %120, label %155, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds i32, i32* %110, i64 3
  %123 = load i32, i32* %122, align 4, !tbaa !10
  %124 = icmp eq i32 %123, %107
  br i1 %124, label %153, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds i32, i32* %110, i64 4
  %127 = add nsw i64 %109, -1
  %128 = icmp sgt i64 %109, 1
  br i1 %128, label %108, label %129, !llvm.loop !12

129:                                              ; preds = %125, %98
  %130 = phi i32* [ %99, %98 ], [ %126, %125 ]
  %131 = ptrtoint i32* %130 to i64
  %132 = sub i64 %101, %131
  %133 = ashr exact i64 %132, 2
  switch i64 %133, label %152 [
    i64 3, label %134
    i64 2, label %140
    i64 1, label %147
  ]

134:                                              ; preds = %129
  %135 = load i32, i32* %130, align 4, !tbaa !10
  %136 = load i32, i32* %36, align 4, !tbaa !10
  %137 = icmp eq i32 %135, %136
  br i1 %137, label %159, label %138

138:                                              ; preds = %134
  %139 = getelementptr inbounds i32, i32* %130, i64 1
  br label %140

140:                                              ; preds = %138, %129
  %141 = phi i32* [ %130, %129 ], [ %139, %138 ]
  %142 = load i32, i32* %141, align 4, !tbaa !10
  %143 = load i32, i32* %36, align 4, !tbaa !10
  %144 = icmp eq i32 %142, %143
  br i1 %144, label %159, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds i32, i32* %141, i64 1
  br label %147

147:                                              ; preds = %145, %129
  %148 = phi i32* [ %130, %129 ], [ %146, %145 ]
  %149 = load i32, i32* %148, align 4, !tbaa !10
  %150 = load i32, i32* %36, align 4, !tbaa !10
  %151 = icmp eq i32 %149, %150
  br i1 %151, label %159, label %152

152:                                              ; preds = %147, %129
  br label %159

153:                                              ; preds = %121
  %154 = getelementptr inbounds i32, i32* %110, i64 3
  br label %159

155:                                              ; preds = %117
  %156 = getelementptr inbounds i32, i32* %110, i64 2
  br label %159

157:                                              ; preds = %113
  %158 = getelementptr inbounds i32, i32* %110, i64 1
  br label %159

159:                                              ; preds = %108, %153, %155, %157, %152, %147, %140, %134
  %160 = phi i32* [ %100, %152 ], [ %130, %134 ], [ %141, %140 ], [ %148, %147 ], [ %154, %153 ], [ %156, %155 ], [ %158, %157 ], [ %110, %108 ]
  %161 = icmp eq i32* %160, %100
  br i1 %161, label %168, label %162

162:                                              ; preds = %159
  %163 = load i32*, i32** %15, align 8, !tbaa !15
  %164 = icmp eq i32* %35, %163
  br i1 %164, label %165, label %172

165:                                              ; preds = %162
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %4, i32* %35, i32* nonnull align 4 dereferenceable(4) %36)
          to label %177 unwind label %166

166:                                              ; preds = %171, %165
  %167 = landingpad { i8*, i32 }
          cleanup
  br label %285

168:                                              ; preds = %159
  %169 = load i32*, i32** %16, align 8, !tbaa !15
  %170 = icmp eq i32* %100, %169
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %3, i32* %100, i32* nonnull align 4 dereferenceable(4) %36)
          to label %177 unwind label %166

172:                                              ; preds = %168, %162
  %173 = phi i32* [ %35, %162 ], [ %100, %168 ]
  %174 = phi i32** [ %12, %162 ], [ %14, %168 ]
  %175 = load i32, i32* %36, align 4, !tbaa !10
  store i32 %175, i32* %173, align 4, !tbaa !10
  %176 = getelementptr inbounds i32, i32* %173, i64 1
  store i32* %176, i32** %174, align 8, !tbaa !3
  br label %177

177:                                              ; preds = %172, %171, %165, %95
  %178 = add nuw i64 %32, 1
  %179 = load i32*, i32** %9, align 8, !tbaa !3
  %180 = load i32*, i32** %10, align 8, !tbaa !8
  %181 = ptrtoint i32* %179 to i64
  %182 = ptrtoint i32* %180 to i64
  %183 = sub i64 %181, %182
  %184 = ashr exact i64 %183, 2
  %185 = icmp ugt i64 %184, %178
  br i1 %185, label %31, label %21, !llvm.loop !16

186:                                              ; preds = %276, %21
  %187 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %188 = load i32*, i32** %187, align 8, !tbaa !8
  %189 = icmp eq i32* %188, null
  br i1 %189, label %192, label %190

190:                                              ; preds = %186
  %191 = bitcast i32* %188 to i8*
  call void @_ZdlPv(i8* nonnull %191) #7
  br label %192

192:                                              ; preds = %186, %190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  %193 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %194 = load i32*, i32** %193, align 8, !tbaa !8
  %195 = icmp eq i32* %194, null
  br i1 %195, label %198, label %196

196:                                              ; preds = %192
  %197 = bitcast i32* %194 to i8*
  call void @_ZdlPv(i8* nonnull %197) #7
  br label %198

198:                                              ; preds = %192, %196
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  ret void

199:                                              ; preds = %21, %276
  %200 = phi i64 [ %277, %276 ], [ 0, %21 ]
  %201 = phi i32* [ %279, %276 ], [ %29, %21 ]
  %202 = load i32*, i32** %24, align 8, !tbaa !9
  %203 = load i32*, i32** %25, align 8, !tbaa !9
  %204 = getelementptr inbounds i32, i32* %201, i64 %200
  %205 = ptrtoint i32* %203 to i64
  %206 = ptrtoint i32* %202 to i64
  %207 = sub i64 %205, %206
  %208 = icmp sgt i64 %207, 15
  br i1 %208, label %209, label %233

209:                                              ; preds = %199
  %210 = ashr i64 %207, 4
  %211 = load i32, i32* %204, align 4, !tbaa !10
  br label %212

212:                                              ; preds = %229, %209
  %213 = phi i64 [ %210, %209 ], [ %231, %229 ]
  %214 = phi i32* [ %202, %209 ], [ %230, %229 ]
  %215 = load i32, i32* %214, align 4, !tbaa !10
  %216 = icmp eq i32 %215, %211
  br i1 %216, label %263, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds i32, i32* %214, i64 1
  %219 = load i32, i32* %218, align 4, !tbaa !10
  %220 = icmp eq i32 %219, %211
  br i1 %220, label %261, label %221

221:                                              ; preds = %217
  %222 = getelementptr inbounds i32, i32* %214, i64 2
  %223 = load i32, i32* %222, align 4, !tbaa !10
  %224 = icmp eq i32 %223, %211
  br i1 %224, label %259, label %225

225:                                              ; preds = %221
  %226 = getelementptr inbounds i32, i32* %214, i64 3
  %227 = load i32, i32* %226, align 4, !tbaa !10
  %228 = icmp eq i32 %227, %211
  br i1 %228, label %257, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds i32, i32* %214, i64 4
  %231 = add nsw i64 %213, -1
  %232 = icmp sgt i64 %213, 1
  br i1 %232, label %212, label %233, !llvm.loop !12

233:                                              ; preds = %229, %199
  %234 = phi i32* [ %202, %199 ], [ %230, %229 ]
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %205, %235
  %237 = ashr exact i64 %236, 2
  switch i64 %237, label %256 [
    i64 3, label %238
    i64 2, label %244
    i64 1, label %251
  ]

238:                                              ; preds = %233
  %239 = load i32, i32* %234, align 4, !tbaa !10
  %240 = load i32, i32* %204, align 4, !tbaa !10
  %241 = icmp eq i32 %239, %240
  br i1 %241, label %263, label %242

242:                                              ; preds = %238
  %243 = getelementptr inbounds i32, i32* %234, i64 1
  br label %244

244:                                              ; preds = %242, %233
  %245 = phi i32* [ %234, %233 ], [ %243, %242 ]
  %246 = load i32, i32* %245, align 4, !tbaa !10
  %247 = load i32, i32* %204, align 4, !tbaa !10
  %248 = icmp eq i32 %246, %247
  br i1 %248, label %263, label %249

249:                                              ; preds = %244
  %250 = getelementptr inbounds i32, i32* %245, i64 1
  br label %251

251:                                              ; preds = %249, %233
  %252 = phi i32* [ %234, %233 ], [ %250, %249 ]
  %253 = load i32, i32* %252, align 4, !tbaa !10
  %254 = load i32, i32* %204, align 4, !tbaa !10
  %255 = icmp eq i32 %253, %254
  br i1 %255, label %263, label %256

256:                                              ; preds = %251, %233
  br label %263

257:                                              ; preds = %225
  %258 = getelementptr inbounds i32, i32* %214, i64 3
  br label %263

259:                                              ; preds = %221
  %260 = getelementptr inbounds i32, i32* %214, i64 2
  br label %263

261:                                              ; preds = %217
  %262 = getelementptr inbounds i32, i32* %214, i64 1
  br label %263

263:                                              ; preds = %212, %257, %259, %261, %256, %251, %244, %238
  %264 = phi i32* [ %203, %256 ], [ %234, %238 ], [ %245, %244 ], [ %252, %251 ], [ %258, %257 ], [ %260, %259 ], [ %262, %261 ], [ %214, %212 ]
  %265 = icmp eq i32* %264, %203
  br i1 %265, label %266, label %276

266:                                              ; preds = %263
  %267 = load i32*, i32** %26, align 8, !tbaa !3
  %268 = load i32*, i32** %27, align 8, !tbaa !15
  %269 = icmp eq i32* %267, %268
  br i1 %269, label %273, label %270

270:                                              ; preds = %266
  %271 = load i32, i32* %204, align 4, !tbaa !10
  store i32 %271, i32* %267, align 4, !tbaa !10
  %272 = getelementptr inbounds i32, i32* %267, i64 1
  store i32* %272, i32** %26, align 8, !tbaa !3
  br label %276

273:                                              ; preds = %266
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %267, i32* nonnull align 4 dereferenceable(4) %204)
          to label %276 unwind label %274

274:                                              ; preds = %273
  %275 = landingpad { i8*, i32 }
          cleanup
  br label %285

276:                                              ; preds = %270, %273, %263
  %277 = add nuw i64 %200, 1
  %278 = load i32*, i32** %22, align 8, !tbaa !3
  %279 = load i32*, i32** %23, align 8, !tbaa !8
  %280 = ptrtoint i32* %278 to i64
  %281 = ptrtoint i32* %279 to i64
  %282 = sub i64 %280, %281
  %283 = ashr exact i64 %282, 2
  %284 = icmp ugt i64 %283, %277
  br i1 %284, label %199, label %186, !llvm.loop !17

285:                                              ; preds = %274, %166
  %286 = phi { i8*, i32 } [ %167, %166 ], [ %275, %274 ]
  %287 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %288 = load i32*, i32** %287, align 8, !tbaa !8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %285
  %291 = bitcast i32* %288 to i8*
  call void @_ZdlPv(i8* nonnull %291) #7
  br label %292

292:                                              ; preds = %285, %290
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7
  %293 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %294 = load i32*, i32** %293, align 8, !tbaa !8
  %295 = icmp eq i32* %294, null
  br i1 %295, label %298, label %296

296:                                              ; preds = %292
  %297 = bitcast i32* %294 to i8*
  call void @_ZdlPv(i8* nonnull %297) #7
  br label %298

298:                                              ; preds = %292, %296
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7
  %299 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %300 = load i32*, i32** %299, align 8, !tbaa !8
  %301 = icmp eq i32* %300, null
  br i1 %301, label %304, label %302

302:                                              ; preds = %298
  %303 = bitcast i32* %300 to i8*
  call void @_ZdlPv(i8* nonnull %303) #7
  br label %304

304:                                              ; preds = %298, %302
  resume { i8*, i32 } %286
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint i32* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %14
  %27 = icmp ugt i64 %21, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  call void @_ZSt17__throw_bad_allocv() #8
  unreachable

29:                                               ; preds = %26
  %30 = shl i64 %21, 2
  %31 = call noalias nonnull i8* @_Znwm(i64 %30) #9
  %32 = bitcast i8* %31 to i32*
  br label %33

33:                                               ; preds = %14, %29
  %34 = phi i32* [ %32, %29 ], [ null, %14 ]
  %35 = getelementptr inbounds i32, i32* %34, i64 %24
  %36 = load i32, i32* %2, align 4, !tbaa !10
  store i32 %36, i32* %35, align 4, !tbaa !10
  %37 = icmp sgt i64 %23, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = bitcast i32* %34 to i8*
  %40 = bitcast i32* %7 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %40, i64 %23, i1 false) #7
  br label %41

41:                                               ; preds = %33, %38
  %42 = getelementptr inbounds i32, i32* %35, i64 1
  %43 = sub i64 %8, %22
  %44 = icmp sgt i64 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = bitcast i32* %42 to i8*
  %47 = bitcast i32* %1 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %46, i8* align 4 %47, i64 %43, i1 false) #7
  br label %48

48:                                               ; preds = %41, %45
  %49 = icmp eq i32* %7, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %48
  %51 = bitcast i32* %7 to i8*
  call void @_ZdlPv(i8* nonnull %51) #7
  br label %52

52:                                               ; preds = %48, %50
  %53 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %54 = ashr exact i64 %43, 2
  %55 = getelementptr inbounds i32, i32* %42, i64 %54
  store i32* %34, i32** %6, align 8, !tbaa !8
  store i32* %55, i32** %4, align 8, !tbaa !3
  %56 = getelementptr inbounds i32, i32* %34, i64 %21
  store i32* %56, i32** %53, align 8, !tbaa !15
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!5, !5, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = distinct !{!12, !13, !14}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = !{!4, !5, i64 16}
!16 = distinct !{!16, !13, !14}
!17 = distinct !{!17, !13, !14}
