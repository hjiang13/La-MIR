; ModuleID = '../../Human_xBenchmarks_164/CPP_4/CPP_4.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_4/CPP_4.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local float @_Z23mean_absolute_deviationSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8, !tbaa !8
  %6 = ptrtoint float* %3 to i64
  %7 = ptrtoint float* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %1
  %12 = call i64 @llvm.umax.i64(i64 %9, i64 1)
  br label %13

13:                                               ; preds = %11, %13
  %14 = phi i64 [ 0, %11 ], [ %19, %13 ]
  %15 = phi float [ 0.000000e+00, %11 ], [ %18, %13 ]
  %16 = getelementptr inbounds float, float* %5, i64 %14
  %17 = load float, float* %16, align 4, !tbaa !9
  %18 = fadd float %15, %17
  %19 = add nuw nsw i64 %14, 1
  %20 = icmp eq i64 %19, %12
  br i1 %20, label %21, label %13, !llvm.loop !11

21:                                               ; preds = %13, %1
  %22 = phi float [ 0.000000e+00, %1 ], [ %18, %13 ]
  %23 = uitofp i64 %9 to float
  %24 = fdiv float %22, %23
  %25 = icmp eq i64 %8, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = call i64 @llvm.umax.i64(i64 %9, i64 1)
  br label %28

28:                                               ; preds = %26, %28
  %29 = phi i64 [ 0, %26 ], [ %36, %28 ]
  %30 = phi float [ 0.000000e+00, %26 ], [ %35, %28 ]
  %31 = getelementptr inbounds float, float* %5, i64 %29
  %32 = load float, float* %31, align 4, !tbaa !9
  %33 = fsub float %32, %24
  %34 = call float @llvm.fabs.f32(float %33) #3
  %35 = fadd float %30, %34
  %36 = add nuw nsw i64 %29, 1
  %37 = icmp eq i64 %36, %27
  br i1 %37, label %38, label %28, !llvm.loop !14

38:                                               ; preds = %28, %21
  %39 = phi float [ 0.000000e+00, %21 ], [ %35, %28 ]
  %40 = fdiv float %39, %23
  ret float %40
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !12, !13}
