; ModuleID = '../../Human_xBenchmarks_164/CPP_16/CPP_16.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_16/CPP_16.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local i32 @_Z25count_distinct_charactersNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nocapture readonly %0) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8, !tbaa !10
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  %7 = icmp eq i64 %5, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %1, %8
  %9 = phi i8* [ %14, %8 ], [ %3, %1 ]
  %10 = load i8, i8* %9, align 1, !tbaa !11
  %11 = sext i8 %10 to i32
  %12 = call i32 @tolower(i32 %11)
  %13 = trunc i32 %12 to i8
  store i8 %13, i8* %9, align 1, !tbaa !11
  %14 = getelementptr inbounds i8, i8* %9, i64 1
  %15 = icmp eq i8* %14, %6
  br i1 %15, label %16, label %8, !llvm.loop !12

16:                                               ; preds = %8, %1
  %17 = load i64, i64* %4, align 8, !tbaa !10
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %32, label %19

19:                                               ; preds = %16, %100
  %20 = phi i64 [ %104, %100 ], [ 0, %16 ]
  %21 = phi i8* [ %103, %100 ], [ null, %16 ]
  %22 = phi i8* [ %102, %100 ], [ null, %16 ]
  %23 = phi i8* [ %101, %100 ], [ null, %16 ]
  %24 = ptrtoint i8* %22 to i64
  %25 = ptrtoint i8* %23 to i64
  %26 = sub i64 %24, %25
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %42, label %28

28:                                               ; preds = %19
  %29 = load i8*, i8** %2, align 8, !tbaa !3
  %30 = getelementptr inbounds i8, i8* %29, i64 %20
  %31 = load i8, i8* %30, align 1, !tbaa !11
  br label %46

32:                                               ; preds = %100, %16
  %33 = phi i8* [ null, %16 ], [ %101, %100 ]
  %34 = phi i8* [ null, %16 ], [ %102, %100 ]
  %35 = icmp eq i8* %33, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  call void @_ZdlPv(i8* nonnull %33) #6
  br label %37

37:                                               ; preds = %32, %36
  %38 = ptrtoint i8* %34 to i64
  %39 = ptrtoint i8* %33 to i64
  %40 = sub i64 %38, %39
  %41 = trunc i64 %40 to i32
  ret i32 %41

42:                                               ; preds = %46, %19
  %43 = phi i8 [ 0, %19 ], [ %52, %46 ]
  %44 = and i8 %43, 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %55, label %100

46:                                               ; preds = %28, %46
  %47 = phi i64 [ 0, %28 ], [ %53, %46 ]
  %48 = phi i8 [ 0, %28 ], [ %52, %46 ]
  %49 = getelementptr inbounds i8, i8* %23, i64 %47
  %50 = load i8, i8* %49, align 1, !tbaa !11
  %51 = icmp eq i8 %50, %31
  %52 = select i1 %51, i8 1, i8 %48
  %53 = add nuw nsw i64 %47, 1
  %54 = icmp eq i64 %53, %26
  br i1 %54, label %42, label %46, !llvm.loop !15

55:                                               ; preds = %42
  %56 = load i8*, i8** %2, align 8, !tbaa !3
  %57 = getelementptr inbounds i8, i8* %56, i64 %20
  %58 = icmp eq i8* %22, %21
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = load i8, i8* %57, align 1, !tbaa !11
  store i8 %60, i8* %22, align 1, !tbaa !11
  %61 = getelementptr inbounds i8, i8* %22, i64 1
  br label %100

62:                                               ; preds = %55
  %63 = icmp eq i64 %26, 9223372036854775807
  br i1 %63, label %64, label %66

64:                                               ; preds = %62
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %65 unwind label %95

65:                                               ; preds = %64
  unreachable

66:                                               ; preds = %62
  %67 = icmp eq i64 %26, 0
  %68 = select i1 %67, i64 1, i64 %26
  %69 = add i64 %68, %26
  %70 = icmp ult i64 %69, %26
  %71 = icmp slt i64 %69, 0
  %72 = or i1 %70, %71
  %73 = select i1 %72, i64 9223372036854775807, i64 %69
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %81, label %75

75:                                               ; preds = %66
  %76 = icmp slt i64 %73, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  invoke void @_ZSt17__throw_bad_allocv() #7
          to label %78 unwind label %95

78:                                               ; preds = %77
  unreachable

79:                                               ; preds = %75
  %80 = invoke noalias nonnull i8* @_Znwm(i64 %73) #8
          to label %81 unwind label %93

81:                                               ; preds = %79, %66
  %82 = phi i8* [ null, %66 ], [ %80, %79 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 %26
  %84 = load i8, i8* %57, align 1, !tbaa !11
  store i8 %84, i8* %83, align 1, !tbaa !11
  %85 = icmp sgt i64 %26, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %81
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %23, i64 %26, i1 false) #6
  br label %87

87:                                               ; preds = %86, %81
  %88 = getelementptr inbounds i8, i8* %83, i64 1
  %89 = icmp eq i8* %23, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %87
  call void @_ZdlPv(i8* nonnull %23) #6
  br label %91

91:                                               ; preds = %87, %90
  %92 = getelementptr inbounds i8, i8* %82, i64 %73
  br label %100

93:                                               ; preds = %79
  %94 = landingpad { i8*, i32 }
          cleanup
  br label %97

95:                                               ; preds = %64, %77
  %96 = landingpad { i8*, i32 }
          cleanup
  br label %97

97:                                               ; preds = %95, %93
  %98 = phi { i8*, i32 } [ %94, %93 ], [ %96, %95 ]
  %99 = icmp eq i8* %23, null
  br i1 %99, label %108, label %107

100:                                              ; preds = %91, %59, %42
  %101 = phi i8* [ %23, %42 ], [ %82, %91 ], [ %23, %59 ]
  %102 = phi i8* [ %22, %42 ], [ %88, %91 ], [ %61, %59 ]
  %103 = phi i8* [ %21, %42 ], [ %92, %91 ], [ %21, %59 ]
  %104 = add nuw i64 %20, 1
  %105 = load i64, i64* %4, align 8, !tbaa !10
  %106 = icmp ugt i64 %105, %104
  br i1 %106, label %19, label %32, !llvm.loop !16

107:                                              ; preds = %97
  call void @_ZdlPv(i8* nonnull %23) #6
  br label %108

108:                                              ; preds = %97, %107
  resume { i8*, i32 } %98
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn
declare dso_local i32 @tolower(i32) local_unnamed_addr #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { noreturn }
attributes #8 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !6, i64 0}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !5, i64 0, !9, i64 8, !7, i64 16}
!5 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!4, !9, i64 8}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !13, !14}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !13, !14}
!16 = distinct !{!16, !13, !14}
