; ModuleID = '../../Human_xBenchmarks_164/CPP_0/CPP_0.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_0/CPP_0.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local zeroext i1 @_Z18has_close_elementsSt6vectorIfSaIfEEf(%"class.std::vector"* nocapture readonly %0, float %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = load float*, float** %3, align 8, !tbaa !3
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load float*, float** %5, align 8, !tbaa !8
  %7 = ptrtoint float* %4 to i64
  %8 = ptrtoint float* %6 to i64
  %9 = sub i64 %7, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %2
  %13 = call i64 @llvm.umax.i64(i64 %10, i64 1)
  br label %17

14:                                               ; preds = %26, %17
  %15 = add i64 %19, 1
  %16 = icmp eq i64 %21, %13
  br i1 %16, label %36, label %17, !llvm.loop !9

17:                                               ; preds = %12, %14
  %18 = phi i64 [ 0, %12 ], [ %21, %14 ]
  %19 = phi i64 [ 1, %12 ], [ %15, %14 ]
  %20 = phi i1 [ true, %12 ], [ %22, %14 ]
  %21 = add nuw i64 %18, 1
  %22 = icmp ugt i64 %10, %21
  br i1 %22, label %23, label %14

23:                                               ; preds = %17
  %24 = getelementptr inbounds float, float* %6, i64 %18
  %25 = load float, float* %24, align 4, !tbaa !11
  br label %28

26:                                               ; preds = %28
  %27 = icmp ugt i64 %10, %35
  br i1 %27, label %28, label %14, !llvm.loop !13

28:                                               ; preds = %23, %26
  %29 = phi i64 [ %19, %23 ], [ %35, %26 ]
  %30 = getelementptr inbounds float, float* %6, i64 %29
  %31 = load float, float* %30, align 4, !tbaa !11
  %32 = fsub float %25, %31
  %33 = tail call float @llvm.fabs.f32(float %32) #3
  %34 = fcmp olt float %33, %1
  %35 = add i64 %29, 1
  br i1 %34, label %36, label %26

36:                                               ; preds = %14, %28, %2
  %37 = phi i1 [ false, %2 ], [ %20, %28 ], [ %22, %14 ]
  ret i1 %37
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!12, !12, i64 0}
!12 = !{!"float", !6, i64 0}
!13 = distinct !{!13, !10}
