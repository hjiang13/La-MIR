; ModuleID = '../../Human_xBenchmarks_164/CPP_35/CPP_35.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_35/CPP_35.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local float @_Z11max_elementSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8, !tbaa !8
  %6 = ptrtoint float* %3 to i64
  %7 = ptrtoint float* %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 2
  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)
  %13 = add i64 %12, -1
  %14 = and i64 %12, 3
  %15 = icmp ult i64 %13, 3
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = and i64 %12, -4
  br label %36

18:                                               ; preds = %36, %10
  %19 = phi float [ undef, %10 ], [ %58, %36 ]
  %20 = phi i64 [ 0, %10 ], [ %59, %36 ]
  %21 = phi float [ -1.000000e+04, %10 ], [ %58, %36 ]
  %22 = icmp eq i64 %14, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %18, %23
  %24 = phi i64 [ %31, %23 ], [ %20, %18 ]
  %25 = phi float [ %30, %23 ], [ %21, %18 ]
  %26 = phi i64 [ %32, %23 ], [ %14, %18 ]
  %27 = getelementptr inbounds float, float* %5, i64 %24
  %28 = load float, float* %27, align 4, !tbaa !9
  %29 = fcmp olt float %25, %28
  %30 = select i1 %29, float %28, float %25
  %31 = add nuw nsw i64 %24, 1
  %32 = add i64 %26, -1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %23, !llvm.loop !11

34:                                               ; preds = %18, %23, %1
  %35 = phi float [ -1.000000e+04, %1 ], [ %19, %18 ], [ %30, %23 ]
  ret float %35

36:                                               ; preds = %36, %16
  %37 = phi i64 [ 0, %16 ], [ %59, %36 ]
  %38 = phi float [ -1.000000e+04, %16 ], [ %58, %36 ]
  %39 = phi i64 [ %17, %16 ], [ %60, %36 ]
  %40 = getelementptr inbounds float, float* %5, i64 %37
  %41 = load float, float* %40, align 4, !tbaa !9
  %42 = fcmp olt float %38, %41
  %43 = select i1 %42, float %41, float %38
  %44 = or i64 %37, 1
  %45 = getelementptr inbounds float, float* %5, i64 %44
  %46 = load float, float* %45, align 4, !tbaa !9
  %47 = fcmp olt float %43, %46
  %48 = select i1 %47, float %46, float %43
  %49 = or i64 %37, 2
  %50 = getelementptr inbounds float, float* %5, i64 %49
  %51 = load float, float* %50, align 4, !tbaa !9
  %52 = fcmp olt float %48, %51
  %53 = select i1 %52, float %51, float %48
  %54 = or i64 %37, 3
  %55 = getelementptr inbounds float, float* %5, i64 %54
  %56 = load float, float* %55, align 4, !tbaa !9
  %57 = fcmp olt float %53, %56
  %58 = select i1 %57, float %56, float %53
  %59 = add nuw nsw i64 %37, 4
  %60 = add i64 %39, -4
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %18, label %36, !llvm.loop !13
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #1

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
