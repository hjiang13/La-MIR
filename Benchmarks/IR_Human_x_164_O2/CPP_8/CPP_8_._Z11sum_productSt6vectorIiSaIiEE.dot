digraph "CFG for '_Z11sum_productSt6vectorIiSaIiEE' function" {
	label="CFG for '_Z11sum_productSt6vectorIiSaIiEE' function";

	Node0x562a874dede0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%2:\l  %3 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %4 = load i32*, i32** %3, align 8, !tbaa !3\l  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %6 = load i32*, i32** %5, align 8, !tbaa !8\l  %7 = ptrtoint i32* %4 to i64\l  %8 = ptrtoint i32* %6 to i64\l  %9 = sub i64 %7, %8\l  %10 = icmp eq i64 %9, 0\l  br i1 %10, label %91, label %11\l|{<s0>T|<s1>F}}"];
	Node0x562a874dede0:s0 -> Node0x562a874e0170;
	Node0x562a874dede0:s1 -> Node0x562a874e0720;
	Node0x562a874e0720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%11:\l11:                                               \l  %12 = ashr exact i64 %9, 2\l  %13 = call i64 @llvm.umax.i64(i64 %12, i64 1)\l  %14 = icmp ult i64 %13, 8\l  br i1 %14, label %87, label %15\l|{<s0>T|<s1>F}}"];
	Node0x562a874e0720:s0 -> Node0x562a874e0c50;
	Node0x562a874e0720:s1 -> Node0x562a874e0ca0;
	Node0x562a874e0ca0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%15:\l15:                                               \l  %16 = and i64 %13, -8\l  %17 = add i64 %16, -8\l  %18 = lshr exact i64 %17, 3\l  %19 = add nuw nsw i64 %18, 1\l  %20 = and i64 %19, 1\l  %21 = icmp eq i64 %17, 0\l  br i1 %21, label %55, label %22\l|{<s0>T|<s1>F}}"];
	Node0x562a874e0ca0:s0 -> Node0x562a874e1110;
	Node0x562a874e0ca0:s1 -> Node0x562a874e1160;
	Node0x562a874e1160 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%22:\l22:                                               \l  %23 = and i64 %19, 4611686018427387902\l  br label %24\l}"];
	Node0x562a874e1160 -> Node0x562a874e1360;
	Node0x562a874e1360 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%24:\l24:                                               \l  %25 = phi i64 [ 0, %22 ], [ %52, %24 ]\l  %26 = phi \<4 x i32\> [ zeroinitializer, %22 ], [ %48, %24 ]\l  %27 = phi \<4 x i32\> [ zeroinitializer, %22 ], [ %49, %24 ]\l  %28 = phi \<4 x i32\> [ \<i32 1, i32 1, i32 1, i32 1\>, %22 ], [ %50, %24 ]\l  %29 = phi \<4 x i32\> [ \<i32 1, i32 1, i32 1, i32 1\>, %22 ], [ %51, %24 ]\l  %30 = phi i64 [ %23, %22 ], [ %53, %24 ]\l  %31 = getelementptr inbounds i32, i32* %6, i64 %25\l  %32 = bitcast i32* %31 to \<4 x i32\>*\l  %33 = load \<4 x i32\>, \<4 x i32\>* %32, align 4, !tbaa !9\l  %34 = getelementptr inbounds i32, i32* %31, i64 4\l  %35 = bitcast i32* %34 to \<4 x i32\>*\l  %36 = load \<4 x i32\>, \<4 x i32\>* %35, align 4, !tbaa !9\l  %37 = add \<4 x i32\> %33, %26\l  %38 = add \<4 x i32\> %36, %27\l  %39 = mul \<4 x i32\> %33, %28\l  %40 = mul \<4 x i32\> %36, %29\l  %41 = or i64 %25, 8\l  %42 = getelementptr inbounds i32, i32* %6, i64 %41\l  %43 = bitcast i32* %42 to \<4 x i32\>*\l  %44 = load \<4 x i32\>, \<4 x i32\>* %43, align 4, !tbaa !9\l  %45 = getelementptr inbounds i32, i32* %42, i64 4\l  %46 = bitcast i32* %45 to \<4 x i32\>*\l  %47 = load \<4 x i32\>, \<4 x i32\>* %46, align 4, !tbaa !9\l  %48 = add \<4 x i32\> %44, %37\l  %49 = add \<4 x i32\> %47, %38\l  %50 = mul \<4 x i32\> %44, %39\l  %51 = mul \<4 x i32\> %47, %40\l  %52 = add nuw i64 %25, 16\l  %53 = add i64 %30, -2\l  %54 = icmp eq i64 %53, 0\l  br i1 %54, label %55, label %24, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x562a874e1360:s0 -> Node0x562a874e1110;
	Node0x562a874e1360:s1 -> Node0x562a874e1360;
	Node0x562a874e1110 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%55:\l55:                                               \l  %56 = phi \<4 x i32\> [ undef, %15 ], [ %48, %24 ]\l  %57 = phi \<4 x i32\> [ undef, %15 ], [ %49, %24 ]\l  %58 = phi \<4 x i32\> [ undef, %15 ], [ %50, %24 ]\l  %59 = phi \<4 x i32\> [ undef, %15 ], [ %51, %24 ]\l  %60 = phi i64 [ 0, %15 ], [ %52, %24 ]\l  %61 = phi \<4 x i32\> [ zeroinitializer, %15 ], [ %48, %24 ]\l  %62 = phi \<4 x i32\> [ zeroinitializer, %15 ], [ %49, %24 ]\l  %63 = phi \<4 x i32\> [ \<i32 1, i32 1, i32 1, i32 1\>, %15 ], [ %50, %24 ]\l  %64 = phi \<4 x i32\> [ \<i32 1, i32 1, i32 1, i32 1\>, %15 ], [ %51, %24 ]\l  %65 = icmp eq i64 %20, 0\l  br i1 %65, label %77, label %66\l|{<s0>T|<s1>F}}"];
	Node0x562a874e1110:s0 -> Node0x562a874e4c70;
	Node0x562a874e1110:s1 -> Node0x562a874e4cc0;
	Node0x562a874e4cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%66:\l66:                                               \l  %67 = getelementptr inbounds i32, i32* %6, i64 %60\l  %68 = bitcast i32* %67 to \<4 x i32\>*\l  %69 = load \<4 x i32\>, \<4 x i32\>* %68, align 4, !tbaa !9\l  %70 = getelementptr inbounds i32, i32* %67, i64 4\l  %71 = bitcast i32* %70 to \<4 x i32\>*\l  %72 = load \<4 x i32\>, \<4 x i32\>* %71, align 4, !tbaa !9\l  %73 = mul \<4 x i32\> %72, %64\l  %74 = mul \<4 x i32\> %69, %63\l  %75 = add \<4 x i32\> %72, %62\l  %76 = add \<4 x i32\> %69, %61\l  br label %77\l}"];
	Node0x562a874e4cc0 -> Node0x562a874e4c70;
	Node0x562a874e4c70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%77:\l77:                                               \l  %78 = phi \<4 x i32\> [ %56, %55 ], [ %76, %66 ]\l  %79 = phi \<4 x i32\> [ %57, %55 ], [ %75, %66 ]\l  %80 = phi \<4 x i32\> [ %58, %55 ], [ %74, %66 ]\l  %81 = phi \<4 x i32\> [ %59, %55 ], [ %73, %66 ]\l  %82 = mul \<4 x i32\> %81, %80\l  %83 = call i32 @llvm.vector.reduce.mul.v4i32(\<4 x i32\> %82)\l  %84 = add \<4 x i32\> %79, %78\l  %85 = call i32 @llvm.vector.reduce.add.v4i32(\<4 x i32\> %84)\l  %86 = icmp eq i64 %13, %16\l  br i1 %86, label %91, label %87\l|{<s0>T|<s1>F}}"];
	Node0x562a874e4c70:s0 -> Node0x562a874e0170;
	Node0x562a874e4c70:s1 -> Node0x562a874e0c50;
	Node0x562a874e0c50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%87:\l87:                                               \l  %88 = phi i64 [ 0, %11 ], [ %16, %77 ]\l  %89 = phi i32 [ 0, %11 ], [ %85, %77 ]\l  %90 = phi i32 [ 1, %11 ], [ %83, %77 ]\l  br label %105\l}"];
	Node0x562a874e0c50 -> Node0x562a874e5eb0;
	Node0x562a874e0170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%91:\l91:                                               \l  %92 = phi i32 [ 1, %2 ], [ %83, %77 ], [ %112, %105 ]\l  %93 = phi i32 [ 0, %2 ], [ %85, %77 ], [ %111, %105 ]\l  %94 = bitcast %\"class.std::vector\"* %0 to i8*\l  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %94, i8 0, i64 24, i1 false) #5\l  %95 = call noalias nonnull i8* @_Znwm(i64 8) #6\l  %96 = bitcast i8* %95 to i32*\l  %97 = bitcast %\"class.std::vector\"* %0 to i8**\l  store i8* %95, i8** %97, align 8, !tbaa !8\l  %98 = getelementptr inbounds i8, i8* %95, i64 8\l  %99 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %100 = bitcast i32** %99 to i8**\l  store i8* %98, i8** %100, align 8, !tbaa !14\l  store i32 %93, i32* %96, align 4\l  %101 = getelementptr inbounds i8, i8* %95, i64 4\l  %102 = bitcast i8* %101 to i32*\l  store i32 %92, i32* %102, align 4\l  %103 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"*\l... %0, i64 0, i32 0, i32 0, i32 0, i32 1\l  %104 = bitcast i32** %103 to i8**\l  store i8* %98, i8** %104, align 8, !tbaa !3\l  ret void\l}"];
	Node0x562a874e5eb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%105:\l105:                                              \l  %106 = phi i64 [ %113, %105 ], [ %88, %87 ]\l  %107 = phi i32 [ %111, %105 ], [ %89, %87 ]\l  %108 = phi i32 [ %112, %105 ], [ %90, %87 ]\l  %109 = getelementptr inbounds i32, i32* %6, i64 %106\l  %110 = load i32, i32* %109, align 4, !tbaa !9\l  %111 = add nsw i32 %110, %107\l  %112 = mul nsw i32 %110, %108\l  %113 = add nuw nsw i64 %106, 1\l  %114 = icmp eq i64 %113, %13\l  br i1 %114, label %91, label %105, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x562a874e5eb0:s0 -> Node0x562a874e0170;
	Node0x562a874e5eb0:s1 -> Node0x562a874e5eb0;
}
