; ModuleID = '../../Human_xBenchmarks_164/CPP_25/CPP_25.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_25/CPP_25.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z9factorizei(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = icmp slt i32 %1, 4
  %7 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false)
  br i1 %6, label %12, label %51

8:                                                ; preds = %109
  %9 = icmp eq i32* %112, %111
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  store i32 %113, i32* %112, align 4, !tbaa !3
  %11 = getelementptr inbounds i32, i32* %112, i64 1
  store i32* %11, i32** %3, align 8, !tbaa !7
  br label %120

12:                                               ; preds = %2, %8
  %13 = phi i32 [ %113, %8 ], [ %1, %2 ]
  %14 = phi i32* [ %111, %8 ], [ null, %2 ]
  %15 = phi i32* [ %110, %8 ], [ null, %2 ]
  %16 = ptrtoint i32* %14 to i64
  %17 = ptrtoint i32* %15 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp eq i64 %18, 9223372036854775804
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %22 unwind label %118

22:                                               ; preds = %21
  unreachable

23:                                               ; preds = %12
  %24 = icmp eq i64 %18, 0
  %25 = select i1 %24, i64 1, i64 %19
  %26 = add nsw i64 %25, %19
  %27 = icmp ult i64 %26, %19
  %28 = icmp ugt i64 %26, 2305843009213693951
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 2305843009213693951, i64 %26
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %23
  %33 = shl nuw nsw i64 %30, 2
  %34 = invoke noalias nonnull i8* @_Znwm(i64 %33) #7
          to label %35 unwind label %118

35:                                               ; preds = %32
  %36 = bitcast i8* %34 to i32*
  br label %37

37:                                               ; preds = %35, %23
  %38 = phi i32* [ %36, %35 ], [ null, %23 ]
  %39 = getelementptr inbounds i32, i32* %38, i64 %19
  store i32 %13, i32* %39, align 4, !tbaa !3
  %40 = icmp sgt i64 %18, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %37
  %42 = bitcast i32* %38 to i8*
  %43 = bitcast i32* %15 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %43, i64 %18, i1 false) #8
  br label %44

44:                                               ; preds = %37, %41
  %45 = getelementptr inbounds i32, i32* %39, i64 1
  %46 = icmp eq i32* %15, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %44
  %48 = bitcast i32* %15 to i8*
  tail call void @_ZdlPv(i8* nonnull %48) #8
  br label %49

49:                                               ; preds = %47, %44
  store i32* %38, i32** %5, align 8, !tbaa !10
  store i32* %45, i32** %3, align 8, !tbaa !7
  %50 = getelementptr inbounds i32, i32* %38, i64 %30
  store i32* %50, i32** %4, align 8, !tbaa !11
  br label %120

51:                                               ; preds = %2, %109
  %52 = phi i32* [ %110, %109 ], [ null, %2 ]
  %53 = phi i32* [ %111, %109 ], [ null, %2 ]
  %54 = phi i32* [ %112, %109 ], [ null, %2 ]
  %55 = phi i32 [ %115, %109 ], [ 2, %2 ]
  %56 = phi i32 [ %113, %109 ], [ %1, %2 ]
  %57 = srem i32 %56, %55
  %58 = sdiv i32 %56, %55
  %59 = icmp eq i32 %57, 0
  br i1 %59, label %60, label %109

60:                                               ; preds = %51
  %61 = icmp eq i32* %54, %53
  br i1 %61, label %64, label %62

62:                                               ; preds = %60
  store i32 %55, i32* %54, align 4, !tbaa !3
  %63 = getelementptr inbounds i32, i32* %54, i64 1
  store i32* %63, i32** %3, align 8, !tbaa !7
  br label %100

64:                                               ; preds = %60
  %65 = ptrtoint i32* %53 to i64
  %66 = ptrtoint i32* %52 to i64
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 2
  %69 = icmp eq i64 %67, 9223372036854775804
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %71 unwind label %107

71:                                               ; preds = %70
  unreachable

72:                                               ; preds = %64
  %73 = icmp eq i64 %67, 0
  %74 = select i1 %73, i64 1, i64 %68
  %75 = add nsw i64 %74, %68
  %76 = icmp ult i64 %75, %68
  %77 = icmp ugt i64 %75, 2305843009213693951
  %78 = or i1 %76, %77
  %79 = select i1 %78, i64 2305843009213693951, i64 %75
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %86, label %81

81:                                               ; preds = %72
  %82 = shl nuw nsw i64 %79, 2
  %83 = invoke noalias nonnull i8* @_Znwm(i64 %82) #7
          to label %84 unwind label %105

84:                                               ; preds = %81
  %85 = bitcast i8* %83 to i32*
  br label %86

86:                                               ; preds = %84, %72
  %87 = phi i32* [ %85, %84 ], [ null, %72 ]
  %88 = getelementptr inbounds i32, i32* %87, i64 %68
  store i32 %55, i32* %88, align 4, !tbaa !3
  %89 = icmp sgt i64 %67, 0
  br i1 %89, label %90, label %93

90:                                               ; preds = %86
  %91 = bitcast i32* %87 to i8*
  %92 = bitcast i32* %52 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %92, i64 %67, i1 false) #8
  br label %93

93:                                               ; preds = %86, %90
  %94 = getelementptr inbounds i32, i32* %88, i64 1
  %95 = icmp eq i32* %52, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %93
  %97 = bitcast i32* %52 to i8*
  tail call void @_ZdlPv(i8* nonnull %97) #8
  br label %98

98:                                               ; preds = %96, %93
  store i32* %87, i32** %5, align 8, !tbaa !10
  store i32* %94, i32** %3, align 8, !tbaa !7
  %99 = getelementptr inbounds i32, i32* %87, i64 %79
  store i32* %99, i32** %4, align 8, !tbaa !11
  br label %100

100:                                              ; preds = %98, %62
  %101 = phi i32* [ %87, %98 ], [ %52, %62 ]
  %102 = phi i32* [ %99, %98 ], [ %53, %62 ]
  %103 = phi i32* [ %94, %98 ], [ %63, %62 ]
  %104 = add nsw i32 %55, -1
  br label %109

105:                                              ; preds = %81
  %106 = landingpad { i8*, i32 }
          cleanup
  br label %121

107:                                              ; preds = %70
  %108 = landingpad { i8*, i32 }
          cleanup
  br label %121

109:                                              ; preds = %51, %100
  %110 = phi i32* [ %101, %100 ], [ %52, %51 ]
  %111 = phi i32* [ %102, %100 ], [ %53, %51 ]
  %112 = phi i32* [ %103, %100 ], [ %54, %51 ]
  %113 = phi i32 [ %58, %100 ], [ %56, %51 ]
  %114 = phi i32 [ %104, %100 ], [ %55, %51 ]
  %115 = add nsw i32 %114, 1
  %116 = mul nsw i32 %115, %115
  %117 = icmp sgt i32 %116, %113
  br i1 %117, label %8, label %51, !llvm.loop !12

118:                                              ; preds = %32, %21
  %119 = landingpad { i8*, i32 }
          cleanup
  br label %121

120:                                              ; preds = %49, %10
  ret void

121:                                              ; preds = %105, %107, %118
  %122 = phi i32* [ %15, %118 ], [ %52, %105 ], [ %52, %107 ]
  %123 = phi { i8*, i32 } [ %119, %118 ], [ %106, %105 ], [ %108, %107 ]
  %124 = icmp eq i32* %122, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %121
  %126 = bitcast i32* %122 to i8*
  tail call void @_ZdlPv(i8* nonnull %126) #8
  br label %127

127:                                              ; preds = %121, %125
  resume { i8*, i32 } %123
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { noreturn }
attributes #7 = { allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !9, i64 8}
!8 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !9, i64 0, !9, i64 8, !9, i64 16}
!9 = !{!"any pointer", !5, i64 0}
!10 = !{!8, !9, i64 0}
!11 = !{!8, !9, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
