; ModuleID = '../../Human_xBenchmarks_164/CPP_129/CPP_129.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_129/CPP_129.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::vector.0" = type { %"struct.std::_Vector_base.1" }
%"struct.std::_Vector_base.1" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::vector<int>, std::allocator<std::vector<int>>>::_Vector_impl_data" = type { %"class.std::vector"*, %"class.std::vector"*, %"class.std::vector"* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z7minPathSt6vectorIS_IiSaIiEESaIS1_EEi(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector.0"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::vector"*, %"class.std::vector"** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector.0", %"class.std::vector.0"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::vector"*, %"class.std::vector"** %6, align 8, !tbaa !8
  %8 = ptrtoint %"class.std::vector"* %5 to i64
  %9 = ptrtoint %"class.std::vector"* %7 to i64
  %10 = sub i64 %8, %9
  %11 = sdiv exact i64 %10, 24
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %111, label %13

13:                                               ; preds = %3
  %14 = call i64 @llvm.umax.i64(i64 %11, i64 1)
  br label %15

15:                                               ; preds = %13, %92
  %16 = phi i64 [ 0, %13 ], [ %95, %92 ]
  %17 = phi i32 [ undef, %13 ], [ %94, %92 ]
  %18 = phi i32 [ undef, %13 ], [ %93, %92 ]
  %19 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 %16, i32 0, i32 0, i32 0, i32 1
  %20 = load i32*, i32** %19, align 8, !tbaa !9
  %21 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 %16, i32 0, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8, !tbaa !11
  %23 = ptrtoint i32* %20 to i64
  %24 = ptrtoint i32* %22 to i64
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %92, label %27

27:                                               ; preds = %15
  %28 = ashr exact i64 %25, 2
  %29 = call i64 @llvm.umax.i64(i64 %28, i64 1)
  %30 = trunc i64 %16 to i32
  %31 = add i64 %29, -1
  %32 = and i64 %29, 3
  %33 = icmp ult i64 %31, 3
  br i1 %33, label %71, label %34

34:                                               ; preds = %27
  %35 = and i64 %29, -4
  br label %36

36:                                               ; preds = %36, %34
  %37 = phi i64 [ 0, %34 ], [ %68, %36 ]
  %38 = phi i32 [ %17, %34 ], [ %67, %36 ]
  %39 = phi i32 [ %18, %34 ], [ %65, %36 ]
  %40 = phi i64 [ %35, %34 ], [ %69, %36 ]
  %41 = getelementptr inbounds i32, i32* %22, i64 %37
  %42 = load i32, i32* %41, align 4, !tbaa !12
  %43 = icmp eq i32 %42, 1
  %44 = trunc i64 %37 to i32
  %45 = select i1 %43, i32 %44, i32 %38
  %46 = or i64 %37, 1
  %47 = getelementptr inbounds i32, i32* %22, i64 %46
  %48 = load i32, i32* %47, align 4, !tbaa !12
  %49 = icmp eq i32 %48, 1
  %50 = trunc i64 %46 to i32
  %51 = select i1 %49, i32 %50, i32 %45
  %52 = or i64 %37, 2
  %53 = getelementptr inbounds i32, i32* %22, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !12
  %55 = icmp eq i32 %54, 1
  %56 = trunc i64 %52 to i32
  %57 = select i1 %55, i32 %56, i32 %51
  %58 = or i64 %37, 3
  %59 = getelementptr inbounds i32, i32* %22, i64 %58
  %60 = load i32, i32* %59, align 4, !tbaa !12
  %61 = icmp eq i32 %60, 1
  %62 = select i1 %61, i1 true, i1 %55
  %63 = select i1 %62, i1 true, i1 %49
  %64 = select i1 %63, i1 true, i1 %43
  %65 = select i1 %64, i32 %30, i32 %39
  %66 = trunc i64 %58 to i32
  %67 = select i1 %61, i32 %66, i32 %57
  %68 = add nuw nsw i64 %37, 4
  %69 = add i64 %40, -4
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %36, !llvm.loop !14

71:                                               ; preds = %36, %27
  %72 = phi i32 [ undef, %27 ], [ %65, %36 ]
  %73 = phi i32 [ undef, %27 ], [ %67, %36 ]
  %74 = phi i64 [ 0, %27 ], [ %68, %36 ]
  %75 = phi i32 [ %17, %27 ], [ %67, %36 ]
  %76 = phi i32 [ %18, %27 ], [ %65, %36 ]
  %77 = icmp eq i64 %32, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %71, %78
  %79 = phi i64 [ %89, %78 ], [ %74, %71 ]
  %80 = phi i32 [ %88, %78 ], [ %75, %71 ]
  %81 = phi i32 [ %86, %78 ], [ %76, %71 ]
  %82 = phi i64 [ %90, %78 ], [ %32, %71 ]
  %83 = getelementptr inbounds i32, i32* %22, i64 %79
  %84 = load i32, i32* %83, align 4, !tbaa !12
  %85 = icmp eq i32 %84, 1
  %86 = select i1 %85, i32 %30, i32 %81
  %87 = trunc i64 %79 to i32
  %88 = select i1 %85, i32 %87, i32 %80
  %89 = add nuw nsw i64 %79, 1
  %90 = add i64 %82, -1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %78, !llvm.loop !16

92:                                               ; preds = %71, %78, %15
  %93 = phi i32 [ %18, %15 ], [ %72, %71 ], [ %86, %78 ]
  %94 = phi i32 [ %17, %15 ], [ %73, %71 ], [ %88, %78 ]
  %95 = add nuw nsw i64 %16, 1
  %96 = icmp eq i64 %95, %14
  br i1 %96, label %97, label %15, !llvm.loop !18

97:                                               ; preds = %92
  %98 = mul i64 %11, %11
  %99 = trunc i64 %98 to i32
  %100 = icmp sgt i32 %93, 0
  br i1 %100, label %101, label %111

101:                                              ; preds = %97
  %102 = add nsw i32 %93, -1
  %103 = zext i32 %102 to i64
  %104 = sext i32 %94 to i64
  %105 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 %103, i32 0, i32 0, i32 0, i32 0
  %106 = load i32*, i32** %105, align 8, !tbaa !11
  %107 = getelementptr inbounds i32, i32* %106, i64 %104
  %108 = load i32, i32* %107, align 4, !tbaa !12
  %109 = icmp slt i32 %108, %99
  %110 = select i1 %109, i32 %108, i32 %99
  br label %111

111:                                              ; preds = %3, %101, %97
  %112 = phi i32 [ %94, %97 ], [ %94, %101 ], [ undef, %3 ]
  %113 = phi i32 [ %93, %97 ], [ %93, %101 ], [ undef, %3 ]
  %114 = phi i32 [ %99, %97 ], [ %110, %101 ], [ 0, %3 ]
  %115 = sext i32 %113 to i64
  %116 = add nsw i64 %11, -1
  %117 = icmp ugt i64 %116, %115
  br i1 %117, label %118, label %128

118:                                              ; preds = %111
  %119 = add nsw i32 %113, 1
  %120 = sext i32 %119 to i64
  %121 = sext i32 %112 to i64
  %122 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 %120, i32 0, i32 0, i32 0, i32 0
  %123 = load i32*, i32** %122, align 8, !tbaa !11
  %124 = getelementptr inbounds i32, i32* %123, i64 %121
  %125 = load i32, i32* %124, align 4, !tbaa !12
  %126 = icmp slt i32 %125, %114
  %127 = select i1 %126, i32 %125, i32 %114
  br label %128

128:                                              ; preds = %118, %111
  %129 = phi i32 [ %114, %111 ], [ %127, %118 ]
  %130 = icmp sgt i32 %112, 0
  br i1 %130, label %131, label %140

131:                                              ; preds = %128
  %132 = add nsw i32 %112, -1
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 %115, i32 0, i32 0, i32 0, i32 0
  %135 = load i32*, i32** %134, align 8, !tbaa !11
  %136 = getelementptr inbounds i32, i32* %135, i64 %133
  %137 = load i32, i32* %136, align 4, !tbaa !12
  %138 = icmp slt i32 %137, %129
  %139 = select i1 %138, i32 %137, i32 %129
  br label %140

140:                                              ; preds = %131, %128
  %141 = phi i32 [ %129, %128 ], [ %139, %131 ]
  %142 = sext i32 %112 to i64
  %143 = icmp ugt i64 %116, %142
  br i1 %143, label %144, label %153

144:                                              ; preds = %140
  %145 = add nsw i32 %112, 1
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %7, i64 %115, i32 0, i32 0, i32 0, i32 0
  %148 = load i32*, i32** %147, align 8, !tbaa !11
  %149 = getelementptr inbounds i32, i32* %148, i64 %146
  %150 = load i32, i32* %149, align 4, !tbaa !12
  %151 = icmp slt i32 %150, %141
  %152 = select i1 %151, i32 %150, i32 %141
  br label %153

153:                                              ; preds = %144, %140
  %154 = phi i32 [ %141, %140 ], [ %152, %144 ]
  %155 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %156 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %157 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %158 = icmp sgt i32 %2, 0
  %159 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %159, i8 0, i64 24, i1 false)
  br i1 %158, label %160, label %263

160:                                              ; preds = %153, %256
  %161 = phi i32* [ %257, %256 ], [ null, %153 ]
  %162 = phi i32* [ %258, %256 ], [ null, %153 ]
  %163 = phi i32* [ %259, %256 ], [ null, %153 ]
  %164 = phi i32* [ %260, %256 ], [ null, %153 ]
  %165 = phi i32 [ %261, %256 ], [ 0, %153 ]
  %166 = and i32 %165, 1
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %212

168:                                              ; preds = %160
  %169 = icmp eq i32* %164, %161
  br i1 %169, label %172, label %170

170:                                              ; preds = %168
  store i32 1, i32* %164, align 4, !tbaa !12
  %171 = getelementptr inbounds i32, i32* %164, i64 1
  store i32* %171, i32** %155, align 8, !tbaa !9
  br label %256

172:                                              ; preds = %168
  %173 = ptrtoint i32* %161 to i64
  %174 = ptrtoint i32* %162 to i64
  %175 = sub i64 %173, %174
  %176 = ashr exact i64 %175, 2
  %177 = icmp eq i64 %175, 9223372036854775804
  br i1 %177, label %178, label %180

178:                                              ; preds = %172
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %179 unwind label %210

179:                                              ; preds = %178
  unreachable

180:                                              ; preds = %172
  %181 = icmp eq i64 %175, 0
  %182 = select i1 %181, i64 1, i64 %176
  %183 = add nsw i64 %182, %176
  %184 = icmp ult i64 %183, %176
  %185 = icmp ugt i64 %183, 2305843009213693951
  %186 = or i1 %184, %185
  %187 = select i1 %186, i64 2305843009213693951, i64 %183
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %194, label %189

189:                                              ; preds = %180
  %190 = shl nuw nsw i64 %187, 2
  %191 = invoke noalias nonnull i8* @_Znwm(i64 %190) #8
          to label %192 unwind label %208

192:                                              ; preds = %189
  %193 = bitcast i8* %191 to i32*
  br label %194

194:                                              ; preds = %192, %180
  %195 = phi i32* [ %193, %192 ], [ null, %180 ]
  %196 = getelementptr inbounds i32, i32* %195, i64 %176
  store i32 1, i32* %196, align 4, !tbaa !12
  %197 = icmp sgt i64 %175, 0
  br i1 %197, label %198, label %201

198:                                              ; preds = %194
  %199 = bitcast i32* %195 to i8*
  %200 = bitcast i32* %162 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %199, i8* align 4 %200, i64 %175, i1 false) #9
  br label %201

201:                                              ; preds = %194, %198
  %202 = getelementptr inbounds i32, i32* %196, i64 1
  %203 = icmp eq i32* %162, null
  br i1 %203, label %206, label %204

204:                                              ; preds = %201
  %205 = bitcast i32* %162 to i8*
  tail call void @_ZdlPv(i8* nonnull %205) #9
  br label %206

206:                                              ; preds = %204, %201
  store i32* %195, i32** %157, align 8, !tbaa !11
  store i32* %202, i32** %155, align 8, !tbaa !9
  %207 = getelementptr inbounds i32, i32* %195, i64 %187
  store i32* %207, i32** %156, align 8, !tbaa !19
  br label %256

208:                                              ; preds = %189
  %209 = landingpad { i8*, i32 }
          cleanup
  br label %264

210:                                              ; preds = %178
  %211 = landingpad { i8*, i32 }
          cleanup
  br label %264

212:                                              ; preds = %160
  %213 = icmp eq i32* %164, %163
  br i1 %213, label %216, label %214

214:                                              ; preds = %212
  store i32 %154, i32* %164, align 4, !tbaa !12
  %215 = getelementptr inbounds i32, i32* %164, i64 1
  store i32* %215, i32** %155, align 8, !tbaa !9
  br label %256

216:                                              ; preds = %212
  %217 = ptrtoint i32* %163 to i64
  %218 = ptrtoint i32* %162 to i64
  %219 = sub i64 %217, %218
  %220 = ashr exact i64 %219, 2
  %221 = icmp eq i64 %219, 9223372036854775804
  br i1 %221, label %222, label %224

222:                                              ; preds = %216
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %223 unwind label %254

223:                                              ; preds = %222
  unreachable

224:                                              ; preds = %216
  %225 = icmp eq i64 %219, 0
  %226 = select i1 %225, i64 1, i64 %220
  %227 = add nsw i64 %226, %220
  %228 = icmp ult i64 %227, %220
  %229 = icmp ugt i64 %227, 2305843009213693951
  %230 = or i1 %228, %229
  %231 = select i1 %230, i64 2305843009213693951, i64 %227
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %238, label %233

233:                                              ; preds = %224
  %234 = shl nuw nsw i64 %231, 2
  %235 = invoke noalias nonnull i8* @_Znwm(i64 %234) #8
          to label %236 unwind label %252

236:                                              ; preds = %233
  %237 = bitcast i8* %235 to i32*
  br label %238

238:                                              ; preds = %236, %224
  %239 = phi i32* [ %237, %236 ], [ null, %224 ]
  %240 = getelementptr inbounds i32, i32* %239, i64 %220
  store i32 %154, i32* %240, align 4, !tbaa !12
  %241 = icmp sgt i64 %219, 0
  br i1 %241, label %242, label %245

242:                                              ; preds = %238
  %243 = bitcast i32* %239 to i8*
  %244 = bitcast i32* %162 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %243, i8* align 4 %244, i64 %219, i1 false) #9
  br label %245

245:                                              ; preds = %238, %242
  %246 = getelementptr inbounds i32, i32* %240, i64 1
  %247 = icmp eq i32* %162, null
  br i1 %247, label %250, label %248

248:                                              ; preds = %245
  %249 = bitcast i32* %162 to i8*
  tail call void @_ZdlPv(i8* nonnull %249) #9
  br label %250

250:                                              ; preds = %248, %245
  store i32* %239, i32** %157, align 8, !tbaa !11
  store i32* %246, i32** %155, align 8, !tbaa !9
  %251 = getelementptr inbounds i32, i32* %239, i64 %231
  store i32* %251, i32** %156, align 8, !tbaa !19
  br label %256

252:                                              ; preds = %233
  %253 = landingpad { i8*, i32 }
          cleanup
  br label %264

254:                                              ; preds = %222
  %255 = landingpad { i8*, i32 }
          cleanup
  br label %264

256:                                              ; preds = %250, %214, %170, %206
  %257 = phi i32* [ %251, %250 ], [ %161, %214 ], [ %161, %170 ], [ %207, %206 ]
  %258 = phi i32* [ %239, %250 ], [ %162, %214 ], [ %162, %170 ], [ %195, %206 ]
  %259 = phi i32* [ %251, %250 ], [ %163, %214 ], [ %161, %170 ], [ %207, %206 ]
  %260 = phi i32* [ %246, %250 ], [ %215, %214 ], [ %171, %170 ], [ %202, %206 ]
  %261 = add nuw nsw i32 %165, 1
  %262 = icmp eq i32 %261, %2
  br i1 %262, label %263, label %160, !llvm.loop !20

263:                                              ; preds = %256, %153
  ret void

264:                                              ; preds = %252, %254, %208, %210
  %265 = phi { i8*, i32 } [ %209, %208 ], [ %211, %210 ], [ %253, %252 ], [ %255, %254 ]
  %266 = icmp eq i32* %162, null
  br i1 %266, label %269, label %267

267:                                              ; preds = %264
  %268 = bitcast i32* %162 to i8*
  tail call void @_ZdlPv(i8* nonnull %268) #9
  br label %269

269:                                              ; preds = %264, %267
  resume { i8*, i32 } %265
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { noreturn }
attributes #8 = { allocsize(0) }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseISt6vectorIiSaIiEESaIS2_EE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !5, i64 8}
!10 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!11 = !{!10, !5, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"int", !6, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !15}
!19 = !{!10, !5, i64 16}
!20 = distinct !{!20, !15}
