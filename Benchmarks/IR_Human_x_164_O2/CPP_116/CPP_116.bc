; ModuleID = '../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_116/CPP_116.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z10sort_arraySt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %3, align 8, !tbaa !3
  %6 = load i32*, i32** %4, align 8, !tbaa !8
  %7 = icmp eq i32* %5, %6
  br i1 %7, label %98, label %11

8:                                                ; preds = %71
  %9 = icmp ugt i64 %82, 1
  %10 = icmp eq i64 %81, 0
  br i1 %10, label %98, label %94

11:                                               ; preds = %2, %71
  %12 = phi i32* [ %72, %71 ], [ %6, %2 ]
  %13 = phi i32* [ %73, %71 ], [ %5, %2 ]
  %14 = phi i64 [ %78, %71 ], [ 0, %2 ]
  %15 = phi i32* [ %76, %71 ], [ null, %2 ]
  %16 = phi i32* [ %77, %71 ], [ null, %2 ]
  %17 = phi i32* [ %74, %71 ], [ null, %2 ]
  %18 = getelementptr inbounds i32, i32* %12, i64 %14
  %19 = load i32, i32* %18, align 4, !tbaa !9
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %30, label %21

21:                                               ; preds = %11
  %22 = tail call i32 @llvm.abs.i32(i32 %19, i1 true)
  br label %23

23:                                               ; preds = %21, %23
  %24 = phi i32 [ %28, %23 ], [ %22, %21 ]
  %25 = phi i32 [ %27, %23 ], [ 0, %21 ]
  %26 = and i32 %24, 1
  %27 = add nuw nsw i32 %26, %25
  %28 = lshr i32 %24, 1
  %29 = icmp ult i32 %24, 2
  br i1 %29, label %30, label %23, !llvm.loop !11

30:                                               ; preds = %23, %11
  %31 = phi i32 [ 0, %11 ], [ %27, %23 ]
  %32 = icmp eq i32* %16, %15
  br i1 %32, label %34, label %33

33:                                               ; preds = %30
  store i32 %31, i32* %16, align 4, !tbaa !9
  br label %71

34:                                               ; preds = %30
  %35 = ptrtoint i32* %15 to i64
  %36 = ptrtoint i32* %17 to i64
  %37 = sub i64 %35, %36
  %38 = ashr exact i64 %37, 2
  %39 = icmp eq i64 %37, 9223372036854775804
  br i1 %39, label %40, label %42

40:                                               ; preds = %34
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
          to label %41 unwind label %86

41:                                               ; preds = %40
  unreachable

42:                                               ; preds = %34
  %43 = icmp eq i64 %37, 0
  %44 = select i1 %43, i64 1, i64 %38
  %45 = add nsw i64 %44, %38
  %46 = icmp ult i64 %45, %38
  %47 = icmp ugt i64 %45, 2305843009213693951
  %48 = or i1 %46, %47
  %49 = select i1 %48, i64 2305843009213693951, i64 %45
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %42
  %52 = shl nuw nsw i64 %49, 2
  %53 = invoke noalias nonnull i8* @_Znwm(i64 %52) #8
          to label %54 unwind label %84

54:                                               ; preds = %51
  %55 = bitcast i8* %53 to i32*
  br label %56

56:                                               ; preds = %54, %42
  %57 = phi i32* [ %55, %54 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %38
  store i32 %31, i32* %58, align 4, !tbaa !9
  %59 = icmp sgt i64 %37, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %56
  %61 = bitcast i32* %57 to i8*
  %62 = bitcast i32* %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64 %37, i1 false) #9
  br label %63

63:                                               ; preds = %56, %60
  %64 = icmp eq i32* %17, null
  br i1 %64, label %67, label %65

65:                                               ; preds = %63
  %66 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* nonnull %66) #9
  br label %67

67:                                               ; preds = %65, %63
  %68 = getelementptr inbounds i32, i32* %57, i64 %49
  %69 = load i32*, i32** %3, align 8, !tbaa !3
  %70 = load i32*, i32** %4, align 8, !tbaa !8
  br label %71

71:                                               ; preds = %67, %33
  %72 = phi i32* [ %70, %67 ], [ %12, %33 ]
  %73 = phi i32* [ %69, %67 ], [ %13, %33 ]
  %74 = phi i32* [ %57, %67 ], [ %17, %33 ]
  %75 = phi i32* [ %58, %67 ], [ %16, %33 ]
  %76 = phi i32* [ %68, %67 ], [ %15, %33 ]
  %77 = getelementptr inbounds i32, i32* %75, i64 1
  %78 = add nuw i64 %14, 1
  %79 = ptrtoint i32* %73 to i64
  %80 = ptrtoint i32* %72 to i64
  %81 = sub i64 %79, %80
  %82 = ashr exact i64 %81, 2
  %83 = icmp ugt i64 %82, %78
  br i1 %83, label %11, label %8, !llvm.loop !13

84:                                               ; preds = %51
  %85 = landingpad { i8*, i32 }
          cleanup
  br label %88

86:                                               ; preds = %40
  %87 = landingpad { i8*, i32 }
          cleanup
  br label %88

88:                                               ; preds = %86, %84
  %89 = phi { i8*, i32 } [ %85, %84 ], [ %87, %86 ]
  %90 = icmp eq i32* %17, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %88
  %92 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* nonnull %92) #9
  br label %93

93:                                               ; preds = %88, %91
  resume { i8*, i32 } %89

94:                                               ; preds = %8, %112
  %95 = phi i64 [ %113, %112 ], [ 0, %8 ]
  br i1 %9, label %96, label %112

96:                                               ; preds = %94
  %97 = load i32, i32* %74, align 4, !tbaa !9
  br label %115

98:                                               ; preds = %112, %2, %8
  %99 = phi i32* [ %72, %8 ], [ %6, %2 ], [ %72, %112 ]
  %100 = phi i32* [ %73, %8 ], [ %5, %2 ], [ %73, %112 ]
  %101 = phi i32* [ %74, %8 ], [ null, %2 ], [ %74, %112 ]
  %102 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32* %99, i32** %102, align 8, !tbaa !8
  %103 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32* %100, i32** %103, align 8, !tbaa !3
  %104 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %105 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %106 = load i32*, i32** %105, align 8, !tbaa !14
  store i32* %106, i32** %104, align 8, !tbaa !14
  %107 = bitcast %"class.std::vector"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %107, i8 0, i64 24, i1 false) #9
  %108 = icmp eq i32* %101, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %98
  %110 = bitcast i32* %101 to i8*
  tail call void @_ZdlPv(i8* nonnull %110) #9
  br label %111

111:                                              ; preds = %98, %109
  ret void

112:                                              ; preds = %143, %94
  %113 = add nuw nsw i64 %95, 1
  %114 = icmp eq i64 %113, %82
  br i1 %114, label %98, label %94, !llvm.loop !15

115:                                              ; preds = %96, %143
  %116 = phi i32 [ %97, %96 ], [ %144, %143 ]
  %117 = phi i64 [ 1, %96 ], [ %145, %143 ]
  %118 = getelementptr inbounds i32, i32* %74, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !9
  %120 = add nsw i64 %117, -1
  %121 = getelementptr inbounds i32, i32* %74, i64 %120
  %122 = icmp slt i32 %119, %116
  br i1 %122, label %123, label %128

123:                                              ; preds = %115
  %124 = getelementptr inbounds i32, i32* %72, i64 %117
  %125 = load i32, i32* %124, align 4, !tbaa !9
  %126 = getelementptr inbounds i32, i32* %72, i64 %120
  %127 = load i32, i32* %126, align 4, !tbaa !9
  br label %136

128:                                              ; preds = %115
  %129 = icmp eq i32 %119, %116
  br i1 %129, label %130, label %143

130:                                              ; preds = %128
  %131 = getelementptr inbounds i32, i32* %72, i64 %117
  %132 = load i32, i32* %131, align 4, !tbaa !9
  %133 = getelementptr inbounds i32, i32* %72, i64 %120
  %134 = load i32, i32* %133, align 4, !tbaa !9
  %135 = icmp slt i32 %132, %134
  br i1 %135, label %136, label %143

136:                                              ; preds = %123, %130
  %137 = phi i32 [ %127, %123 ], [ %134, %130 ]
  %138 = phi i32 [ %125, %123 ], [ %132, %130 ]
  %139 = getelementptr inbounds i32, i32* %72, i64 %117
  %140 = getelementptr inbounds i32, i32* %72, i64 %120
  store i32 %137, i32* %139, align 4, !tbaa !9
  store i32 %138, i32* %140, align 4, !tbaa !9
  %141 = load i32, i32* %118, align 4, !tbaa !9
  %142 = load i32, i32* %121, align 4, !tbaa !9
  store i32 %142, i32* %118, align 4, !tbaa !9
  store i32 %141, i32* %121, align 4, !tbaa !9
  br label %143

143:                                              ; preds = %128, %130, %136
  %144 = phi i32 [ %119, %128 ], [ %116, %130 ], [ %142, %136 ]
  %145 = add nuw nsw i64 %117, 1
  %146 = icmp eq i64 %145, %82
  br i1 %146, label %112, label %115, !llvm.loop !16
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { noreturn }
attributes #8 = { allocsize(0) }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !12}
!14 = !{!4, !5, i64 16}
!15 = distinct !{!15, !12}
!16 = distinct !{!16, !12}
