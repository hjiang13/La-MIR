; ModuleID = '../../Human_xBenchmarks_164/CPP_96/CPP_96.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_96/CPP_96.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z11count_up_toi(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %5 = icmp sgt i32 %1, 2
  %6 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %6, i8 0, i64 24, i1 false)
  br i1 %5, label %7, label %94

7:                                                ; preds = %2
  %8 = bitcast %"class.std::vector"* %0 to i8**
  %9 = bitcast %"class.std::vector"* %0 to i8**
  br label %10

10:                                               ; preds = %7, %87
  %11 = phi i32* [ %88, %87 ], [ null, %7 ]
  %12 = phi i32* [ %89, %87 ], [ null, %7 ]
  %13 = phi i32* [ %90, %87 ], [ null, %7 ]
  %14 = phi i32* [ %91, %87 ], [ null, %7 ]
  %15 = phi i32 [ %92, %87 ], [ 2, %7 ]
  %16 = ptrtoint i32* %14 to i64
  %17 = ptrtoint i32* %13 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %10
  %22 = load i32, i32* %13, align 4, !tbaa !3
  %23 = mul nsw i32 %22, %22
  %24 = icmp ugt i32 %23, %15
  br i1 %24, label %57, label %42

25:                                               ; preds = %10
  %26 = icmp eq i32* %14, %11
  br i1 %26, label %29, label %27

27:                                               ; preds = %25
  store i32 %15, i32* %14, align 4, !tbaa !3
  %28 = getelementptr inbounds i32, i32* %14, i64 1
  store i32* %28, i32** %3, align 8, !tbaa !7
  br label %87

29:                                               ; preds = %25
  %30 = add nuw nsw i64 %19, 1
  %31 = shl nuw nsw i64 %30, 2
  %32 = invoke noalias nonnull i8* @_Znwm(i64 %31) #6
          to label %33 unwind label %95

33:                                               ; preds = %29
  %34 = bitcast i8* %32 to i32*
  %35 = getelementptr inbounds i32, i32* %34, i64 %19
  store i32 %15, i32* %35, align 4, !tbaa !3
  %36 = getelementptr inbounds i32, i32* %35, i64 1
  %37 = icmp eq i32* %13, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* nonnull %39) #7
  br label %40

40:                                               ; preds = %38, %33
  store i8* %32, i8** %9, align 8, !tbaa !10
  store i32* %36, i32** %3, align 8, !tbaa !7
  %41 = getelementptr inbounds i32, i32* %34, i64 %30
  store i32* %41, i32** %4, align 8, !tbaa !11
  br label %87

42:                                               ; preds = %21, %42
  %43 = phi i64 [ %49, %42 ], [ 0, %21 ]
  %44 = phi i32 [ %51, %42 ], [ %22, %21 ]
  %45 = phi i8 [ %48, %42 ], [ 1, %21 ]
  %46 = srem i32 %15, %44
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, i8 0, i8 %45
  %49 = add nuw nsw i64 %43, 1
  %50 = getelementptr inbounds i32, i32* %13, i64 %49
  %51 = load i32, i32* %50, align 4, !tbaa !3
  %52 = mul nsw i32 %51, %51
  %53 = icmp ugt i32 %52, %15
  br i1 %53, label %54, label %42, !llvm.loop !12

54:                                               ; preds = %42
  %55 = and i8 %48, 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %87, label %57

57:                                               ; preds = %21, %54
  %58 = icmp eq i32* %14, %12
  br i1 %58, label %61, label %59

59:                                               ; preds = %57
  store i32 %15, i32* %14, align 4, !tbaa !3
  %60 = getelementptr inbounds i32, i32* %14, i64 1
  store i32* %60, i32** %3, align 8, !tbaa !7
  br label %87

61:                                               ; preds = %57
  %62 = icmp eq i64 %18, 9223372036854775804
  br i1 %62, label %63, label %65

63:                                               ; preds = %61
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
          to label %64 unwind label %85

64:                                               ; preds = %63
  unreachable

65:                                               ; preds = %61
  %66 = ashr exact i64 %18, 1
  %67 = icmp ult i64 %66, %19
  %68 = icmp ugt i64 %66, 2305843009213693951
  %69 = or i1 %67, %68
  %70 = select i1 %69, i64 2305843009213693951, i64 %66
  %71 = shl nuw nsw i64 %70, 2
  %72 = invoke noalias nonnull i8* @_Znwm(i64 %71) #6
          to label %73 unwind label %83

73:                                               ; preds = %65
  %74 = bitcast i8* %72 to i32*
  %75 = getelementptr inbounds i32, i32* %74, i64 %19
  store i32 %15, i32* %75, align 4, !tbaa !3
  %76 = icmp sgt i64 %18, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = bitcast i32* %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %72, i8* nonnull align 4 %78, i64 %18, i1 false) #7
  br label %79

79:                                               ; preds = %73, %77
  %80 = bitcast i32* %13 to i8*
  %81 = getelementptr inbounds i32, i32* %75, i64 1
  tail call void @_ZdlPv(i8* nonnull %80) #7
  store i8* %72, i8** %8, align 8, !tbaa !10
  store i32* %81, i32** %3, align 8, !tbaa !7
  %82 = getelementptr inbounds i32, i32* %74, i64 %70
  store i32* %82, i32** %4, align 8, !tbaa !11
  br label %87

83:                                               ; preds = %65
  %84 = landingpad { i8*, i32 }
          cleanup
  br label %98

85:                                               ; preds = %63
  %86 = landingpad { i8*, i32 }
          cleanup
  br label %98

87:                                               ; preds = %79, %59, %40, %27, %54
  %88 = phi i32* [ %82, %79 ], [ %11, %59 ], [ %41, %40 ], [ %11, %27 ], [ %11, %54 ]
  %89 = phi i32* [ %82, %79 ], [ %12, %59 ], [ %41, %40 ], [ %11, %27 ], [ %12, %54 ]
  %90 = phi i32* [ %74, %79 ], [ %13, %59 ], [ %34, %40 ], [ %13, %27 ], [ %13, %54 ]
  %91 = phi i32* [ %81, %79 ], [ %60, %59 ], [ %36, %40 ], [ %28, %27 ], [ %14, %54 ]
  %92 = add nuw nsw i32 %15, 1
  %93 = icmp eq i32 %92, %1
  br i1 %93, label %94, label %10, !llvm.loop !14

94:                                               ; preds = %87, %2
  ret void

95:                                               ; preds = %29
  %96 = landingpad { i8*, i32 }
          cleanup
  %97 = icmp eq i32* %13, null
  br i1 %97, label %101, label %98

98:                                               ; preds = %83, %85, %95
  %99 = phi { i8*, i32 } [ %96, %95 ], [ %84, %83 ], [ %86, %85 ]
  %100 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* nonnull %100) #7
  br label %101

101:                                              ; preds = %95, %98
  %102 = phi { i8*, i32 } [ %96, %95 ], [ %99, %98 ]
  resume { i8*, i32 } %102
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !9, i64 8}
!8 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !9, i64 0, !9, i64 8, !9, i64 16}
!9 = !{!"any pointer", !5, i64 0}
!10 = !{!8, !9, i64 0}
!11 = !{!8, !9, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
!14 = distinct !{!14, !13}
