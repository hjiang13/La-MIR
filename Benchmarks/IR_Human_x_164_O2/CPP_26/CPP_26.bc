; ModuleID = '../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_26/CPP_26.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z17remove_duplicatesSt6vectorIiSaIiEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  %6 = load i32*, i32** %3, align 8, !tbaa !3
  %7 = load i32*, i32** %4, align 8, !tbaa !8
  %8 = icmp eq i32* %6, %7
  br i1 %8, label %9, label %23

9:                                                ; preds = %249, %2
  %10 = phi i32* [ %6, %2 ], [ %258, %249 ]
  %11 = phi i32* [ %6, %2 ], [ %257, %249 ]
  %12 = phi i32* [ null, %2 ], [ %251, %249 ]
  %13 = phi i32* [ null, %2 ], [ %252, %249 ]
  %14 = phi i32* [ null, %2 ], [ %255, %249 ]
  %15 = ptrtoint i32* %12 to i64
  %16 = ptrtoint i32* %13 to i64
  %17 = sub i64 %15, %16
  %18 = icmp sgt i64 %17, 15
  %19 = lshr i64 %17, 4
  %20 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %22 = icmp eq i32* %11, %10
  br i1 %22, label %264, label %273

23:                                               ; preds = %2, %249
  %24 = phi i64 [ %256, %249 ], [ 0, %2 ]
  %25 = phi i32* [ %258, %249 ], [ %7, %2 ]
  %26 = phi i32* [ %255, %249 ], [ null, %2 ]
  %27 = phi i32* [ %254, %249 ], [ null, %2 ]
  %28 = phi i32* [ %253, %249 ], [ null, %2 ]
  %29 = phi i32* [ %252, %249 ], [ null, %2 ]
  %30 = phi i32* [ %251, %249 ], [ null, %2 ]
  %31 = phi i32* [ %250, %249 ], [ null, %2 ]
  %32 = getelementptr inbounds i32, i32* %25, i64 %24
  %33 = ptrtoint i32* %30 to i64
  %34 = ptrtoint i32* %29 to i64
  %35 = sub i64 %33, %34
  %36 = icmp sgt i64 %35, 15
  br i1 %36, label %37, label %64

37:                                               ; preds = %23
  %38 = lshr i64 %35, 4
  %39 = load i32, i32* %32, align 4, !tbaa !9
  br label %40

40:                                               ; preds = %57, %37
  %41 = phi i64 [ %38, %37 ], [ %59, %57 ]
  %42 = phi i32* [ %29, %37 ], [ %58, %57 ]
  %43 = load i32, i32* %42, align 4, !tbaa !9
  %44 = icmp eq i32 %43, %39
  br i1 %44, label %96, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds i32, i32* %42, i64 1
  %47 = load i32, i32* %46, align 4, !tbaa !9
  %48 = icmp eq i32 %47, %39
  br i1 %48, label %94, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds i32, i32* %42, i64 2
  %51 = load i32, i32* %50, align 4, !tbaa !9
  %52 = icmp eq i32 %51, %39
  br i1 %52, label %92, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds i32, i32* %42, i64 3
  %55 = load i32, i32* %54, align 4, !tbaa !9
  %56 = icmp eq i32 %55, %39
  br i1 %56, label %90, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds i32, i32* %42, i64 4
  %59 = add nsw i64 %41, -1
  %60 = icmp sgt i64 %41, 1
  br i1 %60, label %40, label %61, !llvm.loop !11

61:                                               ; preds = %57
  %62 = ptrtoint i32* %58 to i64
  %63 = sub i64 %33, %62
  br label %64

64:                                               ; preds = %61, %23
  %65 = phi i64 [ %63, %61 ], [ %35, %23 ]
  %66 = phi i32* [ %58, %61 ], [ %29, %23 ]
  %67 = ashr exact i64 %65, 2
  switch i64 %67, label %99 [
    i64 3, label %72
    i64 2, label %70
    i64 1, label %68
  ]

68:                                               ; preds = %64
  %69 = load i32, i32* %32, align 4, !tbaa !9
  br label %85

70:                                               ; preds = %64
  %71 = load i32, i32* %32, align 4, !tbaa !9
  br label %78

72:                                               ; preds = %64
  %73 = load i32, i32* %66, align 4, !tbaa !9
  %74 = load i32, i32* %32, align 4, !tbaa !9
  %75 = icmp eq i32 %73, %74
  br i1 %75, label %96, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds i32, i32* %66, i64 1
  br label %78

78:                                               ; preds = %76, %70
  %79 = phi i32 [ %71, %70 ], [ %74, %76 ]
  %80 = phi i32* [ %66, %70 ], [ %77, %76 ]
  %81 = load i32, i32* %80, align 4, !tbaa !9
  %82 = icmp eq i32 %81, %79
  br i1 %82, label %96, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds i32, i32* %80, i64 1
  br label %85

85:                                               ; preds = %83, %68
  %86 = phi i32 [ %69, %68 ], [ %79, %83 ]
  %87 = phi i32* [ %66, %68 ], [ %84, %83 ]
  %88 = load i32, i32* %87, align 4, !tbaa !9
  %89 = icmp eq i32 %88, %86
  br i1 %89, label %96, label %99

90:                                               ; preds = %53
  %91 = getelementptr inbounds i32, i32* %42, i64 3
  br label %96

92:                                               ; preds = %49
  %93 = getelementptr inbounds i32, i32* %42, i64 2
  br label %96

94:                                               ; preds = %45
  %95 = getelementptr inbounds i32, i32* %42, i64 1
  br label %96

96:                                               ; preds = %40, %90, %92, %94, %85, %78, %72
  %97 = phi i32* [ %66, %72 ], [ %80, %78 ], [ %87, %85 ], [ %91, %90 ], [ %93, %92 ], [ %95, %94 ], [ %42, %40 ]
  %98 = icmp eq i32* %97, %30
  br i1 %98, label %99, label %249

99:                                               ; preds = %85, %64, %96
  %100 = ptrtoint i32* %27 to i64
  %101 = ptrtoint i32* %26 to i64
  %102 = sub i64 %100, %101
  %103 = icmp sgt i64 %102, 15
  br i1 %103, label %104, label %131

104:                                              ; preds = %99
  %105 = lshr i64 %102, 4
  %106 = load i32, i32* %32, align 4, !tbaa !9
  br label %107

107:                                              ; preds = %124, %104
  %108 = phi i64 [ %105, %104 ], [ %126, %124 ]
  %109 = phi i32* [ %26, %104 ], [ %125, %124 ]
  %110 = load i32, i32* %109, align 4, !tbaa !9
  %111 = icmp eq i32 %110, %106
  br i1 %111, label %163, label %112

112:                                              ; preds = %107
  %113 = getelementptr inbounds i32, i32* %109, i64 1
  %114 = load i32, i32* %113, align 4, !tbaa !9
  %115 = icmp eq i32 %114, %106
  br i1 %115, label %161, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds i32, i32* %109, i64 2
  %118 = load i32, i32* %117, align 4, !tbaa !9
  %119 = icmp eq i32 %118, %106
  br i1 %119, label %159, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds i32, i32* %109, i64 3
  %122 = load i32, i32* %121, align 4, !tbaa !9
  %123 = icmp eq i32 %122, %106
  br i1 %123, label %157, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds i32, i32* %109, i64 4
  %126 = add nsw i64 %108, -1
  %127 = icmp sgt i64 %108, 1
  br i1 %127, label %107, label %128, !llvm.loop !11

128:                                              ; preds = %124
  %129 = ptrtoint i32* %125 to i64
  %130 = sub i64 %100, %129
  br label %131

131:                                              ; preds = %128, %99
  %132 = phi i64 [ %130, %128 ], [ %102, %99 ]
  %133 = phi i32* [ %125, %128 ], [ %26, %99 ]
  %134 = ashr exact i64 %132, 2
  switch i64 %134, label %210 [
    i64 3, label %139
    i64 2, label %137
    i64 1, label %135
  ]

135:                                              ; preds = %131
  %136 = load i32, i32* %32, align 4, !tbaa !9
  br label %152

137:                                              ; preds = %131
  %138 = load i32, i32* %32, align 4, !tbaa !9
  br label %145

139:                                              ; preds = %131
  %140 = load i32, i32* %133, align 4, !tbaa !9
  %141 = load i32, i32* %32, align 4, !tbaa !9
  %142 = icmp eq i32 %140, %141
  br i1 %142, label %163, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds i32, i32* %133, i64 1
  br label %145

145:                                              ; preds = %143, %137
  %146 = phi i32 [ %138, %137 ], [ %141, %143 ]
  %147 = phi i32* [ %133, %137 ], [ %144, %143 ]
  %148 = load i32, i32* %147, align 4, !tbaa !9
  %149 = icmp eq i32 %148, %146
  br i1 %149, label %163, label %150

150:                                              ; preds = %145
  %151 = getelementptr inbounds i32, i32* %147, i64 1
  br label %152

152:                                              ; preds = %150, %135
  %153 = phi i32 [ %136, %135 ], [ %146, %150 ]
  %154 = phi i32* [ %133, %135 ], [ %151, %150 ]
  %155 = load i32, i32* %154, align 4, !tbaa !9
  %156 = icmp eq i32 %155, %153
  br i1 %156, label %163, label %210

157:                                              ; preds = %120
  %158 = getelementptr inbounds i32, i32* %109, i64 3
  br label %163

159:                                              ; preds = %116
  %160 = getelementptr inbounds i32, i32* %109, i64 2
  br label %163

161:                                              ; preds = %112
  %162 = getelementptr inbounds i32, i32* %109, i64 1
  br label %163

163:                                              ; preds = %107, %157, %159, %161, %152, %145, %139
  %164 = phi i32 [ %140, %139 ], [ %146, %145 ], [ %153, %152 ], [ %106, %161 ], [ %106, %159 ], [ %106, %157 ], [ %106, %107 ]
  %165 = phi i32* [ %133, %139 ], [ %147, %145 ], [ %154, %152 ], [ %162, %161 ], [ %160, %159 ], [ %158, %157 ], [ %109, %107 ]
  %166 = icmp eq i32* %165, %27
  br i1 %166, label %210, label %167

167:                                              ; preds = %163
  %168 = icmp eq i32* %30, %31
  br i1 %168, label %171, label %169

169:                                              ; preds = %167
  store i32 %164, i32* %30, align 4, !tbaa !9
  %170 = getelementptr inbounds i32, i32* %30, i64 1
  br label %249

171:                                              ; preds = %167
  %172 = ashr exact i64 %35, 2
  %173 = icmp eq i64 %35, 9223372036854775804
  br i1 %173, label %174, label %176

174:                                              ; preds = %171
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %175 unwind label %208

175:                                              ; preds = %174
  unreachable

176:                                              ; preds = %171
  %177 = icmp eq i64 %35, 0
  %178 = select i1 %177, i64 1, i64 %172
  %179 = add nsw i64 %178, %172
  %180 = icmp ult i64 %179, %172
  %181 = icmp ugt i64 %179, 2305843009213693951
  %182 = or i1 %180, %181
  %183 = select i1 %182, i64 2305843009213693951, i64 %179
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %191, label %185

185:                                              ; preds = %176
  %186 = shl nuw nsw i64 %183, 2
  %187 = invoke noalias nonnull i8* @_Znwm(i64 %186) #7
          to label %188 unwind label %206

188:                                              ; preds = %185
  %189 = bitcast i8* %187 to i32*
  %190 = load i32, i32* %32, align 4, !tbaa !9
  br label %191

191:                                              ; preds = %188, %176
  %192 = phi i32 [ %190, %188 ], [ %164, %176 ]
  %193 = phi i32* [ %189, %188 ], [ null, %176 ]
  %194 = getelementptr inbounds i32, i32* %193, i64 %172
  store i32 %192, i32* %194, align 4, !tbaa !9
  %195 = icmp sgt i64 %35, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %191
  %197 = bitcast i32* %193 to i8*
  %198 = bitcast i32* %29 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %197, i8* align 4 %198, i64 %35, i1 false) #8
  br label %199

199:                                              ; preds = %191, %196
  %200 = getelementptr inbounds i32, i32* %194, i64 1
  %201 = icmp eq i32* %29, null
  br i1 %201, label %204, label %202

202:                                              ; preds = %199
  %203 = bitcast i32* %29 to i8*
  tail call void @_ZdlPv(i8* nonnull %203) #8
  br label %204

204:                                              ; preds = %202, %199
  %205 = getelementptr inbounds i32, i32* %193, i64 %183
  br label %249

206:                                              ; preds = %185, %229
  %207 = landingpad { i8*, i32 }
          cleanup
  br label %361

208:                                              ; preds = %174, %218
  %209 = landingpad { i8*, i32 }
          cleanup
  br label %361

210:                                              ; preds = %152, %131, %163
  %211 = icmp eq i32* %27, %28
  br i1 %211, label %215, label %212

212:                                              ; preds = %210
  %213 = load i32, i32* %32, align 4, !tbaa !9
  store i32 %213, i32* %27, align 4, !tbaa !9
  %214 = getelementptr inbounds i32, i32* %27, i64 1
  br label %249

215:                                              ; preds = %210
  %216 = ashr exact i64 %102, 2
  %217 = icmp eq i64 %102, 9223372036854775804
  br i1 %217, label %218, label %220

218:                                              ; preds = %215
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %219 unwind label %208

219:                                              ; preds = %218
  unreachable

220:                                              ; preds = %215
  %221 = icmp eq i64 %102, 0
  %222 = select i1 %221, i64 1, i64 %216
  %223 = add nsw i64 %222, %216
  %224 = icmp ult i64 %223, %216
  %225 = icmp ugt i64 %223, 2305843009213693951
  %226 = or i1 %224, %225
  %227 = select i1 %226, i64 2305843009213693951, i64 %223
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %234, label %229

229:                                              ; preds = %220
  %230 = shl nuw nsw i64 %227, 2
  %231 = invoke noalias nonnull i8* @_Znwm(i64 %230) #7
          to label %232 unwind label %206

232:                                              ; preds = %229
  %233 = bitcast i8* %231 to i32*
  br label %234

234:                                              ; preds = %232, %220
  %235 = phi i32* [ %233, %232 ], [ null, %220 ]
  %236 = getelementptr inbounds i32, i32* %235, i64 %216
  %237 = load i32, i32* %32, align 4, !tbaa !9
  store i32 %237, i32* %236, align 4, !tbaa !9
  %238 = icmp sgt i64 %102, 0
  br i1 %238, label %239, label %242

239:                                              ; preds = %234
  %240 = bitcast i32* %235 to i8*
  %241 = bitcast i32* %26 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %240, i8* align 4 %241, i64 %102, i1 false) #8
  br label %242

242:                                              ; preds = %234, %239
  %243 = getelementptr inbounds i32, i32* %236, i64 1
  %244 = icmp eq i32* %26, null
  br i1 %244, label %247, label %245

245:                                              ; preds = %242
  %246 = bitcast i32* %26 to i8*
  tail call void @_ZdlPv(i8* nonnull %246) #8
  br label %247

247:                                              ; preds = %245, %242
  %248 = getelementptr inbounds i32, i32* %235, i64 %227
  br label %249

249:                                              ; preds = %247, %212, %204, %169, %96
  %250 = phi i32* [ %31, %96 ], [ %205, %204 ], [ %31, %169 ], [ %31, %212 ], [ %31, %247 ]
  %251 = phi i32* [ %30, %96 ], [ %200, %204 ], [ %170, %169 ], [ %30, %212 ], [ %30, %247 ]
  %252 = phi i32* [ %29, %96 ], [ %193, %204 ], [ %29, %169 ], [ %29, %212 ], [ %29, %247 ]
  %253 = phi i32* [ %28, %96 ], [ %28, %204 ], [ %28, %169 ], [ %28, %212 ], [ %248, %247 ]
  %254 = phi i32* [ %27, %96 ], [ %27, %204 ], [ %27, %169 ], [ %214, %212 ], [ %243, %247 ]
  %255 = phi i32* [ %26, %96 ], [ %26, %204 ], [ %26, %169 ], [ %26, %212 ], [ %235, %247 ]
  %256 = add nuw i64 %24, 1
  %257 = load i32*, i32** %3, align 8, !tbaa !3
  %258 = load i32*, i32** %4, align 8, !tbaa !8
  %259 = ptrtoint i32* %257 to i64
  %260 = ptrtoint i32* %258 to i64
  %261 = sub i64 %259, %260
  %262 = ashr exact i64 %261, 2
  %263 = icmp ugt i64 %262, %256
  br i1 %263, label %23, label %9, !llvm.loop !13

264:                                              ; preds = %352, %9
  %265 = icmp eq i32* %13, null
  br i1 %265, label %268, label %266

266:                                              ; preds = %264
  %267 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* nonnull %267) #8
  br label %268

268:                                              ; preds = %264, %266
  %269 = icmp eq i32* %14, null
  br i1 %269, label %272, label %270

270:                                              ; preds = %268
  %271 = bitcast i32* %14 to i8*
  tail call void @_ZdlPv(i8* nonnull %271) #8
  br label %272

272:                                              ; preds = %268, %270
  ret void

273:                                              ; preds = %9, %352
  %274 = phi i32* [ %353, %352 ], [ %10, %9 ]
  %275 = phi i32* [ %354, %352 ], [ %11, %9 ]
  %276 = phi i64 [ %355, %352 ], [ 0, %9 ]
  %277 = getelementptr inbounds i32, i32* %274, i64 %276
  br i1 %18, label %278, label %304

278:                                              ; preds = %273
  %279 = load i32, i32* %277, align 4, !tbaa !9
  br label %280

280:                                              ; preds = %297, %278
  %281 = phi i64 [ %19, %278 ], [ %299, %297 ]
  %282 = phi i32* [ %13, %278 ], [ %298, %297 ]
  %283 = load i32, i32* %282, align 4, !tbaa !9
  %284 = icmp eq i32 %283, %279
  br i1 %284, label %336, label %285

285:                                              ; preds = %280
  %286 = getelementptr inbounds i32, i32* %282, i64 1
  %287 = load i32, i32* %286, align 4, !tbaa !9
  %288 = icmp eq i32 %287, %279
  br i1 %288, label %334, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds i32, i32* %282, i64 2
  %291 = load i32, i32* %290, align 4, !tbaa !9
  %292 = icmp eq i32 %291, %279
  br i1 %292, label %332, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i32, i32* %282, i64 3
  %295 = load i32, i32* %294, align 4, !tbaa !9
  %296 = icmp eq i32 %295, %279
  br i1 %296, label %330, label %297

297:                                              ; preds = %293
  %298 = getelementptr inbounds i32, i32* %282, i64 4
  %299 = add nsw i64 %281, -1
  %300 = icmp sgt i64 %281, 1
  br i1 %300, label %280, label %301, !llvm.loop !11

301:                                              ; preds = %297
  %302 = ptrtoint i32* %298 to i64
  %303 = sub i64 %15, %302
  br label %304

304:                                              ; preds = %301, %273
  %305 = phi i64 [ %303, %301 ], [ %17, %273 ]
  %306 = phi i32* [ %298, %301 ], [ %13, %273 ]
  %307 = ashr exact i64 %305, 2
  switch i64 %307, label %339 [
    i64 3, label %312
    i64 2, label %310
    i64 1, label %308
  ]

308:                                              ; preds = %304
  %309 = load i32, i32* %277, align 4, !tbaa !9
  br label %325

310:                                              ; preds = %304
  %311 = load i32, i32* %277, align 4, !tbaa !9
  br label %318

312:                                              ; preds = %304
  %313 = load i32, i32* %306, align 4, !tbaa !9
  %314 = load i32, i32* %277, align 4, !tbaa !9
  %315 = icmp eq i32 %313, %314
  br i1 %315, label %336, label %316

316:                                              ; preds = %312
  %317 = getelementptr inbounds i32, i32* %306, i64 1
  br label %318

318:                                              ; preds = %316, %310
  %319 = phi i32 [ %311, %310 ], [ %314, %316 ]
  %320 = phi i32* [ %306, %310 ], [ %317, %316 ]
  %321 = load i32, i32* %320, align 4, !tbaa !9
  %322 = icmp eq i32 %321, %319
  br i1 %322, label %336, label %323

323:                                              ; preds = %318
  %324 = getelementptr inbounds i32, i32* %320, i64 1
  br label %325

325:                                              ; preds = %323, %308
  %326 = phi i32 [ %309, %308 ], [ %319, %323 ]
  %327 = phi i32* [ %306, %308 ], [ %324, %323 ]
  %328 = load i32, i32* %327, align 4, !tbaa !9
  %329 = icmp eq i32 %328, %326
  br i1 %329, label %336, label %339

330:                                              ; preds = %293
  %331 = getelementptr inbounds i32, i32* %282, i64 3
  br label %336

332:                                              ; preds = %289
  %333 = getelementptr inbounds i32, i32* %282, i64 2
  br label %336

334:                                              ; preds = %285
  %335 = getelementptr inbounds i32, i32* %282, i64 1
  br label %336

336:                                              ; preds = %280, %330, %332, %334, %325, %318, %312
  %337 = phi i32* [ %306, %312 ], [ %320, %318 ], [ %327, %325 ], [ %331, %330 ], [ %333, %332 ], [ %335, %334 ], [ %282, %280 ]
  %338 = icmp eq i32* %337, %12
  br i1 %338, label %339, label %352

339:                                              ; preds = %325, %304, %336
  %340 = load i32*, i32** %20, align 8, !tbaa !3
  %341 = load i32*, i32** %21, align 8, !tbaa !14
  %342 = icmp eq i32* %340, %341
  br i1 %342, label %346, label %343

343:                                              ; preds = %339
  %344 = load i32, i32* %277, align 4, !tbaa !9
  store i32 %344, i32* %340, align 4, !tbaa !9
  %345 = getelementptr inbounds i32, i32* %340, i64 1
  store i32* %345, i32** %20, align 8, !tbaa !3
  br label %352

346:                                              ; preds = %339
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %340, i32* nonnull align 4 dereferenceable(4) %277)
          to label %347 unwind label %350

347:                                              ; preds = %346
  %348 = load i32*, i32** %3, align 8, !tbaa !3
  %349 = load i32*, i32** %4, align 8, !tbaa !8
  br label %352

350:                                              ; preds = %346
  %351 = landingpad { i8*, i32 }
          cleanup
  br label %361

352:                                              ; preds = %347, %343, %336
  %353 = phi i32* [ %349, %347 ], [ %274, %343 ], [ %274, %336 ]
  %354 = phi i32* [ %348, %347 ], [ %275, %343 ], [ %275, %336 ]
  %355 = add nuw i64 %276, 1
  %356 = ptrtoint i32* %354 to i64
  %357 = ptrtoint i32* %353 to i64
  %358 = sub i64 %356, %357
  %359 = ashr exact i64 %358, 2
  %360 = icmp ugt i64 %359, %355
  br i1 %360, label %273, label %264, !llvm.loop !15

361:                                              ; preds = %206, %208, %350
  %362 = phi i32* [ %13, %350 ], [ %29, %206 ], [ %29, %208 ]
  %363 = phi i32* [ %14, %350 ], [ %26, %206 ], [ %26, %208 ]
  %364 = phi { i8*, i32 } [ %351, %350 ], [ %207, %206 ], [ %209, %208 ]
  %365 = icmp eq i32* %362, null
  br i1 %365, label %368, label %366

366:                                              ; preds = %361
  %367 = bitcast i32* %362 to i8*
  tail call void @_ZdlPv(i8* nonnull %367) #8
  br label %368

368:                                              ; preds = %361, %366
  %369 = icmp eq i32* %363, null
  br i1 %369, label %372, label %370

370:                                              ; preds = %368
  %371 = bitcast i32* %363 to i8*
  tail call void @_ZdlPv(i8* nonnull %371) #8
  br label %372

372:                                              ; preds = %368, %370
  %373 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %374 = load i32*, i32** %373, align 8, !tbaa !8
  %375 = icmp eq i32* %374, null
  br i1 %375, label %378, label %376

376:                                              ; preds = %372
  %377 = bitcast i32* %374 to i8*
  tail call void @_ZdlPv(i8* nonnull %377) #8
  br label %378

378:                                              ; preds = %372, %376
  resume { i8*, i32 } %364
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint i32* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %14
  %27 = shl nuw nsw i64 %21, 2
  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #7
  %29 = bitcast i8* %28 to i32*
  br label %30

30:                                               ; preds = %14, %26
  %31 = phi i32* [ %29, %26 ], [ null, %14 ]
  %32 = getelementptr inbounds i32, i32* %31, i64 %24
  %33 = load i32, i32* %2, align 4, !tbaa !9
  store i32 %33, i32* %32, align 4, !tbaa !9
  %34 = icmp sgt i64 %23, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = bitcast i32* %31 to i8*
  %37 = bitcast i32* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %23, i1 false) #8
  br label %38

38:                                               ; preds = %30, %35
  %39 = getelementptr inbounds i32, i32* %32, i64 1
  %40 = sub i64 %8, %22
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  %43 = bitcast i32* %39 to i8*
  %44 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 4 %44, i64 %40, i1 false) #8
  br label %45

45:                                               ; preds = %38, %42
  %46 = icmp eq i32* %7, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = bitcast i32* %7 to i8*
  tail call void @_ZdlPv(i8* nonnull %48) #8
  br label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %51 = ashr exact i64 %40, 2
  %52 = getelementptr inbounds i32, i32* %39, i64 %51
  store i32* %31, i32** %6, align 8, !tbaa !8
  store i32* %52, i32** %4, align 8, !tbaa !3
  %53 = getelementptr inbounds i32, i32* %31, i64 %21
  store i32* %53, i32** %50, align 8, !tbaa !14
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { noreturn }
attributes #7 = { allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !12}
!14 = !{!4, !5, i64 16}
!15 = distinct !{!15, !12}
