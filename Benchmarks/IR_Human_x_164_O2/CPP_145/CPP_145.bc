; ModuleID = '../../Human_xBenchmarks_164/CPP_145/CPP_145.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_145/CPP_145.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z15order_by_pointsSt6vectorIiSaIiEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::__cxx11::basic_string", align 8
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.std::__cxx11::basic_string"* %3 to i8*
  %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2
  %10 = bitcast %union.anon* %9 to i8*
  %11 = load i32*, i32** %4, align 8, !tbaa !3
  %12 = load i32*, i32** %5, align 8, !tbaa !8
  %13 = icmp eq i32* %11, %12
  br i1 %13, label %203, label %17

14:                                               ; preds = %186
  %15 = icmp ugt i64 %193, 1
  %16 = icmp eq i64 %192, 0
  br i1 %16, label %203, label %201

17:                                               ; preds = %2, %186
  %18 = phi i64 [ %187, %186 ], [ 0, %2 ]
  %19 = phi i32* [ %189, %186 ], [ %12, %2 ]
  %20 = phi i32* [ %181, %186 ], [ null, %2 ]
  %21 = phi i32* [ %182, %186 ], [ null, %2 ]
  %22 = phi i32* [ %179, %186 ], [ null, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #12
  %23 = getelementptr inbounds i32, i32* %19, i64 %18
  %24 = load i32, i32* %23, align 4, !tbaa !9
  %25 = call i32 @llvm.abs.i32(i32 %24, i1 true)
  invoke void (%"class.std::__cxx11::basic_string"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* nonnull sret(%"class.std::__cxx11::basic_string") align 8 %3, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %25)
          to label %26 unwind label %121

26:                                               ; preds = %17
  %27 = load i64, i64* %7, align 8, !tbaa !11
  %28 = load i8*, i8** %8, align 8
  %29 = icmp ugt i64 %27, 1
  br i1 %29, label %30, label %107

30:                                               ; preds = %26
  %31 = add i64 %27, -1
  %32 = icmp ult i64 %31, 8
  br i1 %32, label %104, label %33

33:                                               ; preds = %30
  %34 = and i64 %31, -8
  %35 = or i64 %34, 1
  %36 = add i64 %34, -8
  %37 = lshr exact i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %77, label %41

41:                                               ; preds = %33
  %42 = and i64 %38, 4611686018427387902
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %74, %43 ]
  %45 = phi <4 x i32> [ zeroinitializer, %41 ], [ %72, %43 ]
  %46 = phi <4 x i32> [ zeroinitializer, %41 ], [ %73, %43 ]
  %47 = phi i64 [ %42, %41 ], [ %75, %43 ]
  %48 = or i64 %44, 1
  %49 = getelementptr inbounds i8, i8* %28, i64 %48
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1, !tbaa !15
  %52 = getelementptr inbounds i8, i8* %49, i64 4
  %53 = bitcast i8* %52 to <4 x i8>*
  %54 = load <4 x i8>, <4 x i8>* %53, align 1, !tbaa !15
  %55 = sext <4 x i8> %51 to <4 x i32>
  %56 = sext <4 x i8> %54 to <4 x i32>
  %57 = add <4 x i32> %45, <i32 -48, i32 -48, i32 -48, i32 -48>
  %58 = add <4 x i32> %46, <i32 -48, i32 -48, i32 -48, i32 -48>
  %59 = add <4 x i32> %57, %55
  %60 = add <4 x i32> %58, %56
  %61 = or i64 %44, 9
  %62 = getelementptr inbounds i8, i8* %28, i64 %61
  %63 = bitcast i8* %62 to <4 x i8>*
  %64 = load <4 x i8>, <4 x i8>* %63, align 1, !tbaa !15
  %65 = getelementptr inbounds i8, i8* %62, i64 4
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1, !tbaa !15
  %68 = sext <4 x i8> %64 to <4 x i32>
  %69 = sext <4 x i8> %67 to <4 x i32>
  %70 = add <4 x i32> %59, <i32 -48, i32 -48, i32 -48, i32 -48>
  %71 = add <4 x i32> %60, <i32 -48, i32 -48, i32 -48, i32 -48>
  %72 = add <4 x i32> %70, %68
  %73 = add <4 x i32> %71, %69
  %74 = add nuw i64 %44, 16
  %75 = add i64 %47, -2
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %43, !llvm.loop !16

77:                                               ; preds = %43, %33
  %78 = phi <4 x i32> [ undef, %33 ], [ %72, %43 ]
  %79 = phi <4 x i32> [ undef, %33 ], [ %73, %43 ]
  %80 = phi i64 [ 0, %33 ], [ %74, %43 ]
  %81 = phi <4 x i32> [ zeroinitializer, %33 ], [ %72, %43 ]
  %82 = phi <4 x i32> [ zeroinitializer, %33 ], [ %73, %43 ]
  %83 = icmp eq i64 %39, 0
  br i1 %83, label %98, label %84

84:                                               ; preds = %77
  %85 = or i64 %80, 1
  %86 = getelementptr inbounds i8, i8* %28, i64 %85
  %87 = add <4 x i32> %82, <i32 -48, i32 -48, i32 -48, i32 -48>
  %88 = getelementptr inbounds i8, i8* %86, i64 4
  %89 = bitcast i8* %88 to <4 x i8>*
  %90 = load <4 x i8>, <4 x i8>* %89, align 1, !tbaa !15
  %91 = sext <4 x i8> %90 to <4 x i32>
  %92 = add <4 x i32> %87, %91
  %93 = add <4 x i32> %81, <i32 -48, i32 -48, i32 -48, i32 -48>
  %94 = bitcast i8* %86 to <4 x i8>*
  %95 = load <4 x i8>, <4 x i8>* %94, align 1, !tbaa !15
  %96 = sext <4 x i8> %95 to <4 x i32>
  %97 = add <4 x i32> %93, %96
  br label %98

98:                                               ; preds = %77, %84
  %99 = phi <4 x i32> [ %78, %77 ], [ %97, %84 ]
  %100 = phi <4 x i32> [ %79, %77 ], [ %92, %84 ]
  %101 = add <4 x i32> %100, %99
  %102 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %101)
  %103 = icmp eq i64 %31, %34
  br i1 %103, label %107, label %104

104:                                              ; preds = %30, %98
  %105 = phi i64 [ 1, %30 ], [ %35, %98 ]
  %106 = phi i32 [ 0, %30 ], [ %102, %98 ]
  br label %123

107:                                              ; preds = %123, %98, %26
  %108 = phi i32 [ 0, %26 ], [ %102, %98 ], [ %130, %123 ]
  %109 = load i32*, i32** %5, align 8, !tbaa !8
  %110 = getelementptr inbounds i32, i32* %109, i64 %18
  %111 = load i32, i32* %110, align 4, !tbaa !9
  %112 = icmp sgt i32 %111, 0
  %113 = load i8, i8* %28, align 1, !tbaa !15
  %114 = sext i8 %113 to i32
  %115 = add i32 %108, 48
  %116 = sub i32 %115, %114
  %117 = add i32 %108, -48
  %118 = add i32 %117, %114
  %119 = select i1 %112, i32 %118, i32 %116
  %120 = icmp eq i32* %21, %20
  br i1 %120, label %143, label %142

121:                                              ; preds = %17
  %122 = landingpad { i8*, i32 }
          cleanup
  br label %195

123:                                              ; preds = %104, %123
  %124 = phi i64 [ %131, %123 ], [ %105, %104 ]
  %125 = phi i32 [ %130, %123 ], [ %106, %104 ]
  %126 = getelementptr inbounds i8, i8* %28, i64 %124
  %127 = load i8, i8* %126, align 1, !tbaa !15
  %128 = sext i8 %127 to i32
  %129 = add i32 %125, -48
  %130 = add i32 %129, %128
  %131 = add nuw nsw i64 %124, 1
  %132 = icmp eq i64 %131, %27
  br i1 %132, label %107, label %123, !llvm.loop !19

133:                                              ; preds = %160
  %134 = landingpad { i8*, i32 }
          cleanup
  br label %137

135:                                              ; preds = %149
  %136 = landingpad { i8*, i32 }
          cleanup
  br label %137

137:                                              ; preds = %135, %133
  %138 = phi { i8*, i32 } [ %134, %133 ], [ %136, %135 ]
  %139 = load i8*, i8** %8, align 8, !tbaa !21
  %140 = icmp eq i8* %139, %10
  br i1 %140, label %195, label %141

141:                                              ; preds = %137
  call void @_ZdlPv(i8* %139) #12
  br label %195

142:                                              ; preds = %107
  store i32 %119, i32* %21, align 4, !tbaa !9
  br label %178

143:                                              ; preds = %107
  %144 = ptrtoint i32* %20 to i64
  %145 = ptrtoint i32* %22 to i64
  %146 = sub i64 %144, %145
  %147 = ashr exact i64 %146, 2
  %148 = icmp eq i64 %146, 9223372036854775804
  br i1 %148, label %149, label %151

149:                                              ; preds = %143
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0)) #13
          to label %150 unwind label %135

150:                                              ; preds = %149
  unreachable

151:                                              ; preds = %143
  %152 = icmp eq i64 %146, 0
  %153 = select i1 %152, i64 1, i64 %147
  %154 = add nsw i64 %153, %147
  %155 = icmp ult i64 %154, %147
  %156 = icmp ugt i64 %154, 2305843009213693951
  %157 = or i1 %155, %156
  %158 = select i1 %157, i64 2305843009213693951, i64 %154
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %165, label %160

160:                                              ; preds = %151
  %161 = shl nuw nsw i64 %158, 2
  %162 = invoke noalias nonnull i8* @_Znwm(i64 %161) #14
          to label %163 unwind label %133

163:                                              ; preds = %160
  %164 = bitcast i8* %162 to i32*
  br label %165

165:                                              ; preds = %163, %151
  %166 = phi i32* [ %164, %163 ], [ null, %151 ]
  %167 = getelementptr inbounds i32, i32* %166, i64 %147
  store i32 %119, i32* %167, align 4, !tbaa !9
  %168 = icmp sgt i64 %146, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %165
  %170 = bitcast i32* %166 to i8*
  %171 = bitcast i32* %22 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %170, i8* align 4 %171, i64 %146, i1 false) #12
  br label %172

172:                                              ; preds = %165, %169
  %173 = icmp eq i32* %22, null
  br i1 %173, label %176, label %174

174:                                              ; preds = %172
  %175 = bitcast i32* %22 to i8*
  call void @_ZdlPv(i8* nonnull %175) #12
  br label %176

176:                                              ; preds = %174, %172
  %177 = getelementptr inbounds i32, i32* %166, i64 %158
  br label %178

178:                                              ; preds = %176, %142
  %179 = phi i32* [ %166, %176 ], [ %22, %142 ]
  %180 = phi i32* [ %167, %176 ], [ %21, %142 ]
  %181 = phi i32* [ %177, %176 ], [ %20, %142 ]
  %182 = getelementptr inbounds i32, i32* %180, i64 1
  %183 = load i8*, i8** %8, align 8, !tbaa !21
  %184 = icmp eq i8* %183, %10
  br i1 %184, label %186, label %185

185:                                              ; preds = %178
  call void @_ZdlPv(i8* %183) #12
  br label %186

186:                                              ; preds = %178, %185
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  %187 = add nuw i64 %18, 1
  %188 = load i32*, i32** %4, align 8, !tbaa !3
  %189 = load i32*, i32** %5, align 8, !tbaa !8
  %190 = ptrtoint i32* %188 to i64
  %191 = ptrtoint i32* %189 to i64
  %192 = sub i64 %190, %191
  %193 = ashr exact i64 %192, 2
  %194 = icmp ugt i64 %193, %187
  br i1 %194, label %17, label %14, !llvm.loop !22

195:                                              ; preds = %141, %137, %121
  %196 = phi { i8*, i32 } [ %122, %121 ], [ %138, %137 ], [ %138, %141 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  %197 = icmp eq i32* %22, null
  br i1 %197, label %200, label %198

198:                                              ; preds = %195
  %199 = bitcast i32* %22 to i8*
  call void @_ZdlPv(i8* nonnull %199) #12
  br label %200

200:                                              ; preds = %195, %198
  resume { i8*, i32 } %196

201:                                              ; preds = %14, %217
  %202 = phi i64 [ %218, %217 ], [ 0, %14 ]
  br i1 %15, label %220, label %217

203:                                              ; preds = %217, %2, %14
  %204 = phi i32* [ %189, %14 ], [ %12, %2 ], [ %189, %217 ]
  %205 = phi i32* [ %188, %14 ], [ %11, %2 ], [ %188, %217 ]
  %206 = phi i32* [ %179, %14 ], [ null, %2 ], [ %179, %217 ]
  %207 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32* %204, i32** %207, align 8, !tbaa !8
  %208 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32* %205, i32** %208, align 8, !tbaa !3
  %209 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %210 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %211 = load i32*, i32** %210, align 8, !tbaa !23
  store i32* %211, i32** %209, align 8, !tbaa !23
  %212 = bitcast %"class.std::vector"* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %212, i8 0, i64 24, i1 false) #12
  %213 = icmp eq i32* %206, null
  br i1 %213, label %216, label %214

214:                                              ; preds = %203
  %215 = bitcast i32* %206 to i8*
  call void @_ZdlPv(i8* nonnull %215) #12
  br label %216

216:                                              ; preds = %203, %214
  ret void

217:                                              ; preds = %233, %201
  %218 = add nuw nsw i64 %202, 1
  %219 = icmp eq i64 %218, %193
  br i1 %219, label %203, label %201, !llvm.loop !24

220:                                              ; preds = %201, %233
  %221 = phi i64 [ %234, %233 ], [ 1, %201 ]
  %222 = add nsw i64 %221, -1
  %223 = getelementptr inbounds i32, i32* %179, i64 %222
  %224 = load i32, i32* %223, align 4, !tbaa !9
  %225 = getelementptr inbounds i32, i32* %179, i64 %221
  %226 = load i32, i32* %225, align 4, !tbaa !9
  %227 = icmp sgt i32 %224, %226
  br i1 %227, label %228, label %233

228:                                              ; preds = %220
  store i32 %224, i32* %225, align 4, !tbaa !9
  store i32 %226, i32* %223, align 4, !tbaa !9
  %229 = getelementptr inbounds i32, i32* %189, i64 %221
  %230 = load i32, i32* %229, align 4, !tbaa !9
  %231 = getelementptr inbounds i32, i32* %189, i64 %222
  %232 = load i32, i32* %231, align 4, !tbaa !9
  store i32 %232, i32* %229, align 4, !tbaa !9
  store i32 %230, i32* %231, align 4, !tbaa !9
  br label %233

233:                                              ; preds = %220, %228
  %234 = add nuw nsw i64 %221, 1
  %235 = icmp eq i64 %234, %193
  br i1 %235, label %217, label %220, !llvm.loop !25
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = alloca i64, align 8
  %6 = alloca [1 x %struct.__va_list_tag], align 16
  %7 = alloca i8, i64 %2, align 16
  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %8)
  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)
  call void @llvm.va_end(i8* nonnull %8)
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %13 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !26
  %14 = bitcast %union.anon* %12 to i8*
  %15 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #12
  store i64 %11, i64* %5, align 8, !tbaa !27
  %16 = icmp ugt i32 %10, 15
  br i1 %16, label %17, label %22

17:                                               ; preds = %4
  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %18, i8** %19, align 8, !tbaa !21
  %20 = load i64, i64* %5, align 8, !tbaa !27
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %20, i64* %21, align 8, !tbaa !15
  br label %22

22:                                               ; preds = %17, %4
  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]
  switch i64 %11, label %26 [
    i64 1, label %24
    i64 0, label %27
  ]

24:                                               ; preds = %22
  %25 = load i8, i8* %7, align 16, !tbaa !15
  store i8 %25, i8* %23, align 1, !tbaa !15
  br label %27

26:                                               ; preds = %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #12
  br label %27

27:                                               ; preds = %26, %24, %22
  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %29 = load i64, i64* %5, align 8, !tbaa !27
  %30 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %29, i64* %30, align 8, !tbaa !11
  %31 = load i8*, i8** %28, align 8, !tbaa !21
  %32 = getelementptr inbounds i8, i8* %31, i64 %29
  store i8 0, i8* %32, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #3

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #4

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #4

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #10

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #11

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nofree nosync nounwind willreturn }
attributes #5 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #10 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #11 = { nofree nosync nounwind readnone willreturn }
attributes #12 = { nounwind }
attributes #13 = { noreturn }
attributes #14 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = !{!12, !14, i64 8}
!12 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !13, i64 0, !14, i64 8, !6, i64 16}
!13 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!14 = !{!"long", !6, i64 0}
!15 = !{!6, !6, i64 0}
!16 = distinct !{!16, !17, !18}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = distinct !{!19, !17, !20, !18}
!20 = !{!"llvm.loop.unroll.runtime.disable"}
!21 = !{!12, !5, i64 0}
!22 = distinct !{!22, !17}
!23 = !{!4, !5, i64 16}
!24 = distinct !{!24, !17}
!25 = distinct !{!25, !17}
!26 = !{!13, !5, i64 0}
!27 = !{!14, !14, i64 0}
