; ModuleID = '../../Human_xBenchmarks_164/CPP_127/CPP_127.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_127/CPP_127.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str.1 = private unnamed_addr constant [4 x i8] c"YES\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z12intersectionB5cxx11St6vectorIiSaIiEES1_(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::vector"* nocapture readonly %1, %"class.std::vector"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !3
  %8 = load i32, i32* %5, align 4
  %9 = load i32, i32* %7, align 4
  %10 = icmp slt i32 %8, %9
  %11 = select i1 %10, i32 %9, i32 %8
  %12 = getelementptr inbounds i32, i32* %5, i64 1
  %13 = getelementptr inbounds i32, i32* %7, i64 1
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* %12, align 4
  %16 = icmp slt i32 %14, %15
  %17 = select i1 %16, i32 %14, i32 %15
  %18 = sub nsw i32 %17, %11
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %22, label %20

20:                                               ; preds = %3
  %21 = icmp slt i32 %18, 4
  br i1 %21, label %44, label %32

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %24 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !8
  %25 = bitcast %union.anon* %23 to i16*
  store i16 20302, i16* %25, align 8
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 2, i64* %26, align 8, !tbaa !10
  %27 = bitcast %union.anon* %23 to i8*
  %28 = getelementptr inbounds i8, i8* %27, i64 2
  store i8 0, i8* %28, align 2, !tbaa !13
  br label %50

29:                                               ; preds = %32
  %30 = mul nsw i32 %36, %36
  %31 = icmp sgt i32 %30, %18
  br i1 %31, label %44, label %32, !llvm.loop !14

32:                                               ; preds = %20, %29
  %33 = phi i32 [ %36, %29 ], [ 2, %20 ]
  %34 = srem i32 %18, %33
  %35 = icmp eq i32 %34, 0
  %36 = add nuw nsw i32 %33, 1
  br i1 %35, label %37, label %29

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %39 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %38, %union.anon** %39, align 8, !tbaa !8
  %40 = bitcast %union.anon* %38 to i16*
  store i16 20302, i16* %40, align 8
  %41 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 2, i64* %41, align 8, !tbaa !10
  %42 = bitcast %union.anon* %38 to i8*
  %43 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 0, i8* %43, align 2, !tbaa !13
  br label %50

44:                                               ; preds = %29, %20
  %45 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %46 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %45, %union.anon** %46, align 8, !tbaa !8
  %47 = bitcast %union.anon* %45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %47, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i64 3, i1 false) #2
  %48 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 3, i64* %48, align 8, !tbaa !10
  %49 = getelementptr inbounds i8, i8* %47, i64 3
  store i8 0, i8* %49, align 1, !tbaa !13
  br label %50

50:                                               ; preds = %44, %37, %22
  ret void
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !5, i64 0}
!9 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!10 = !{!11, !12, i64 8}
!11 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !9, i64 0, !12, i64 8, !6, i64 16}
!12 = !{!"long", !6, i64 0}
!13 = !{!6, !6, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
