; ModuleID = '../../Human_xBenchmarks_164/CPP_74/CPP_74.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_74/CPP_74.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" = type { %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

; Function Attrs: nofree nosync nounwind uwtable
define dso_local void @_Z11total_matchSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES7_(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture %1, %"class.std::vector"* nocapture %2) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %6, align 8, !tbaa !8
  %8 = ptrtoint %"class.std::__cxx11::basic_string"* %5 to i64
  %9 = ptrtoint %"class.std::__cxx11::basic_string"* %7 to i64
  %10 = sub i64 %8, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %36, label %12

12:                                               ; preds = %3
  %13 = ashr exact i64 %10, 5
  %14 = call i64 @llvm.umax.i64(i64 %13, i64 1)
  %15 = add i64 %14, -1
  %16 = and i64 %14, 3
  %17 = icmp ult i64 %15, 3
  br i1 %17, label %20, label %18

18:                                               ; preds = %12
  %19 = and i64 %14, -4
  br label %54

20:                                               ; preds = %54, %12
  %21 = phi i32 [ undef, %12 ], [ %76, %54 ]
  %22 = phi i64 [ 0, %12 ], [ %77, %54 ]
  %23 = phi i32 [ 0, %12 ], [ %76, %54 ]
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %36, label %25

25:                                               ; preds = %20, %25
  %26 = phi i64 [ %33, %25 ], [ %22, %20 ]
  %27 = phi i32 [ %32, %25 ], [ %23, %20 ]
  %28 = phi i64 [ %34, %25 ], [ %16, %20 ]
  %29 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %26, i32 1
  %30 = load i64, i64* %29, align 8, !tbaa !9
  %31 = trunc i64 %30 to i32
  %32 = add i32 %27, %31
  %33 = add nuw nsw i64 %26, 1
  %34 = add i64 %28, -1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %25, !llvm.loop !13

36:                                               ; preds = %20, %25, %3
  %37 = phi i32 [ 0, %3 ], [ %21, %20 ], [ %32, %25 ]
  %38 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %39 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %38, align 8, !tbaa !3
  %40 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %41 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %40, align 8, !tbaa !8
  %42 = ptrtoint %"class.std::__cxx11::basic_string"* %39 to i64
  %43 = ptrtoint %"class.std::__cxx11::basic_string"* %41 to i64
  %44 = sub i64 %42, %43
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %122, label %46

46:                                               ; preds = %36
  %47 = ashr exact i64 %44, 5
  %48 = call i64 @llvm.umax.i64(i64 %47, i64 1)
  %49 = add i64 %48, -1
  %50 = and i64 %48, 3
  %51 = icmp ult i64 %49, 3
  br i1 %51, label %106, label %52

52:                                               ; preds = %46
  %53 = and i64 %48, -4
  br label %80

54:                                               ; preds = %54, %18
  %55 = phi i64 [ 0, %18 ], [ %77, %54 ]
  %56 = phi i32 [ 0, %18 ], [ %76, %54 ]
  %57 = phi i64 [ %19, %18 ], [ %78, %54 ]
  %58 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %55, i32 1
  %59 = load i64, i64* %58, align 8, !tbaa !9
  %60 = trunc i64 %59 to i32
  %61 = add i32 %56, %60
  %62 = or i64 %55, 1
  %63 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %62, i32 1
  %64 = load i64, i64* %63, align 8, !tbaa !9
  %65 = trunc i64 %64 to i32
  %66 = add i32 %61, %65
  %67 = or i64 %55, 2
  %68 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %67, i32 1
  %69 = load i64, i64* %68, align 8, !tbaa !9
  %70 = trunc i64 %69 to i32
  %71 = add i32 %66, %70
  %72 = or i64 %55, 3
  %73 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 %72, i32 1
  %74 = load i64, i64* %73, align 8, !tbaa !9
  %75 = trunc i64 %74 to i32
  %76 = add i32 %71, %75
  %77 = add nuw nsw i64 %55, 4
  %78 = add i64 %57, -4
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %20, label %54, !llvm.loop !15

80:                                               ; preds = %80, %52
  %81 = phi i64 [ 0, %52 ], [ %103, %80 ]
  %82 = phi i32 [ 0, %52 ], [ %102, %80 ]
  %83 = phi i64 [ %53, %52 ], [ %104, %80 ]
  %84 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %41, i64 %81, i32 1
  %85 = load i64, i64* %84, align 8, !tbaa !9
  %86 = trunc i64 %85 to i32
  %87 = add i32 %82, %86
  %88 = or i64 %81, 1
  %89 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %41, i64 %88, i32 1
  %90 = load i64, i64* %89, align 8, !tbaa !9
  %91 = trunc i64 %90 to i32
  %92 = add i32 %87, %91
  %93 = or i64 %81, 2
  %94 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %41, i64 %93, i32 1
  %95 = load i64, i64* %94, align 8, !tbaa !9
  %96 = trunc i64 %95 to i32
  %97 = add i32 %92, %96
  %98 = or i64 %81, 3
  %99 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %41, i64 %98, i32 1
  %100 = load i64, i64* %99, align 8, !tbaa !9
  %101 = trunc i64 %100 to i32
  %102 = add i32 %97, %101
  %103 = add nuw nsw i64 %81, 4
  %104 = add i64 %83, -4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %80, !llvm.loop !17

106:                                              ; preds = %80, %46
  %107 = phi i32 [ undef, %46 ], [ %102, %80 ]
  %108 = phi i64 [ 0, %46 ], [ %103, %80 ]
  %109 = phi i32 [ 0, %46 ], [ %102, %80 ]
  %110 = icmp eq i64 %50, 0
  br i1 %110, label %122, label %111

111:                                              ; preds = %106, %111
  %112 = phi i64 [ %119, %111 ], [ %108, %106 ]
  %113 = phi i32 [ %118, %111 ], [ %109, %106 ]
  %114 = phi i64 [ %120, %111 ], [ %50, %106 ]
  %115 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %41, i64 %112, i32 1
  %116 = load i64, i64* %115, align 8, !tbaa !9
  %117 = trunc i64 %116 to i32
  %118 = add i32 %113, %117
  %119 = add nuw nsw i64 %112, 1
  %120 = add i64 %114, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %111, !llvm.loop !18

122:                                              ; preds = %106, %111, %36
  %123 = phi i32 [ 0, %36 ], [ %107, %106 ], [ %118, %111 ]
  %124 = icmp sgt i32 %37, %123
  %125 = select i1 %124, %"class.std::vector"* %2, %"class.std::vector"* %1
  %126 = select i1 %124, %"class.std::__cxx11::basic_string"* %41, %"class.std::__cxx11::basic_string"* %7
  %127 = select i1 %124, %"class.std::__cxx11::basic_string"* %39, %"class.std::__cxx11::basic_string"* %5
  %128 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %125, i64 0, i32 0, i32 0, i32 0, i32 2
  %129 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %128, align 8, !tbaa !19
  %130 = bitcast %"class.std::vector"* %125 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %130, i8 0, i64 24, i1 false) #3
  %131 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.std::__cxx11::basic_string"* %126, %"class.std::__cxx11::basic_string"** %131, align 8
  %132 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store %"class.std::__cxx11::basic_string"* %127, %"class.std::__cxx11::basic_string"** %132, align 8
  %133 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.std::__cxx11::basic_string"* %129, %"class.std::__cxx11::basic_string"** %133, align 8
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { nofree nosync nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nounwind willreturn writeonly }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !12, i64 8}
!10 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !11, i64 0, !12, i64 8, !6, i64 16}
!11 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!12 = !{!"long", !6, i64 0}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
!17 = distinct !{!17, !16}
!18 = distinct !{!18, !14}
!19 = !{!4, !5, i64 16}
