; ModuleID = '../../Human_xBenchmarks_164/CPP_6/CPP_6.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_6/CPP_6.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z19parse_nested_parensNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca %"class.std::__cxx11::basic_string", align 8
  %4 = bitcast %"class.std::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false) #8
  %5 = bitcast %"class.std::__cxx11::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2
  %7 = bitcast %"class.std::__cxx11::basic_string"* %3 to %union.anon**
  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1
  store i64 0, i64* %8, align 8, !tbaa !8
  %9 = bitcast %union.anon* %6 to i8*
  store i8 0, i8* %9, align 8, !tbaa !11
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2, i32 0
  %14 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %16 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i64, i64* %10, align 8, !tbaa !8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %141, label %19

19:                                               ; preds = %2, %128
  %20 = phi i32* [ %129, %128 ], [ null, %2 ]
  %21 = phi i32* [ %130, %128 ], [ null, %2 ]
  %22 = phi i32* [ %131, %128 ], [ null, %2 ]
  %23 = phi i64 [ %134, %128 ], [ 0, %2 ]
  %24 = phi i32 [ %133, %128 ], [ 0, %2 ]
  %25 = phi i32 [ %132, %128 ], [ 0, %2 ]
  %26 = load i8*, i8** %11, align 8, !tbaa !12
  %27 = getelementptr inbounds i8, i8* %26, i64 %23
  %28 = load i8, i8* %27, align 1, !tbaa !11
  switch i8 %28, label %128 [
    i8 40, label %29
    i8 41, label %64
  ]

29:                                               ; preds = %19
  %30 = add nsw i32 %24, 1
  %31 = icmp slt i32 %24, %25
  %32 = select i1 %31, i32 %25, i32 %30
  %33 = load i64, i64* %8, align 8, !tbaa !8
  %34 = add i64 %33, 1
  %35 = load i8*, i8** %12, align 8, !tbaa !12
  %36 = icmp eq i8* %35, %9
  %37 = load i64, i64* %13, align 8
  %38 = select i1 %36, i64 15, i64 %37
  %39 = icmp ugt i64 %34, %38
  br i1 %39, label %56, label %59

40:                                               ; preds = %56, %73, %122, %103
  %41 = phi i32* [ %20, %56 ], [ %20, %73 ], [ %123, %122 ], [ %20, %103 ]
  %42 = landingpad { i8*, i32 }
          cleanup
  br label %45

43:                                               ; preds = %92
  %44 = landingpad { i8*, i32 }
          cleanup
  br label %45

45:                                               ; preds = %43, %40
  %46 = phi i32* [ %41, %40 ], [ %20, %43 ]
  %47 = phi { i8*, i32 } [ %42, %40 ], [ %44, %43 ]
  %48 = load i8*, i8** %12, align 8, !tbaa !12
  %49 = icmp eq i8* %48, %9
  br i1 %49, label %51, label %50

50:                                               ; preds = %45
  call void @_ZdlPv(i8* %48) #8
  br label %51

51:                                               ; preds = %45, %50
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8
  %52 = icmp eq i32* %46, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = bitcast i32* %46 to i8*
  call void @_ZdlPv(i8* nonnull %54) #8
  br label %55

55:                                               ; preds = %51, %53
  resume { i8*, i32 } %47

56:                                               ; preds = %29
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %3, i64 %33, i64 0, i8* null, i64 1)
          to label %57 unwind label %40

57:                                               ; preds = %56
  %58 = load i8*, i8** %12, align 8, !tbaa !12
  br label %59

59:                                               ; preds = %57, %29
  %60 = phi i8* [ %58, %57 ], [ %35, %29 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 %33
  store i8 40, i8* %61, align 1, !tbaa !11
  store i64 %34, i64* %8, align 8, !tbaa !8
  %62 = load i8*, i8** %12, align 8, !tbaa !12
  %63 = getelementptr inbounds i8, i8* %62, i64 %34
  store i8 0, i8* %63, align 1, !tbaa !11
  br label %128

64:                                               ; preds = %19
  %65 = add nsw i32 %24, -1
  %66 = load i64, i64* %8, align 8, !tbaa !8
  %67 = add i64 %66, 1
  %68 = load i8*, i8** %12, align 8, !tbaa !12
  %69 = icmp eq i8* %68, %9
  %70 = load i64, i64* %13, align 8
  %71 = select i1 %69, i64 15, i64 %70
  %72 = icmp ugt i64 %67, %71
  br i1 %72, label %73, label %76

73:                                               ; preds = %64
  invoke void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %3, i64 %66, i64 0, i8* null, i64 1)
          to label %74 unwind label %40

74:                                               ; preds = %73
  %75 = load i8*, i8** %12, align 8, !tbaa !12
  br label %76

76:                                               ; preds = %74, %64
  %77 = phi i8* [ %75, %74 ], [ %68, %64 ]
  %78 = getelementptr inbounds i8, i8* %77, i64 %66
  store i8 41, i8* %78, align 1, !tbaa !11
  store i64 %67, i64* %8, align 8, !tbaa !8
  %79 = load i8*, i8** %12, align 8, !tbaa !12
  %80 = getelementptr inbounds i8, i8* %79, i64 %67
  store i8 0, i8* %80, align 1, !tbaa !11
  %81 = icmp eq i32 %65, 0
  br i1 %81, label %82, label %128

82:                                               ; preds = %76
  %83 = icmp eq i32* %22, %21
  br i1 %83, label %86, label %84

84:                                               ; preds = %82
  store i32 %25, i32* %22, align 4, !tbaa !13
  %85 = getelementptr inbounds i32, i32* %22, i64 1
  store i32* %85, i32** %14, align 8, !tbaa !15
  br label %122

86:                                               ; preds = %82
  %87 = ptrtoint i32* %21 to i64
  %88 = ptrtoint i32* %20 to i64
  %89 = sub i64 %87, %88
  %90 = ashr exact i64 %89, 2
  %91 = icmp eq i64 %89, 9223372036854775804
  br i1 %91, label %92, label %94

92:                                               ; preds = %86
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0)) #9
          to label %93 unwind label %43

93:                                               ; preds = %92
  unreachable

94:                                               ; preds = %86
  %95 = icmp eq i64 %89, 0
  %96 = select i1 %95, i64 1, i64 %90
  %97 = add nsw i64 %96, %90
  %98 = icmp ult i64 %97, %90
  %99 = icmp ugt i64 %97, 2305843009213693951
  %100 = or i1 %98, %99
  %101 = select i1 %100, i64 2305843009213693951, i64 %97
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %108, label %103

103:                                              ; preds = %94
  %104 = shl nuw nsw i64 %101, 2
  %105 = invoke noalias nonnull i8* @_Znwm(i64 %104) #10
          to label %106 unwind label %40

106:                                              ; preds = %103
  %107 = bitcast i8* %105 to i32*
  br label %108

108:                                              ; preds = %106, %94
  %109 = phi i32* [ %107, %106 ], [ null, %94 ]
  %110 = getelementptr inbounds i32, i32* %109, i64 %90
  store i32 %25, i32* %110, align 4, !tbaa !13
  %111 = icmp sgt i64 %89, 0
  br i1 %111, label %112, label %115

112:                                              ; preds = %108
  %113 = bitcast i32* %109 to i8*
  %114 = bitcast i32* %20 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %113, i8* align 4 %114, i64 %89, i1 false) #8
  br label %115

115:                                              ; preds = %108, %112
  %116 = getelementptr inbounds i32, i32* %110, i64 1
  %117 = icmp eq i32* %20, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %115
  %119 = bitcast i32* %20 to i8*
  call void @_ZdlPv(i8* nonnull %119) #8
  br label %120

120:                                              ; preds = %118, %115
  store i32* %109, i32** %16, align 8, !tbaa !17
  store i32* %116, i32** %14, align 8, !tbaa !15
  %121 = getelementptr inbounds i32, i32* %109, i64 %101
  store i32* %121, i32** %15, align 8, !tbaa !18
  br label %122

122:                                              ; preds = %120, %84
  %123 = phi i32* [ %109, %120 ], [ %20, %84 ]
  %124 = phi i32* [ %121, %120 ], [ %21, %84 ]
  %125 = phi i32* [ %116, %120 ], [ %85, %84 ]
  %126 = load i64, i64* %8, align 8, !tbaa !8
  %127 = invoke nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %3, i64 0, i64 %126, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i64 0)
          to label %128 unwind label %40

128:                                              ; preds = %19, %122, %59, %76
  %129 = phi i32* [ %20, %76 ], [ %20, %59 ], [ %123, %122 ], [ %20, %19 ]
  %130 = phi i32* [ %21, %76 ], [ %21, %59 ], [ %124, %122 ], [ %21, %19 ]
  %131 = phi i32* [ %22, %76 ], [ %22, %59 ], [ %125, %122 ], [ %22, %19 ]
  %132 = phi i32 [ %25, %76 ], [ %32, %59 ], [ 0, %122 ], [ %25, %19 ]
  %133 = phi i32 [ %65, %76 ], [ %30, %59 ], [ 0, %122 ], [ %24, %19 ]
  %134 = add nuw i64 %23, 1
  %135 = load i64, i64* %10, align 8, !tbaa !8
  %136 = icmp ugt i64 %135, %134
  br i1 %136, label %19, label %137, !llvm.loop !19

137:                                              ; preds = %128
  %138 = load i8*, i8** %12, align 8, !tbaa !12
  %139 = icmp eq i8* %138, %9
  br i1 %139, label %141, label %140

140:                                              ; preds = %137
  call void @_ZdlPv(i8* %138) #8
  br label %141

141:                                              ; preds = %2, %137, %140
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

declare dso_local nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { argmemonly nofree nounwind willreturn writeonly }
attributes #8 = { nounwind }
attributes #9 = { noreturn }
attributes #10 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !10, i64 8}
!9 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !4, i64 0, !10, i64 8, !6, i64 16}
!10 = !{!"long", !6, i64 0}
!11 = !{!6, !6, i64 0}
!12 = !{!9, !5, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"int", !6, i64 0}
!15 = !{!16, !5, i64 8}
!16 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!17 = !{!16, !5, i64 0}
!18 = !{!16, !5, i64 16}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.mustprogress"}
