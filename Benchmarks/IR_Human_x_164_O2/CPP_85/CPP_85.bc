; ModuleID = '../../Human_xBenchmarks_164/CPP_85/CPP_85.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_85/CPP_85.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z3addSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !8
  %6 = ptrtoint i32* %3 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp ugt i64 %9, 1
  br i1 %10, label %11, label %75

11:                                               ; preds = %1
  %12 = add nsw i64 %9, -2
  %13 = lshr i64 %12, 1
  %14 = add nuw i64 %13, 1
  %15 = icmp ult i64 %12, 14
  br i1 %15, label %71, label %16

16:                                               ; preds = %11
  %17 = and i64 %14, -8
  %18 = shl i64 %17, 1
  %19 = or i64 %18, 1
  br label %20

20:                                               ; preds = %20, %16
  %21 = phi i64 [ 0, %16 ], [ %65, %20 ]
  %22 = phi <4 x i32> [ zeroinitializer, %16 ], [ %63, %20 ]
  %23 = phi <4 x i32> [ zeroinitializer, %16 ], [ %64, %20 ]
  %24 = shl i64 %21, 1
  %25 = or i64 %24, 1
  %26 = or i64 %24, 3
  %27 = or i64 %24, 5
  %28 = or i64 %24, 7
  %29 = or i64 %24, 9
  %30 = or i64 %24, 11
  %31 = or i64 %24, 13
  %32 = or i64 %24, 15
  %33 = getelementptr inbounds i32, i32* %5, i64 %25
  %34 = getelementptr inbounds i32, i32* %5, i64 %26
  %35 = getelementptr inbounds i32, i32* %5, i64 %27
  %36 = getelementptr inbounds i32, i32* %5, i64 %28
  %37 = getelementptr inbounds i32, i32* %5, i64 %29
  %38 = getelementptr inbounds i32, i32* %5, i64 %30
  %39 = getelementptr inbounds i32, i32* %5, i64 %31
  %40 = getelementptr inbounds i32, i32* %5, i64 %32
  %41 = load i32, i32* %33, align 4, !tbaa !9
  %42 = load i32, i32* %34, align 4, !tbaa !9
  %43 = load i32, i32* %35, align 4, !tbaa !9
  %44 = load i32, i32* %36, align 4, !tbaa !9
  %45 = insertelement <4 x i32> poison, i32 %41, i32 0
  %46 = insertelement <4 x i32> %45, i32 %42, i32 1
  %47 = insertelement <4 x i32> %46, i32 %43, i32 2
  %48 = insertelement <4 x i32> %47, i32 %44, i32 3
  %49 = load i32, i32* %37, align 4, !tbaa !9
  %50 = load i32, i32* %38, align 4, !tbaa !9
  %51 = load i32, i32* %39, align 4, !tbaa !9
  %52 = load i32, i32* %40, align 4, !tbaa !9
  %53 = insertelement <4 x i32> poison, i32 %49, i32 0
  %54 = insertelement <4 x i32> %53, i32 %50, i32 1
  %55 = insertelement <4 x i32> %54, i32 %51, i32 2
  %56 = insertelement <4 x i32> %55, i32 %52, i32 3
  %57 = and <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %58 = and <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  %59 = icmp eq <4 x i32> %57, zeroinitializer
  %60 = icmp eq <4 x i32> %58, zeroinitializer
  %61 = select <4 x i1> %59, <4 x i32> %48, <4 x i32> zeroinitializer
  %62 = select <4 x i1> %60, <4 x i32> %56, <4 x i32> zeroinitializer
  %63 = add <4 x i32> %61, %22
  %64 = add <4 x i32> %62, %23
  %65 = add nuw i64 %21, 8
  %66 = icmp eq i64 %65, %17
  br i1 %66, label %67, label %20, !llvm.loop !11

67:                                               ; preds = %20
  %68 = add <4 x i32> %64, %63
  %69 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %68)
  %70 = icmp eq i64 %14, %17
  br i1 %70, label %75, label %71

71:                                               ; preds = %11, %67
  %72 = phi i64 [ 0, %11 ], [ %17, %67 ]
  %73 = phi i64 [ 1, %11 ], [ %19, %67 ]
  %74 = phi i32 [ 0, %11 ], [ %69, %67 ]
  br label %77

75:                                               ; preds = %77, %67, %1
  %76 = phi i32 [ 0, %1 ], [ %69, %67 ], [ %86, %77 ]
  ret i32 %76

77:                                               ; preds = %71, %77
  %78 = phi i64 [ %87, %77 ], [ %72, %71 ]
  %79 = phi i64 [ %89, %77 ], [ %73, %71 ]
  %80 = phi i32 [ %86, %77 ], [ %74, %71 ]
  %81 = getelementptr inbounds i32, i32* %5, i64 %79
  %82 = load i32, i32* %81, align 4, !tbaa !9
  %83 = and i32 %82, 1
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i32 %82, i32 0
  %86 = add nsw i32 %85, %80
  %87 = add nuw nsw i64 %78, 1
  %88 = shl nuw nsw i64 %87, 1
  %89 = or i64 %88, 1
  %90 = icmp eq i64 %78, %13
  br i1 %90, label %75, label %77, !llvm.loop !14
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !12, !15, !13}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
