; ModuleID = '../../Human_xBenchmarks_164/CPP_151/CPP_151.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_151/CPP_151.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local i64 @_Z21double_the_differenceSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8, !tbaa !8
  %6 = ptrtoint float* %3 to i64
  %7 = ptrtoint float* %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 2
  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)
  br label %15

13:                                               ; preds = %34, %1
  %14 = phi i64 [ 0, %1 ], [ %35, %34 ]
  ret i64 %14

15:                                               ; preds = %10, %34
  %16 = phi i64 [ 0, %10 ], [ %36, %34 ]
  %17 = phi i64 [ 0, %10 ], [ %35, %34 ]
  %18 = getelementptr inbounds float, float* %5, i64 %16
  %19 = load float, float* %18, align 4, !tbaa !9
  %20 = tail call float @llvm.round.f32(float %19) #3
  %21 = fsub float %19, %20
  %22 = fpext float %21 to double
  %23 = fcmp olt double %22, 1.000000e-04
  %24 = fcmp ogt float %19, 0.000000e+00
  %25 = select i1 %23, i1 %24, i1 false
  br i1 %25, label %26, label %34

26:                                               ; preds = %15
  %27 = fptosi float %20 to i32
  %28 = srem i32 %27, 2
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = mul nsw i32 %27, %27
  %32 = zext i32 %31 to i64
  %33 = add nsw i64 %17, %32
  br label %34

34:                                               ; preds = %15, %30, %26
  %35 = phi i64 [ %33, %30 ], [ %17, %26 ], [ %17, %15 ]
  %36 = add nuw nsw i64 %16, 1
  %37 = icmp eq i64 %36, %12
  br i1 %37, label %13, label %15, !llvm.loop !11
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.round.f32(float) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
