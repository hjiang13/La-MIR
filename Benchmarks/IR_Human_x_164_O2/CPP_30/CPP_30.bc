; ModuleID = '../../Human_xBenchmarks_164/CPP_30/CPP_30.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_30/CPP_30.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

$_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z12get_positiveSt6vectorIfSaIfEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %7, i8 0, i64 24, i1 false)
  %8 = load float*, float** %3, align 8, !tbaa !3
  %9 = load float*, float** %4, align 8, !tbaa !8
  %10 = icmp eq float* %8, %9
  br i1 %10, label %45, label %11

11:                                               ; preds = %2, %36
  %12 = phi float* [ %37, %36 ], [ %9, %2 ]
  %13 = phi float* [ %38, %36 ], [ %8, %2 ]
  %14 = phi i64 [ %39, %36 ], [ 0, %2 ]
  %15 = getelementptr inbounds float, float* %12, i64 %14
  %16 = load float, float* %15, align 4, !tbaa !9
  %17 = fcmp ogt float %16, 0.000000e+00
  br i1 %17, label %18, label %36

18:                                               ; preds = %11
  %19 = load float*, float** %5, align 8, !tbaa !3
  %20 = load float*, float** %6, align 8, !tbaa !11
  %21 = icmp eq float* %19, %20
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  store float %16, float* %19, align 4, !tbaa !9
  %23 = getelementptr inbounds float, float* %19, i64 1
  store float* %23, float** %5, align 8, !tbaa !3
  br label %36

24:                                               ; preds = %18
  invoke void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %19, float* nonnull align 4 dereferenceable(4) %15)
          to label %25 unwind label %28

25:                                               ; preds = %24
  %26 = load float*, float** %3, align 8, !tbaa !3
  %27 = load float*, float** %4, align 8, !tbaa !8
  br label %36

28:                                               ; preds = %24
  %29 = landingpad { i8*, i32 }
          cleanup
  %30 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = load float*, float** %30, align 8, !tbaa !8
  %32 = icmp eq float* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %28
  %34 = bitcast float* %31 to i8*
  tail call void @_ZdlPv(i8* nonnull %34) #6
  br label %35

35:                                               ; preds = %28, %33
  resume { i8*, i32 } %29

36:                                               ; preds = %25, %22, %11
  %37 = phi float* [ %27, %25 ], [ %12, %22 ], [ %12, %11 ]
  %38 = phi float* [ %26, %25 ], [ %13, %22 ], [ %13, %11 ]
  %39 = add nuw i64 %14, 1
  %40 = ptrtoint float* %38 to i64
  %41 = ptrtoint float* %37 to i64
  %42 = sub i64 %40, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp ugt i64 %43, %39
  br i1 %44, label %11, label %45, !llvm.loop !12

45:                                               ; preds = %36, %2
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %1, float* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load float*, float** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8, !tbaa !8
  %8 = ptrtoint float* %5 to i64
  %9 = ptrtoint float* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint float* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %14
  %27 = shl nuw nsw i64 %21, 2
  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #8
  %29 = bitcast i8* %28 to float*
  br label %30

30:                                               ; preds = %14, %26
  %31 = phi float* [ %29, %26 ], [ null, %14 ]
  %32 = getelementptr inbounds float, float* %31, i64 %24
  %33 = load float, float* %2, align 4, !tbaa !9
  store float %33, float* %32, align 4, !tbaa !9
  %34 = icmp sgt i64 %23, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = bitcast float* %31 to i8*
  %37 = bitcast float* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %23, i1 false) #6
  br label %38

38:                                               ; preds = %30, %35
  %39 = getelementptr inbounds float, float* %32, i64 1
  %40 = sub i64 %8, %22
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  %43 = bitcast float* %39 to i8*
  %44 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 4 %44, i64 %40, i1 false) #6
  br label %45

45:                                               ; preds = %38, %42
  %46 = icmp eq float* %7, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = bitcast float* %7 to i8*
  tail call void @_ZdlPv(i8* nonnull %48) #6
  br label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %51 = ashr exact i64 %40, 2
  %52 = getelementptr inbounds float, float* %39, i64 %51
  store float* %31, float** %6, align 8, !tbaa !8
  store float* %52, float** %4, align 8, !tbaa !3
  %53 = getelementptr inbounds float, float* %31, i64 %21
  store float* %53, float** %50, align 8, !tbaa !11
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nounwind }
attributes #7 = { noreturn }
attributes #8 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = !{!4, !5, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
