; ModuleID = '../../Human_xBenchmarks_164/CPP_68/CPP_68.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_68/CPP_68.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag = comdat any

@.str = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z5pluckSt6vectorIiSaIiEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca [2 x i32], align 4
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = bitcast [2 x i32]* %3 to i8*
  %9 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1
  %11 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 2
  %12 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %12, i8 0, i64 24, i1 false)
  %13 = load i32*, i32** %4, align 8, !tbaa !3
  %14 = load i32*, i32** %5, align 8, !tbaa !8
  %15 = icmp eq i32* %13, %14
  br i1 %15, label %52, label %16

16:                                               ; preds = %2, %43
  %17 = phi i32* [ %44, %43 ], [ %14, %2 ]
  %18 = phi i32* [ %45, %43 ], [ %13, %2 ]
  %19 = phi i64 [ %46, %43 ], [ 0, %2 ]
  %20 = getelementptr inbounds i32, i32* %17, i64 %19
  %21 = load i32, i32* %20, align 4, !tbaa !9
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %43

24:                                               ; preds = %16
  %25 = load i32*, i32** %6, align 8, !tbaa !3
  %26 = load i32*, i32** %7, align 8, !tbaa !8
  %27 = icmp eq i32* %25, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = load i32, i32* %26, align 4, !tbaa !9
  %30 = icmp slt i32 %21, %29
  br i1 %30, label %31, label %43

31:                                               ; preds = %28, %24
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #8
  store i32 %21, i32* %9, align 4, !tbaa !9
  %32 = trunc i64 %19 to i32
  store i32 %32, i32* %10, align 4, !tbaa !9
  invoke void @_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* nonnull %9, i32* nonnull %11)
          to label %33 unwind label %36

33:                                               ; preds = %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #8
  %34 = load i32*, i32** %4, align 8, !tbaa !3
  %35 = load i32*, i32** %5, align 8, !tbaa !8
  br label %43

36:                                               ; preds = %31
  %37 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #8
  %38 = load i32*, i32** %7, align 8, !tbaa !8
  %39 = icmp eq i32* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  %41 = bitcast i32* %38 to i8*
  call void @_ZdlPv(i8* nonnull %41) #8
  br label %42

42:                                               ; preds = %36, %40
  resume { i8*, i32 } %37

43:                                               ; preds = %16, %28, %33
  %44 = phi i32* [ %17, %16 ], [ %17, %28 ], [ %35, %33 ]
  %45 = phi i32* [ %18, %16 ], [ %18, %28 ], [ %34, %33 ]
  %46 = add nuw i64 %19, 1
  %47 = ptrtoint i32* %45 to i64
  %48 = ptrtoint i32* %44 to i64
  %49 = sub i64 %47, %48
  %50 = ashr exact i64 %49, 2
  %51 = icmp ugt i64 %50, %46
  br i1 %51, label %16, label %52, !llvm.loop !11

52:                                               ; preds = %43, %2
  ret void
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = load i32*, i32** %8, align 8, !tbaa !13
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8, !tbaa !8
  %12 = ptrtoint i32* %9 to i64
  %13 = ptrtoint i32* %11 to i64
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp ugt i64 %7, %15
  br i1 %16, label %17, label %35

17:                                               ; preds = %3
  %18 = icmp ugt i64 %7, 2305843009213693951
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #9
  unreachable

20:                                               ; preds = %17
  %21 = tail call noalias nonnull i8* @_Znwm(i64 %6) #10
  %22 = bitcast i8* %21 to i32*
  %23 = icmp eq i64 %6, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %25, i64 %6, i1 false) #8
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i32*, i32** %10, align 8, !tbaa !8
  %29 = icmp eq i32* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = bitcast i32* %28 to i8*
  tail call void @_ZdlPv(i8* nonnull %31) #8
  br label %32

32:                                               ; preds = %26, %30
  %33 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %21, i8** %33, align 8, !tbaa !8
  %34 = getelementptr inbounds i32, i32* %22, i64 %7
  store i32* %34, i32** %27, align 8, !tbaa !3
  store i32* %34, i32** %8, align 8, !tbaa !13
  br label %71

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %37 = load i32*, i32** %36, align 8, !tbaa !3
  %38 = ptrtoint i32* %37 to i64
  %39 = sub i64 %38, %13
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, %7
  br i1 %41, label %53, label %42

42:                                               ; preds = %35
  %43 = icmp eq i64 %6, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %42
  %45 = bitcast i32* %11 to i8*
  %46 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %46, i64 %6, i1 false) #8
  %47 = load i32*, i32** %36, align 8, !tbaa !3
  br label %48

48:                                               ; preds = %42, %44
  %49 = phi i32* [ %37, %42 ], [ %47, %44 ]
  %50 = getelementptr inbounds i32, i32* %11, i64 %7
  %51 = icmp eq i32* %49, %50
  br i1 %51, label %71, label %52

52:                                               ; preds = %48
  store i32* %50, i32** %36, align 8, !tbaa !3
  br label %71

53:                                               ; preds = %35
  %54 = getelementptr inbounds i32, i32* %1, i64 %40
  %55 = ptrtoint i32* %54 to i64
  %56 = icmp eq i64 %39, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = bitcast i32* %11 to i8*
  %59 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %59, i64 %39, i1 false) #8
  %60 = load i32*, i32** %36, align 8, !tbaa !3
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi i32* [ %37, %53 ], [ %60, %57 ]
  %63 = sub i64 %4, %55
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %61
  %66 = bitcast i32* %62 to i8*
  %67 = bitcast i32* %54 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %63, i1 false) #8
  br label %68

68:                                               ; preds = %61, %65
  %69 = ashr exact i64 %63, 2
  %70 = getelementptr inbounds i32, i32* %62, i64 %69
  store i32* %70, i32** %36, align 8, !tbaa !3
  br label %71

71:                                               ; preds = %52, %48, %68, %32
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { argmemonly nofree nounwind willreturn }
attributes #8 = { nounwind }
attributes #9 = { noreturn }
attributes #10 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!4, !5, i64 16}
