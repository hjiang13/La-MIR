; ModuleID = '../../Human_xBenchmarks_164/CPP_122/CPP_122.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_122/CPP_122.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z12add_elementsSt6vectorIiSaIiEEi(%"class.std::vector"* nocapture readonly %0, i32 %1) local_unnamed_addr #0 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %86

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8, !tbaa !3
  %7 = zext i32 %1 to i64
  %8 = icmp ult i32 %1, 8
  br i1 %8, label %83, label %9

9:                                                ; preds = %4
  %10 = and i64 %7, 4294967288
  %11 = add nsw i64 %10, -8
  %12 = lshr exact i64 %11, 3
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %55, label %16

16:                                               ; preds = %9
  %17 = and i64 %13, 4611686018427387902
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %52, %18 ]
  %20 = phi <4 x i32> [ zeroinitializer, %16 ], [ %50, %18 ]
  %21 = phi <4 x i32> [ zeroinitializer, %16 ], [ %51, %18 ]
  %22 = phi i64 [ %17, %16 ], [ %53, %18 ]
  %23 = getelementptr inbounds i32, i32* %6, i64 %19
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 4, !tbaa !8
  %26 = getelementptr inbounds i32, i32* %23, i64 4
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !tbaa !8
  %29 = add <4 x i32> %25, <i32 99, i32 99, i32 99, i32 99>
  %30 = add <4 x i32> %28, <i32 99, i32 99, i32 99, i32 99>
  %31 = icmp ult <4 x i32> %29, <i32 199, i32 199, i32 199, i32 199>
  %32 = icmp ult <4 x i32> %30, <i32 199, i32 199, i32 199, i32 199>
  %33 = select <4 x i1> %31, <4 x i32> %25, <4 x i32> zeroinitializer
  %34 = select <4 x i1> %32, <4 x i32> %28, <4 x i32> zeroinitializer
  %35 = add <4 x i32> %33, %20
  %36 = add <4 x i32> %34, %21
  %37 = or i64 %19, 8
  %38 = getelementptr inbounds i32, i32* %6, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4, !tbaa !8
  %41 = getelementptr inbounds i32, i32* %38, i64 4
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !8
  %44 = add <4 x i32> %40, <i32 99, i32 99, i32 99, i32 99>
  %45 = add <4 x i32> %43, <i32 99, i32 99, i32 99, i32 99>
  %46 = icmp ult <4 x i32> %44, <i32 199, i32 199, i32 199, i32 199>
  %47 = icmp ult <4 x i32> %45, <i32 199, i32 199, i32 199, i32 199>
  %48 = select <4 x i1> %46, <4 x i32> %40, <4 x i32> zeroinitializer
  %49 = select <4 x i1> %47, <4 x i32> %43, <4 x i32> zeroinitializer
  %50 = add <4 x i32> %48, %35
  %51 = add <4 x i32> %49, %36
  %52 = add nuw i64 %19, 16
  %53 = add i64 %22, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %18, !llvm.loop !10

55:                                               ; preds = %18, %9
  %56 = phi <4 x i32> [ undef, %9 ], [ %50, %18 ]
  %57 = phi <4 x i32> [ undef, %9 ], [ %51, %18 ]
  %58 = phi i64 [ 0, %9 ], [ %52, %18 ]
  %59 = phi <4 x i32> [ zeroinitializer, %9 ], [ %50, %18 ]
  %60 = phi <4 x i32> [ zeroinitializer, %9 ], [ %51, %18 ]
  %61 = icmp eq i64 %14, 0
  br i1 %61, label %77, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i32, i32* %6, i64 %58
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !tbaa !8
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !tbaa !8
  %69 = add <4 x i32> %68, <i32 99, i32 99, i32 99, i32 99>
  %70 = icmp ult <4 x i32> %69, <i32 199, i32 199, i32 199, i32 199>
  %71 = select <4 x i1> %70, <4 x i32> %68, <4 x i32> zeroinitializer
  %72 = add <4 x i32> %71, %60
  %73 = add <4 x i32> %65, <i32 99, i32 99, i32 99, i32 99>
  %74 = icmp ult <4 x i32> %73, <i32 199, i32 199, i32 199, i32 199>
  %75 = select <4 x i1> %74, <4 x i32> %65, <4 x i32> zeroinitializer
  %76 = add <4 x i32> %75, %59
  br label %77

77:                                               ; preds = %55, %62
  %78 = phi <4 x i32> [ %56, %55 ], [ %76, %62 ]
  %79 = phi <4 x i32> [ %57, %55 ], [ %72, %62 ]
  %80 = add <4 x i32> %79, %78
  %81 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %80)
  %82 = icmp eq i64 %10, %7
  br i1 %82, label %86, label %83

83:                                               ; preds = %4, %77
  %84 = phi i64 [ 0, %4 ], [ %10, %77 ]
  %85 = phi i32 [ 0, %4 ], [ %81, %77 ]
  br label %88

86:                                               ; preds = %88, %77, %2
  %87 = phi i32 [ 0, %2 ], [ %81, %77 ], [ %96, %88 ]
  ret i32 %87

88:                                               ; preds = %83, %88
  %89 = phi i64 [ %97, %88 ], [ %84, %83 ]
  %90 = phi i32 [ %96, %88 ], [ %85, %83 ]
  %91 = getelementptr inbounds i32, i32* %6, i64 %89
  %92 = load i32, i32* %91, align 4, !tbaa !8
  %93 = add i32 %92, 99
  %94 = icmp ult i32 %93, 199
  %95 = select i1 %94, i32 %92, i32 0
  %96 = add nsw i32 %95, %90
  %97 = add nuw nsw i64 %89, 1
  %98 = icmp eq i64 %97, %7
  br i1 %98, label %86, label %88, !llvm.loop !13
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !6, i64 0}
!10 = distinct !{!10, !11, !12}
!11 = !{!"llvm.loop.mustprogress"}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !11, !14, !12}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
