; ModuleID = '../../Human_xBenchmarks_164/CPP_107/CPP_107.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_107/CPP_107.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

$_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z = comdat any

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z19even_odd_palindromei(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, i32 %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = alloca %"class.std::__cxx11::basic_string", align 8
  %5 = alloca %"class.std::__cxx11::basic_string", align 8
  %6 = bitcast %"class.std::__cxx11::basic_string"* %4 to i8*
  %7 = bitcast %"class.std::__cxx11::basic_string"* %5 to i8*
  %8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 1
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2
  %11 = bitcast %"class.std::__cxx11::basic_string"* %5 to %union.anon**
  %12 = bitcast i64* %3 to i8*
  %13 = bitcast %union.anon* %10 to i8*
  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2, i32 0
  %16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 1
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2
  %18 = bitcast %union.anon* %17 to i8*
  %19 = icmp slt i32 %1, 1
  br i1 %19, label %20, label %34

20:                                               ; preds = %204, %2
  %21 = phi i32 [ 0, %2 ], [ %196, %204 ]
  %22 = phi i32 [ 0, %2 ], [ %191, %204 ]
  %23 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %23, i8 0, i64 24, i1 false) #10
  %24 = call noalias nonnull i8* @_Znwm(i64 8) #11
  %25 = bitcast i8* %24 to i32*
  %26 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %24, i8** %26, align 8, !tbaa !3
  %27 = getelementptr inbounds i8, i8* %24, i64 8
  %28 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %29 = bitcast i32** %28 to i8**
  store i8* %27, i8** %29, align 8, !tbaa !8
  store i32 %21, i32* %25, align 4
  %30 = getelementptr inbounds i8, i8* %24, i64 4
  %31 = bitcast i8* %30 to i32*
  store i32 %22, i32* %31, align 4
  %32 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %33 = bitcast i32** %32 to i8**
  store i8* %27, i8** %33, align 8, !tbaa !9
  ret void

34:                                               ; preds = %2, %204
  %35 = phi i32 [ %191, %204 ], [ 0, %2 ]
  %36 = phi i32 [ %196, %204 ], [ 0, %2 ]
  %37 = phi i32 [ %205, %204 ], [ 1, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  call void (%"class.std::__cxx11::basic_string"*, i32 (i8*, i64, i8*, %struct.__va_list_tag*)*, i64, i8*, ...) @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* nonnull sret(%"class.std::__cxx11::basic_string") align 8 %4, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* nonnull @vsnprintf, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %37)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #10
  %38 = load i8*, i8** %8, align 8, !tbaa !10, !noalias !14
  %39 = ptrtoint i8* %38 to i64
  %40 = load i64, i64* %9, align 8, !tbaa !17, !noalias !14
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10
  store i64 %40, i64* %3, align 8, !tbaa !19
  %42 = icmp ugt i64 %40, 15
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %5, i64* nonnull align 8 dereferenceable(8) %3, i64 0)
          to label %45 unwind label %207

45:                                               ; preds = %43
  store i8* %44, i8** %14, align 8, !tbaa !10
  %46 = load i64, i64* %3, align 8, !tbaa !19
  store i64 %46, i64* %15, align 8, !tbaa !20
  br label %49

47:                                               ; preds = %34
  %48 = icmp eq i64 %40, 0
  br i1 %48, label %159, label %49

49:                                               ; preds = %45, %47
  %50 = phi i8* [ %44, %45 ], [ %13, %47 ]
  %51 = icmp ult i64 %40, 4
  br i1 %51, label %106, label %52

52:                                               ; preds = %49
  %53 = getelementptr i8, i8* %50, i64 %40
  %54 = icmp ult i8* %50, %41
  %55 = icmp ult i8* %38, %53
  %56 = and i1 %54, %55
  br i1 %56, label %106, label %57

57:                                               ; preds = %52
  %58 = icmp ult i64 %40, 32
  br i1 %58, label %87, label %59

59:                                               ; preds = %57
  %60 = and i64 %40, -32
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %77, %61 ]
  %63 = getelementptr i8, i8* %50, i64 %62
  %64 = xor i64 %62, -1
  %65 = getelementptr i8, i8* %41, i64 %64
  %66 = getelementptr inbounds i8, i8* %65, i64 -15
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1, !tbaa !20, !alias.scope !21
  %69 = shufflevector <16 x i8> %68, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %70 = getelementptr inbounds i8, i8* %65, i64 -31
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !tbaa !20, !alias.scope !21
  %73 = shufflevector <16 x i8> %72, <16 x i8> poison, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %74 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %74, align 1, !tbaa !20, !alias.scope !24, !noalias !21
  %75 = getelementptr i8, i8* %63, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !tbaa !20, !alias.scope !24, !noalias !21
  %77 = add nuw i64 %62, 32
  %78 = icmp eq i64 %77, %60
  br i1 %78, label %79, label %61, !llvm.loop !26

79:                                               ; preds = %61
  %80 = icmp eq i64 %40, %60
  br i1 %80, label %156, label %81

81:                                               ; preds = %79
  %82 = getelementptr i8, i8* %50, i64 %60
  %83 = sub i64 0, %60
  %84 = getelementptr i8, i8* %41, i64 %83
  %85 = and i64 %40, 28
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %106, label %87

87:                                               ; preds = %57, %81
  %88 = phi i64 [ %60, %81 ], [ 0, %57 ]
  %89 = and i64 %40, -4
  %90 = sub i64 0, %89
  %91 = getelementptr i8, i8* %41, i64 %90
  %92 = getelementptr i8, i8* %50, i64 %89
  br label %93

93:                                               ; preds = %93, %87
  %94 = phi i64 [ %88, %87 ], [ %102, %93 ]
  %95 = getelementptr i8, i8* %50, i64 %94
  %96 = sub nuw nsw i64 -4, %94
  %97 = getelementptr i8, i8* %41, i64 %96
  %98 = bitcast i8* %97 to <4 x i8>*
  %99 = load <4 x i8>, <4 x i8>* %98, align 1, !tbaa !20
  %100 = shufflevector <4 x i8> %99, <4 x i8> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %101 = bitcast i8* %95 to <4 x i8>*
  store <4 x i8> %100, <4 x i8>* %101, align 1, !tbaa !20
  %102 = add nuw i64 %94, 4
  %103 = icmp eq i64 %102, %89
  br i1 %103, label %104, label %93, !llvm.loop !29

104:                                              ; preds = %93
  %105 = icmp eq i64 %40, %89
  br i1 %105, label %156, label %106

106:                                              ; preds = %52, %49, %81, %104
  %107 = phi i8* [ %41, %49 ], [ %41, %52 ], [ %84, %81 ], [ %91, %104 ]
  %108 = phi i8* [ %50, %49 ], [ %50, %52 ], [ %82, %81 ], [ %92, %104 ]
  %109 = ptrtoint i8* %107 to i64
  %110 = sub i64 %109, %39
  %111 = xor i64 %39, -1
  %112 = add i64 %111, %109
  %113 = and i64 %110, 7
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %124, label %115

115:                                              ; preds = %106, %115
  %116 = phi i8* [ %119, %115 ], [ %107, %106 ]
  %117 = phi i8* [ %121, %115 ], [ %108, %106 ]
  %118 = phi i64 [ %122, %115 ], [ %113, %106 ]
  %119 = getelementptr inbounds i8, i8* %116, i64 -1
  %120 = load i8, i8* %119, align 1, !tbaa !20
  store i8 %120, i8* %117, align 1, !tbaa !20
  %121 = getelementptr inbounds i8, i8* %117, i64 1
  %122 = add i64 %118, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %115, !llvm.loop !30

124:                                              ; preds = %115, %106
  %125 = phi i8* [ %107, %106 ], [ %119, %115 ]
  %126 = phi i8* [ %108, %106 ], [ %121, %115 ]
  %127 = icmp ult i64 %112, 7
  br i1 %127, label %156, label %128

128:                                              ; preds = %124, %128
  %129 = phi i8* [ %152, %128 ], [ %125, %124 ]
  %130 = phi i8* [ %154, %128 ], [ %126, %124 ]
  %131 = getelementptr inbounds i8, i8* %129, i64 -1
  %132 = load i8, i8* %131, align 1, !tbaa !20
  store i8 %132, i8* %130, align 1, !tbaa !20
  %133 = getelementptr inbounds i8, i8* %130, i64 1
  %134 = getelementptr inbounds i8, i8* %129, i64 -2
  %135 = load i8, i8* %134, align 1, !tbaa !20
  store i8 %135, i8* %133, align 1, !tbaa !20
  %136 = getelementptr inbounds i8, i8* %130, i64 2
  %137 = getelementptr inbounds i8, i8* %129, i64 -3
  %138 = load i8, i8* %137, align 1, !tbaa !20
  store i8 %138, i8* %136, align 1, !tbaa !20
  %139 = getelementptr inbounds i8, i8* %130, i64 3
  %140 = getelementptr inbounds i8, i8* %129, i64 -4
  %141 = load i8, i8* %140, align 1, !tbaa !20
  store i8 %141, i8* %139, align 1, !tbaa !20
  %142 = getelementptr inbounds i8, i8* %130, i64 4
  %143 = getelementptr inbounds i8, i8* %129, i64 -5
  %144 = load i8, i8* %143, align 1, !tbaa !20
  store i8 %144, i8* %142, align 1, !tbaa !20
  %145 = getelementptr inbounds i8, i8* %130, i64 5
  %146 = getelementptr inbounds i8, i8* %129, i64 -6
  %147 = load i8, i8* %146, align 1, !tbaa !20
  store i8 %147, i8* %145, align 1, !tbaa !20
  %148 = getelementptr inbounds i8, i8* %130, i64 6
  %149 = getelementptr inbounds i8, i8* %129, i64 -7
  %150 = load i8, i8* %149, align 1, !tbaa !20
  store i8 %150, i8* %148, align 1, !tbaa !20
  %151 = getelementptr inbounds i8, i8* %130, i64 7
  %152 = getelementptr inbounds i8, i8* %129, i64 -8
  %153 = load i8, i8* %152, align 1, !tbaa !20
  store i8 %153, i8* %151, align 1, !tbaa !20
  %154 = getelementptr inbounds i8, i8* %130, i64 8
  %155 = icmp eq i8* %152, %38
  br i1 %155, label %156, label %128, !llvm.loop !32

156:                                              ; preds = %124, %128, %104, %79
  %157 = load i64, i64* %3, align 8, !tbaa !19
  %158 = load i8*, i8** %14, align 8, !tbaa !10
  br label %159

159:                                              ; preds = %156, %47
  %160 = phi i8* [ %158, %156 ], [ %13, %47 ]
  %161 = phi i64 [ %157, %156 ], [ %40, %47 ]
  store i64 %161, i64* %16, align 8, !tbaa !17
  %162 = getelementptr inbounds i8, i8* %160, i64 %161
  store i8 0, i8* %162, align 1, !tbaa !20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10
  %163 = load i64, i64* %9, align 8, !tbaa !17
  %164 = load i64, i64* %16, align 8, !tbaa !17
  %165 = icmp eq i64 %163, %164
  br i1 %165, label %166, label %173

166:                                              ; preds = %159
  %167 = icmp eq i64 %163, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %166
  %169 = load i8*, i8** %14, align 8, !tbaa !10
  %170 = load i8*, i8** %8, align 8, !tbaa !10
  %171 = call i32 @bcmp(i8* %170, i8* %169, i64 %163) #10
  %172 = icmp eq i32 %171, 0
  br label %176

173:                                              ; preds = %159
  %174 = and i32 %37, 1
  %175 = icmp eq i32 %174, 0
  br label %190

176:                                              ; preds = %166, %168
  %177 = phi i1 [ true, %166 ], [ %172, %168 ]
  %178 = xor i1 %177, true
  %179 = and i32 %37, 1
  %180 = icmp eq i32 %179, 0
  %181 = select i1 %178, i1 true, i1 %180
  %182 = xor i1 %181, true
  %183 = zext i1 %182 to i32
  %184 = add nsw i32 %35, %183
  br i1 %167, label %190, label %185

185:                                              ; preds = %176
  %186 = load i8*, i8** %14, align 8, !tbaa !10
  %187 = load i8*, i8** %8, align 8, !tbaa !10
  %188 = call i32 @bcmp(i8* %187, i8* %186, i64 %163) #10
  %189 = icmp eq i32 %188, 0
  br label %190

190:                                              ; preds = %173, %176, %185
  %191 = phi i32 [ %35, %173 ], [ %184, %185 ], [ %184, %176 ]
  %192 = phi i1 [ %175, %173 ], [ %180, %185 ], [ %180, %176 ]
  %193 = phi i1 [ false, %173 ], [ %189, %185 ], [ true, %176 ]
  %194 = select i1 %193, i1 %192, i1 false
  %195 = zext i1 %194 to i32
  %196 = add nuw nsw i32 %36, %195
  %197 = load i8*, i8** %14, align 8, !tbaa !10
  %198 = icmp eq i8* %197, %13
  br i1 %198, label %200, label %199

199:                                              ; preds = %190
  call void @_ZdlPv(i8* %197) #10
  br label %200

200:                                              ; preds = %190, %199
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #10
  %201 = load i8*, i8** %8, align 8, !tbaa !10
  %202 = icmp eq i8* %201, %18
  br i1 %202, label %204, label %203

203:                                              ; preds = %200
  call void @_ZdlPv(i8* %201) #10
  br label %204

204:                                              ; preds = %200, %203
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  %205 = add nuw i32 %37, 1
  %206 = icmp eq i32 %37, %1
  br i1 %206, label %20, label %34, !llvm.loop !33

207:                                              ; preds = %43
  %208 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #10
  %209 = load i8*, i8** %8, align 8, !tbaa !10
  %210 = icmp eq i8* %209, %18
  br i1 %210, label %212, label %211

211:                                              ; preds = %207
  call void @_ZdlPv(i8* %209) #10
  br label %212

212:                                              ; preds = %207, %211
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  resume { i8*, i32 } %208
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_mPKS8_P13__va_list_tagEmSB_z(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, i32 (i8*, i64, i8*, %struct.__va_list_tag*)* %1, i64 %2, i8* %3, ...) local_unnamed_addr #0 comdat personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %5 = alloca i64, align 8
  %6 = alloca [1 x %struct.__va_list_tag], align 16
  %7 = alloca i8, i64 %2, align 16
  %8 = bitcast [1 x %struct.__va_list_tag]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #10
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  call void @llvm.va_start(i8* nonnull %8)
  %10 = call i32 %1(i8* nonnull %7, i64 %2, i8* %3, %struct.__va_list_tag* nonnull %9)
  call void @llvm.va_end(i8* nonnull %8)
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %13 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %12, %union.anon** %13, align 8, !tbaa !18
  %14 = bitcast %union.anon* %12 to i8*
  %15 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  store i64 %11, i64* %5, align 8, !tbaa !19
  %16 = icmp ugt i32 %10, 15
  br i1 %16, label %17, label %22

17:                                               ; preds = %4
  %18 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i64* nonnull align 8 dereferenceable(8) %5, i64 0)
  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  store i8* %18, i8** %19, align 8, !tbaa !10
  %20 = load i64, i64* %5, align 8, !tbaa !19
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
  store i64 %20, i64* %21, align 8, !tbaa !20
  br label %22

22:                                               ; preds = %17, %4
  %23 = phi i8* [ %18, %17 ], [ %14, %4 ]
  switch i64 %11, label %26 [
    i64 1, label %24
    i64 0, label %27
  ]

24:                                               ; preds = %22
  %25 = load i8, i8* %7, align 16, !tbaa !20
  store i8 %25, i8* %23, align 1, !tbaa !20
  br label %27

26:                                               ; preds = %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #10
  br label %27

27:                                               ; preds = %26, %24, %22
  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %29 = load i64, i64* %5, align 8, !tbaa !19
  %30 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %29, i64* %30, align 8, !tbaa !17
  %31 = load i8*, i8** %28, align 8, !tbaa !10
  %32 = getelementptr inbounds i8, i8* %31, i64 %29
  store i8 0, i8* %32, align 1, !tbaa !20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #10
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @vsnprintf(i8* nocapture noundef, i64 noundef, i8* nocapture noundef readonly, %struct.__va_list_tag* noundef) #2

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #3

; Function Attrs: mustprogress nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #3

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

; Function Attrs: argmemonly nofree nounwind readonly willreturn
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nosync nounwind willreturn }
attributes #4 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { argmemonly nofree nounwind willreturn writeonly }
attributes #9 = { argmemonly nofree nounwind readonly willreturn }
attributes #10 = { nounwind }
attributes #11 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 16}
!9 = !{!4, !5, i64 8}
!10 = !{!11, !5, i64 0}
!11 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !12, i64 0, !13, i64 8, !6, i64 16}
!12 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!13 = !{!"long", !6, i64 0}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: argument 0"}
!16 = distinct !{!16, !"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv"}
!17 = !{!11, !13, i64 8}
!18 = !{!12, !5, i64 0}
!19 = !{!13, !13, i64 0}
!20 = !{!6, !6, i64 0}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !27, !28}
!27 = !{!"llvm.loop.mustprogress"}
!28 = !{!"llvm.loop.isvectorized", i32 1}
!29 = distinct !{!29, !27, !28}
!30 = distinct !{!30, !31}
!31 = !{!"llvm.loop.unroll.disable"}
!32 = distinct !{!32, !27, !28}
!33 = distinct !{!33, !27}
