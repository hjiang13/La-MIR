; ModuleID = '../../Human_xBenchmarks_164/CPP_152/CPP_152.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_152/CPP_152.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z7compareSt6vectorIiSaIiEES1_(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1, %"class.std::vector"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = bitcast %"class.std::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false) #7
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i32*, i32** %5, align 8, !tbaa !3
  %12 = load i32*, i32** %6, align 8, !tbaa !8
  %13 = icmp eq i32* %11, %12
  br i1 %13, label %91, label %14

14:                                               ; preds = %3, %69
  %15 = phi i32* [ %70, %69 ], [ %12, %3 ]
  %16 = phi i32* [ %71, %69 ], [ %11, %3 ]
  %17 = phi i32* [ %72, %69 ], [ null, %3 ]
  %18 = phi i32* [ %73, %69 ], [ null, %3 ]
  %19 = phi i32* [ %74, %69 ], [ null, %3 ]
  %20 = phi i64 [ %75, %69 ], [ 0, %3 ]
  %21 = getelementptr inbounds i32, i32* %15, i64 %20
  %22 = load i32, i32* %21, align 4, !tbaa !9
  %23 = load i32*, i32** %7, align 8, !tbaa !8
  %24 = getelementptr inbounds i32, i32* %23, i64 %20
  %25 = load i32, i32* %24, align 4, !tbaa !9
  %26 = sub nsw i32 %22, %25
  %27 = tail call i32 @llvm.abs.i32(i32 %26, i1 true)
  %28 = icmp eq i32* %19, %18
  br i1 %28, label %31, label %29

29:                                               ; preds = %14
  store i32 %27, i32* %19, align 4, !tbaa !9
  %30 = getelementptr inbounds i32, i32* %19, i64 1
  store i32* %30, i32** %8, align 8, !tbaa !3
  br label %69

31:                                               ; preds = %14
  %32 = ptrtoint i32* %18 to i64
  %33 = ptrtoint i32* %17 to i64
  %34 = sub i64 %32, %33
  %35 = ashr exact i64 %34, 2
  %36 = icmp eq i64 %34, 9223372036854775804
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
          to label %38 unwind label %83

38:                                               ; preds = %37
  unreachable

39:                                               ; preds = %31
  %40 = icmp eq i64 %34, 0
  %41 = select i1 %40, i64 1, i64 %35
  %42 = add nsw i64 %41, %35
  %43 = icmp ult i64 %42, %35
  %44 = icmp ugt i64 %42, 2305843009213693951
  %45 = or i1 %43, %44
  %46 = select i1 %45, i64 2305843009213693951, i64 %42
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39
  %49 = shl nuw nsw i64 %46, 2
  %50 = invoke noalias nonnull i8* @_Znwm(i64 %49) #9
          to label %51 unwind label %81

51:                                               ; preds = %48
  %52 = bitcast i8* %50 to i32*
  br label %53

53:                                               ; preds = %51, %39
  %54 = phi i32* [ %52, %51 ], [ null, %39 ]
  %55 = getelementptr inbounds i32, i32* %54, i64 %35
  store i32 %27, i32* %55, align 4, !tbaa !9
  %56 = icmp sgt i64 %34, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %53
  %58 = bitcast i32* %54 to i8*
  %59 = bitcast i32* %17 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %59, i64 %34, i1 false) #7
  br label %60

60:                                               ; preds = %53, %57
  %61 = getelementptr inbounds i32, i32* %55, i64 1
  %62 = icmp eq i32* %17, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* nonnull %64) #7
  br label %65

65:                                               ; preds = %63, %60
  store i32* %54, i32** %10, align 8, !tbaa !8
  store i32* %61, i32** %8, align 8, !tbaa !3
  %66 = getelementptr inbounds i32, i32* %54, i64 %46
  store i32* %66, i32** %9, align 8, !tbaa !11
  %67 = load i32*, i32** %5, align 8, !tbaa !3
  %68 = load i32*, i32** %6, align 8, !tbaa !8
  br label %69

69:                                               ; preds = %65, %29
  %70 = phi i32* [ %68, %65 ], [ %15, %29 ]
  %71 = phi i32* [ %67, %65 ], [ %16, %29 ]
  %72 = phi i32* [ %54, %65 ], [ %17, %29 ]
  %73 = phi i32* [ %66, %65 ], [ %18, %29 ]
  %74 = phi i32* [ %61, %65 ], [ %30, %29 ]
  %75 = add nuw i64 %20, 1
  %76 = ptrtoint i32* %71 to i64
  %77 = ptrtoint i32* %70 to i64
  %78 = sub i64 %76, %77
  %79 = ashr exact i64 %78, 2
  %80 = icmp ugt i64 %79, %75
  br i1 %80, label %14, label %91, !llvm.loop !12

81:                                               ; preds = %48
  %82 = landingpad { i8*, i32 }
          cleanup
  br label %85

83:                                               ; preds = %37
  %84 = landingpad { i8*, i32 }
          cleanup
  br label %85

85:                                               ; preds = %83, %81
  %86 = phi { i8*, i32 } [ %82, %81 ], [ %84, %83 ]
  %87 = icmp eq i32* %17, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = bitcast i32* %17 to i8*
  tail call void @_ZdlPv(i8* nonnull %89) #7
  br label %90

90:                                               ; preds = %85, %88
  resume { i8*, i32 } %86

91:                                               ; preds = %69, %3
  ret void
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #5

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #5 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { argmemonly nofree nounwind willreturn writeonly }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = !{!4, !5, i64 16}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
