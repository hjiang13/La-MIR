digraph "CFG for '_Z8exchangeB5cxx11St6vectorIiSaIiEES1_' function" {
	label="CFG for '_Z8exchangeB5cxx11St6vectorIiSaIiEES1_' function";

	Node0x55813328cce0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%3:\l  %4 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %5 = load i32*, i32** %4, align 8, !tbaa !3\l  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %7 = load i32*, i32** %6, align 8, !tbaa !8\l  %8 = ptrtoint i32* %5 to i64\l  %9 = ptrtoint i32* %7 to i64\l  %10 = sub i64 %8, %9\l  %11 = ashr exact i64 %10, 2\l  %12 = icmp eq i64 %10, 0\l  br i1 %12, label %87, label %13\l|{<s0>T|<s1>F}}"];
	Node0x55813328cce0:s0 -> Node0x55813328d500;
	Node0x55813328cce0:s1 -> Node0x55813328e680;
	Node0x55813328e680 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%13:\l13:                                               \l  %14 = call i64 @llvm.umax.i64(i64 %11, i64 1)\l  %15 = icmp ult i64 %14, 8\l  br i1 %15, label %84, label %16\l|{<s0>T|<s1>F}}"];
	Node0x55813328e680:s0 -> Node0x55813328eb20;
	Node0x55813328e680:s1 -> Node0x55813328eb70;
	Node0x55813328eb70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%16:\l16:                                               \l  %17 = and i64 %14, -8\l  %18 = add i64 %17, -8\l  %19 = lshr exact i64 %18, 3\l  %20 = add nuw nsw i64 %19, 1\l  %21 = and i64 %20, 1\l  %22 = icmp eq i64 %18, 0\l  br i1 %22, label %58, label %23\l|{<s0>T|<s1>F}}"];
	Node0x55813328eb70:s0 -> Node0x55813328efe0;
	Node0x55813328eb70:s1 -> Node0x55813328f030;
	Node0x55813328f030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%23:\l23:                                               \l  %24 = and i64 %20, 4611686018427387902\l  br label %25\l}"];
	Node0x55813328f030 -> Node0x55813328f230;
	Node0x55813328f230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%25:\l25:                                               \l  %26 = phi i64 [ 0, %23 ], [ %55, %25 ]\l  %27 = phi \<4 x i32\> [ zeroinitializer, %23 ], [ %53, %25 ]\l  %28 = phi \<4 x i32\> [ zeroinitializer, %23 ], [ %54, %25 ]\l  %29 = phi i64 [ %24, %23 ], [ %56, %25 ]\l  %30 = getelementptr inbounds i32, i32* %7, i64 %26\l  %31 = bitcast i32* %30 to \<4 x i32\>*\l  %32 = load \<4 x i32\>, \<4 x i32\>* %31, align 4, !tbaa !9\l  %33 = getelementptr inbounds i32, i32* %30, i64 4\l  %34 = bitcast i32* %33 to \<4 x i32\>*\l  %35 = load \<4 x i32\>, \<4 x i32\>* %34, align 4, !tbaa !9\l  %36 = and \<4 x i32\> %32, \<i32 1, i32 1, i32 1, i32 1\>\l  %37 = and \<4 x i32\> %35, \<i32 1, i32 1, i32 1, i32 1\>\l  %38 = xor \<4 x i32\> %36, \<i32 1, i32 1, i32 1, i32 1\>\l  %39 = xor \<4 x i32\> %37, \<i32 1, i32 1, i32 1, i32 1\>\l  %40 = add \<4 x i32\> %38, %27\l  %41 = add \<4 x i32\> %39, %28\l  %42 = or i64 %26, 8\l  %43 = getelementptr inbounds i32, i32* %7, i64 %42\l  %44 = bitcast i32* %43 to \<4 x i32\>*\l  %45 = load \<4 x i32\>, \<4 x i32\>* %44, align 4, !tbaa !9\l  %46 = getelementptr inbounds i32, i32* %43, i64 4\l  %47 = bitcast i32* %46 to \<4 x i32\>*\l  %48 = load \<4 x i32\>, \<4 x i32\>* %47, align 4, !tbaa !9\l  %49 = and \<4 x i32\> %45, \<i32 1, i32 1, i32 1, i32 1\>\l  %50 = and \<4 x i32\> %48, \<i32 1, i32 1, i32 1, i32 1\>\l  %51 = xor \<4 x i32\> %49, \<i32 1, i32 1, i32 1, i32 1\>\l  %52 = xor \<4 x i32\> %50, \<i32 1, i32 1, i32 1, i32 1\>\l  %53 = add \<4 x i32\> %51, %40\l  %54 = add \<4 x i32\> %52, %41\l  %55 = add nuw i64 %26, 16\l  %56 = add i64 %29, -2\l  %57 = icmp eq i64 %56, 0\l  br i1 %57, label %58, label %25, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x55813328f230:s0 -> Node0x55813328efe0;
	Node0x55813328f230:s1 -> Node0x55813328f230;
	Node0x55813328efe0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%58:\l58:                                               \l  %59 = phi \<4 x i32\> [ undef, %16 ], [ %53, %25 ]\l  %60 = phi \<4 x i32\> [ undef, %16 ], [ %54, %25 ]\l  %61 = phi i64 [ 0, %16 ], [ %55, %25 ]\l  %62 = phi \<4 x i32\> [ zeroinitializer, %16 ], [ %53, %25 ]\l  %63 = phi \<4 x i32\> [ zeroinitializer, %16 ], [ %54, %25 ]\l  %64 = icmp eq i64 %21, 0\l  br i1 %64, label %78, label %65\l|{<s0>T|<s1>F}}"];
	Node0x55813328efe0:s0 -> Node0x5581332927a0;
	Node0x55813328efe0:s1 -> Node0x5581332927f0;
	Node0x5581332927f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%65:\l65:                                               \l  %66 = getelementptr inbounds i32, i32* %7, i64 %61\l  %67 = getelementptr inbounds i32, i32* %66, i64 4\l  %68 = bitcast i32* %67 to \<4 x i32\>*\l  %69 = load \<4 x i32\>, \<4 x i32\>* %68, align 4, !tbaa !9\l  %70 = and \<4 x i32\> %69, \<i32 1, i32 1, i32 1, i32 1\>\l  %71 = xor \<4 x i32\> %70, \<i32 1, i32 1, i32 1, i32 1\>\l  %72 = add \<4 x i32\> %71, %63\l  %73 = bitcast i32* %66 to \<4 x i32\>*\l  %74 = load \<4 x i32\>, \<4 x i32\>* %73, align 4, !tbaa !9\l  %75 = and \<4 x i32\> %74, \<i32 1, i32 1, i32 1, i32 1\>\l  %76 = xor \<4 x i32\> %75, \<i32 1, i32 1, i32 1, i32 1\>\l  %77 = add \<4 x i32\> %76, %62\l  br label %78\l}"];
	Node0x5581332927f0 -> Node0x5581332927a0;
	Node0x5581332927a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%78:\l78:                                               \l  %79 = phi \<4 x i32\> [ %59, %58 ], [ %77, %65 ]\l  %80 = phi \<4 x i32\> [ %60, %58 ], [ %72, %65 ]\l  %81 = add \<4 x i32\> %80, %79\l  %82 = call i32 @llvm.vector.reduce.add.v4i32(\<4 x i32\> %81)\l  %83 = icmp eq i64 %14, %17\l  br i1 %83, label %87, label %84\l|{<s0>T|<s1>F}}"];
	Node0x5581332927a0:s0 -> Node0x55813328d500;
	Node0x5581332927a0:s1 -> Node0x55813328eb20;
	Node0x55813328eb20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%84:\l84:                                               \l  %85 = phi i64 [ 0, %13 ], [ %17, %78 ]\l  %86 = phi i32 [ 0, %13 ], [ %82, %78 ]\l  br label %173\l}"];
	Node0x55813328eb20 -> Node0x558133293680;
	Node0x55813328d500 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%87:\l87:                                               \l  %88 = phi i32 [ 0, %3 ], [ %82, %78 ], [ %180, %173 ]\l  %89 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %90 = load i32*, i32** %89, align 8, !tbaa !3\l  %91 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %2,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %92 = load i32*, i32** %91, align 8, !tbaa !8\l  %93 = ptrtoint i32* %90 to i64\l  %94 = ptrtoint i32* %92 to i64\l  %95 = sub i64 %93, %94\l  %96 = icmp eq i64 %95, 0\l  br i1 %96, label %183, label %97\l|{<s0>T|<s1>F}}"];
	Node0x55813328d500:s0 -> Node0x558133294950;
	Node0x55813328d500:s1 -> Node0x5581332949a0;
	Node0x5581332949a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%97:\l97:                                               \l  %98 = ashr exact i64 %95, 2\l  %99 = call i64 @llvm.umax.i64(i64 %98, i64 1)\l  %100 = icmp ult i64 %99, 8\l  br i1 %100, label %170, label %101\l|{<s0>T|<s1>F}}"];
	Node0x5581332949a0:s0 -> Node0x558133294cf0;
	Node0x5581332949a0:s1 -> Node0x558133294d40;
	Node0x558133294d40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%101:\l101:                                              \l  %102 = and i64 %99, -8\l  %103 = insertelement \<4 x i32\> \<i32 poison, i32 0, i32 0, i32 0\>, i32 %88,\l... i32 0\l  %104 = add i64 %102, -8\l  %105 = lshr exact i64 %104, 3\l  %106 = add nuw nsw i64 %105, 1\l  %107 = and i64 %106, 1\l  %108 = icmp eq i64 %104, 0\l  br i1 %108, label %144, label %109\l|{<s0>T|<s1>F}}"];
	Node0x558133294d40:s0 -> Node0x558133295700;
	Node0x558133294d40:s1 -> Node0x558133295750;
	Node0x558133295750 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#aec9fc70",label="{%109:\l109:                                              \l  %110 = and i64 %106, 4611686018427387902\l  br label %111\l}"];
	Node0x558133295750 -> Node0x558133295920;
	Node0x558133295920 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%111:\l111:                                              \l  %112 = phi i64 [ 0, %109 ], [ %141, %111 ]\l  %113 = phi \<4 x i32\> [ %103, %109 ], [ %139, %111 ]\l  %114 = phi \<4 x i32\> [ zeroinitializer, %109 ], [ %140, %111 ]\l  %115 = phi i64 [ %110, %109 ], [ %142, %111 ]\l  %116 = getelementptr inbounds i32, i32* %92, i64 %112\l  %117 = bitcast i32* %116 to \<4 x i32\>*\l  %118 = load \<4 x i32\>, \<4 x i32\>* %117, align 4, !tbaa !9\l  %119 = getelementptr inbounds i32, i32* %116, i64 4\l  %120 = bitcast i32* %119 to \<4 x i32\>*\l  %121 = load \<4 x i32\>, \<4 x i32\>* %120, align 4, !tbaa !9\l  %122 = and \<4 x i32\> %118, \<i32 1, i32 1, i32 1, i32 1\>\l  %123 = and \<4 x i32\> %121, \<i32 1, i32 1, i32 1, i32 1\>\l  %124 = xor \<4 x i32\> %122, \<i32 1, i32 1, i32 1, i32 1\>\l  %125 = xor \<4 x i32\> %123, \<i32 1, i32 1, i32 1, i32 1\>\l  %126 = add \<4 x i32\> %124, %113\l  %127 = add \<4 x i32\> %125, %114\l  %128 = or i64 %112, 8\l  %129 = getelementptr inbounds i32, i32* %92, i64 %128\l  %130 = bitcast i32* %129 to \<4 x i32\>*\l  %131 = load \<4 x i32\>, \<4 x i32\>* %130, align 4, !tbaa !9\l  %132 = getelementptr inbounds i32, i32* %129, i64 4\l  %133 = bitcast i32* %132 to \<4 x i32\>*\l  %134 = load \<4 x i32\>, \<4 x i32\>* %133, align 4, !tbaa !9\l  %135 = and \<4 x i32\> %131, \<i32 1, i32 1, i32 1, i32 1\>\l  %136 = and \<4 x i32\> %134, \<i32 1, i32 1, i32 1, i32 1\>\l  %137 = xor \<4 x i32\> %135, \<i32 1, i32 1, i32 1, i32 1\>\l  %138 = xor \<4 x i32\> %136, \<i32 1, i32 1, i32 1, i32 1\>\l  %139 = add \<4 x i32\> %137, %126\l  %140 = add \<4 x i32\> %138, %127\l  %141 = add nuw i64 %112, 16\l  %142 = add i64 %115, -2\l  %143 = icmp eq i64 %142, 0\l  br i1 %143, label %144, label %111, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0x558133295920:s0 -> Node0x558133295700;
	Node0x558133295920:s1 -> Node0x558133295920;
	Node0x558133295700 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%144:\l144:                                              \l  %145 = phi \<4 x i32\> [ undef, %101 ], [ %139, %111 ]\l  %146 = phi \<4 x i32\> [ undef, %101 ], [ %140, %111 ]\l  %147 = phi i64 [ 0, %101 ], [ %141, %111 ]\l  %148 = phi \<4 x i32\> [ %103, %101 ], [ %139, %111 ]\l  %149 = phi \<4 x i32\> [ zeroinitializer, %101 ], [ %140, %111 ]\l  %150 = icmp eq i64 %107, 0\l  br i1 %150, label %164, label %151\l|{<s0>T|<s1>F}}"];
	Node0x558133295700:s0 -> Node0x558133297a60;
	Node0x558133295700:s1 -> Node0x558133297ab0;
	Node0x558133297ab0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%151:\l151:                                              \l  %152 = getelementptr inbounds i32, i32* %92, i64 %147\l  %153 = getelementptr inbounds i32, i32* %152, i64 4\l  %154 = bitcast i32* %153 to \<4 x i32\>*\l  %155 = load \<4 x i32\>, \<4 x i32\>* %154, align 4, !tbaa !9\l  %156 = and \<4 x i32\> %155, \<i32 1, i32 1, i32 1, i32 1\>\l  %157 = xor \<4 x i32\> %156, \<i32 1, i32 1, i32 1, i32 1\>\l  %158 = add \<4 x i32\> %157, %149\l  %159 = bitcast i32* %152 to \<4 x i32\>*\l  %160 = load \<4 x i32\>, \<4 x i32\>* %159, align 4, !tbaa !9\l  %161 = and \<4 x i32\> %160, \<i32 1, i32 1, i32 1, i32 1\>\l  %162 = xor \<4 x i32\> %161, \<i32 1, i32 1, i32 1, i32 1\>\l  %163 = add \<4 x i32\> %162, %148\l  br label %164\l}"];
	Node0x558133297ab0 -> Node0x558133297a60;
	Node0x558133297a60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%164:\l164:                                              \l  %165 = phi \<4 x i32\> [ %145, %144 ], [ %163, %151 ]\l  %166 = phi \<4 x i32\> [ %146, %144 ], [ %158, %151 ]\l  %167 = add \<4 x i32\> %166, %165\l  %168 = call i32 @llvm.vector.reduce.add.v4i32(\<4 x i32\> %167)\l  %169 = icmp eq i64 %99, %102\l  br i1 %169, label %183, label %170\l|{<s0>T|<s1>F}}"];
	Node0x558133297a60:s0 -> Node0x558133294950;
	Node0x558133297a60:s1 -> Node0x558133294cf0;
	Node0x558133294cf0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%170:\l170:                                              \l  %171 = phi i64 [ 0, %97 ], [ %102, %164 ]\l  %172 = phi i32 [ %88, %97 ], [ %168, %164 ]\l  br label %189\l}"];
	Node0x558133294cf0 -> Node0x558133298820;
	Node0x558133293680 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%173:\l173:                                              \l  %174 = phi i64 [ %181, %173 ], [ %85, %84 ]\l  %175 = phi i32 [ %180, %173 ], [ %86, %84 ]\l  %176 = getelementptr inbounds i32, i32* %7, i64 %174\l  %177 = load i32, i32* %176, align 4, !tbaa !9\l  %178 = and i32 %177, 1\l  %179 = xor i32 %178, 1\l  %180 = add nuw nsw i32 %179, %175\l  %181 = add nuw nsw i64 %174, 1\l  %182 = icmp eq i64 %181, %14\l  br i1 %182, label %87, label %173, !llvm.loop !15\l|{<s0>T|<s1>F}}"];
	Node0x558133293680:s0 -> Node0x55813328d500;
	Node0x558133293680:s1 -> Node0x558133293680;
	Node0x558133294950 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%183:\l183:                                              \l  %184 = phi i32 [ %88, %87 ], [ %168, %164 ], [ %196, %189 ]\l  %185 = zext i32 %184 to i64\l  %186 = icmp ugt i64 %11, %185\l  %187 = getelementptr inbounds %\"class.std::__cxx11::basic_string\",\l... %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 2\l  %188 = bitcast %\"class.std::__cxx11::basic_string\"* %0 to %union.anon**\l  store %union.anon* %187, %union.anon** %188, align 8, !tbaa !17\l  br i1 %186, label %202, label %199\l|{<s0>T|<s1>F}}"];
	Node0x558133294950:s0 -> Node0x558133299380;
	Node0x558133294950:s1 -> Node0x5581332993d0;
	Node0x558133298820 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%189:\l189:                                              \l  %190 = phi i64 [ %197, %189 ], [ %171, %170 ]\l  %191 = phi i32 [ %196, %189 ], [ %172, %170 ]\l  %192 = getelementptr inbounds i32, i32* %92, i64 %190\l  %193 = load i32, i32* %192, align 4, !tbaa !9\l  %194 = and i32 %193, 1\l  %195 = xor i32 %194, 1\l  %196 = add nuw nsw i32 %195, %191\l  %197 = add nuw nsw i64 %190, 1\l  %198 = icmp eq i64 %197, %99\l  br i1 %198, label %183, label %189, !llvm.loop !19\l|{<s0>T|<s1>F}}"];
	Node0x558133298820:s0 -> Node0x558133294950;
	Node0x558133298820:s1 -> Node0x558133298820;
	Node0x5581332993d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%199:\l199:                                              \l  %200 = bitcast %union.anon* %187 to i8*\l  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(3) %200, i8* noundef nonnull align 1 dereferenceable(3)\l... getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1\l... false) #4\l  %201 = getelementptr inbounds i8, i8* %200, i64 3\l  store i8 0, i8* %201, align 1, !tbaa !20\l  br label %206\l}"];
	Node0x5581332993d0 -> Node0x55813329a1f0;
	Node0x558133299380 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d9dce170",label="{%202:\l202:                                              \l  %203 = bitcast %union.anon* %187 to i16*\l  store i16 20302, i16* %203, align 8\l  %204 = bitcast %union.anon* %187 to i8*\l  %205 = getelementptr inbounds i8, i8* %204, i64 2\l  store i8 0, i8* %205, align 2, !tbaa !20\l  br label %206\l}"];
	Node0x558133299380 -> Node0x55813329a1f0;
	Node0x55813329a1f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%206:\l206:                                              \l  %207 = phi i64 [ 2, %202 ], [ 3, %199 ]\l  %208 = getelementptr inbounds %\"class.std::__cxx11::basic_string\",\l... %\"class.std::__cxx11::basic_string\"* %0, i64 0, i32 1\l  store i64 %207, i64* %208, align 8\l  ret void\l}"];
}
