; ModuleID = '../../Human_xBenchmarks_164/CPP_110/CPP_110.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_110/CPP_110.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [4 x i8] c"YES\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z8exchangeB5cxx11St6vectorIiSaIiEES1_(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::vector"* nocapture readonly %1, %"class.std::vector"* nocapture readonly %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 0
  br i1 %12, label %87, label %13

13:                                               ; preds = %3
  %14 = call i64 @llvm.umax.i64(i64 %11, i64 1)
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %84, label %16

16:                                               ; preds = %13
  %17 = and i64 %14, -8
  %18 = add i64 %17, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 1
  %22 = icmp eq i64 %18, 0
  br i1 %22, label %58, label %23

23:                                               ; preds = %16
  %24 = and i64 %20, 4611686018427387902
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %55, %25 ]
  %27 = phi <4 x i32> [ zeroinitializer, %23 ], [ %53, %25 ]
  %28 = phi <4 x i32> [ zeroinitializer, %23 ], [ %54, %25 ]
  %29 = phi i64 [ %24, %23 ], [ %56, %25 ]
  %30 = getelementptr inbounds i32, i32* %7, i64 %26
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !tbaa !9
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4, !tbaa !9
  %36 = and <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  %37 = and <4 x i32> %35, <i32 1, i32 1, i32 1, i32 1>
  %38 = xor <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %39 = xor <4 x i32> %37, <i32 1, i32 1, i32 1, i32 1>
  %40 = add <4 x i32> %38, %27
  %41 = add <4 x i32> %39, %28
  %42 = or i64 %26, 8
  %43 = getelementptr inbounds i32, i32* %7, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 4, !tbaa !9
  %46 = getelementptr inbounds i32, i32* %43, i64 4
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !tbaa !9
  %49 = and <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %50 = and <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %51 = xor <4 x i32> %49, <i32 1, i32 1, i32 1, i32 1>
  %52 = xor <4 x i32> %50, <i32 1, i32 1, i32 1, i32 1>
  %53 = add <4 x i32> %51, %40
  %54 = add <4 x i32> %52, %41
  %55 = add nuw i64 %26, 16
  %56 = add i64 %29, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %25, !llvm.loop !11

58:                                               ; preds = %25, %16
  %59 = phi <4 x i32> [ undef, %16 ], [ %53, %25 ]
  %60 = phi <4 x i32> [ undef, %16 ], [ %54, %25 ]
  %61 = phi i64 [ 0, %16 ], [ %55, %25 ]
  %62 = phi <4 x i32> [ zeroinitializer, %16 ], [ %53, %25 ]
  %63 = phi <4 x i32> [ zeroinitializer, %16 ], [ %54, %25 ]
  %64 = icmp eq i64 %21, 0
  br i1 %64, label %78, label %65

65:                                               ; preds = %58
  %66 = getelementptr inbounds i32, i32* %7, i64 %61
  %67 = getelementptr inbounds i32, i32* %66, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !tbaa !9
  %70 = and <4 x i32> %69, <i32 1, i32 1, i32 1, i32 1>
  %71 = xor <4 x i32> %70, <i32 1, i32 1, i32 1, i32 1>
  %72 = add <4 x i32> %71, %63
  %73 = bitcast i32* %66 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !tbaa !9
  %75 = and <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  %76 = xor <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>
  %77 = add <4 x i32> %76, %62
  br label %78

78:                                               ; preds = %58, %65
  %79 = phi <4 x i32> [ %59, %58 ], [ %77, %65 ]
  %80 = phi <4 x i32> [ %60, %58 ], [ %72, %65 ]
  %81 = add <4 x i32> %80, %79
  %82 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %81)
  %83 = icmp eq i64 %14, %17
  br i1 %83, label %87, label %84

84:                                               ; preds = %13, %78
  %85 = phi i64 [ 0, %13 ], [ %17, %78 ]
  %86 = phi i32 [ 0, %13 ], [ %82, %78 ]
  br label %173

87:                                               ; preds = %173, %78, %3
  %88 = phi i32 [ 0, %3 ], [ %82, %78 ], [ %180, %173 ]
  %89 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %90 = load i32*, i32** %89, align 8, !tbaa !3
  %91 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8, !tbaa !8
  %93 = ptrtoint i32* %90 to i64
  %94 = ptrtoint i32* %92 to i64
  %95 = sub i64 %93, %94
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %183, label %97

97:                                               ; preds = %87
  %98 = ashr exact i64 %95, 2
  %99 = call i64 @llvm.umax.i64(i64 %98, i64 1)
  %100 = icmp ult i64 %99, 8
  br i1 %100, label %170, label %101

101:                                              ; preds = %97
  %102 = and i64 %99, -8
  %103 = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 %88, i32 0
  %104 = add i64 %102, -8
  %105 = lshr exact i64 %104, 3
  %106 = add nuw nsw i64 %105, 1
  %107 = and i64 %106, 1
  %108 = icmp eq i64 %104, 0
  br i1 %108, label %144, label %109

109:                                              ; preds = %101
  %110 = and i64 %106, 4611686018427387902
  br label %111

111:                                              ; preds = %111, %109
  %112 = phi i64 [ 0, %109 ], [ %141, %111 ]
  %113 = phi <4 x i32> [ %103, %109 ], [ %139, %111 ]
  %114 = phi <4 x i32> [ zeroinitializer, %109 ], [ %140, %111 ]
  %115 = phi i64 [ %110, %109 ], [ %142, %111 ]
  %116 = getelementptr inbounds i32, i32* %92, i64 %112
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4, !tbaa !9
  %119 = getelementptr inbounds i32, i32* %116, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !tbaa !9
  %122 = and <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  %123 = and <4 x i32> %121, <i32 1, i32 1, i32 1, i32 1>
  %124 = xor <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>
  %125 = xor <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>
  %126 = add <4 x i32> %124, %113
  %127 = add <4 x i32> %125, %114
  %128 = or i64 %112, 8
  %129 = getelementptr inbounds i32, i32* %92, i64 %128
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !tbaa !9
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !tbaa !9
  %135 = and <4 x i32> %131, <i32 1, i32 1, i32 1, i32 1>
  %136 = and <4 x i32> %134, <i32 1, i32 1, i32 1, i32 1>
  %137 = xor <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %138 = xor <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  %139 = add <4 x i32> %137, %126
  %140 = add <4 x i32> %138, %127
  %141 = add nuw i64 %112, 16
  %142 = add i64 %115, -2
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %111, !llvm.loop !14

144:                                              ; preds = %111, %101
  %145 = phi <4 x i32> [ undef, %101 ], [ %139, %111 ]
  %146 = phi <4 x i32> [ undef, %101 ], [ %140, %111 ]
  %147 = phi i64 [ 0, %101 ], [ %141, %111 ]
  %148 = phi <4 x i32> [ %103, %101 ], [ %139, %111 ]
  %149 = phi <4 x i32> [ zeroinitializer, %101 ], [ %140, %111 ]
  %150 = icmp eq i64 %107, 0
  br i1 %150, label %164, label %151

151:                                              ; preds = %144
  %152 = getelementptr inbounds i32, i32* %92, i64 %147
  %153 = getelementptr inbounds i32, i32* %152, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !tbaa !9
  %156 = and <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>
  %157 = xor <4 x i32> %156, <i32 1, i32 1, i32 1, i32 1>
  %158 = add <4 x i32> %157, %149
  %159 = bitcast i32* %152 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4, !tbaa !9
  %161 = and <4 x i32> %160, <i32 1, i32 1, i32 1, i32 1>
  %162 = xor <4 x i32> %161, <i32 1, i32 1, i32 1, i32 1>
  %163 = add <4 x i32> %162, %148
  br label %164

164:                                              ; preds = %144, %151
  %165 = phi <4 x i32> [ %145, %144 ], [ %163, %151 ]
  %166 = phi <4 x i32> [ %146, %144 ], [ %158, %151 ]
  %167 = add <4 x i32> %166, %165
  %168 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %167)
  %169 = icmp eq i64 %99, %102
  br i1 %169, label %183, label %170

170:                                              ; preds = %97, %164
  %171 = phi i64 [ 0, %97 ], [ %102, %164 ]
  %172 = phi i32 [ %88, %97 ], [ %168, %164 ]
  br label %189

173:                                              ; preds = %84, %173
  %174 = phi i64 [ %181, %173 ], [ %85, %84 ]
  %175 = phi i32 [ %180, %173 ], [ %86, %84 ]
  %176 = getelementptr inbounds i32, i32* %7, i64 %174
  %177 = load i32, i32* %176, align 4, !tbaa !9
  %178 = and i32 %177, 1
  %179 = xor i32 %178, 1
  %180 = add nuw nsw i32 %179, %175
  %181 = add nuw nsw i64 %174, 1
  %182 = icmp eq i64 %181, %14
  br i1 %182, label %87, label %173, !llvm.loop !15

183:                                              ; preds = %189, %164, %87
  %184 = phi i32 [ %88, %87 ], [ %168, %164 ], [ %196, %189 ]
  %185 = zext i32 %184 to i64
  %186 = icmp ugt i64 %11, %185
  %187 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %188 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %187, %union.anon** %188, align 8, !tbaa !17
  br i1 %186, label %202, label %199

189:                                              ; preds = %170, %189
  %190 = phi i64 [ %197, %189 ], [ %171, %170 ]
  %191 = phi i32 [ %196, %189 ], [ %172, %170 ]
  %192 = getelementptr inbounds i32, i32* %92, i64 %190
  %193 = load i32, i32* %192, align 4, !tbaa !9
  %194 = and i32 %193, 1
  %195 = xor i32 %194, 1
  %196 = add nuw nsw i32 %195, %191
  %197 = add nuw nsw i64 %190, 1
  %198 = icmp eq i64 %197, %99
  br i1 %198, label %183, label %189, !llvm.loop !19

199:                                              ; preds = %183
  %200 = bitcast %union.anon* %187 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3) %200, i8* noundef nonnull align 1 dereferenceable(3) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #4
  %201 = getelementptr inbounds i8, i8* %200, i64 3
  store i8 0, i8* %201, align 1, !tbaa !20
  br label %206

202:                                              ; preds = %183
  %203 = bitcast %union.anon* %187 to i16*
  store i16 20302, i16* %203, align 8
  %204 = bitcast %union.anon* %187 to i8*
  %205 = getelementptr inbounds i8, i8* %204, i64 2
  store i8 0, i8* %205, align 2, !tbaa !20
  br label %206

206:                                              ; preds = %202, %199
  %207 = phi i64 [ 2, %202 ], [ 3, %199 ]
  %208 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 %207, i64* %208, align 8
  ret void
}

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #3

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nofree nosync nounwind readnone willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12, !13}
!12 = !{!"llvm.loop.mustprogress"}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !12, !13}
!15 = distinct !{!15, !12, !16, !13}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = !{!18, !5, i64 0}
!18 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
!19 = distinct !{!19, !12, !16, !13}
!20 = !{!6, !6, i64 0}
