digraph "CFG for '_Z15get_odd_collatzi' function" {
	label="CFG for '_Z15get_odd_collatzi' function";

	Node0x55ae8100f4b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%2:\l  %3 = bitcast %\"class.std::vector\"* %0 to i8*\l  tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %3, i8 0, i64 24, i1 false) #7\l  %4 = call noalias nonnull i8* @_Znwm(i64 4) #8\l  %5 = bitcast i8* %4 to i32*\l  %6 = bitcast %\"class.std::vector\"* %0 to i8**\l  store i8* %4, i8** %6, align 8, !tbaa !3\l  %7 = getelementptr inbounds i8, i8* %4, i64 4\l  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 2\l  %9 = bitcast i32** %8 to i8**\l  store i8* %7, i8** %9, align 8, !tbaa !8\l  store i32 1, i32* %5, align 4\l  %10 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %11 = bitcast i32** %10 to i8**\l  store i8* %7, i8** %11, align 8, !tbaa !9\l  %12 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %13 = icmp eq i32 %1, 1\l  %14 = bitcast i8* %7 to i32*\l  br i1 %13, label %96, label %15\l|{<s0>T|<s1>F}}"];
	Node0x55ae8100f4b0:s0 -> Node0x55ae810101f0;
	Node0x55ae8100f4b0:s1 -> Node0x55ae810119b0;
	Node0x55ae810119b0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%15:\l15:                                               \l  %16 = phi i32* [ %86, %85 ], [ %5, %2 ]\l  %17 = phi i32* [ %87, %85 ], [ %14, %2 ]\l  %18 = phi i32* [ %88, %85 ], [ %5, %2 ]\l  %19 = phi i32* [ %89, %85 ], [ %5, %2 ]\l  %20 = phi i32* [ %90, %85 ], [ %14, %2 ]\l  %21 = phi i32* [ %91, %85 ], [ %14, %2 ]\l  %22 = phi i32 [ %92, %85 ], [ %1, %2 ]\l  %23 = srem i32 %22, 2\l  %24 = sdiv i32 %22, 2\l  %25 = icmp eq i32 %23, 1\l  br i1 %25, label %26, label %85\l|{<s0>T|<s1>F}}"];
	Node0x55ae810119b0:s0 -> Node0x55ae81012440;
	Node0x55ae810119b0:s1 -> Node0x55ae81011b20;
	Node0x55ae81012440 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70",label="{%26:\l26:                                               \l  %27 = icmp eq i32* %21, %20\l  br i1 %27, label %30, label %28\l|{<s0>T|<s1>F}}"];
	Node0x55ae81012440:s0 -> Node0x55ae81012610;
	Node0x55ae81012440:s1 -> Node0x55ae81012660;
	Node0x55ae81012660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170",label="{%28:\l28:                                               \l  store i32 %22, i32* %21, align 4, !tbaa !10\l  %29 = getelementptr inbounds i32, i32* %21, i64 1\l  store i32* %29, i32** %10, align 8, !tbaa !9\l  br label %66\l}"];
	Node0x55ae81012660 -> Node0x55ae81013080;
	Node0x55ae81012610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%30:\l30:                                               \l  %31 = ptrtoint i32* %20 to i64\l  %32 = ptrtoint i32* %19 to i64\l  %33 = sub i64 %31, %32\l  %34 = ashr exact i64 %33, 2\l  %35 = icmp eq i64 %33, 9223372036854775804\l  br i1 %35, label %36, label %38\l|{<s0>T|<s1>F}}"];
	Node0x55ae81012610:s0 -> Node0x55ae810136a0;
	Node0x55ae81012610:s1 -> Node0x55ae810136f0;
	Node0x55ae810136a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%36:\l36:                                               \l  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x\l... i8], [26 x i8]* @.str.1, i64 0, i64 0)) #9\l          to label %37 unwind label %76\l}"];
	Node0x55ae810136a0 -> Node0x55ae810138f0;
	Node0x55ae810136a0 -> Node0x55ae81013940;
	Node0x55ae810138f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#4c66d670",label="{%37:\l37:                                               \l  unreachable\l}"];
	Node0x55ae810136f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%38:\l38:                                               \l  %39 = icmp eq i64 %33, 0\l  %40 = select i1 %39, i64 1, i64 %34\l  %41 = add nsw i64 %40, %34\l  %42 = icmp ult i64 %41, %34\l  %43 = icmp ugt i64 %41, 2305843009213693951\l  %44 = or i1 %42, %43\l  %45 = select i1 %44, i64 2305843009213693951, i64 %41\l  %46 = icmp eq i64 %45, 0\l  br i1 %46, label %52, label %47\l|{<s0>T|<s1>F}}"];
	Node0x55ae810136f0:s0 -> Node0x55ae810140a0;
	Node0x55ae810136f0:s1 -> Node0x55ae810140f0;
	Node0x55ae810140f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%47:\l47:                                               \l  %48 = shl nuw nsw i64 %45, 2\l  %49 = invoke noalias nonnull i8* @_Znwm(i64 %48) #8\l          to label %50 unwind label %74\l}"];
	Node0x55ae810140f0 -> Node0x55ae81014280;
	Node0x55ae810140f0 -> Node0x55ae810142d0;
	Node0x55ae81014280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%50:\l50:                                               \l  %51 = bitcast i8* %49 to i32*\l  br label %52\l}"];
	Node0x55ae81014280 -> Node0x55ae810140a0;
	Node0x55ae810140a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%52:\l52:                                               \l  %53 = phi i32* [ %51, %50 ], [ null, %38 ]\l  %54 = getelementptr inbounds i32, i32* %53, i64 %34\l  store i32 %22, i32* %54, align 4, !tbaa !10\l  %55 = icmp sgt i64 %33, 0\l  br i1 %55, label %56, label %59\l|{<s0>T|<s1>F}}"];
	Node0x55ae810140a0:s0 -> Node0x55ae81014d30;
	Node0x55ae810140a0:s1 -> Node0x55ae81014d80;
	Node0x55ae81014d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%56:\l56:                                               \l  %57 = bitcast i32* %53 to i8*\l  %58 = bitcast i32* %19 to i8*\l  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58,\l... i64 %33, i1 false) #7\l  br label %59\l}"];
	Node0x55ae81014d30 -> Node0x55ae81014d80;
	Node0x55ae81014d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%59:\l59:                                               \l  %60 = getelementptr inbounds i32, i32* %54, i64 1\l  %61 = icmp eq i32* %19, null\l  br i1 %61, label %64, label %62\l|{<s0>T|<s1>F}}"];
	Node0x55ae81014d80:s0 -> Node0x55ae81015430;
	Node0x55ae81014d80:s1 -> Node0x55ae81015480;
	Node0x55ae81015480 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#ca3b3770",label="{%62:\l62:                                               \l  %63 = bitcast i32* %19 to i8*\l  tail call void @_ZdlPv(i8* nonnull %63) #7\l  br label %64\l}"];
	Node0x55ae81015480 -> Node0x55ae81015430;
	Node0x55ae81015430 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5333470",label="{%64:\l64:                                               \l  store i32* %53, i32** %12, align 8, !tbaa !3\l  store i32* %60, i32** %10, align 8, !tbaa !9\l  %65 = getelementptr inbounds i32, i32* %53, i64 %45\l  store i32* %65, i32** %8, align 8, !tbaa !8\l  br label %66\l}"];
	Node0x55ae81015430 -> Node0x55ae81013080;
	Node0x55ae81013080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70",label="{%66:\l66:                                               \l  %67 = phi i32* [ %53, %64 ], [ %16, %28 ]\l  %68 = phi i32* [ %53, %64 ], [ %18, %28 ]\l  %69 = phi i32* [ %53, %64 ], [ %19, %28 ]\l  %70 = phi i32* [ %65, %64 ], [ %20, %28 ]\l  %71 = phi i32* [ %60, %64 ], [ %29, %28 ]\l  %72 = mul nsw i32 %22, 3\l  %73 = add nsw i32 %72, 1\l  br label %85\l}"];
	Node0x55ae81013080 -> Node0x55ae81011b20;
	Node0x55ae810142d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#efcebd70",label="{%74:\l74:                                               \l  %75 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %79\l}"];
	Node0x55ae810142d0 -> Node0x55ae810170f0;
	Node0x55ae81013940 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3c7b170",label="{%76:\l76:                                               \l  %77 = phi i32* [ %99, %96 ], [ %99, %107 ], [ %16, %36 ]\l  %78 = landingpad \{ i8*, i32 \}\l          cleanup\l  br label %79\l}"];
	Node0x55ae81013940 -> Node0x55ae810170f0;
	Node0x55ae810170f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%79:\l79:                                               \l  %80 = phi i32* [ %16, %74 ], [ %77, %76 ]\l  %81 = phi \{ i8*, i32 \} [ %75, %74 ], [ %78, %76 ]\l  %82 = icmp eq i32* %80, null\l  br i1 %82, label %109, label %83\l|{<s0>T|<s1>F}}"];
	Node0x55ae810170f0:s0 -> Node0x55ae810175d0;
	Node0x55ae810170f0:s1 -> Node0x55ae81017620;
	Node0x55ae81017620 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f2cab570",label="{%83:\l83:                                               \l  %84 = bitcast i32* %80 to i8*\l  tail call void @_ZdlPv(i8* nonnull %84) #7\l  br label %109\l}"];
	Node0x55ae81017620 -> Node0x55ae810175d0;
	Node0x55ae81011b20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%85:\l85:                                               \l  %86 = phi i32* [ %67, %66 ], [ %16, %15 ]\l  %87 = phi i32* [ %71, %66 ], [ %17, %15 ]\l  %88 = phi i32* [ %68, %66 ], [ %18, %15 ]\l  %89 = phi i32* [ %69, %66 ], [ %19, %15 ]\l  %90 = phi i32* [ %70, %66 ], [ %20, %15 ]\l  %91 = phi i32* [ %71, %66 ], [ %21, %15 ]\l  %92 = phi i32 [ %73, %66 ], [ %24, %15 ]\l  %93 = icmp eq i32 %92, 1\l  br i1 %93, label %94, label %15, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x55ae81011b20:s0 -> Node0x55ae81017e90;
	Node0x55ae81011b20:s1 -> Node0x55ae810119b0;
	Node0x55ae81017e90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470",label="{%94:\l94:                                               \l  %95 = icmp eq i32* %88, %87\l  br i1 %95, label %108, label %96\l|{<s0>T|<s1>F}}"];
	Node0x55ae81017e90:s0 -> Node0x55ae810180a0;
	Node0x55ae81017e90:s1 -> Node0x55ae810101f0;
	Node0x55ae810101f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%96:\l96:                                               \l  %97 = phi i32* [ %88, %94 ], [ %5, %2 ]\l  %98 = phi i32* [ %87, %94 ], [ %14, %2 ]\l  %99 = phi i32* [ %86, %94 ], [ %5, %2 ]\l  %100 = ptrtoint i32* %98 to i64\l  %101 = ptrtoint i32* %97 to i64\l  %102 = sub i64 %100, %101\l  %103 = ashr exact i64 %102, 2\l  %104 = tail call i64 @llvm.ctlz.i64(i64 %103, i1 true) #7, !range !14\l  %105 = shl nuw nsw i64 %104, 1\l  %106 = xor i64 %105, 126\l  invoke void\l... @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElN\l...S0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %97, i32* %98, i64 %106)\l          to label %107 unwind label %76\l}"];
	Node0x55ae810101f0 -> Node0x55ae810171e0;
	Node0x55ae810101f0 -> Node0x55ae81013940;
	Node0x55ae810171e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070",label="{%107:\l107:                                              \l  invoke void\l... @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIi\l...EEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %97, i32* %98)\l          to label %108 unwind label %76\l}"];
	Node0x55ae810171e0 -> Node0x55ae810180a0;
	Node0x55ae810171e0 -> Node0x55ae81013940;
	Node0x55ae810180a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%108:\l108:                                              \l  ret void\l}"];
	Node0x55ae810175d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f4c5ad70",label="{%109:\l109:                                              \l  resume \{ i8*, i32 \} %81\l}"];
}
