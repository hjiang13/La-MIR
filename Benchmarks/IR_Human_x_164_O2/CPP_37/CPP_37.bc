; ModuleID = '../../Human_xBenchmarks_164/CPP_37/CPP_37.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_37/CPP_37.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

$_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_ = comdat any

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z9sort_evenSt6vectorIfSaIfEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  %6 = load float*, float** %3, align 8, !tbaa !3
  %7 = load float*, float** %4, align 8, !tbaa !8
  %8 = icmp eq float* %6, %7
  br i1 %8, label %102, label %29

9:                                                ; preds = %79
  %10 = icmp eq float* %82, %85
  br i1 %10, label %23, label %11

11:                                               ; preds = %9
  %12 = ptrtoint float* %85 to i64
  %13 = ptrtoint float* %82 to i64
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 2
  %16 = tail call i64 @llvm.ctlz.i64(i64 %15, i1 true) #7, !range !9
  %17 = shl nuw nsw i64 %16, 1
  %18 = xor i64 %17, 126
  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %82, float* nonnull %85, i64 %18)
          to label %19 unwind label %103

19:                                               ; preds = %11
  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %82, float* nonnull %85)
          to label %20 unwind label %103

20:                                               ; preds = %19
  %21 = load float*, float** %3, align 8, !tbaa !3
  %22 = load float*, float** %4, align 8, !tbaa !8
  br label %23

23:                                               ; preds = %20, %9
  %24 = phi float* [ %22, %20 ], [ %80, %9 ]
  %25 = phi float* [ %21, %20 ], [ %81, %9 ]
  %26 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %28 = icmp eq float* %25, %24
  br i1 %28, label %98, label %105

29:                                               ; preds = %2, %79
  %30 = phi float* [ %80, %79 ], [ %7, %2 ]
  %31 = phi float* [ %81, %79 ], [ %6, %2 ]
  %32 = phi i64 [ %86, %79 ], [ 0, %2 ]
  %33 = phi i64 [ %88, %79 ], [ 0, %2 ]
  %34 = phi float* [ %84, %79 ], [ null, %2 ]
  %35 = phi float* [ %85, %79 ], [ null, %2 ]
  %36 = phi float* [ %82, %79 ], [ null, %2 ]
  %37 = getelementptr inbounds float, float* %30, i64 %33
  %38 = icmp eq float* %35, %34
  br i1 %38, label %41, label %39

39:                                               ; preds = %29
  %40 = load float, float* %37, align 4, !tbaa !10
  store float %40, float* %35, align 4, !tbaa !10
  br label %79

41:                                               ; preds = %29
  %42 = ptrtoint float* %34 to i64
  %43 = ptrtoint float* %36 to i64
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 2
  %46 = icmp eq i64 %44, 9223372036854775804
  br i1 %46, label %47, label %49

47:                                               ; preds = %41
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
          to label %48 unwind label %96

48:                                               ; preds = %47
  unreachable

49:                                               ; preds = %41
  %50 = icmp eq i64 %44, 0
  %51 = select i1 %50, i64 1, i64 %45
  %52 = add nsw i64 %51, %45
  %53 = icmp ult i64 %52, %45
  %54 = icmp ugt i64 %52, 2305843009213693951
  %55 = or i1 %53, %54
  %56 = select i1 %55, i64 2305843009213693951, i64 %52
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %63, label %58

58:                                               ; preds = %49
  %59 = shl nuw nsw i64 %56, 2
  %60 = invoke noalias nonnull i8* @_Znwm(i64 %59) #9
          to label %61 unwind label %94

61:                                               ; preds = %58
  %62 = bitcast i8* %60 to float*
  br label %63

63:                                               ; preds = %61, %49
  %64 = phi float* [ %62, %61 ], [ null, %49 ]
  %65 = getelementptr inbounds float, float* %64, i64 %45
  %66 = load float, float* %37, align 4, !tbaa !10
  store float %66, float* %65, align 4, !tbaa !10
  %67 = icmp sgt i64 %44, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = bitcast float* %64 to i8*
  %70 = bitcast float* %36 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %44, i1 false) #7
  br label %71

71:                                               ; preds = %63, %68
  %72 = icmp eq float* %36, null
  br i1 %72, label %75, label %73

73:                                               ; preds = %71
  %74 = bitcast float* %36 to i8*
  tail call void @_ZdlPv(i8* nonnull %74) #7
  br label %75

75:                                               ; preds = %73, %71
  %76 = getelementptr inbounds float, float* %64, i64 %56
  %77 = load float*, float** %3, align 8, !tbaa !3
  %78 = load float*, float** %4, align 8, !tbaa !8
  br label %79

79:                                               ; preds = %75, %39
  %80 = phi float* [ %78, %75 ], [ %30, %39 ]
  %81 = phi float* [ %77, %75 ], [ %31, %39 ]
  %82 = phi float* [ %64, %75 ], [ %36, %39 ]
  %83 = phi float* [ %65, %75 ], [ %35, %39 ]
  %84 = phi float* [ %76, %75 ], [ %34, %39 ]
  %85 = getelementptr inbounds float, float* %83, i64 1
  %86 = add nuw i64 %32, 1
  %87 = shl i64 %86, 1
  %88 = and i64 %87, 4294967294
  %89 = ptrtoint float* %81 to i64
  %90 = ptrtoint float* %80 to i64
  %91 = sub i64 %89, %90
  %92 = ashr exact i64 %91, 2
  %93 = icmp ugt i64 %92, %88
  br i1 %93, label %29, label %9, !llvm.loop !12

94:                                               ; preds = %58
  %95 = landingpad { i8*, i32 }
          cleanup
  br label %140

96:                                               ; preds = %47
  %97 = landingpad { i8*, i32 }
          cleanup
  br label %140

98:                                               ; preds = %131, %23
  %99 = icmp eq float* %82, null
  br i1 %99, label %102, label %100

100:                                              ; preds = %98
  %101 = bitcast float* %82 to i8*
  tail call void @_ZdlPv(i8* nonnull %101) #7
  br label %102

102:                                              ; preds = %2, %98, %100
  ret void

103:                                              ; preds = %19, %11
  %104 = landingpad { i8*, i32 }
          cleanup
  br label %140

105:                                              ; preds = %23, %131
  %106 = phi float* [ %134, %131 ], [ %24, %23 ]
  %107 = phi i64 [ %132, %131 ], [ 0, %23 ]
  %108 = and i64 %107, 1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %120

110:                                              ; preds = %105
  %111 = lshr i64 %107, 1
  %112 = and i64 %111, 2147483647
  %113 = getelementptr inbounds float, float* %82, i64 %112
  %114 = load float*, float** %26, align 8, !tbaa !3
  %115 = load float*, float** %27, align 8, !tbaa !14
  %116 = icmp eq float* %114, %115
  br i1 %116, label %117, label %126

117:                                              ; preds = %110
  invoke void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %114, float* nonnull align 4 dereferenceable(4) %113)
          to label %131 unwind label %118

118:                                              ; preds = %125, %117
  %119 = landingpad { i8*, i32 }
          cleanup
  br label %140

120:                                              ; preds = %105
  %121 = getelementptr inbounds float, float* %106, i64 %107
  %122 = load float*, float** %26, align 8, !tbaa !3
  %123 = load float*, float** %27, align 8, !tbaa !14
  %124 = icmp eq float* %122, %123
  br i1 %124, label %125, label %126

125:                                              ; preds = %120
  invoke void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %122, float* nonnull align 4 dereferenceable(4) %121)
          to label %131 unwind label %118

126:                                              ; preds = %120, %110
  %127 = phi float* [ %113, %110 ], [ %121, %120 ]
  %128 = phi float* [ %114, %110 ], [ %122, %120 ]
  %129 = load float, float* %127, align 4, !tbaa !10
  store float %129, float* %128, align 4, !tbaa !10
  %130 = getelementptr inbounds float, float* %128, i64 1
  store float* %130, float** %26, align 8, !tbaa !3
  br label %131

131:                                              ; preds = %126, %125, %117
  %132 = add nuw i64 %107, 1
  %133 = load float*, float** %3, align 8, !tbaa !3
  %134 = load float*, float** %4, align 8, !tbaa !8
  %135 = ptrtoint float* %133 to i64
  %136 = ptrtoint float* %134 to i64
  %137 = sub i64 %135, %136
  %138 = ashr exact i64 %137, 2
  %139 = icmp ugt i64 %138, %132
  br i1 %139, label %105, label %98, !llvm.loop !15

140:                                              ; preds = %94, %96, %118, %103
  %141 = phi float* [ %82, %118 ], [ %82, %103 ], [ %36, %94 ], [ %36, %96 ]
  %142 = phi { i8*, i32 } [ %119, %118 ], [ %104, %103 ], [ %95, %94 ], [ %97, %96 ]
  %143 = icmp eq float* %141, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %140
  %145 = bitcast float* %141 to i8*
  tail call void @_ZdlPv(i8* nonnull %145) #7
  br label %146

146:                                              ; preds = %140, %144
  %147 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %148 = load float*, float** %147, align 8, !tbaa !8
  %149 = icmp eq float* %148, null
  br i1 %149, label %152, label %150

150:                                              ; preds = %146
  %151 = bitcast float* %148 to i8*
  tail call void @_ZdlPv(i8* nonnull %151) #7
  br label %152

152:                                              ; preds = %146, %150
  resume { i8*, i32 } %142
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %1, float* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load float*, float** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load float*, float** %6, align 8, !tbaa !8
  %8 = ptrtoint float* %5 to i64
  %9 = ptrtoint float* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint float* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %14
  %27 = shl nuw nsw i64 %21, 2
  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #9
  %29 = bitcast i8* %28 to float*
  br label %30

30:                                               ; preds = %14, %26
  %31 = phi float* [ %29, %26 ], [ null, %14 ]
  %32 = getelementptr inbounds float, float* %31, i64 %24
  %33 = load float, float* %2, align 4, !tbaa !10
  store float %33, float* %32, align 4, !tbaa !10
  %34 = icmp sgt i64 %23, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = bitcast float* %31 to i8*
  %37 = bitcast float* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %23, i1 false) #7
  br label %38

38:                                               ; preds = %30, %35
  %39 = getelementptr inbounds float, float* %32, i64 1
  %40 = sub i64 %8, %22
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  %43 = bitcast float* %39 to i8*
  %44 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 4 %44, i64 %40, i1 false) #7
  br label %45

45:                                               ; preds = %38, %42
  %46 = icmp eq float* %7, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = bitcast float* %7 to i8*
  tail call void @_ZdlPv(i8* nonnull %48) #7
  br label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %51 = ashr exact i64 %40, 2
  %52 = getelementptr inbounds float, float* %39, i64 %51
  store float* %31, float** %6, align 8, !tbaa !8
  store float* %52, float** %4, align 8, !tbaa !3
  %53 = getelementptr inbounds float, float* %31, i64 %21
  store float* %53, float** %50, align 8, !tbaa !14
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* %0, float* %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = ptrtoint float* %0 to i64
  %5 = getelementptr inbounds float, float* %0, i64 1
  %6 = ptrtoint float* %1 to i64
  %7 = sub i64 %6, %4
  %8 = icmp sgt i64 %7, 64
  br i1 %8, label %9, label %177

9:                                                ; preds = %3, %173
  %10 = phi i64 [ %175, %173 ], [ %7, %3 ]
  %11 = phi i64 [ %129, %173 ], [ %2, %3 ]
  %12 = phi float* [ %161, %173 ], [ %1, %3 ]
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %14, label %128

14:                                               ; preds = %9
  %15 = lshr exact i64 %10, 2
  %16 = add nsw i64 %15, -2
  %17 = lshr i64 %16, 1
  %18 = add nsw i64 %15, -1
  %19 = lshr i64 %18, 1
  %20 = and i64 %10, 4
  %21 = icmp eq i64 %20, 0
  %22 = or i64 %16, 1
  %23 = getelementptr inbounds float, float* %0, i64 %22
  %24 = getelementptr inbounds float, float* %0, i64 %17
  br label %25

25:                                               ; preds = %64, %14
  %26 = phi i64 [ %17, %14 ], [ %68, %64 ]
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = load float, float* %27, align 4, !tbaa !10
  %29 = icmp sgt i64 %19, %26
  br i1 %29, label %30, label %45

30:                                               ; preds = %25, %30
  %31 = phi i64 [ %40, %30 ], [ %26, %25 ]
  %32 = shl i64 %31, 1
  %33 = add i64 %32, 2
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = or i64 %32, 1
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = load float, float* %34, align 4, !tbaa !10
  %38 = load float, float* %36, align 4, !tbaa !10
  %39 = fcmp olt float %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = getelementptr inbounds float, float* %0, i64 %40
  %42 = load float, float* %41, align 4, !tbaa !10
  %43 = getelementptr inbounds float, float* %0, i64 %31
  store float %42, float* %43, align 4, !tbaa !10
  %44 = icmp slt i64 %40, %19
  br i1 %44, label %30, label %45, !llvm.loop !16

45:                                               ; preds = %30, %25
  %46 = phi i64 [ %26, %25 ], [ %40, %30 ]
  %47 = icmp eq i64 %46, %17
  %48 = select i1 %21, i1 %47, i1 false
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = load float, float* %23, align 4, !tbaa !10
  store float %50, float* %24, align 4, !tbaa !10
  br label %51

51:                                               ; preds = %49, %45
  %52 = phi i64 [ %22, %49 ], [ %46, %45 ]
  %53 = icmp sgt i64 %52, %26
  br i1 %53, label %54, label %64

54:                                               ; preds = %51, %61
  %55 = phi i64 [ %57, %61 ], [ %52, %51 ]
  %56 = add nsw i64 %55, -1
  %57 = sdiv i64 %56, 2
  %58 = getelementptr inbounds float, float* %0, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !10
  %60 = fcmp olt float %59, %28
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  %62 = getelementptr inbounds float, float* %0, i64 %55
  store float %59, float* %62, align 4, !tbaa !10
  %63 = icmp sgt i64 %57, %26
  br i1 %63, label %54, label %64, !llvm.loop !17

64:                                               ; preds = %61, %54, %51
  %65 = phi i64 [ %52, %51 ], [ %57, %61 ], [ %55, %54 ]
  %66 = getelementptr inbounds float, float* %0, i64 %65
  store float %28, float* %66, align 4, !tbaa !10
  %67 = icmp eq i64 %26, 0
  %68 = add nsw i64 %26, -1
  br i1 %67, label %69, label %25, !llvm.loop !18

69:                                               ; preds = %64
  %70 = icmp sgt i64 %10, 4
  br i1 %70, label %71, label %177

71:                                               ; preds = %69, %124
  %72 = phi float* [ %73, %124 ], [ %12, %69 ]
  %73 = getelementptr inbounds float, float* %72, i64 -1
  %74 = load float, float* %73, align 4, !tbaa !10
  %75 = load float, float* %0, align 4, !tbaa !10
  store float %75, float* %73, align 4, !tbaa !10
  %76 = ptrtoint float* %73 to i64
  %77 = sub i64 %76, %4
  %78 = ashr exact i64 %77, 2
  %79 = add nsw i64 %78, -1
  %80 = sdiv i64 %79, 2
  %81 = icmp sgt i64 %77, 8
  br i1 %81, label %82, label %97

82:                                               ; preds = %71, %82
  %83 = phi i64 [ %92, %82 ], [ 0, %71 ]
  %84 = shl i64 %83, 1
  %85 = add i64 %84, 2
  %86 = getelementptr inbounds float, float* %0, i64 %85
  %87 = or i64 %84, 1
  %88 = getelementptr inbounds float, float* %0, i64 %87
  %89 = load float, float* %86, align 4, !tbaa !10
  %90 = load float, float* %88, align 4, !tbaa !10
  %91 = fcmp olt float %89, %90
  %92 = select i1 %91, i64 %87, i64 %85
  %93 = getelementptr inbounds float, float* %0, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !10
  %95 = getelementptr inbounds float, float* %0, i64 %83
  store float %94, float* %95, align 4, !tbaa !10
  %96 = icmp slt i64 %92, %80
  br i1 %96, label %82, label %97, !llvm.loop !16

97:                                               ; preds = %82, %71
  %98 = phi i64 [ 0, %71 ], [ %92, %82 ]
  %99 = and i64 %77, 4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %111

101:                                              ; preds = %97
  %102 = add nsw i64 %78, -2
  %103 = sdiv i64 %102, 2
  %104 = icmp eq i64 %98, %103
  br i1 %104, label %105, label %111

105:                                              ; preds = %101
  %106 = shl i64 %98, 1
  %107 = or i64 %106, 1
  %108 = getelementptr inbounds float, float* %0, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !10
  %110 = getelementptr inbounds float, float* %0, i64 %98
  store float %109, float* %110, align 4, !tbaa !10
  br label %111

111:                                              ; preds = %105, %101, %97
  %112 = phi i64 [ %107, %105 ], [ %98, %101 ], [ %98, %97 ]
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %114, label %124

114:                                              ; preds = %111, %121
  %115 = phi i64 [ %117, %121 ], [ %112, %111 ]
  %116 = add nsw i64 %115, -1
  %117 = lshr i64 %116, 1
  %118 = getelementptr inbounds float, float* %0, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !10
  %120 = fcmp olt float %119, %74
  br i1 %120, label %121, label %124

121:                                              ; preds = %114
  %122 = getelementptr inbounds float, float* %0, i64 %115
  store float %119, float* %122, align 4, !tbaa !10
  %123 = icmp ult i64 %116, 2
  br i1 %123, label %124, label %114, !llvm.loop !17

124:                                              ; preds = %121, %114, %111
  %125 = phi i64 [ %112, %111 ], [ 0, %121 ], [ %115, %114 ]
  %126 = getelementptr inbounds float, float* %0, i64 %125
  store float %74, float* %126, align 4, !tbaa !10
  %127 = icmp sgt i64 %77, 4
  br i1 %127, label %71, label %177, !llvm.loop !19

128:                                              ; preds = %9
  %129 = add nsw i64 %11, -1
  %130 = lshr i64 %10, 3
  %131 = getelementptr inbounds float, float* %0, i64 %130
  %132 = getelementptr inbounds float, float* %12, i64 -1
  %133 = load float, float* %5, align 4, !tbaa !10
  %134 = load float, float* %131, align 4, !tbaa !10
  %135 = fcmp olt float %133, %134
  %136 = load float, float* %132, align 4, !tbaa !10
  br i1 %135, label %137, label %146

137:                                              ; preds = %128
  %138 = fcmp olt float %134, %136
  br i1 %138, label %139, label %141

139:                                              ; preds = %137
  %140 = load float, float* %0, align 4, !tbaa !10
  store float %134, float* %0, align 4, !tbaa !10
  store float %140, float* %131, align 4, !tbaa !10
  br label %155

141:                                              ; preds = %137
  %142 = fcmp olt float %133, %136
  %143 = load float, float* %0, align 4, !tbaa !10
  br i1 %142, label %144, label %145

144:                                              ; preds = %141
  store float %136, float* %0, align 4, !tbaa !10
  store float %143, float* %132, align 4, !tbaa !10
  br label %155

145:                                              ; preds = %141
  store float %133, float* %0, align 4, !tbaa !10
  store float %143, float* %5, align 4, !tbaa !10
  br label %155

146:                                              ; preds = %128
  %147 = fcmp olt float %133, %136
  br i1 %147, label %148, label %150

148:                                              ; preds = %146
  %149 = load float, float* %0, align 4, !tbaa !10
  store float %133, float* %0, align 4, !tbaa !10
  store float %149, float* %5, align 4, !tbaa !10
  br label %155

150:                                              ; preds = %146
  %151 = fcmp olt float %134, %136
  %152 = load float, float* %0, align 4, !tbaa !10
  br i1 %151, label %153, label %154

153:                                              ; preds = %150
  store float %136, float* %0, align 4, !tbaa !10
  store float %152, float* %132, align 4, !tbaa !10
  br label %155

154:                                              ; preds = %150
  store float %134, float* %0, align 4, !tbaa !10
  store float %152, float* %131, align 4, !tbaa !10
  br label %155

155:                                              ; preds = %154, %153, %148, %145, %144, %139
  br label %156

156:                                              ; preds = %155, %172
  %157 = phi float* [ %164, %172 ], [ %5, %155 ]
  %158 = phi float* [ %167, %172 ], [ %12, %155 ]
  %159 = load float, float* %0, align 4, !tbaa !10
  br label %160

160:                                              ; preds = %160, %156
  %161 = phi float* [ %157, %156 ], [ %164, %160 ]
  %162 = load float, float* %161, align 4, !tbaa !10
  %163 = fcmp olt float %162, %159
  %164 = getelementptr inbounds float, float* %161, i64 1
  br i1 %163, label %160, label %165, !llvm.loop !20

165:                                              ; preds = %160, %165
  %166 = phi float* [ %167, %165 ], [ %158, %160 ]
  %167 = getelementptr inbounds float, float* %166, i64 -1
  %168 = load float, float* %167, align 4, !tbaa !10
  %169 = fcmp olt float %159, %168
  br i1 %169, label %165, label %170, !llvm.loop !21

170:                                              ; preds = %165
  %171 = icmp ult float* %161, %167
  br i1 %171, label %172, label %173

172:                                              ; preds = %170
  store float %168, float* %161, align 4, !tbaa !10
  store float %162, float* %167, align 4, !tbaa !10
  br label %156, !llvm.loop !22

173:                                              ; preds = %170
  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(float* nonnull %161, float* %12, i64 %129)
  %174 = ptrtoint float* %161 to i64
  %175 = sub i64 %174, %4
  %176 = icmp sgt i64 %175, 64
  br i1 %176, label %9, label %177, !llvm.loop !23

177:                                              ; preds = %173, %124, %3, %69
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(float* %0, float* %1) local_unnamed_addr #0 comdat {
  %3 = ptrtoint float* %1 to i64
  %4 = ptrtoint float* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp sgt i64 %5, 64
  br i1 %6, label %7, label %54

7:                                                ; preds = %2
  %8 = bitcast float* %0 to i8*
  %9 = getelementptr float, float* %0, i64 1
  %10 = bitcast float* %9 to i8*
  br label %11

11:                                               ; preds = %7, %30
  %12 = phi i64 [ %32, %30 ], [ 1, %7 ]
  %13 = phi float* [ %14, %30 ], [ %0, %7 ]
  %14 = getelementptr inbounds float, float* %0, i64 %12
  %15 = load float, float* %14, align 4, !tbaa !10
  %16 = load float, float* %0, align 4, !tbaa !10
  %17 = fcmp olt float %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = shl nsw i64 %12, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* nonnull align 4 %8, i64 %19, i1 false) #7
  br label %30

20:                                               ; preds = %11
  %21 = load float, float* %13, align 4, !tbaa !10
  %22 = fcmp olt float %15, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %20, %23
  %24 = phi float [ %28, %23 ], [ %21, %20 ]
  %25 = phi float* [ %27, %23 ], [ %13, %20 ]
  %26 = phi float* [ %25, %23 ], [ %14, %20 ]
  store float %24, float* %26, align 4, !tbaa !10
  %27 = getelementptr inbounds float, float* %25, i64 -1
  %28 = load float, float* %27, align 4, !tbaa !10
  %29 = fcmp olt float %15, %28
  br i1 %29, label %23, label %30, !llvm.loop !24

30:                                               ; preds = %23, %20, %18
  %31 = phi float* [ %0, %18 ], [ %14, %20 ], [ %25, %23 ]
  store float %15, float* %31, align 4, !tbaa !10
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, 16
  br i1 %33, label %34, label %11, !llvm.loop !25

34:                                               ; preds = %30
  %35 = getelementptr inbounds float, float* %0, i64 16
  %36 = icmp eq float* %35, %1
  br i1 %36, label %89, label %37

37:                                               ; preds = %34, %50
  %38 = phi float* [ %52, %50 ], [ %35, %34 ]
  %39 = load float, float* %38, align 4, !tbaa !10
  %40 = getelementptr inbounds float, float* %38, i64 -1
  %41 = load float, float* %40, align 4, !tbaa !10
  %42 = fcmp olt float %39, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %37, %43
  %44 = phi float [ %48, %43 ], [ %41, %37 ]
  %45 = phi float* [ %47, %43 ], [ %40, %37 ]
  %46 = phi float* [ %45, %43 ], [ %38, %37 ]
  store float %44, float* %46, align 4, !tbaa !10
  %47 = getelementptr inbounds float, float* %45, i64 -1
  %48 = load float, float* %47, align 4, !tbaa !10
  %49 = fcmp olt float %39, %48
  br i1 %49, label %43, label %50, !llvm.loop !24

50:                                               ; preds = %43, %37
  %51 = phi float* [ %38, %37 ], [ %45, %43 ]
  store float %39, float* %51, align 4, !tbaa !10
  %52 = getelementptr inbounds float, float* %38, i64 1
  %53 = icmp eq float* %52, %1
  br i1 %53, label %89, label %37, !llvm.loop !26

54:                                               ; preds = %2
  %55 = icmp eq float* %0, %1
  br i1 %55, label %89, label %56

56:                                               ; preds = %54
  %57 = bitcast float* %0 to i8*
  %58 = getelementptr inbounds float, float* %0, i64 1
  %59 = icmp eq float* %58, %1
  br i1 %59, label %89, label %60

60:                                               ; preds = %56, %85
  %61 = phi float* [ %87, %85 ], [ %58, %56 ]
  %62 = phi float* [ %61, %85 ], [ %0, %56 ]
  %63 = load float, float* %61, align 4, !tbaa !10
  %64 = load float, float* %0, align 4, !tbaa !10
  %65 = fcmp olt float %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %60
  %67 = ptrtoint float* %61 to i64
  %68 = sub i64 %67, %4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %66
  %71 = ashr exact i64 %68, 2
  %72 = sub nsw i64 2, %71
  %73 = getelementptr inbounds float, float* %62, i64 %72
  %74 = bitcast float* %73 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* nonnull align 4 %57, i64 %68, i1 false) #7
  br label %85

75:                                               ; preds = %60
  %76 = load float, float* %62, align 4, !tbaa !10
  %77 = fcmp olt float %63, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %75, %78
  %79 = phi float [ %83, %78 ], [ %76, %75 ]
  %80 = phi float* [ %82, %78 ], [ %62, %75 ]
  %81 = phi float* [ %80, %78 ], [ %61, %75 ]
  store float %79, float* %81, align 4, !tbaa !10
  %82 = getelementptr inbounds float, float* %80, i64 -1
  %83 = load float, float* %82, align 4, !tbaa !10
  %84 = fcmp olt float %63, %83
  br i1 %84, label %78, label %85, !llvm.loop !24

85:                                               ; preds = %78, %75, %70, %66
  %86 = phi float* [ %0, %66 ], [ %0, %70 ], [ %61, %75 ], [ %80, %78 ]
  store float %63, float* %86, align 4, !tbaa !10
  %87 = getelementptr inbounds float, float* %61, i64 1
  %88 = icmp eq float* %87, %1
  br i1 %88, label %89, label %60, !llvm.loop !25

89:                                               ; preds = %85, %50, %56, %54, %34
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{i64 0, i64 65}
!10 = !{!11, !11, i64 0}
!11 = !{!"float", !6, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!4, !5, i64 16}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !13}
!17 = distinct !{!17, !13}
!18 = distinct !{!18, !13}
!19 = distinct !{!19, !13}
!20 = distinct !{!20, !13}
!21 = distinct !{!21, !13}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !13}
!24 = distinct !{!24, !13}
!25 = distinct !{!25, !13}
!26 = distinct !{!26, !13}
