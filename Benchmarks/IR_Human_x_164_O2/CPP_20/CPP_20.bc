; ModuleID = '../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_20/CPP_20.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

$_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag = comdat any

@.str = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z21find_closest_elementsSt6vectorIfSaIfEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca [2 x float], align 4
  %4 = alloca [2 x float], align 4
  %5 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = bitcast [2 x float]* %3 to i8*
  %10 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  %11 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  %12 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 2
  %13 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %13, i8 0, i64 24, i1 false)
  %14 = load float*, float** %5, align 8, !tbaa !3
  %15 = load float*, float** %6, align 8, !tbaa !8
  br label %33

16:                                               ; preds = %78
  %17 = ptrtoint float* %80 to i64
  %18 = ptrtoint float* %79 to i64
  %19 = sub i64 %17, %18
  %20 = ashr exact i64 %19, 2
  br label %21

21:                                               ; preds = %16, %33
  %22 = phi i64 [ %20, %16 ], [ %42, %33 ]
  %23 = phi float* [ %79, %16 ], [ %34, %33 ]
  %24 = phi float* [ %80, %16 ], [ %35, %33 ]
  %25 = icmp ugt i64 %22, %38
  %26 = add i64 %37, 1
  br i1 %25, label %33, label %27, !llvm.loop !9

27:                                               ; preds = %21
  %28 = load float*, float** %8, align 8, !tbaa !8
  %29 = load float, float* %28, align 4, !tbaa !11
  %30 = getelementptr inbounds float, float* %28, i64 1
  %31 = load float, float* %30, align 4, !tbaa !11
  %32 = fcmp ogt float %29, %31
  br i1 %32, label %89, label %98

33:                                               ; preds = %2, %21
  %34 = phi float* [ %23, %21 ], [ %15, %2 ]
  %35 = phi float* [ %24, %21 ], [ %14, %2 ]
  %36 = phi i64 [ %38, %21 ], [ 0, %2 ]
  %37 = phi i64 [ %26, %21 ], [ 1, %2 ]
  %38 = add nuw i64 %36, 1
  %39 = ptrtoint float* %35 to i64
  %40 = ptrtoint float* %34 to i64
  %41 = sub i64 %39, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp ugt i64 %42, %38
  br i1 %43, label %44, label %21

44:                                               ; preds = %33, %78
  %45 = phi float* [ %79, %78 ], [ %34, %33 ]
  %46 = phi float* [ %80, %78 ], [ %35, %33 ]
  %47 = phi float* [ %81, %78 ], [ %34, %33 ]
  %48 = phi float* [ %82, %78 ], [ %35, %33 ]
  %49 = phi i64 [ %83, %78 ], [ %37, %33 ]
  %50 = load float*, float** %7, align 8, !tbaa !3
  %51 = load float*, float** %8, align 8, !tbaa !8
  %52 = icmp eq float* %50, %51
  %53 = getelementptr inbounds float, float* %47, i64 %36
  %54 = load float, float* %53, align 4, !tbaa !11
  br i1 %52, label %70, label %55

55:                                               ; preds = %44
  %56 = getelementptr inbounds float, float* %47, i64 %49
  %57 = load float, float* %56, align 4, !tbaa !11
  %58 = load float, float* %51, align 4, !tbaa !11
  %59 = getelementptr inbounds float, float* %51, i64 1
  %60 = load float, float* %59, align 4, !tbaa !11
  %61 = insertelement <2 x float> poison, float %54, i32 0
  %62 = insertelement <2 x float> %61, float %58, i32 1
  %63 = insertelement <2 x float> poison, float %57, i32 0
  %64 = insertelement <2 x float> %63, float %60, i32 1
  %65 = fsub <2 x float> %62, %64
  %66 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %65)
  %67 = extractelement <2 x float> %66, i32 0
  %68 = extractelement <2 x float> %66, i32 1
  %69 = fcmp olt float %67, %68
  br i1 %69, label %70, label %78

70:                                               ; preds = %44, %55
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #9
  store float %54, float* %10, align 4, !tbaa !11
  %71 = getelementptr inbounds float, float* %47, i64 %49
  %72 = load float, float* %71, align 4, !tbaa !11
  store float %72, float* %11, align 4, !tbaa !11
  invoke void @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* nonnull %10, float* nonnull %12)
          to label %73 unwind label %76

73:                                               ; preds = %70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  %74 = load float*, float** %5, align 8, !tbaa !3
  %75 = load float*, float** %6, align 8, !tbaa !8
  br label %78

76:                                               ; preds = %70
  %77 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #9
  br label %99

78:                                               ; preds = %55, %73
  %79 = phi float* [ %45, %55 ], [ %75, %73 ]
  %80 = phi float* [ %46, %55 ], [ %74, %73 ]
  %81 = phi float* [ %47, %55 ], [ %75, %73 ]
  %82 = phi float* [ %48, %55 ], [ %74, %73 ]
  %83 = add i64 %49, 1
  %84 = ptrtoint float* %82 to i64
  %85 = ptrtoint float* %81 to i64
  %86 = sub i64 %84, %85
  %87 = ashr exact i64 %86, 2
  %88 = icmp ugt i64 %87, %83
  br i1 %88, label %44, label %16, !llvm.loop !13

89:                                               ; preds = %27
  %90 = bitcast [2 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #9
  %91 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  store float %31, float* %91, align 4, !tbaa !11
  %92 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %93 = load float, float* %28, align 4, !tbaa !11
  store float %93, float* %92, align 4, !tbaa !11
  %94 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 2
  invoke void @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* nonnull %91, float* nonnull %94)
          to label %95 unwind label %96

95:                                               ; preds = %89
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #9
  br label %98

96:                                               ; preds = %89
  %97 = landingpad { i8*, i32 }
          cleanup
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #9
  br label %99

98:                                               ; preds = %27, %95
  ret void

99:                                               ; preds = %96, %76
  %100 = phi { i8*, i32 } [ %77, %76 ], [ %97, %96 ]
  %101 = load float*, float** %8, align 8, !tbaa !8
  %102 = icmp eq float* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %99
  %104 = bitcast float* %101 to i8*
  call void @_ZdlPv(i8* nonnull %104) #9
  br label %105

105:                                              ; preds = %99, %103
  resume { i8*, i32 } %100
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, float* %1, float* %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = ptrtoint float* %2 to i64
  %5 = ptrtoint float* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %9 = load float*, float** %8, align 8, !tbaa !14
  %10 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load float*, float** %10, align 8, !tbaa !8
  %12 = ptrtoint float* %9 to i64
  %13 = ptrtoint float* %11 to i64
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp ugt i64 %7, %15
  br i1 %16, label %17, label %35

17:                                               ; preds = %3
  %18 = icmp ugt i64 %7, 2305843009213693951
  br i1 %18, label %19, label %20

19:                                               ; preds = %17
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0)) #10
  unreachable

20:                                               ; preds = %17
  %21 = tail call noalias nonnull i8* @_Znwm(i64 %6) #11
  %22 = bitcast i8* %21 to float*
  %23 = icmp eq i64 %6, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = bitcast float* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %21, i8* align 4 %25, i64 %6, i1 false) #9
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %28 = load float*, float** %10, align 8, !tbaa !8
  %29 = icmp eq float* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = bitcast float* %28 to i8*
  tail call void @_ZdlPv(i8* nonnull %31) #9
  br label %32

32:                                               ; preds = %26, %30
  %33 = bitcast %"class.std::vector"* %0 to i8**
  store i8* %21, i8** %33, align 8, !tbaa !8
  %34 = getelementptr inbounds float, float* %22, i64 %7
  store float* %34, float** %27, align 8, !tbaa !3
  store float* %34, float** %8, align 8, !tbaa !14
  br label %71

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %37 = load float*, float** %36, align 8, !tbaa !3
  %38 = ptrtoint float* %37 to i64
  %39 = sub i64 %38, %13
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, %7
  br i1 %41, label %53, label %42

42:                                               ; preds = %35
  %43 = icmp eq i64 %6, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %42
  %45 = bitcast float* %11 to i8*
  %46 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %46, i64 %6, i1 false) #9
  %47 = load float*, float** %36, align 8, !tbaa !3
  br label %48

48:                                               ; preds = %42, %44
  %49 = phi float* [ %37, %42 ], [ %47, %44 ]
  %50 = getelementptr inbounds float, float* %11, i64 %7
  %51 = icmp eq float* %49, %50
  br i1 %51, label %71, label %52

52:                                               ; preds = %48
  store float* %50, float** %36, align 8, !tbaa !3
  br label %71

53:                                               ; preds = %35
  %54 = getelementptr inbounds float, float* %1, i64 %40
  %55 = ptrtoint float* %54 to i64
  %56 = icmp eq i64 %39, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = bitcast float* %11 to i8*
  %59 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %59, i64 %39, i1 false) #9
  %60 = load float*, float** %36, align 8, !tbaa !3
  br label %61

61:                                               ; preds = %53, %57
  %62 = phi float* [ %37, %53 ], [ %60, %57 ]
  %63 = sub i64 %4, %55
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %61
  %66 = bitcast float* %62 to i8*
  %67 = bitcast float* %54 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 %63, i1 false) #9
  br label %68

68:                                               ; preds = %61, %65
  %69 = ashr exact i64 %63, 2
  %70 = getelementptr inbounds float, float* %62, i64 %69
  store float* %70, float** %36, align 8, !tbaa !3
  br label %71

71:                                               ; preds = %52, %48, %68, %32
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #8

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #7 = { argmemonly nofree nounwind willreturn }
attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #9 = { nounwind }
attributes #10 = { noreturn }
attributes #11 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!12, !12, i64 0}
!12 = !{!"float", !6, i64 0}
!13 = distinct !{!13, !10}
!14 = !{!4, !5, i64 16}
