digraph "CFG for '_Z21find_closest_elementsSt6vectorIfSaIfEE' function" {
	label="CFG for '_Z21find_closest_elementsSt6vectorIfSaIfEE' function";

	Node0x563df5d64410 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%2:\l  %3 = alloca [2 x float], align 4\l  %4 = alloca [2 x float], align 4\l  %5 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %6 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %1,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %7 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 1\l  %8 = getelementptr inbounds %\"class.std::vector\", %\"class.std::vector\"* %0,\l... i64 0, i32 0, i32 0, i32 0, i32 0\l  %9 = bitcast [2 x float]* %3 to i8*\l  %10 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0\l  %11 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1\l  %12 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 2\l  %13 = bitcast %\"class.std::vector\"* %0 to i8*\l  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8\l... dereferenceable(24) %13, i8 0, i64 24, i1 false)\l  %14 = load float*, float** %5, align 8, !tbaa !3\l  %15 = load float*, float** %6, align 8, !tbaa !8\l  br label %33\l}"];
	Node0x563df5d64410 -> Node0x563df5d664d0;
	Node0x563df5d665d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e5705870",label="{%16:\l16:                                               \l  %17 = ptrtoint float* %80 to i64\l  %18 = ptrtoint float* %79 to i64\l  %19 = sub i64 %17, %18\l  %20 = ashr exact i64 %19, 2\l  br label %21\l}"];
	Node0x563df5d665d0 -> Node0x563df5d66840;
	Node0x563df5d66840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%21:\l21:                                               \l  %22 = phi i64 [ %20, %16 ], [ %42, %33 ]\l  %23 = phi float* [ %79, %16 ], [ %34, %33 ]\l  %24 = phi float* [ %80, %16 ], [ %35, %33 ]\l  %25 = icmp ugt i64 %22, %38\l  %26 = add i64 %37, 1\l  br i1 %25, label %33, label %27, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x563df5d66840:s0 -> Node0x563df5d664d0;
	Node0x563df5d66840:s1 -> Node0x563df5d66e60;
	Node0x563df5d66e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%27:\l27:                                               \l  %28 = load float*, float** %8, align 8, !tbaa !8\l  %29 = load float, float* %28, align 4, !tbaa !11\l  %30 = getelementptr inbounds float, float* %28, i64 1\l  %31 = load float, float* %30, align 4, !tbaa !11\l  %32 = fcmp ogt float %29, %31\l  br i1 %32, label %89, label %98\l|{<s0>T|<s1>F}}"];
	Node0x563df5d66e60:s0 -> Node0x563df5d68250;
	Node0x563df5d66e60:s1 -> Node0x563df5d682e0;
	Node0x563df5d664d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#de614d70",label="{%33:\l33:                                               \l  %34 = phi float* [ %23, %21 ], [ %15, %2 ]\l  %35 = phi float* [ %24, %21 ], [ %14, %2 ]\l  %36 = phi i64 [ %38, %21 ], [ 0, %2 ]\l  %37 = phi i64 [ %26, %21 ], [ 1, %2 ]\l  %38 = add nuw i64 %36, 1\l  %39 = ptrtoint float* %35 to i64\l  %40 = ptrtoint float* %34 to i64\l  %41 = sub i64 %39, %40\l  %42 = ashr exact i64 %41, 2\l  %43 = icmp ugt i64 %42, %38\l  br i1 %43, label %44, label %21\l|{<s0>T|<s1>F}}"];
	Node0x563df5d664d0:s0 -> Node0x563df5d68a00;
	Node0x563df5d664d0:s1 -> Node0x563df5d66840;
	Node0x563df5d68a00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  %45 = phi float* [ %79, %78 ], [ %34, %33 ]\l  %46 = phi float* [ %80, %78 ], [ %35, %33 ]\l  %47 = phi float* [ %81, %78 ], [ %34, %33 ]\l  %48 = phi float* [ %82, %78 ], [ %35, %33 ]\l  %49 = phi i64 [ %83, %78 ], [ %37, %33 ]\l  %50 = load float*, float** %7, align 8, !tbaa !3\l  %51 = load float*, float** %8, align 8, !tbaa !8\l  %52 = icmp eq float* %50, %51\l  %53 = getelementptr inbounds float, float* %47, i64 %36\l  %54 = load float, float* %53, align 4, !tbaa !11\l  br i1 %52, label %70, label %55\l|{<s0>T|<s1>F}}"];
	Node0x563df5d68a00:s0 -> Node0x563df5d69750;
	Node0x563df5d68a00:s1 -> Node0x563df5d697a0;
	Node0x563df5d697a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%55:\l55:                                               \l  %56 = getelementptr inbounds float, float* %47, i64 %49\l  %57 = load float, float* %56, align 4, !tbaa !11\l  %58 = load float, float* %51, align 4, !tbaa !11\l  %59 = getelementptr inbounds float, float* %51, i64 1\l  %60 = load float, float* %59, align 4, !tbaa !11\l  %61 = insertelement \<2 x float\> poison, float %54, i32 0\l  %62 = insertelement \<2 x float\> %61, float %58, i32 1\l  %63 = insertelement \<2 x float\> poison, float %57, i32 0\l  %64 = insertelement \<2 x float\> %63, float %60, i32 1\l  %65 = fsub \<2 x float\> %62, %64\l  %66 = call \<2 x float\> @llvm.fabs.v2f32(\<2 x float\> %65)\l  %67 = extractelement \<2 x float\> %66, i32 0\l  %68 = extractelement \<2 x float\> %66, i32 1\l  %69 = fcmp olt float %67, %68\l  br i1 %69, label %70, label %78\l|{<s0>T|<s1>F}}"];
	Node0x563df5d697a0:s0 -> Node0x563df5d69750;
	Node0x563df5d697a0:s1 -> Node0x563df5d68b00;
	Node0x563df5d69750 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%70:\l70:                                               \l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8\l  store float %54, float* %10, align 4, !tbaa !11\l  %71 = getelementptr inbounds float, float* %47, i64 %49\l  %72 = load float, float* %71, align 4, !tbaa !11\l  store float %72, float* %11, align 4, !tbaa !11\l  invoke void\l... @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%\"cla\l...ss.std::vector\"* nonnull align 8 dereferenceable(24) %0, float* nonnull %10,\l... float* nonnull %12)\l          to label %73 unwind label %76\l}"];
	Node0x563df5d69750 -> Node0x563df5d6b6d0;
	Node0x563df5d69750 -> Node0x563df5d6b720;
	Node0x563df5d6b6d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#be242e70",label="{%73:\l73:                                               \l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8\l  %74 = load float*, float** %5, align 8, !tbaa !3\l  %75 = load float*, float** %6, align 8, !tbaa !8\l  br label %78\l}"];
	Node0x563df5d6b6d0 -> Node0x563df5d68b00;
	Node0x563df5d6b720 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%76:\l76:                                               \l  %77 = landingpad \{ i8*, i32 \}\l          cleanup\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8\l  br label %99\l}"];
	Node0x563df5d6b720 -> Node0x563df5d6bfd0;
	Node0x563df5d68b00 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%78:\l78:                                               \l  %79 = phi float* [ %45, %55 ], [ %75, %73 ]\l  %80 = phi float* [ %46, %55 ], [ %74, %73 ]\l  %81 = phi float* [ %47, %55 ], [ %75, %73 ]\l  %82 = phi float* [ %48, %55 ], [ %74, %73 ]\l  %83 = add i64 %49, 1\l  %84 = ptrtoint float* %82 to i64\l  %85 = ptrtoint float* %81 to i64\l  %86 = sub i64 %84, %85\l  %87 = ashr exact i64 %86, 2\l  %88 = icmp ugt i64 %87, %83\l  br i1 %88, label %44, label %16, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x563df5d68b00:s0 -> Node0x563df5d68a00;
	Node0x563df5d68b00:s1 -> Node0x563df5d665d0;
	Node0x563df5d68250 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%89:\l89:                                               \l  %90 = bitcast [2 x float]* %4 to i8*\l  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #8\l  %91 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0\l  store float %31, float* %91, align 4, !tbaa !11\l  %92 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1\l  %93 = load float, float* %28, align 4, !tbaa !11\l  store float %93, float* %92, align 4, !tbaa !11\l  %94 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 2\l  invoke void\l... @_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag(%\"cla\l...ss.std::vector\"* nonnull align 8 dereferenceable(24) %0, float* nonnull %91,\l... float* nonnull %94)\l          to label %95 unwind label %96\l}"];
	Node0x563df5d68250 -> Node0x563df5d6cd80;
	Node0x563df5d68250 -> Node0x563df5d6cdd0;
	Node0x563df5d6cd80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7af9170",label="{%95:\l95:                                               \l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #8\l  br label %98\l}"];
	Node0x563df5d6cd80 -> Node0x563df5d682e0;
	Node0x563df5d6cdd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#5977e370",label="{%96:\l96:                                               \l  %97 = landingpad \{ i8*, i32 \}\l          cleanup\l  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #8\l  br label %99\l}"];
	Node0x563df5d6cdd0 -> Node0x563df5d6bfd0;
	Node0x563df5d682e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6a38570",label="{%98:\l98:                                               \l  ret void\l}"];
	Node0x563df5d6bfd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%99:\l99:                                               \l  %100 = phi \{ i8*, i32 \} [ %77, %76 ], [ %97, %96 ]\l  %101 = load float*, float** %8, align 8, !tbaa !8\l  %102 = icmp eq float* %101, null\l  br i1 %102, label %105, label %103\l|{<s0>T|<s1>F}}"];
	Node0x563df5d6bfd0:s0 -> Node0x563df5d6d4f0;
	Node0x563df5d6bfd0:s1 -> Node0x563df5d6d540;
	Node0x563df5d6d540 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%103:\l103:                                              \l  %104 = bitcast float* %101 to i8*\l  call void @_ZdlPv(i8* nonnull %104) #8\l  br label %105\l}"];
	Node0x563df5d6d540 -> Node0x563df5d6d4f0;
	Node0x563df5d6d4f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%105:\l105:                                              \l  resume \{ i8*, i32 \} %100\l}"];
}
