; ModuleID = '../../Human_xBenchmarks_164/CPP_55/CPP_55.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_55/CPP_55.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
define dso_local i32 @_Z3fibi(i32 %0) local_unnamed_addr #0 {
  %2 = alloca [1000 x i32], align 16
  %3 = bitcast [1000 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4000, i8* nonnull %3) #2
  %4 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 0
  store i32 0, i32* %4, align 16, !tbaa !3
  %5 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 1
  store i32 1, i32* %5, align 4, !tbaa !3
  %6 = icmp slt i32 %0, 2
  br i1 %6, label %37, label %7

7:                                                ; preds = %1
  %8 = add nuw i32 %0, 1
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %10, align 8, !tbaa !3
  %11 = icmp eq i32 %8, 3
  br i1 %11, label %37, label %12, !llvm.loop !7

12:                                               ; preds = %7
  %13 = add nsw i64 %9, -3
  %14 = add nsw i64 %9, -4
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = and i64 %13, -4
  br label %41

19:                                               ; preds = %41, %12
  %20 = phi i64 [ 3, %12 ], [ %67, %41 ]
  %21 = phi i32 [ 1, %12 ], [ %65, %41 ]
  %22 = phi i64 [ 2, %12 ], [ %62, %41 ]
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %19, %24
  %25 = phi i64 [ %34, %24 ], [ %20, %19 ]
  %26 = phi i32 [ %32, %24 ], [ %21, %19 ]
  %27 = phi i64 [ %25, %24 ], [ %22, %19 ]
  %28 = phi i64 [ %35, %24 ], [ %15, %19 ]
  %29 = add nsw i64 %27, -1
  %30 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4, !tbaa !3
  %32 = add nsw i32 %31, %26
  %33 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %25
  store i32 %32, i32* %33, align 4, !tbaa !3
  %34 = add nuw nsw i64 %25, 1
  %35 = add i64 %28, -1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %24, !llvm.loop !9

37:                                               ; preds = %19, %24, %7, %1
  %38 = sext i32 %0 to i64
  %39 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !3
  call void @llvm.lifetime.end.p0i8(i64 4000, i8* nonnull %3) #2
  ret i32 %40

41:                                               ; preds = %41, %17
  %42 = phi i64 [ 3, %17 ], [ %67, %41 ]
  %43 = phi i32 [ 1, %17 ], [ %65, %41 ]
  %44 = phi i64 [ 2, %17 ], [ %62, %41 ]
  %45 = phi i64 [ %18, %17 ], [ %68, %41 ]
  %46 = add nsw i64 %44, -1
  %47 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %46
  %48 = load i32, i32* %47, align 4, !tbaa !3
  %49 = add nsw i32 %48, %43
  %50 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %42
  store i32 %49, i32* %50, align 4, !tbaa !3
  %51 = add nuw nsw i64 %42, 1
  %52 = add nsw i64 %42, -1
  %53 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !3
  %55 = add nsw i32 %54, %49
  %56 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %51
  store i32 %55, i32* %56, align 4, !tbaa !3
  %57 = add nuw nsw i64 %42, 2
  %58 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %42
  %59 = load i32, i32* %58, align 4, !tbaa !3
  %60 = add nsw i32 %59, %55
  %61 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %57
  store i32 %60, i32* %61, align 4, !tbaa !3
  %62 = add nuw nsw i64 %42, 3
  %63 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %51
  %64 = load i32, i32* %63, align 4, !tbaa !3
  %65 = add nsw i32 %64, %60
  %66 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %62
  store i32 %65, i32* %66, align 4, !tbaa !3
  %67 = add nuw nsw i64 %42, 4
  %68 = add i64 %45, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %19, label %41, !llvm.loop !7
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
