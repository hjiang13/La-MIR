; ModuleID = '../../Human_xBenchmarks_164/CPP_128/CPP_128.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_128/CPP_128.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z10prod_signsSt6vectorIiSaIiEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32*, i32** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8, !tbaa !8
  %6 = ptrtoint i32* %3 to i64
  %7 = ptrtoint i32* %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %65, label %10

10:                                               ; preds = %1
  %11 = ashr exact i64 %8, 2
  %12 = call i64 @llvm.umax.i64(i64 %11, i64 1)
  %13 = and i64 %12, 1
  %14 = icmp ult i64 %11, 2
  br i1 %14, label %44, label %15

15:                                               ; preds = %10
  %16 = and i64 %12, -2
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %41, %17 ]
  %19 = phi i32 [ 1, %15 ], [ %40, %17 ]
  %20 = phi i32 [ 0, %15 ], [ %35, %17 ]
  %21 = phi i64 [ %16, %15 ], [ %42, %17 ]
  %22 = getelementptr inbounds i32, i32* %5, i64 %18
  %23 = load i32, i32* %22, align 4, !tbaa !9
  %24 = tail call i32 @llvm.abs.i32(i32 %23, i1 true)
  %25 = add nuw nsw i32 %24, %20
  %26 = icmp eq i32 %23, 0
  %27 = select i1 %26, i32 0, i32 %19
  %28 = icmp slt i32 %23, 0
  %29 = sub nsw i32 0, %27
  %30 = select i1 %28, i32 %29, i32 %27
  %31 = or i64 %18, 1
  %32 = getelementptr inbounds i32, i32* %5, i64 %31
  %33 = load i32, i32* %32, align 4, !tbaa !9
  %34 = tail call i32 @llvm.abs.i32(i32 %33, i1 true)
  %35 = add nuw nsw i32 %34, %25
  %36 = icmp eq i32 %33, 0
  %37 = select i1 %36, i32 0, i32 %30
  %38 = icmp slt i32 %33, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = add nuw nsw i64 %18, 2
  %42 = add i64 %21, -2
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %17, !llvm.loop !11

44:                                               ; preds = %17, %10
  %45 = phi i32 [ undef, %10 ], [ %35, %17 ]
  %46 = phi i32 [ undef, %10 ], [ %40, %17 ]
  %47 = phi i64 [ 0, %10 ], [ %41, %17 ]
  %48 = phi i32 [ 1, %10 ], [ %40, %17 ]
  %49 = phi i32 [ 0, %10 ], [ %35, %17 ]
  %50 = icmp eq i64 %13, 0
  br i1 %50, label %61, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds i32, i32* %5, i64 %47
  %53 = load i32, i32* %52, align 4, !tbaa !9
  %54 = icmp eq i32 %53, 0
  %55 = select i1 %54, i32 0, i32 %48
  %56 = icmp slt i32 %53, 0
  %57 = sub nsw i32 0, %55
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = tail call i32 @llvm.abs.i32(i32 %53, i1 true)
  %60 = add nuw nsw i32 %59, %49
  br label %61

61:                                               ; preds = %44, %51
  %62 = phi i32 [ %45, %44 ], [ %60, %51 ]
  %63 = phi i32 [ %46, %44 ], [ %58, %51 ]
  %64 = mul nsw i32 %63, %62
  br label %65

65:                                               ; preds = %1, %61
  %66 = phi i32 [ %64, %61 ], [ -32768, %1 ]
  ret i32 %66
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.abs.i32(i32, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #1

attributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
