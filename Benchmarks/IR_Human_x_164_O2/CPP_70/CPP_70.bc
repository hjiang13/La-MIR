; ModuleID = '../../Human_xBenchmarks_164/CPP_70/CPP_70.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_70/CPP_70.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_ = comdat any

$_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_ = comdat any

$_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z17strange_sort_listSt6vectorIiSaIiEE(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false)
  %5 = load i32*, i32** %3, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = load i32*, i32** %6, align 8, !tbaa !3
  %8 = icmp eq i32* %5, %7
  br i1 %8, label %21, label %9

9:                                                ; preds = %2
  %10 = ptrtoint i32* %7 to i64
  %11 = ptrtoint i32* %5 to i64
  %12 = sub i64 %10, %11
  %13 = ashr exact i64 %12, 2
  %14 = tail call i64 @llvm.ctlz.i64(i64 %13, i1 true) #7, !range !7
  %15 = shl nuw nsw i64 %14, 1
  %16 = xor i64 %15, 126
  invoke void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %5, i32* %7, i64 %16)
          to label %17 unwind label %72

17:                                               ; preds = %9
  invoke void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %5, i32* %7)
          to label %18 unwind label %72

18:                                               ; preds = %17
  %19 = load i32*, i32** %6, align 8, !tbaa !8
  %20 = load i32*, i32** %3, align 8, !tbaa !10
  br label %21

21:                                               ; preds = %18, %2
  %22 = phi i32* [ %20, %18 ], [ %5, %2 ]
  %23 = phi i32* [ %19, %18 ], [ %5, %2 ]
  %24 = ptrtoint i32* %23 to i64
  %25 = ptrtoint i32* %22 to i64
  %26 = sub i64 %24, %25
  %27 = lshr exact i64 %26, 2
  %28 = trunc i64 %27 to i32
  %29 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %31 = add i32 %28, -1
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %80

33:                                               ; preds = %21
  %34 = zext i32 %31 to i64
  br label %35

35:                                               ; preds = %67, %33
  %36 = phi i32* [ null, %33 ], [ %71, %67 ]
  %37 = phi i32* [ null, %33 ], [ %70, %67 ]
  %38 = phi i32* [ %22, %33 ], [ %69, %67 ]
  %39 = phi i64 [ 0, %33 ], [ %63, %67 ]
  %40 = phi i64 [ %34, %33 ], [ %68, %67 ]
  %41 = phi i32 [ %31, %33 ], [ %64, %67 ]
  %42 = getelementptr inbounds i32, i32* %38, i64 %39
  %43 = icmp eq i32* %37, %36
  br i1 %43, label %47, label %44

44:                                               ; preds = %35
  %45 = load i32, i32* %42, align 4, !tbaa !11
  store i32 %45, i32* %37, align 4, !tbaa !11
  %46 = getelementptr inbounds i32, i32* %37, i64 1
  store i32* %46, i32** %29, align 8, !tbaa !8
  br label %52

47:                                               ; preds = %35
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %36, i32* nonnull align 4 dereferenceable(4) %42)
          to label %48 unwind label %74

48:                                               ; preds = %47
  %49 = load i32*, i32** %3, align 8, !tbaa !10
  %50 = load i32*, i32** %29, align 8, !tbaa !8
  %51 = load i32*, i32** %30, align 8, !tbaa !13
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi i32* [ %51, %48 ], [ %36, %44 ]
  %54 = phi i32* [ %50, %48 ], [ %46, %44 ]
  %55 = phi i32* [ %49, %48 ], [ %38, %44 ]
  %56 = getelementptr inbounds i32, i32* %55, i64 %40
  %57 = icmp eq i32* %54, %53
  br i1 %57, label %61, label %58

58:                                               ; preds = %52
  %59 = load i32, i32* %56, align 4, !tbaa !11
  store i32 %59, i32* %54, align 4, !tbaa !11
  %60 = getelementptr inbounds i32, i32* %54, i64 1
  store i32* %60, i32** %29, align 8, !tbaa !8
  br label %62

61:                                               ; preds = %52
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %53, i32* nonnull align 4 dereferenceable(4) %56)
          to label %62 unwind label %74

62:                                               ; preds = %58, %61
  %63 = add nuw nsw i64 %39, 1
  %64 = add i32 %41, -1
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %63, %65
  br i1 %66, label %67, label %78, !llvm.loop !14

67:                                               ; preds = %62
  %68 = add nsw i64 %40, -1
  %69 = load i32*, i32** %3, align 8, !tbaa !10
  %70 = load i32*, i32** %29, align 8, !tbaa !8
  %71 = load i32*, i32** %30, align 8, !tbaa !13
  br label %35

72:                                               ; preds = %17, %9
  %73 = landingpad { i8*, i32 }
          cleanup
  br label %96

74:                                               ; preds = %47, %61
  %75 = landingpad { i8*, i32 }
          cleanup
  br label %96

76:                                               ; preds = %94
  %77 = landingpad { i8*, i32 }
          cleanup
  br label %96

78:                                               ; preds = %62
  %79 = trunc i64 %63 to i32
  br label %80

80:                                               ; preds = %78, %21
  %81 = phi i32 [ 0, %21 ], [ %79, %78 ]
  %82 = phi i32 [ %31, %21 ], [ %64, %78 ]
  %83 = icmp eq i32 %81, %82
  br i1 %83, label %84, label %95

84:                                               ; preds = %80
  %85 = zext i32 %81 to i64
  %86 = load i32*, i32** %3, align 8, !tbaa !10
  %87 = getelementptr inbounds i32, i32* %86, i64 %85
  %88 = load i32*, i32** %29, align 8, !tbaa !8
  %89 = load i32*, i32** %30, align 8, !tbaa !13
  %90 = icmp eq i32* %88, %89
  br i1 %90, label %94, label %91

91:                                               ; preds = %84
  %92 = load i32, i32* %87, align 4, !tbaa !11
  store i32 %92, i32* %88, align 4, !tbaa !11
  %93 = getelementptr inbounds i32, i32* %88, i64 1
  store i32* %93, i32** %29, align 8, !tbaa !8
  br label %95

94:                                               ; preds = %84
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %88, i32* nonnull align 4 dereferenceable(4) %87)
          to label %95 unwind label %76

95:                                               ; preds = %91, %94, %80
  ret void

96:                                               ; preds = %74, %76, %72
  %97 = phi { i8*, i32 } [ %73, %72 ], [ %75, %74 ], [ %77, %76 ]
  %98 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i32*, i32** %98, align 8, !tbaa !10
  %100 = icmp eq i32* %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %96
  %102 = bitcast i32* %99 to i8*
  tail call void @_ZdlPv(i8* nonnull %102) #7
  br label %103

103:                                              ; preds = %96, %101
  resume { i8*, i32 } %97
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* %0, i32* %1, i64 %2) local_unnamed_addr #0 comdat {
  %4 = ptrtoint i32* %0 to i64
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = ptrtoint i32* %1 to i64
  %7 = sub i64 %6, %4
  %8 = icmp sgt i64 %7, 64
  br i1 %8, label %9, label %177

9:                                                ; preds = %3, %173
  %10 = phi i64 [ %175, %173 ], [ %7, %3 ]
  %11 = phi i64 [ %129, %173 ], [ %2, %3 ]
  %12 = phi i32* [ %161, %173 ], [ %1, %3 ]
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %14, label %128

14:                                               ; preds = %9
  %15 = lshr exact i64 %10, 2
  %16 = add nsw i64 %15, -2
  %17 = lshr i64 %16, 1
  %18 = add nsw i64 %15, -1
  %19 = lshr i64 %18, 1
  %20 = and i64 %10, 4
  %21 = icmp eq i64 %20, 0
  %22 = or i64 %16, 1
  %23 = getelementptr inbounds i32, i32* %0, i64 %22
  %24 = getelementptr inbounds i32, i32* %0, i64 %17
  br label %25

25:                                               ; preds = %64, %14
  %26 = phi i64 [ %17, %14 ], [ %68, %64 ]
  %27 = getelementptr inbounds i32, i32* %0, i64 %26
  %28 = load i32, i32* %27, align 4, !tbaa !11
  %29 = icmp sgt i64 %19, %26
  br i1 %29, label %30, label %45

30:                                               ; preds = %25, %30
  %31 = phi i64 [ %40, %30 ], [ %26, %25 ]
  %32 = shl i64 %31, 1
  %33 = add i64 %32, 2
  %34 = getelementptr inbounds i32, i32* %0, i64 %33
  %35 = or i64 %32, 1
  %36 = getelementptr inbounds i32, i32* %0, i64 %35
  %37 = load i32, i32* %34, align 4, !tbaa !11
  %38 = load i32, i32* %36, align 4, !tbaa !11
  %39 = icmp slt i32 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = getelementptr inbounds i32, i32* %0, i64 %40
  %42 = load i32, i32* %41, align 4, !tbaa !11
  %43 = getelementptr inbounds i32, i32* %0, i64 %31
  store i32 %42, i32* %43, align 4, !tbaa !11
  %44 = icmp slt i64 %40, %19
  br i1 %44, label %30, label %45, !llvm.loop !16

45:                                               ; preds = %30, %25
  %46 = phi i64 [ %26, %25 ], [ %40, %30 ]
  %47 = icmp eq i64 %46, %17
  %48 = select i1 %21, i1 %47, i1 false
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  %50 = load i32, i32* %23, align 4, !tbaa !11
  store i32 %50, i32* %24, align 4, !tbaa !11
  br label %51

51:                                               ; preds = %49, %45
  %52 = phi i64 [ %22, %49 ], [ %46, %45 ]
  %53 = icmp sgt i64 %52, %26
  br i1 %53, label %54, label %64

54:                                               ; preds = %51, %61
  %55 = phi i64 [ %57, %61 ], [ %52, %51 ]
  %56 = add nsw i64 %55, -1
  %57 = sdiv i64 %56, 2
  %58 = getelementptr inbounds i32, i32* %0, i64 %57
  %59 = load i32, i32* %58, align 4, !tbaa !11
  %60 = icmp slt i32 %59, %28
  br i1 %60, label %61, label %64

61:                                               ; preds = %54
  %62 = getelementptr inbounds i32, i32* %0, i64 %55
  store i32 %59, i32* %62, align 4, !tbaa !11
  %63 = icmp sgt i64 %57, %26
  br i1 %63, label %54, label %64, !llvm.loop !17

64:                                               ; preds = %61, %54, %51
  %65 = phi i64 [ %52, %51 ], [ %57, %61 ], [ %55, %54 ]
  %66 = getelementptr inbounds i32, i32* %0, i64 %65
  store i32 %28, i32* %66, align 4, !tbaa !11
  %67 = icmp eq i64 %26, 0
  %68 = add nsw i64 %26, -1
  br i1 %67, label %69, label %25, !llvm.loop !18

69:                                               ; preds = %64
  %70 = icmp sgt i64 %10, 4
  br i1 %70, label %71, label %177

71:                                               ; preds = %69, %124
  %72 = phi i32* [ %73, %124 ], [ %12, %69 ]
  %73 = getelementptr inbounds i32, i32* %72, i64 -1
  %74 = load i32, i32* %73, align 4, !tbaa !11
  %75 = load i32, i32* %0, align 4, !tbaa !11
  store i32 %75, i32* %73, align 4, !tbaa !11
  %76 = ptrtoint i32* %73 to i64
  %77 = sub i64 %76, %4
  %78 = ashr exact i64 %77, 2
  %79 = add nsw i64 %78, -1
  %80 = sdiv i64 %79, 2
  %81 = icmp sgt i64 %77, 8
  br i1 %81, label %82, label %97

82:                                               ; preds = %71, %82
  %83 = phi i64 [ %92, %82 ], [ 0, %71 ]
  %84 = shl i64 %83, 1
  %85 = add i64 %84, 2
  %86 = getelementptr inbounds i32, i32* %0, i64 %85
  %87 = or i64 %84, 1
  %88 = getelementptr inbounds i32, i32* %0, i64 %87
  %89 = load i32, i32* %86, align 4, !tbaa !11
  %90 = load i32, i32* %88, align 4, !tbaa !11
  %91 = icmp slt i32 %89, %90
  %92 = select i1 %91, i64 %87, i64 %85
  %93 = getelementptr inbounds i32, i32* %0, i64 %92
  %94 = load i32, i32* %93, align 4, !tbaa !11
  %95 = getelementptr inbounds i32, i32* %0, i64 %83
  store i32 %94, i32* %95, align 4, !tbaa !11
  %96 = icmp slt i64 %92, %80
  br i1 %96, label %82, label %97, !llvm.loop !16

97:                                               ; preds = %82, %71
  %98 = phi i64 [ 0, %71 ], [ %92, %82 ]
  %99 = and i64 %77, 4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %111

101:                                              ; preds = %97
  %102 = add nsw i64 %78, -2
  %103 = sdiv i64 %102, 2
  %104 = icmp eq i64 %98, %103
  br i1 %104, label %105, label %111

105:                                              ; preds = %101
  %106 = shl i64 %98, 1
  %107 = or i64 %106, 1
  %108 = getelementptr inbounds i32, i32* %0, i64 %107
  %109 = load i32, i32* %108, align 4, !tbaa !11
  %110 = getelementptr inbounds i32, i32* %0, i64 %98
  store i32 %109, i32* %110, align 4, !tbaa !11
  br label %111

111:                                              ; preds = %105, %101, %97
  %112 = phi i64 [ %107, %105 ], [ %98, %101 ], [ %98, %97 ]
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %114, label %124

114:                                              ; preds = %111, %121
  %115 = phi i64 [ %117, %121 ], [ %112, %111 ]
  %116 = add nsw i64 %115, -1
  %117 = lshr i64 %116, 1
  %118 = getelementptr inbounds i32, i32* %0, i64 %117
  %119 = load i32, i32* %118, align 4, !tbaa !11
  %120 = icmp slt i32 %119, %74
  br i1 %120, label %121, label %124

121:                                              ; preds = %114
  %122 = getelementptr inbounds i32, i32* %0, i64 %115
  store i32 %119, i32* %122, align 4, !tbaa !11
  %123 = icmp ult i64 %116, 2
  br i1 %123, label %124, label %114, !llvm.loop !17

124:                                              ; preds = %121, %114, %111
  %125 = phi i64 [ %112, %111 ], [ 0, %121 ], [ %115, %114 ]
  %126 = getelementptr inbounds i32, i32* %0, i64 %125
  store i32 %74, i32* %126, align 4, !tbaa !11
  %127 = icmp sgt i64 %77, 4
  br i1 %127, label %71, label %177, !llvm.loop !19

128:                                              ; preds = %9
  %129 = add nsw i64 %11, -1
  %130 = lshr i64 %10, 3
  %131 = getelementptr inbounds i32, i32* %0, i64 %130
  %132 = getelementptr inbounds i32, i32* %12, i64 -1
  %133 = load i32, i32* %5, align 4, !tbaa !11
  %134 = load i32, i32* %131, align 4, !tbaa !11
  %135 = icmp slt i32 %133, %134
  %136 = load i32, i32* %132, align 4, !tbaa !11
  br i1 %135, label %137, label %146

137:                                              ; preds = %128
  %138 = icmp slt i32 %134, %136
  br i1 %138, label %139, label %141

139:                                              ; preds = %137
  %140 = load i32, i32* %0, align 4, !tbaa !11
  store i32 %134, i32* %0, align 4, !tbaa !11
  store i32 %140, i32* %131, align 4, !tbaa !11
  br label %155

141:                                              ; preds = %137
  %142 = icmp slt i32 %133, %136
  %143 = load i32, i32* %0, align 4, !tbaa !11
  br i1 %142, label %144, label %145

144:                                              ; preds = %141
  store i32 %136, i32* %0, align 4, !tbaa !11
  store i32 %143, i32* %132, align 4, !tbaa !11
  br label %155

145:                                              ; preds = %141
  store i32 %133, i32* %0, align 4, !tbaa !11
  store i32 %143, i32* %5, align 4, !tbaa !11
  br label %155

146:                                              ; preds = %128
  %147 = icmp slt i32 %133, %136
  br i1 %147, label %148, label %150

148:                                              ; preds = %146
  %149 = load i32, i32* %0, align 4, !tbaa !11
  store i32 %133, i32* %0, align 4, !tbaa !11
  store i32 %149, i32* %5, align 4, !tbaa !11
  br label %155

150:                                              ; preds = %146
  %151 = icmp slt i32 %134, %136
  %152 = load i32, i32* %0, align 4, !tbaa !11
  br i1 %151, label %153, label %154

153:                                              ; preds = %150
  store i32 %136, i32* %0, align 4, !tbaa !11
  store i32 %152, i32* %132, align 4, !tbaa !11
  br label %155

154:                                              ; preds = %150
  store i32 %134, i32* %0, align 4, !tbaa !11
  store i32 %152, i32* %131, align 4, !tbaa !11
  br label %155

155:                                              ; preds = %154, %153, %148, %145, %144, %139
  br label %156

156:                                              ; preds = %155, %172
  %157 = phi i32* [ %164, %172 ], [ %5, %155 ]
  %158 = phi i32* [ %167, %172 ], [ %12, %155 ]
  %159 = load i32, i32* %0, align 4, !tbaa !11
  br label %160

160:                                              ; preds = %160, %156
  %161 = phi i32* [ %157, %156 ], [ %164, %160 ]
  %162 = load i32, i32* %161, align 4, !tbaa !11
  %163 = icmp slt i32 %162, %159
  %164 = getelementptr inbounds i32, i32* %161, i64 1
  br i1 %163, label %160, label %165, !llvm.loop !20

165:                                              ; preds = %160, %165
  %166 = phi i32* [ %167, %165 ], [ %158, %160 ]
  %167 = getelementptr inbounds i32, i32* %166, i64 -1
  %168 = load i32, i32* %167, align 4, !tbaa !11
  %169 = icmp slt i32 %159, %168
  br i1 %169, label %165, label %170, !llvm.loop !21

170:                                              ; preds = %165
  %171 = icmp ult i32* %161, %167
  br i1 %171, label %172, label %173

172:                                              ; preds = %170
  store i32 %168, i32* %161, align 4, !tbaa !11
  store i32 %162, i32* %167, align 4, !tbaa !11
  br label %156, !llvm.loop !22

173:                                              ; preds = %170
  tail call void @_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_(i32* nonnull %161, i32* %12, i64 %129)
  %174 = ptrtoint i32* %161 to i64
  %175 = sub i64 %174, %4
  %176 = icmp sgt i64 %175, 64
  br i1 %176, label %9, label %177, !llvm.loop !23

177:                                              ; preds = %173, %124, %3, %69
  ret void
}

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_(i32* %0, i32* %1) local_unnamed_addr #0 comdat {
  %3 = ptrtoint i32* %1 to i64
  %4 = ptrtoint i32* %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp sgt i64 %5, 64
  br i1 %6, label %7, label %54

7:                                                ; preds = %2
  %8 = bitcast i32* %0 to i8*
  %9 = getelementptr i32, i32* %0, i64 1
  %10 = bitcast i32* %9 to i8*
  br label %11

11:                                               ; preds = %7, %30
  %12 = phi i64 [ %32, %30 ], [ 1, %7 ]
  %13 = phi i32* [ %14, %30 ], [ %0, %7 ]
  %14 = getelementptr inbounds i32, i32* %0, i64 %12
  %15 = load i32, i32* %14, align 4, !tbaa !11
  %16 = load i32, i32* %0, align 4, !tbaa !11
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = shl nsw i64 %12, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* nonnull align 4 %8, i64 %19, i1 false) #7
  br label %30

20:                                               ; preds = %11
  %21 = load i32, i32* %13, align 4, !tbaa !11
  %22 = icmp slt i32 %15, %21
  br i1 %22, label %23, label %30

23:                                               ; preds = %20, %23
  %24 = phi i32 [ %28, %23 ], [ %21, %20 ]
  %25 = phi i32* [ %27, %23 ], [ %13, %20 ]
  %26 = phi i32* [ %25, %23 ], [ %14, %20 ]
  store i32 %24, i32* %26, align 4, !tbaa !11
  %27 = getelementptr inbounds i32, i32* %25, i64 -1
  %28 = load i32, i32* %27, align 4, !tbaa !11
  %29 = icmp slt i32 %15, %28
  br i1 %29, label %23, label %30, !llvm.loop !24

30:                                               ; preds = %23, %20, %18
  %31 = phi i32* [ %0, %18 ], [ %14, %20 ], [ %25, %23 ]
  store i32 %15, i32* %31, align 4, !tbaa !11
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, 16
  br i1 %33, label %34, label %11, !llvm.loop !25

34:                                               ; preds = %30
  %35 = getelementptr inbounds i32, i32* %0, i64 16
  %36 = icmp eq i32* %35, %1
  br i1 %36, label %89, label %37

37:                                               ; preds = %34, %50
  %38 = phi i32* [ %52, %50 ], [ %35, %34 ]
  %39 = load i32, i32* %38, align 4, !tbaa !11
  %40 = getelementptr inbounds i32, i32* %38, i64 -1
  %41 = load i32, i32* %40, align 4, !tbaa !11
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %50

43:                                               ; preds = %37, %43
  %44 = phi i32 [ %48, %43 ], [ %41, %37 ]
  %45 = phi i32* [ %47, %43 ], [ %40, %37 ]
  %46 = phi i32* [ %45, %43 ], [ %38, %37 ]
  store i32 %44, i32* %46, align 4, !tbaa !11
  %47 = getelementptr inbounds i32, i32* %45, i64 -1
  %48 = load i32, i32* %47, align 4, !tbaa !11
  %49 = icmp slt i32 %39, %48
  br i1 %49, label %43, label %50, !llvm.loop !24

50:                                               ; preds = %43, %37
  %51 = phi i32* [ %38, %37 ], [ %45, %43 ]
  store i32 %39, i32* %51, align 4, !tbaa !11
  %52 = getelementptr inbounds i32, i32* %38, i64 1
  %53 = icmp eq i32* %52, %1
  br i1 %53, label %89, label %37, !llvm.loop !26

54:                                               ; preds = %2
  %55 = icmp eq i32* %0, %1
  br i1 %55, label %89, label %56

56:                                               ; preds = %54
  %57 = bitcast i32* %0 to i8*
  %58 = getelementptr inbounds i32, i32* %0, i64 1
  %59 = icmp eq i32* %58, %1
  br i1 %59, label %89, label %60

60:                                               ; preds = %56, %85
  %61 = phi i32* [ %87, %85 ], [ %58, %56 ]
  %62 = phi i32* [ %61, %85 ], [ %0, %56 ]
  %63 = load i32, i32* %61, align 4, !tbaa !11
  %64 = load i32, i32* %0, align 4, !tbaa !11
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %75

66:                                               ; preds = %60
  %67 = ptrtoint i32* %61 to i64
  %68 = sub i64 %67, %4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %66
  %71 = ashr exact i64 %68, 2
  %72 = sub nsw i64 2, %71
  %73 = getelementptr inbounds i32, i32* %62, i64 %72
  %74 = bitcast i32* %73 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* nonnull align 4 %57, i64 %68, i1 false) #7
  br label %85

75:                                               ; preds = %60
  %76 = load i32, i32* %62, align 4, !tbaa !11
  %77 = icmp slt i32 %63, %76
  br i1 %77, label %78, label %85

78:                                               ; preds = %75, %78
  %79 = phi i32 [ %83, %78 ], [ %76, %75 ]
  %80 = phi i32* [ %82, %78 ], [ %62, %75 ]
  %81 = phi i32* [ %80, %78 ], [ %61, %75 ]
  store i32 %79, i32* %81, align 4, !tbaa !11
  %82 = getelementptr inbounds i32, i32* %80, i64 -1
  %83 = load i32, i32* %82, align 4, !tbaa !11
  %84 = icmp slt i32 %63, %83
  br i1 %84, label %78, label %85, !llvm.loop !24

85:                                               ; preds = %78, %75, %70, %66
  %86 = phi i32* [ %0, %66 ], [ %0, %70 ], [ %61, %75 ], [ %80, %78 ]
  store i32 %63, i32* %86, align 4, !tbaa !11
  %87 = getelementptr inbounds i32, i32* %61, i64 1
  %88 = icmp eq i32* %87, %1
  br i1 %88, label %89, label %60, !llvm.loop !25

89:                                               ; preds = %85, %50, %56, %54, %34
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #3

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !8
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !10
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #8
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint i32* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %14
  %27 = shl nuw nsw i64 %21, 2
  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #9
  %29 = bitcast i8* %28 to i32*
  br label %30

30:                                               ; preds = %14, %26
  %31 = phi i32* [ %29, %26 ], [ null, %14 ]
  %32 = getelementptr inbounds i32, i32* %31, i64 %24
  %33 = load i32, i32* %2, align 4, !tbaa !11
  store i32 %33, i32* %32, align 4, !tbaa !11
  %34 = icmp sgt i64 %23, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = bitcast i32* %31 to i8*
  %37 = bitcast i32* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %23, i1 false) #7
  br label %38

38:                                               ; preds = %30, %35
  %39 = getelementptr inbounds i32, i32* %32, i64 1
  %40 = sub i64 %8, %22
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  %43 = bitcast i32* %39 to i8*
  %44 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 4 %44, i64 %40, i1 false) #7
  br label %45

45:                                               ; preds = %38, %42
  %46 = icmp eq i32* %7, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = bitcast i32* %7 to i8*
  tail call void @_ZdlPv(i8* nonnull %48) #7
  br label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %51 = ashr exact i64 %40, 2
  %52 = getelementptr inbounds i32, i32* %39, i64 %51
  store i32* %31, i32** %6, align 8, !tbaa !10
  store i32* %52, i32** %4, align 8, !tbaa !8
  %53 = getelementptr inbounds i32, i32* %31, i64 %21
  store i32* %53, i32** %50, align 8, !tbaa !13
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #5 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { allocsize(0) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"any pointer", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{i64 0, i64 65}
!8 = !{!9, !4, i64 8}
!9 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !4, i64 0, !4, i64 8, !4, i64 16}
!10 = !{!9, !4, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"int", !5, i64 0}
!13 = !{!9, !4, i64 16}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.mustprogress"}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !15}
!19 = distinct !{!19, !15}
!20 = distinct !{!20, !15}
!21 = distinct !{!21, !15}
!22 = distinct !{!22, !15}
!23 = distinct !{!23, !15}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !15}
!26 = distinct !{!26, !15}
