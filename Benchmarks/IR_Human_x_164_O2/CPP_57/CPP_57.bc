; ModuleID = '../../Human_xBenchmarks_164/CPP_57/CPP_57.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_57/CPP_57.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local zeroext i1 @_Z9monotonicSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8, !tbaa !8
  %6 = ptrtoint float* %3 to i64
  %7 = ptrtoint float* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp ugt i64 %9, 1
  br i1 %10, label %11, label %42

11:                                               ; preds = %1
  %12 = load float, float* %5, align 4, !tbaa !9
  %13 = add nsw i64 %9, -1
  %14 = add nsw i64 %9, -2
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %19, label %17

17:                                               ; preds = %11
  %18 = and i64 %13, -4
  br label %47

19:                                               ; preds = %47, %11
  %20 = phi i32 [ undef, %11 ], [ %74, %47 ]
  %21 = phi i32 [ undef, %11 ], [ %79, %47 ]
  %22 = phi float [ %12, %11 ], [ %69, %47 ]
  %23 = phi i64 [ 1, %11 ], [ %80, %47 ]
  %24 = phi i32 [ 0, %11 ], [ %79, %47 ]
  %25 = phi i32 [ 0, %11 ], [ %74, %47 ]
  %26 = icmp eq i64 %15, 0
  br i1 %26, label %42, label %27

27:                                               ; preds = %19, %27
  %28 = phi float [ %34, %27 ], [ %22, %19 ]
  %29 = phi i64 [ %39, %27 ], [ %23, %19 ]
  %30 = phi i32 [ %38, %27 ], [ %24, %19 ]
  %31 = phi i32 [ %36, %27 ], [ %25, %19 ]
  %32 = phi i64 [ %40, %27 ], [ %15, %19 ]
  %33 = getelementptr inbounds float, float* %5, i64 %29
  %34 = load float, float* %33, align 4, !tbaa !9
  %35 = fcmp ogt float %34, %28
  %36 = select i1 %35, i32 1, i32 %31
  %37 = fcmp olt float %34, %28
  %38 = select i1 %37, i32 1, i32 %30
  %39 = add nuw nsw i64 %29, 1
  %40 = add i64 %32, -1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %27, !llvm.loop !11

42:                                               ; preds = %19, %27, %1
  %43 = phi i32 [ 0, %1 ], [ %20, %19 ], [ %36, %27 ]
  %44 = phi i32 [ 0, %1 ], [ %21, %19 ], [ %38, %27 ]
  %45 = add nsw i32 %44, %43
  %46 = icmp ne i32 %45, 2
  ret i1 %46

47:                                               ; preds = %47, %17
  %48 = phi float [ %12, %17 ], [ %69, %47 ]
  %49 = phi i64 [ 1, %17 ], [ %80, %47 ]
  %50 = phi i32 [ 0, %17 ], [ %79, %47 ]
  %51 = phi i32 [ 0, %17 ], [ %74, %47 ]
  %52 = phi i64 [ %18, %17 ], [ %81, %47 ]
  %53 = getelementptr inbounds float, float* %5, i64 %49
  %54 = load float, float* %53, align 4, !tbaa !9
  %55 = fcmp ogt float %54, %48
  %56 = fcmp olt float %54, %48
  %57 = add nuw nsw i64 %49, 1
  %58 = getelementptr inbounds float, float* %5, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !9
  %60 = fcmp ogt float %59, %54
  %61 = fcmp olt float %59, %54
  %62 = add nuw nsw i64 %49, 2
  %63 = getelementptr inbounds float, float* %5, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !9
  %65 = fcmp ogt float %64, %59
  %66 = fcmp olt float %64, %59
  %67 = add nuw nsw i64 %49, 3
  %68 = getelementptr inbounds float, float* %5, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !9
  %70 = fcmp ogt float %69, %64
  %71 = select i1 %70, i1 true, i1 %65
  %72 = select i1 %71, i1 true, i1 %60
  %73 = select i1 %72, i1 true, i1 %55
  %74 = select i1 %73, i32 1, i32 %51
  %75 = fcmp olt float %69, %64
  %76 = select i1 %75, i1 true, i1 %66
  %77 = select i1 %76, i1 true, i1 %61
  %78 = select i1 %77, i1 true, i1 %56
  %79 = select i1 %78, i32 1, i32 %50
  %80 = add nuw nsw i64 %49, 4
  %81 = add i64 %52, -4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %19, label %47, !llvm.loop !13
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
