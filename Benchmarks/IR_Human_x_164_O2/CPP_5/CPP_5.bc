; ModuleID = '../../Human_xBenchmarks_164/CPP_5/CPP_5.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_5/CPP_5.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }

$_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1

; Function Attrs: uwtable
define dso_local void @_Z11intersperseSt6vectorIiSaIiEEi(%"class.std::vector"* noalias sret(%"class.std::vector") align 8 %0, %"class.std::vector"* nocapture readonly %1, i32 %2) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.std::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %5, i8 0, i64 24, i1 false)
  %6 = load i32*, i32** %4, align 8, !tbaa !3
  %7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8, !tbaa !8
  %9 = icmp eq i32* %6, %8
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* null, i32* nonnull align 4 dereferenceable(4) %8)
          to label %11 unwind label %14

11:                                               ; preds = %10
  %12 = load i32*, i32** %4, align 8, !tbaa !3
  %13 = load i32*, i32** %7, align 8, !tbaa !8
  br label %16

14:                                               ; preds = %10
  %15 = landingpad { i8*, i32 }
          cleanup
  br label %99

16:                                               ; preds = %11, %3
  %17 = phi i32* [ %13, %11 ], [ %6, %3 ]
  %18 = phi i32* [ %12, %11 ], [ %6, %3 ]
  %19 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %20 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %21 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %22 = ptrtoint i32* %18 to i64
  %23 = ptrtoint i32* %17 to i64
  %24 = sub i64 %22, %23
  %25 = ashr exact i64 %24, 2
  %26 = icmp ugt i64 %25, 1
  br i1 %26, label %27, label %98

27:                                               ; preds = %16, %85
  %28 = phi i32* [ %86, %85 ], [ %17, %16 ]
  %29 = phi i64 [ %87, %85 ], [ 1, %16 ]
  %30 = load i32*, i32** %19, align 8, !tbaa !3
  %31 = load i32*, i32** %20, align 8, !tbaa !9
  %32 = icmp eq i32* %30, %31
  br i1 %32, label %35, label %33

33:                                               ; preds = %27
  store i32 %2, i32* %30, align 4, !tbaa !10
  %34 = getelementptr inbounds i32, i32* %30, i64 1
  store i32* %34, i32** %19, align 8, !tbaa !3
  br label %73

35:                                               ; preds = %27
  %36 = load i32*, i32** %21, align 8, !tbaa !8
  %37 = ptrtoint i32* %30 to i64
  %38 = ptrtoint i32* %36 to i64
  %39 = sub i64 %37, %38
  %40 = ashr exact i64 %39, 2
  %41 = icmp eq i64 %39, 9223372036854775804
  br i1 %41, label %42, label %44

42:                                               ; preds = %35
  invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
          to label %43 unwind label %96

43:                                               ; preds = %42
  unreachable

44:                                               ; preds = %35
  %45 = icmp eq i64 %39, 0
  %46 = select i1 %45, i64 1, i64 %40
  %47 = add nsw i64 %46, %40
  %48 = icmp ult i64 %47, %40
  %49 = icmp ugt i64 %47, 2305843009213693951
  %50 = or i1 %48, %49
  %51 = select i1 %50, i64 2305843009213693951, i64 %47
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %44
  %54 = shl nuw nsw i64 %51, 2
  %55 = invoke noalias nonnull i8* @_Znwm(i64 %54) #7
          to label %56 unwind label %94

56:                                               ; preds = %53
  %57 = bitcast i8* %55 to i32*
  br label %58

58:                                               ; preds = %56, %44
  %59 = phi i32* [ %57, %56 ], [ null, %44 ]
  %60 = getelementptr inbounds i32, i32* %59, i64 %40
  store i32 %2, i32* %60, align 4, !tbaa !10
  %61 = icmp sgt i64 %39, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = bitcast i32* %59 to i8*
  %64 = bitcast i32* %36 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %63, i8* align 4 %64, i64 %39, i1 false) #8
  br label %65

65:                                               ; preds = %58, %62
  %66 = getelementptr inbounds i32, i32* %60, i64 1
  %67 = icmp eq i32* %36, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = bitcast i32* %36 to i8*
  tail call void @_ZdlPv(i8* nonnull %69) #8
  br label %70

70:                                               ; preds = %68, %65
  store i32* %59, i32** %21, align 8, !tbaa !8
  store i32* %66, i32** %19, align 8, !tbaa !3
  %71 = getelementptr inbounds i32, i32* %59, i64 %51
  store i32* %71, i32** %20, align 8, !tbaa !9
  %72 = load i32*, i32** %7, align 8, !tbaa !8
  br label %73

73:                                               ; preds = %70, %33
  %74 = phi i32* [ %72, %70 ], [ %28, %33 ]
  %75 = phi i32* [ %71, %70 ], [ %31, %33 ]
  %76 = phi i32* [ %66, %70 ], [ %34, %33 ]
  %77 = getelementptr inbounds i32, i32* %74, i64 %29
  %78 = icmp eq i32* %76, %75
  br i1 %78, label %82, label %79

79:                                               ; preds = %73
  %80 = load i32, i32* %77, align 4, !tbaa !10
  store i32 %80, i32* %76, align 4, !tbaa !10
  %81 = getelementptr inbounds i32, i32* %76, i64 1
  store i32* %81, i32** %19, align 8, !tbaa !3
  br label %85

82:                                               ; preds = %73
  invoke void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %75, i32* nonnull align 4 dereferenceable(4) %77)
          to label %83 unwind label %94

83:                                               ; preds = %82
  %84 = load i32*, i32** %7, align 8, !tbaa !8
  br label %85

85:                                               ; preds = %83, %79
  %86 = phi i32* [ %84, %83 ], [ %74, %79 ]
  %87 = add nuw i64 %29, 1
  %88 = load i32*, i32** %4, align 8, !tbaa !3
  %89 = ptrtoint i32* %88 to i64
  %90 = ptrtoint i32* %86 to i64
  %91 = sub i64 %89, %90
  %92 = ashr exact i64 %91, 2
  %93 = icmp ugt i64 %92, %87
  br i1 %93, label %27, label %98, !llvm.loop !12

94:                                               ; preds = %82, %53
  %95 = landingpad { i8*, i32 }
          cleanup
  br label %99

96:                                               ; preds = %42
  %97 = landingpad { i8*, i32 }
          cleanup
  br label %99

98:                                               ; preds = %85, %16
  ret void

99:                                               ; preds = %94, %96, %14
  %100 = phi { i8*, i32 } [ %15, %14 ], [ %95, %94 ], [ %97, %96 ]
  %101 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %102 = load i32*, i32** %101, align 8, !tbaa !8
  %103 = icmp eq i32* %102, null
  br i1 %103, label %106, label %104

104:                                              ; preds = %99
  %105 = bitcast i32* %102 to i8*
  tail call void @_ZdlPv(i8* nonnull %105) #8
  br label %106

106:                                              ; preds = %99, %104
  resume { i8*, i32 } %100
}

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @__gxx_personality_v0(...)

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: uwtable
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %0, i32* %1, i32* nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8, !tbaa !3
  %6 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !tbaa !8
  %8 = ptrtoint i32* %5 to i64
  %9 = ptrtoint i32* %7 to i64
  %10 = sub i64 %8, %9
  %11 = ashr exact i64 %10, 2
  %12 = icmp eq i64 %10, 9223372036854775804
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6
  unreachable

14:                                               ; preds = %3
  %15 = icmp eq i64 %10, 0
  %16 = select i1 %15, i64 1, i64 %11
  %17 = add nsw i64 %16, %11
  %18 = icmp ult i64 %17, %11
  %19 = icmp ugt i64 %17, 2305843009213693951
  %20 = or i1 %18, %19
  %21 = select i1 %20, i64 2305843009213693951, i64 %17
  %22 = ptrtoint i32* %1 to i64
  %23 = sub i64 %22, %9
  %24 = ashr exact i64 %23, 2
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %14
  %27 = shl nuw nsw i64 %21, 2
  %28 = tail call noalias nonnull i8* @_Znwm(i64 %27) #7
  %29 = bitcast i8* %28 to i32*
  br label %30

30:                                               ; preds = %14, %26
  %31 = phi i32* [ %29, %26 ], [ null, %14 ]
  %32 = getelementptr inbounds i32, i32* %31, i64 %24
  %33 = load i32, i32* %2, align 4, !tbaa !10
  store i32 %33, i32* %32, align 4, !tbaa !10
  %34 = icmp sgt i64 %23, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = bitcast i32* %31 to i8*
  %37 = bitcast i32* %7 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 %23, i1 false) #8
  br label %38

38:                                               ; preds = %30, %35
  %39 = getelementptr inbounds i32, i32* %32, i64 1
  %40 = sub i64 %8, %22
  %41 = icmp sgt i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %38
  %43 = bitcast i32* %39 to i8*
  %44 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %43, i8* align 4 %44, i64 %40, i1 false) #8
  br label %45

45:                                               ; preds = %38, %42
  %46 = icmp eq i32* %7, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %45
  %48 = bitcast i32* %7 to i8*
  tail call void @_ZdlPv(i8* nonnull %48) #8
  br label %49

49:                                               ; preds = %45, %47
  %50 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %51 = ashr exact i64 %40, 2
  %52 = getelementptr inbounds i32, i32* %39, i64 %51
  store i32* %31, i32** %6, align 8, !tbaa !8
  store i32* %52, i32** %4, align 8, !tbaa !3
  %53 = getelementptr inbounds i32, i32* %31, i64 %21
  store i32* %53, i32** %50, align 8, !tbaa !9
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nobuiltin allocsize(0) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #6 = { noreturn }
attributes #7 = { allocsize(0) }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!4, !5, i64 16}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.mustprogress"}
