; ModuleID = '../../Human_xBenchmarks_164/CPP_66/CPP_66.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_66/CPP_66.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local i32 @_Z8digitSumNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8, !tbaa !3
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %92, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8, !tbaa !10
  %8 = icmp ult i64 %3, 8
  br i1 %8, label %89, label %9

9:                                                ; preds = %5
  %10 = and i64 %3, -8
  %11 = add i64 %10, -8
  %12 = lshr exact i64 %11, 3
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 1
  %15 = icmp eq i64 %11, 0
  br i1 %15, label %59, label %16

16:                                               ; preds = %9
  %17 = and i64 %13, 4611686018427387902
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %56, %18 ]
  %20 = phi <4 x i32> [ zeroinitializer, %16 ], [ %54, %18 ]
  %21 = phi <4 x i32> [ zeroinitializer, %16 ], [ %55, %18 ]
  %22 = phi i64 [ %17, %16 ], [ %57, %18 ]
  %23 = getelementptr inbounds i8, i8* %7, i64 %19
  %24 = bitcast i8* %23 to <4 x i8>*
  %25 = load <4 x i8>, <4 x i8>* %24, align 1, !tbaa !11
  %26 = getelementptr inbounds i8, i8* %23, i64 4
  %27 = bitcast i8* %26 to <4 x i8>*
  %28 = load <4 x i8>, <4 x i8>* %27, align 1, !tbaa !11
  %29 = add <4 x i8> %25, <i8 -65, i8 -65, i8 -65, i8 -65>
  %30 = add <4 x i8> %28, <i8 -65, i8 -65, i8 -65, i8 -65>
  %31 = icmp ult <4 x i8> %29, <i8 26, i8 26, i8 26, i8 26>
  %32 = icmp ult <4 x i8> %30, <i8 26, i8 26, i8 26, i8 26>
  %33 = select <4 x i1> %31, <4 x i8> %25, <4 x i8> zeroinitializer
  %34 = select <4 x i1> %32, <4 x i8> %28, <4 x i8> zeroinitializer
  %35 = zext <4 x i8> %33 to <4 x i32>
  %36 = zext <4 x i8> %34 to <4 x i32>
  %37 = add <4 x i32> %20, %35
  %38 = add <4 x i32> %21, %36
  %39 = or i64 %19, 8
  %40 = getelementptr inbounds i8, i8* %7, i64 %39
  %41 = bitcast i8* %40 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1, !tbaa !11
  %43 = getelementptr inbounds i8, i8* %40, i64 4
  %44 = bitcast i8* %43 to <4 x i8>*
  %45 = load <4 x i8>, <4 x i8>* %44, align 1, !tbaa !11
  %46 = add <4 x i8> %42, <i8 -65, i8 -65, i8 -65, i8 -65>
  %47 = add <4 x i8> %45, <i8 -65, i8 -65, i8 -65, i8 -65>
  %48 = icmp ult <4 x i8> %46, <i8 26, i8 26, i8 26, i8 26>
  %49 = icmp ult <4 x i8> %47, <i8 26, i8 26, i8 26, i8 26>
  %50 = select <4 x i1> %48, <4 x i8> %42, <4 x i8> zeroinitializer
  %51 = select <4 x i1> %49, <4 x i8> %45, <4 x i8> zeroinitializer
  %52 = zext <4 x i8> %50 to <4 x i32>
  %53 = zext <4 x i8> %51 to <4 x i32>
  %54 = add <4 x i32> %37, %52
  %55 = add <4 x i32> %38, %53
  %56 = add nuw i64 %19, 16
  %57 = add i64 %22, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %18, !llvm.loop !12

59:                                               ; preds = %18, %9
  %60 = phi <4 x i32> [ undef, %9 ], [ %54, %18 ]
  %61 = phi <4 x i32> [ undef, %9 ], [ %55, %18 ]
  %62 = phi i64 [ 0, %9 ], [ %56, %18 ]
  %63 = phi <4 x i32> [ zeroinitializer, %9 ], [ %54, %18 ]
  %64 = phi <4 x i32> [ zeroinitializer, %9 ], [ %55, %18 ]
  %65 = icmp eq i64 %14, 0
  br i1 %65, label %83, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds i8, i8* %7, i64 %62
  %68 = bitcast i8* %67 to <4 x i8>*
  %69 = load <4 x i8>, <4 x i8>* %68, align 1, !tbaa !11
  %70 = getelementptr inbounds i8, i8* %67, i64 4
  %71 = bitcast i8* %70 to <4 x i8>*
  %72 = load <4 x i8>, <4 x i8>* %71, align 1, !tbaa !11
  %73 = add <4 x i8> %72, <i8 -65, i8 -65, i8 -65, i8 -65>
  %74 = icmp ult <4 x i8> %73, <i8 26, i8 26, i8 26, i8 26>
  %75 = select <4 x i1> %74, <4 x i8> %72, <4 x i8> zeroinitializer
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = add <4 x i32> %64, %76
  %78 = add <4 x i8> %69, <i8 -65, i8 -65, i8 -65, i8 -65>
  %79 = icmp ult <4 x i8> %78, <i8 26, i8 26, i8 26, i8 26>
  %80 = select <4 x i1> %79, <4 x i8> %69, <4 x i8> zeroinitializer
  %81 = zext <4 x i8> %80 to <4 x i32>
  %82 = add <4 x i32> %63, %81
  br label %83

83:                                               ; preds = %59, %66
  %84 = phi <4 x i32> [ %60, %59 ], [ %82, %66 ]
  %85 = phi <4 x i32> [ %61, %59 ], [ %77, %66 ]
  %86 = add <4 x i32> %85, %84
  %87 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %86)
  %88 = icmp eq i64 %3, %10
  br i1 %88, label %92, label %89

89:                                               ; preds = %5, %83
  %90 = phi i64 [ 0, %5 ], [ %10, %83 ]
  %91 = phi i32 [ 0, %5 ], [ %87, %83 ]
  br label %94

92:                                               ; preds = %94, %83, %1
  %93 = phi i32 [ 0, %1 ], [ %87, %83 ], [ %103, %94 ]
  ret i32 %93

94:                                               ; preds = %89, %94
  %95 = phi i64 [ %104, %94 ], [ %90, %89 ]
  %96 = phi i32 [ %103, %94 ], [ %91, %89 ]
  %97 = getelementptr inbounds i8, i8* %7, i64 %95
  %98 = load i8, i8* %97, align 1, !tbaa !11
  %99 = add i8 %98, -65
  %100 = icmp ult i8 %99, 26
  %101 = select i1 %100, i8 %98, i8 0
  %102 = zext i8 %101 to i32
  %103 = add nuw nsw i32 %96, %102
  %104 = add nuw nsw i64 %95, 1
  %105 = icmp eq i64 %104, %3
  br i1 %105, label %92, label %94, !llvm.loop !15
}

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1

attributes #0 = { mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !9, i64 8}
!4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !5, i64 0, !9, i64 8, !7, i64 16}
!5 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!4, !6, i64 0}
!11 = !{!7, !7, i64 0}
!12 = distinct !{!12, !13, !14}
!13 = !{!"llvm.loop.mustprogress"}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !13, !16, !14}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
