; ModuleID = '../../Human_xBenchmarks_164/CPP_4/CPP_4.cpp'
source_filename = "../../Human_xBenchmarks_164/CPP_4/CPP_4.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl" = type { %"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" }
%"struct.std::_Vector_base<float, std::allocator<float>>::_Vector_impl_data" = type { float*, float*, float* }

; Function Attrs: mustprogress nofree nosync nounwind readonly uwtable willreturn
define dso_local float @_Z23mean_absolute_deviationSt6vectorIfSaIfEE(%"class.std::vector"* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load float*, float** %2, align 8, !tbaa !3
  %4 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load float*, float** %4, align 8, !tbaa !8
  %6 = ptrtoint float* %3 to i64
  %7 = ptrtoint float* %5 to i64
  %8 = sub i64 %6, %7
  %9 = ashr exact i64 %8, 2
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = uitofp i64 %9 to float
  br label %129

13:                                               ; preds = %1
  %14 = call i64 @llvm.umax.i64(i64 %9, i64 1)
  %15 = add i64 %14, -1
  %16 = and i64 %14, 7
  %17 = icmp ult i64 %15, 7
  br i1 %17, label %58, label %18

18:                                               ; preds = %13
  %19 = and i64 %14, -8
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i64 [ 0, %18 ], [ %55, %20 ]
  %22 = phi float [ 0.000000e+00, %18 ], [ %54, %20 ]
  %23 = phi i64 [ %19, %18 ], [ %56, %20 ]
  %24 = getelementptr inbounds float, float* %5, i64 %21
  %25 = load float, float* %24, align 4, !tbaa !9
  %26 = fadd float %22, %25
  %27 = or i64 %21, 1
  %28 = getelementptr inbounds float, float* %5, i64 %27
  %29 = load float, float* %28, align 4, !tbaa !9
  %30 = fadd float %26, %29
  %31 = or i64 %21, 2
  %32 = getelementptr inbounds float, float* %5, i64 %31
  %33 = load float, float* %32, align 4, !tbaa !9
  %34 = fadd float %30, %33
  %35 = or i64 %21, 3
  %36 = getelementptr inbounds float, float* %5, i64 %35
  %37 = load float, float* %36, align 4, !tbaa !9
  %38 = fadd float %34, %37
  %39 = or i64 %21, 4
  %40 = getelementptr inbounds float, float* %5, i64 %39
  %41 = load float, float* %40, align 4, !tbaa !9
  %42 = fadd float %38, %41
  %43 = or i64 %21, 5
  %44 = getelementptr inbounds float, float* %5, i64 %43
  %45 = load float, float* %44, align 4, !tbaa !9
  %46 = fadd float %42, %45
  %47 = or i64 %21, 6
  %48 = getelementptr inbounds float, float* %5, i64 %47
  %49 = load float, float* %48, align 4, !tbaa !9
  %50 = fadd float %46, %49
  %51 = or i64 %21, 7
  %52 = getelementptr inbounds float, float* %5, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !9
  %54 = fadd float %50, %53
  %55 = add nuw nsw i64 %21, 8
  %56 = add i64 %23, -8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %20, !llvm.loop !11

58:                                               ; preds = %20, %13
  %59 = phi float [ undef, %13 ], [ %54, %20 ]
  %60 = phi i64 [ 0, %13 ], [ %55, %20 ]
  %61 = phi float [ 0.000000e+00, %13 ], [ %54, %20 ]
  %62 = icmp eq i64 %16, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %58, %63
  %64 = phi i64 [ %70, %63 ], [ %60, %58 ]
  %65 = phi float [ %69, %63 ], [ %61, %58 ]
  %66 = phi i64 [ %71, %63 ], [ %16, %58 ]
  %67 = getelementptr inbounds float, float* %5, i64 %64
  %68 = load float, float* %67, align 4, !tbaa !9
  %69 = fadd float %65, %68
  %70 = add nuw nsw i64 %64, 1
  %71 = add i64 %66, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !13

73:                                               ; preds = %63, %58
  %74 = phi float [ %59, %58 ], [ %69, %63 ]
  %75 = uitofp i64 %9 to float
  %76 = fdiv float %74, %75
  br i1 %10, label %129, label %77

77:                                               ; preds = %73
  %78 = and i64 %14, 3
  %79 = icmp ult i64 %15, 3
  br i1 %79, label %112, label %80

80:                                               ; preds = %77
  %81 = and i64 %14, -4
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %109, %82 ]
  %84 = phi float [ 0.000000e+00, %80 ], [ %108, %82 ]
  %85 = phi i64 [ %81, %80 ], [ %110, %82 ]
  %86 = getelementptr inbounds float, float* %5, i64 %83
  %87 = load float, float* %86, align 4, !tbaa !9
  %88 = fsub float %87, %76
  %89 = tail call float @llvm.fabs.f32(float %88) #3
  %90 = fadd float %84, %89
  %91 = or i64 %83, 1
  %92 = getelementptr inbounds float, float* %5, i64 %91
  %93 = load float, float* %92, align 4, !tbaa !9
  %94 = fsub float %93, %76
  %95 = tail call float @llvm.fabs.f32(float %94) #3
  %96 = fadd float %90, %95
  %97 = or i64 %83, 2
  %98 = getelementptr inbounds float, float* %5, i64 %97
  %99 = load float, float* %98, align 4, !tbaa !9
  %100 = fsub float %99, %76
  %101 = tail call float @llvm.fabs.f32(float %100) #3
  %102 = fadd float %96, %101
  %103 = or i64 %83, 3
  %104 = getelementptr inbounds float, float* %5, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !9
  %106 = fsub float %105, %76
  %107 = tail call float @llvm.fabs.f32(float %106) #3
  %108 = fadd float %102, %107
  %109 = add nuw nsw i64 %83, 4
  %110 = add i64 %85, -4
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %82, !llvm.loop !15

112:                                              ; preds = %82, %77
  %113 = phi float [ undef, %77 ], [ %108, %82 ]
  %114 = phi i64 [ 0, %77 ], [ %109, %82 ]
  %115 = phi float [ 0.000000e+00, %77 ], [ %108, %82 ]
  %116 = icmp eq i64 %78, 0
  br i1 %116, label %129, label %117

117:                                              ; preds = %112, %117
  %118 = phi i64 [ %126, %117 ], [ %114, %112 ]
  %119 = phi float [ %125, %117 ], [ %115, %112 ]
  %120 = phi i64 [ %127, %117 ], [ %78, %112 ]
  %121 = getelementptr inbounds float, float* %5, i64 %118
  %122 = load float, float* %121, align 4, !tbaa !9
  %123 = fsub float %122, %76
  %124 = tail call float @llvm.fabs.f32(float %123) #3
  %125 = fadd float %119, %124
  %126 = add nuw nsw i64 %118, 1
  %127 = add i64 %120, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %117, !llvm.loop !16

129:                                              ; preds = %112, %117, %11, %73
  %130 = phi float [ %75, %73 ], [ %12, %11 ], [ %75, %117 ], [ %75, %112 ]
  %131 = phi float [ 0.000000e+00, %73 ], [ 0.000000e+00, %11 ], [ %113, %112 ], [ %125, %117 ]
  %132 = fdiv float %131, %130
  ret float %132
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.umax.i64(i64, i64) #2

attributes #0 = { mustprogress nofree nosync nounwind readonly uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
!3 = !{!4, !5, i64 8}
!4 = !{!"_ZTSNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataE", !5, i64 0, !5, i64 8, !5, i64 16}
!5 = !{!"any pointer", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 0}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !6, i64 0}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.mustprogress"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !12}
!16 = distinct !{!16, !14}
