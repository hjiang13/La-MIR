digraph ControlFlowGraph {
    entry [shape=diamond, label="entry"]
    block1 [shape=rectangle, label="%"class.std::__cxx11::basic_string = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }"]
    block2 [shape=rectangle, label="%3 = alloca %"class.std::__cxx11::basic_string"]
    block3 [shape=rectangle, label="%14 = icmp eq i32 %10, 15"]
    block4 [shape=rectangle, label="%16 = icmp ugt i32 %10, 15"]
    block5 [shape=rectangle, label="%18 = invoke nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i8* %1, i64 %4)"]
    block6 [shape=rectangle, label="%20 = invoke nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %0, i8* %22, i64 %23)"]
    block7 [shape=rectangle, label="%24 = load i8, i8* %7, align 16"]
    block8 [shape=rectangle, label="%26 = landingpad { i8*, i32 }"]
    block9 [shape=rectangle, label="%28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0"]
    block10 [shape=rectangle, label="%31 = load i8*, i8** %28, align 8"]
    block11 [shape=rectangle, label="%27 = phi i8* [ %18, %17 ], [ %14, %4 ]"]
    block12 [shape=rectangle, label="switch i64 %11"]
    block13 [shape=rectangle, label="%25 = load i8, i8* %7, align 16"]
    block14 [shape=rectangle, label="call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* nonnull align 16 %7, i64 %11, i1 false) #10"]
    block15 [shape=rectangle, label="%31 = load i8*, i8** %28, align 8"]
    block16 [shape=rectangle, label="call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(5) %35, i8* noundef nonnull align 1 dereferenceable(5) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i64 5, i1 false) #10"]
    exit [shape=diamond, label="exit"]
    
    entry -> block1
    block1 -> block2
    block2 -> block3
    block3 -> block4
    block4 -> block5
    block5 -> block6
    block6 -> block7
    block7 -> block8
    block8 -> block9
    block9 -> block10
    block10 -> block11
    block11 -> block12
    block12 -> block13
    block12 -> block14
    block12 -> block15
    block13 -> block16
    block14 -> block16
    block15 -> block16
    block16 -> block16
    block16 -> exit
}