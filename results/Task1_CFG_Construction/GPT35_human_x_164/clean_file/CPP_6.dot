digraph ControlFlowGraph {
    node [shape=rectangle]
    entry
    exit
    node0 [label="%"class.std::vector""]
    node1 [label="%"struct.std::_Vector_base""]
    node2 [label="%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl""]
    node3 [label="%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data""]
    node4 [label="%"class.std::__cxx11::basic_string""]
    node5 [label="%"struct.std::__cxx11::basic_string<char>::_Alloc_hider""]
    node6 [label="%union.anon"]
    node7 [label="@.str"]
    node8 [label="@.str.1"]
    node9 [label="define dso_local void @_Z19parse_nested_parensNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::vector"* noalias nocapture sret(%"class.std::vector") align 8 %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1) local_unnamed_addr #0"]
    node10 [label="%3 = alloca %"class.std::__cxx11::basic_string", align 8"]
    node11 [label="%4 = bitcast %"class.std::vector"* %0 to i8*"]
    node12 [label="tail call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %4, i8 0, i64 24, i1 false) #8"]
    node13 [label="%5 = bitcast %"class.std::__cxx11::basic_string"* %3 to i8*"]
    node14 [label="call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8"]
    node15 [label="%6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2"]
    node16 [label="%7 = bitcast %"class.std::__cxx11::basic_string"* %3 to %union.anon**"]
    node17 [label="%8 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 1"]
    node18 [label="%9 = bitcast %union.anon* %6 to i8*"]
    node19 [label="%10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1"]
    node20 [label="..."]
    // Add more nodes as needed
    entry -> node0
    node0 -> node1
    node1 -> node2
    node2 -> node3
    node3 -> node4
    node4 -> node5
    node5 -> node6
    node6 -> node7
    node7 -> node8
    node8 -> node9
    node9 -> node10
    node10 -> node11
    node11 -> node12
    node12 -> node13
    node13 -> node14
    node14 -> node15
    node15 -> node16
    node16 -> node17
    node17 -> node18
    node18 -> node19
    node19 -> node20
    // Add more edges as needed
    node20 -> exit
}