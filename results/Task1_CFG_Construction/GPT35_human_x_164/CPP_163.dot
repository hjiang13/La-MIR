```dot
digraph ControlFlowGraph {
    node [shape=rectangle];
    start [label="start"];
    node1 [label="%4 = icmp slt i32 %2, %1"];
    node2 [label="%5 = select i1 %4, i32 %1, i32 %2"];
    node3 [label="%6 = select i1 %4, i32 %2, i32 %1"];
    node4 [label="%7 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1"];
    node5 [label="%8 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2"];
    node6 [label="%9 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0"];
    node7 [label="call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false)"];
    node8 [label="%13 = phi i32* [ null, %3 ], [ %72, %71 ]"];
    node9 [label="%14 = phi i32* [ null, %3 ], [ %73, %71 ]"];
    node10 [label="%15 = phi i32* [ null, %3 ], [ %74, %71 ]"];
    node11 [label="%16 = phi i32 [ %6, %3 ], [ %75, %71 ]"];
    node12 [label="%17 = icmp slt i32 %16, 10"];
    node13 [label="%18 = and i32 %16, 1"];
    node14 [label="%19 = icmp eq i32 %18, 0"];
    node15 [label="%20 = and i1 %17, %19"];
    node16 [label="%22 = icmp eq i32* %15, %14"];
    node17 [label="store i32 %16, i32* %15, align 4, !tbaa !3"];
    node18 [label="%24 = getelementptr inbounds i32, i32* %15, i64 1"];
    node19 [label="%26 = ptrtoint i32* %14 to i64"];
    node20 [label="%27 = ptrtoint i32* %13 to i64"];
    node21 [label="%28 = sub i64 %26, %27"];
    node22 [label="%29 = ashr exact i64 %28, 2"];
    node23 [label="%30 = icmp eq i64 %28, 9223372036854775804"];
    node24 [label="%34 = icmp eq i64 %28, 0"];
    node25 [label="%35 = select i1 %34, i64 1, i64 %29"];
    node26 [label="%36 = add nsw i64 %35, %29"];
    node27 [label="%37 = icmp ult i64 %36, %29"];
    node28 [label="%38 = icmp ugt i64 %36, 2305843009213693951"];
    node29 [label="%39 = or i1 %37, %38"];
    node30 [label="%40 = select i1 %39, i64 2305843009213693951, i64 %36"];
    node31 [label="%41 = icmp eq i64 %40, 0"];
    node32 [label="%43 = shl nuw nsw i64 %40, 2"];
    node33 [label="%44 = invoke noalias nonnull i8* @_Znwm(i64 %43)"];
    node34 [label="%46 = bitcast i8* %44 to i32*"];
    node35 [label="%48 = phi i32* [ %46, %45 ], [ null, %33 ]"];
    node36 [label="%52 = bitcast i32* %48 to i8*"];
    node37 [label="%53 = bitcast i32* %13 to i8*"];
    node38 [label="%55 = getelementptr inbounds i32, i32* %49, i64 1"];
    node39 [label="%58 = bitcast i32* %13 to i8*"];
    node40 [label="tail call void @_ZdlPv(i8* nonnull %58)"];
    node41 [label="store i32* %48, i32** %9, align 8, !tbaa !10"];
    node42 [label="store i32* %55, i32** %7, align 8, !tbaa !7"];
    node43 [label="%60 = getelementptr inbounds i32, i32* %48, i64 %40"];
    node44 [label="store i32* %60, i32** %8, align 8, !tbaa !11"];
    node45 [label="%62 = landingpad { i8*, i32 }"];
    node46 [label="%64 = landingpad { i8*, i32 }"];
    node47 [label="%66 = phi { i8*, i32 } [ %62, %61 ], [ %64, %63 ]"];
    node48 [label="%69 = bitcast i32* %13 to i8*"];
    node49 [label="tail call void @_ZdlPv(i8* nonnull %69)"];
    node50 [label="resume { i8*, i32 } %66"];
    node51 [label="%72 = phi i32* [ %48, %59 ], [ %13, %23 ], [ %13, %12 ]"];
    node52 [label="%73 = phi i32* [ %60, %59 ], [ %14, %23 ], [ %14, %12 ]"];
    node53 [label="%74 = phi i32* [ %55, %59 ], [ %24, %23 ], [ %15, %12 ]"];
    node54 [label="%75 = add i32 %16, 1"];
    node55 [label="%76 = icmp eq i32 %16, %5"];
    node56 [label="end"];
    
    start -> node1;
    node1 -> node2;
    node2 -> node3;
    node3 -> node4;
    node4 -> node5;
    node5 -> node6;
    node6 -> node7;
    node7 -> node8;
    node8 -> node9;
    node9 -> node10;
    node10 -> node11;
    node11 -> node12;
    node12 -> node13;
    node13 -> node14;
    node14 -> node15;
    node15 -> node16;
    node16 -> node17;
    node17 -> node18;
    node18 -> node19;
    node19 -> node20;
    node20 -> node21;
    node21 -> node22;
    node22 -> node23;
    node23 -> node24;
    node24 -> node25;
    node25 -> node26;
    node26 -> node27;
    node27 -> node28;
    node28 -> node29;
    node29 -> node30;
    node30 -> node31;
    node31 -> node32;
    node32 -> node33;
    node33 -> node34;
    node34 -> node35;
    node35 -> node36;
    node36 -> node37;
    node37 -> node38;
    node38 -> node39;
    node39 -> node40;
    node40 -> node41;
    node41 -> node42;
    node42 -> node43;
    node43 -> node44;
    node44 -> node45;
    node45 -> node46;
    node46 -> node47;
    node47 -> node48;
    node48 -> node49;
    node49 -> node50;
    node50 -> node51;
    node51 -> node52;
    node52 -> node53;
    node53 -> node54;
    node54 -> node55;
    node55 -> node56;
}
```