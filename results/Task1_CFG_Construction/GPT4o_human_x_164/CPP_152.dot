Here's the control flow graph (CFG) represented in DOT format based on the provided IR code. Each basic block is represented as a node with its label, and the edges represent the control flow between those blocks.

```dot
digraph CFG {
    rankdir=TB;

    // Nodes
    n0 [label="%3"];
    n1 [label="%14"];
    n2 [label="%29"];
    n3 [label="%31"];
    n4 [label="%37"];
    n5 [label="%38"];
    n6 [label="%39"];
    n7 [label="%48"];
    n8 [label="%51"];
    n9 [label="%53"];
    n10 [label="%57"];
    n11 [label="%60"];
    n12 [label="%63"];
    n13 [label="%65"];
    n14 [label="%69"];
    n15 [label="%70"];
    n16 [label="%71"];
    n17 [label="%72"];
    n18 [label="%73"];
    n19 [label="%74"];
    n20 [label="%75"];
    n21 [label="%80"];
    n22 [label="%82"];
    n23 [label="%84"];
    n24 [label="%85"];
    n25 [label="%90"];
    n26 [label="%91"];
    n27 [label="%83"];
    n28 [label="%81"];

    // Edges
    n0 -> n1; // from %3 to %14
    n1 -> n2; // from %14 to %29
    n1 -> n26; // from %14 to %91
    n2 -> n3; // from %29 to %31
    n3 -> n4; // from %31 to %37
    n3 -> n6; // from %31 to %39
    n4 -> n5; // from %37 to %38
    n4 -> n28; // from %37 to %83
    n6 -> n7; // from %39 to %48
    n6 -> n9; // from %39 to %53
    n7 -> n8; // from %48 to %51
    n9 -> n10; // from %53 to %57
    n10 -> n11; // from %57 to %60
    n11 -> n12; // from %60 to %63
    n12 -> n13; // from %63 to %65
    n13 -> n14; // from %65 to %69
    n14 -> n15; // from %69 to %70
    n14 -> n16; // from %69 to %71
    n14 -> n17; // from %69 to %72
    n14 -> n18; // from %69 to %73
    n14 -> n19; // from %69 to %74
    n14 -> n26; // from %69 to %91
    n14 -> n20; // from %69 to %80
    n20 -> n21; // from %80 to %82
    n21 -> n22; // from %82 to %84
    n22 -> n23; // from %84 to %85
    n23 -> n25; // from %85 to %90
    n24 -> n26; // from %83 to %91
    n27 -> n28; // from %48 to %81
}
```

In this representation:
- Each node corresponds to a basic block, labeled with its identifying label.
- The edges indicate the flow of control from one block to another, showing how execution can jump between different parts of the program based on conditions and control statements.