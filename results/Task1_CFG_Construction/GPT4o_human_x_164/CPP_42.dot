To represent the control flow graph (CFG) in DOT format, we'll create nodes for each basic block identified in the provided Intermediate Representation (IR) code and describe the edges that connect these blocks based on the control flow.

Here's the extracted CFG in DOT format:

```dot
digraph CFG {
    // Nodes
    node [shape=box];
    start [label="Entry"];
    block_2 [label="%2"];
    block_11 [label="%11"];
    block_15 [label="%15"];
    block_22 [label="%22"];
    block_24 [label="%24"];
    block_51 [label="%51"];
    block_54 [label="%54"];
    block_65 [label="%65"];
    block_67 [label="%67"];
    block_69 [label="%69"];
    block_76 [label="%76"];
    
    // Edges
    start -> block_2;
    block_2 -> block_11;
    block_11 -> block_15;
    block_11 -> block_69;
    block_15 -> block_22;
    block_15 -> block_51;
    block_22 -> block_24;
    block_24 -> block_24; // self-loop
    block_24 -> block_51;
    block_51 -> block_54;
    block_51 -> block_65;
    block_54 -> block_65;
    block_65 -> block_67;
    block_67 -> block_69;
    block_69 -> block_76;
    block_76 -> block_69;
    block_76 -> block_76; // self-loop
}
```

### Explanation:
- Each basic block from the IR code has been represented as a node in the graph.
- The edges represent the flow of control between these blocks, showing which blocks can be entered from others based on branching (`br` instructions) and the flow of the program.
- The labels for the nodes correspond to the identifiers in the IR code, making it easier to trace back to the original code structure if needed. 
- Self-loops are included where applicable, indicating that the flow can return to the same block under certain conditions.

If you need further modifications or additions to this DOT representation, feel free to ask!