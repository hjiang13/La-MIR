Based on the provided Intermediate Representation (IR) code, we can extract the control flow and represent it in a DOT format. Each basic block will be represented as a node, and the branches will be represented as directed edges between these nodes.

Here is the control flow graph in DOT format:

```dot
digraph CFG {
    // Define nodes
    1 [label="Entry"];
    2 [label="Block 2"];
    5 [label="Block 5"];
    8 [label="Block 8"];
    10 [label="Block 10"];
    23 [label="Block 23"];
    25 [label="Block 25"];

    // Define edges
    1 -> 2;      // Entry to Block 2
    2 -> 5;      // Block 2 to Block 5
    5 -> 10;     // Block 5 to Block 10
    10 -> 8;     // Block 10 to Block 8
    8 -> 10;     // Block 8 back to Block 10 (loop)
    8 -> 23;     // Block 8 to Block 23 (branch)
    10 -> 25;    // Block 10 to Block 25
    23 -> 25;    // Block 23 to Block 25
}
```

### Explanation:
- Each basic block is labeled with a unique identifier and a descriptive label.
- The edges represent the flow of control between the blocks:
  - The program starts at the entry point, which leads to Block 2.
  - From Block 2, it goes to Block 5.
  - Block 5 then leads to Block 10.
  - Block 10 can branch to Block 8 or directly to Block 25.
  - Block 8 can loop back to Block 10, indicating a loop structure.
  - Block 23 can lead to Block 25, indicating an exit point.

This representation captures the flow of control based on the structure of the IR code provided.