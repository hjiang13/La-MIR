To construct a control flow graph (CFG) from the provided Intermediate Representation (IR) code, we will identify the basic blocks and their connections (edges) based on the control flow statements (like `br`, `invoke`, `resume`, etc.) in the IR code.

Here is a simplified representation of the CFG in DOT format:

```dot
digraph CFG {
    rankdir=TB;

    // Nodes
    entry [label="Entry"];
    block_2 [label="2"];
    block_3 [label="3"];
    block_12 [label="12"];
    block_20 [label="20"];
    block_22 [label="22"];
    block_25 [label="25"];
    block_30 [label="30"];
    block_31 [label="31"];
    block_32 [label="32"];
    block_41 [label="41"];
    block_43 [label="43"];

    // Edges
    entry -> block_3;
    block_3 -> block_2;
    block_2 -> block_12;
    block_12 -> block_20;
    block_12 -> block_41;
    block_20 -> block_22;
    block_20 -> block_25;
    block_22 -> block_32;
    block_25 -> block_30;
    block_30 -> block_31;
    block_31 -> block_25;
    block_32 -> block_41;
    block_32 -> block_43;
    block_41 -> block_12;
    block_43 -> block_43;
}
```

### Explanation:
- **Nodes**: Each node in the graph represents a basic block in the IR code. The labels correspond to the block identifiers in the code.
- **Edges**: Directed edges indicate the flow from one block to another based on the control flow statements in the IR. The edges are derived from the branch (`br`), invoke, and return statements present in the IR.

This representation gives a high-level view of the control flow in the given IR code. Each block is identified, and the flow of execution is indicated by directed edges between them.