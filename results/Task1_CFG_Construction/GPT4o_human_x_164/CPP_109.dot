To create a control flow graph (CFG) in DOT format from the provided intermediate representation (IR) code, we will identify the basic blocks and their connections based on the branching instructions. Each unique label (e.g., `%10`, `%11`, etc.) will correspond to a node in the CFG, and edges will be created based on the flow of control between these nodes.

Here is the corresponding DOT format representation of the CFG:

```dot
digraph CFG {
    // Nodes
    start [label="%1"];
    block_10 [label="%10"];
    block_11 [label="%11"];
    block_12 [label="%12"];
    block_14 [label="%14"];
    block_17 [label="%17"];
    block_21 [label="%21"];
    block_22 [label="%22"];
    block_43 [label="%43"];
    block_48 [label="%48"];
    block_52 [label="%52"];
    block_61 [label="%61"];
    block_72 [label="%72"];

    // Edges
    start -> block_10;
    block_10 -> block_11;
    block_11 -> block_12;
    block_11 -> block_52;
    block_14 -> block_17;
    block_17 -> block_21;
    block_21 -> block_21; // Loop back
    block_21 -> block_43;
    block_21 -> block_48;
    block_52 -> block_72;
    block_43 -> block_52;
    block_48 -> block_61;
    block_61 -> block_52;
    block_61 -> block_61; // Loop back
    block_72 -> block_72; // Exit
}
```

### Explanation:
- Each node in the graph corresponds to a basic block, represented by its label (e.g., `%1`, `%10`, etc.).
- The edges represent the control flow from one basic block to another, based on `br` (branch) instructions.
- Loops are represented by self-referencing edges (e.g., `%21 -> %21` and `%61 -> %61`).
- The `start` node represents the entry point of the function, which is `%1` in this case.
- The final node `%72` is where the function returns, demonstrating the exit from the control flow.

You can visualize this graph using any tool that supports DOT format, such as Graphviz.