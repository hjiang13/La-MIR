Based on the provided Intermediate Representation (IR) code, we will create a control flow graph (CFG) in DOT format. The nodes will represent the basic blocks, and the edges will represent the control flow between these blocks.

Here's the DOT representation for the control flow graph of the given IR code:

```dot
digraph CFG {
    // Nodes
    node [shape=box];
    Entry [label="Entry"];
    Block_3 [label="Block 3"];
    Block_12 [label="Block 12"];
    Block_18 [label="Block 18"];
    Block_24 [label="Block 24"];
    Block_25 [label="Block 25"];

    // Edges
    Entry -> Block_3;
    Block_3 -> Block_12 [label="True"];
    Block_3 -> Block_25 [label="False"];
    Block_12 -> Block_18 [label="True"];
    Block_12 -> Block_25 [label="False"];
    Block_18 -> Block_24 [label="True"];
    Block_18 -> Block_25 [label="False"];
    Block_24 -> Block_25;
}
```

### Explanation:
- **Nodes**: 
  - `Entry`: The start of the function.
  - `Block 3`: The block where the first comparison (`fcmp olt`) occurs.
  - `Block 12`: The block following the first conditional branch.
  - `Block 18`: The block following the second conditional branch.
  - `Block 24`: The block that is reached when the last comparison is true.
  - `Block 25`: The exit block of the function where the result is returned.

- **Edges**: 
  - The edges indicate the flow of control from one block to another, with labels indicating conditions for branching when necessary.

This representation captures the structure of the control flow in the provided IR code without detailing the specifics of each basic block.