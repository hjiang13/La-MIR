To represent the control flow graph (CFG) from the provided intermediate representation (IR) code in the DOT format, we will extract the basic blocks and their connections based on the control flow instructions (like `br`, `switch`, and `invoke`). Each basic block will be represented as a node in the graph, and we will denote edges based on the flow of control between these blocks.

Here's the CFG in DOT format:

```dot
digraph CFG {
    rankdir=TB;
    
    // Nodes
    node [shape=box];
    Entry [label="Entry"];
    Block2 [label="Block2"];
    Block23 [label="Block23"];
    Block26 [label="Block26"];
    Block39 [label="Block39"];
    Block41 [label="Block41"];
    Block43 [label="Block43"];
    Block45 [label="Block45"];
    Block47 [label="Block47"];
    Block48 [label="Block48"];
    Block54 [label="Block54"];
    Block58 [label="Block58"];
    Block62 [label="Block62"];
    Block65 [label="Block65"];
    Block68 [label="Block68"];
    Block70 [label="Block70"];
    Block71 [label="Block71"];
    Block76 [label="Block76"];
    Block83 [label="Block83"];
    Block85 [label="Block85"];
    Block89 [label="Block89"];
    Block90 [label="Block90"];
    Block94 [label="Block94"];
    Block97 [label="Block97"];
    Block99 [label="Block99"];
    Block105 [label="Block105"];
    
    // Edges
    Entry -> Block2;
    Block2 -> Block23;
    Block2 -> Block105;
    
    Block23 -> Block26;

    Block26 -> Block39;
    Block26 -> Block94;

    Block39 -> Block41;

    Block41 -> Block43;

    Block43 -> Block45;
    Block43 -> Block48;
    
    Block45 -> Block48;

    Block47 -> Block48;

    Block48 -> Block54;
    Block48 -> Block76;
    Block48 -> Block59;

    Block54 -> Block99;
    Block58 -> Block99;
    Block97 -> Block99;

    Block99 -> Block103;
    Block99 -> Block104;

    Block105 -> Block90;
    Block105 -> Block2;

    Block62 -> Block65;
    Block62 -> Block71;

    Block65 -> Block68;
    Block65 -> Block70;

    Block68 -> Block71;

    Block70 -> Block71;

    Block71 -> Block85;

    Block76 -> Block83;

    Block83 -> Block85;

    Block85 -> Block89;
    Block85 -> Block90;

    Block90 -> Block94;
    Block90 -> Block105;

    Block94 -> Block26;

    Block39 -> Block97;
}
```

### Explanation:
1. Each basic block is represented as a node labeled with its respective identifier.
2. Directed edges (`->`) represent the control flow from one basic block to another.
3. The `Entry` node represents the start of the function, while the `Block105` denotes the end of the function (return).

This representation captures the control flow structure as described in the IR code while omitting the specific content of each block, focusing solely on the control flow connections.