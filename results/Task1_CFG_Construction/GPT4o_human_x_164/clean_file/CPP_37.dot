digraph CFG {
    // Nodes
    node [shape=box];
    entry [label="entry"];
    block_2 [label="%2"];
    block_3 [label="%3"];
    block_6 [label="%6"];
    block_7 [label="%7"];
    block_9 [label="%9"];
    block_11 [label="%11"];
    block_19 [label="%19"];
    block_20 [label="%20"];
    block_23 [label="%23"];
    block_30 [label="%30"];
    block_40 [label="%40"];
    block_42 [label="%42"];
    block_48 [label="%48"];
    block_49 [label="%49"];
    block_50 [label="%50"];
    block_59 [label="%59"];
    block_62 [label="%62"];
    block_64 [label="%64"];
    block_69 [label="%69"];
    block_72 [label="%72"];
    block_76 [label="%76"];
    block_80 [label="%80"];
    block_99 [label="%99"];
    block_101 [label="%101"];
    block_103 [label="%103"];
    block_104 [label="%104"];
    block_106 [label="%106"];
    block_220 [label="%220"];
    block_227 [label="%227"];
    block_231 [label="%231"];

    // Edges
    entry -> block_2;
    block_2 -> block_3;  // After function entry
    block_3 -> block_6;  // First load
    block_6 -> block_7;  // Another load
    block_7 -> block_8;  // Comparison
    block_8 -> block_9 [label="true"];
    block_8 -> block_30 [label="false"];
    block_9 -> block_11;  // If true branch
    block_11 -> block_19;  // Invoke
    block_19 -> block_20;  // Invoke
    block_20 -> block_23;  // Load and branch
    block_23 -> block_30;  // Branch to next
    block_30 -> block_40;  // Loop structure
    block_40 -> block_42;  // Branch
    block_42 -> block_48 [label="if error"];
    block_42 -> block_50 [label="else"];
    block_48 -> block_49;  // Exception handling
    block_49 -> block_50;  // Continue after exception
    block_50 -> block_59;  // Continue normal flow
    block_59 -> block_62;  // More processing
    block_62 -> block_64;  // Handling end
    block_64 -> block_69;  // Control flow manipulation
    block_69 -> block_72;  // Continue loop
    block_72 -> block_76;  // Check for next iteration
    block_76 -> block_80;  // Process next element
    block_80 -> block_99;  // Loop back
    block_99 -> block_101; // Check for null
    block_101 -> block_103; // Freeing memory
    block_103 -> block_220; // Return block
    block_220 -> block_227; // Cleanup
    block_227 -> block_231; // Final cleanup
}