To represent the control flow graph (CFG) for the given Intermediate Representation (IR) code, we will identify the basic blocks and their connections. The provided IR code consists of a single function definition with a series of computations and a return statement. 

Here's how we can represent the control flow graph in DOT format:

```dot
digraph CFG {
    // Define nodes
    start [label="Entry"];
    block1 [label="Basic Block 1"];
    retBlock [label="Return Block"];

    // Define edges
    start -> block1;    // Control flow enters the first basic block
    block1 -> retBlock; // Control flows to the return statement
    retBlock -> end;    // Control flow exits the function

    // End node
    end [label="Exit"];
}
```

### Explanation:
- **Nodes**:
  - `start`: Represents the entry point of the function.
  - `block1`: Represents the main block where computations take place (i.e., the operations involving `%3`, `%4`, `%5`, `%6`, `%7`).
  - `retBlock`: Represents the return statement of the function.
  - `end`: Represents the exit point of the function.

- **Edges**:
  - The flow starts from `start` to `block1`, as the first action when the function is invoked is to execute the computations.
  - After executing the computations inside `block1`, the flow goes to `retBlock`, where the return value is specified.
  - Finally, the flow exits from `retBlock` to `end`, which signifies the end of the function execution.

This DOT representation captures the structure of the control flow graph based on the provided IR code.