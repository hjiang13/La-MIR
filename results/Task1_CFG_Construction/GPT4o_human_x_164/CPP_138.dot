To create a control flow graph (CFG) based on the provided intermediate representation (IR) code, we need to identify the basic blocks and their control flow connections. 

In the given IR code, we can see that there is only one function definition with a series of operations leading to a return statement. The function `is_equal_to_sum_eveni` contains control flow which can be summarized as follows:

1. Start of the function (Entry)
2. Block for computing `%2`, `%3`, `%4`, and `%5`
3. Return block

Given that, the CFG will have the following nodes:

- Entry
- Block for computations
- Return

Now, let's represent this in DOT format:

```dot
digraph CFG {
    Entry -> ComputationBlock;
    ComputationBlock -> Return;
}
```

In this representation:

- `Entry` is the starting point of the function.
- `ComputationBlock` represents the block where the computations are performed.
- `Return` is where the function returns the result.

This is a simplified CFG based on the provided IR code. If there were more branches or function calls, they would be represented as additional nodes and edges in the CFG.