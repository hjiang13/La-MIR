To construct a control flow graph (CFG) from the provided intermediate representation (IR) code, we will identify the basic blocks and their connections based on the branching instructions (like `br` and `ret`). The nodes will represent the basic blocks, and the edges will represent the flow of control from one block to another.

Here is the CFG in DOT format:

```dot
digraph CFG {
    rankdir=LR;

    node [shape=box];

    block1 [label="Entry"];
    block2 [label="Block 3"];
    block3 [label="Block 10"];
    block4 [label="Block 12"];
    block5 [label="Block 19"];
    block6 [label="Exit"];

    block1 -> block2 [label="if %0 < 4"];
    block2 -> block3 [label="goto Block 10"];
    block2 -> block4 [label="goto Block 12"];
    
    block3 -> block6 [label="return"];
    block3 -> block5 [label="goto Block 19"];

    block4 -> block4 [label="loop back to Block 12"];
    block4 -> block5 [label="goto Block 19"];

    block5 -> block3 [label="goto Block 3"];
    block5 -> block3 [label="goto Block 10"];
}
```

### Explanation of the Nodes:
- **Entry**: Represents the entry point of the function.
- **Block 3**: Corresponds to the label `%3` in the IR.
- **Block 10**: Corresponds to the label `%10` where a return statement occurs.
- **Block 12**: Corresponds to the label `%12`, which contains a loop.
- **Block 19**: Corresponds to the label `%19`, which may lead back to other blocks.
- **Exit**: Represents the exit point of the function where the control leaves.

### Edges:
- Arrows indicate the flow of control from one block to another, with labels indicating the conditions under which the transitions occur.

This representation captures the essential structure of the control flow in the provided IR code.