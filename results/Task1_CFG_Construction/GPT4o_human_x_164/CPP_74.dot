To represent the control flow graph (CFG) of the provided Intermediate Representation (IR) code in DOT format, we will identify the basic blocks and their connections through control flow (branches). Below is the CFG in DOT format:

```dot
digraph CFG {
    rankdir=LR;
    
    // Define nodes
    node [shape=rect];
    entry [label="Entry"];
    bb_0 [label="%3"];
    bb_4 [label="%12"];
    bb_5 [label="%18"];
    bb_6 [label="%20"];
    bb_7 [label="%25"];
    bb_8 [label="%36"];
    bb_9 [label="%46"];
    bb_10 [label="%54"];
    bb_11 [label="%80"];
    bb_12 [label="%106"];
    bb_13 [label="%111"];
    bb_14 [label="%122"];
    
    // Define edges between nodes
    entry -> bb_0;
    bb_0 -> bb_4;
    bb_4 -> bb_5;
    bb_4 -> bb_6;
    bb_5 -> bb_10;
    bb_5 -> bb_9;
    bb_6 -> bb_8;
    bb_7 -> bb_8;
    bb_8 -> bb_9;
    bb_9 -> bb_10;
    bb_10 -> bb_6;
    bb_10 -> bb_11;
    bb_11 -> bb_12;
    bb_12 -> bb_13;
    bb_12 -> bb_14;
    bb_13 -> bb_14;
    bb_14 -> bb_8;
}
```

### Explanation:
- Each node in the graph corresponds to a basic block in the IR code.
- The edges represent the flow of control between these blocks, showing how the program can transition from one block to another based on the execution path.
- The labels for the nodes are derived from the labels in the IR code (e.g., `%3`, `%12`, etc.), and the entry point is labeled as "Entry" for clarity.
- The flow is directed, indicating how the program can move between these blocks.