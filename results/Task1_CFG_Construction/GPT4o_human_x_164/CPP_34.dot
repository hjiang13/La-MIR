To construct the control flow graph (CFG) in DOT format based on the provided Intermediate Representation (IR) code, we first identify the basic blocks and their connections through control flow statements.

Here's the resulting DOT representation of the control flow graph:

```dot
digraph CFG {
    rankdir=LR;

    // Nodes
    start [label="start"];
    entry [label="entry"];
    block_2 [label="%2"];
    block_3 [label="%3"];
    block_12 [label="%12"];
    block_14 [label="%14"];
    block_22 [label="%22"];
    block_23 [label="%23"];
    block_35 [label="%35"];
    block_38 [label="%38"];
    block_43 [label="%43"];
    block_47 [label="%47"];
    block_51 [label="%51"];
    block_55 [label="%55"];
    block_59 [label="%59"];
    block_62 [label="%62"];
    block_66 [label="%66"];
    block_68 [label="%68"];
    block_70 [label="%70"];
    block_74 [label="%74"];
    block_76 [label="%76"];
    block_83 [label="%83"];
    block_88 [label="%88"];
    block_90 [label="%90"];
    block_92 [label="%92"];
    block_94 [label="%94"];
    block_97 [label="%97"];
    block_99 [label="%99"];
    block_102 [label="%102"];
    block_105 [label="%105"];
    block_106 [label="%106"];
    block_107 [label="%107"];
    block_138 [label="%138"];
    block_140 [label="%140"];
    block_142 [label="%142"];
    block_154 [label="%154"];
    block_156 [label="%156"];
    block_157 [label="%157"];

    // Edges
    start -> entry;
    entry -> block_2;
    block_2 -> block_3;
    block_3 -> block_12;
    block_12 -> block_14;
    block_14 -> block_22;
    block_22 -> block_23;
    block_23 -> block_35;
    block_35 -> block_38;
    block_38 -> block_43;
    block_43 -> block_47;
    block_47 -> block_51;
    block_51 -> block_55;
    block_55 -> block_59;
    block_59 -> block_62;
    block_62 -> block_66;
    block_62 -> block_68;
    block_62 -> block_70;
    block_70 -> block_74;
    block_70 -> block_76;
    block_76 -> block_83;
    block_83 -> block_88;
    block_83 -> block_90;
    block_83 -> block_92;
    block_83 -> block_94;
    block_94 -> block_97;
    block_97 -> block_99;
    block_99 -> block_102;
    block_102 -> block_105;
    block_105 -> block_106;
    block_107 -> block_138;
    block_107 -> block_140;
    block_138 -> block_142;
    block_140 -> block_142;
    block_142 -> block_154;
    block_154 -> block_156;
    block_156 -> block_157;
}
```

### Explanation:
- Each node corresponds to a basic block in the IR code, represented by a unique label (e.g., `%2`, `%3`, etc.).
- The edges represent the control flow between these blocks, depicting the possible paths that can be taken during execution.
- The control flow is directed, meaning it reflects the execution order of the blocks based on the branching conditions and invocation statements in the IR code.

You can use this DOT representation in graph visualization tools (like Graphviz) to generate a visual representation of the control flow graph.