```dot
digraph "Control Flow Graph" {
  node [shape=box];

  entry;
  "br label %12";
  "phi i32* [ null, %3 ], [ %72, %71 ]";
  "icmp slt i32 %16, 10";
  "and i32 %16, 1";
  "icmp eq i32 %18, 0";
  "and i1 %17, %19";
  "br i1 %20, label %21, label %71";
  "icmp eq i32* %15, %14";
  "store i32 %16, i32* %15, align 4";
  "store i32* %24, i32** %7, align 8";
  "br label %71";
  "ptrtoint i32* %14 to i64";
  "ptrtoint i32* %13 to i64";
  "sub i64 %26, %27";
  "ashr exact i64 %28, 2";
  "icmp eq i64 %28, 9223372036854775804";
  "invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))";
  "unreachable";
  "icmp eq i64 %28, 0";
  "select i1 %34, i64 1, i64 %29";
  "add nsw i64 %35, %29";
  "icmp ult i64 %36, %29";
  "icmp ugt i64 %36, 2305843009213693951";
  "or i1 %37, %38";
  "select i1 %39, i64 2305843009213693951, i64 %36";
  "icmp eq i64 %40, 0";
  "shl nuw nsw i64 %40, 2";
  "invoke noalias nonnull i8* @_Znwm(i64 %43)";
  "bitcast i8* %44 to i32*";
  "getelementr inbounds i32, i32* %46, i64 %29";
  "store i32 %16, i32* %49, align 4";
  "icmp sgt i64 %28, 0";
  "bitcast i32* %48 to i8*";
  "bitcast i32* %13 to i8*";
  "tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 %28, i1 false)";
  "getelementr inbounds i32, i32* %49, i64 1";
  "icmp eq i32* %13, null";

 "bitcast i32* %13 to i8*";
  "tail call void @_ZdlPv(i8* nonnull %58)";
  "store i32* %48, i32** %9, align 8";
  "store i32* %55, i32** %7, align 8";
  "getelementr inbounds i32, i32* %48, i64 %40";
  "store i32* %60, i32** %8, align 8";
  "br label %71";
  "landingpad { i8*, i32 }";
  "icmp eq i32* %13, null";
  "bitcast i32* %13 to i8*";
  "tail call void @_ZdlPv(i8* nonnull %69)";
  "resume { i8*, i32 } %66";
  "phi i32* [ %48, %59 ], [ %13, %23 ], [ %13, %12 ]";
  "phi i32* [ %60, %59 ], [ %14, %23 ], [ %14, %12 ]";
  "phi i32* [ %55, %59 ], [ %24, %23 ], [ %15, %12 ]";
  "add i32 %16, 1";
  "icmp eq i32 %16, %5";
  "br i1 %76, label %11, label %12";

  entry -> "br label %12";
"br label %12" -> "phi i32* [ null, %3 ], [ %72, %71 ]";
"phi i32* [ null, %3 ], [ %72, %71 ]" -> "icmp slt i32 %16, 10";
"icmp slt i32 %16, 10" -> "and i32 %16, 1";
"and i32 %16, 1" -> "icmp eq i32 %18, 0";
"icmp eq i32 %18, 0" -> "and i1 %17, %19";
"and i1 %17, %19" -> "br i1 %20, label %21, label %71";
"br i1 %20, label %21, label %71" -> "icmp eq i32* %15, %14";
"icmp eq i32* %15, %14" -> "store i32 %16, i32* %15, align 4";

"store i32 %16, i32* %15, align 4" -> "store i32* %24, i32** %7, align 8";
"store i32* %24, i32** %7, align 8" -> "br label %71";

"br label %71" -> "phi i32* [ null, %3 ], [ %72, %71 ]";

"phi i32* [ null, %3 ], [ %72, %71 ]" -> "ptrtoint i32* %14 to i64";
"ptrtoint i32* %14 to i64" -> "ptrtoint i32* %13 to i64";
"ptrtoint i32* %13 to i64" -> "sub i64 %26, %27";
"sub i64 %26, %27" -> "ashr exact i64 %28, 2";
"ashr exact i64 %28, 2" -> "icmp eq i64 %28, 9223372036854775804";

"icmp eq i64 %28, 9223372036854775804"-> "invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))";
"invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))" -> "unreachable";
"unreachable" -> "icmp eq i64 %28, 0";
"icmp eq i64 %28, 0" -> "select i1 %34, i64 1, i64 %29";

"select i1 %34, i64 1, i64 %29" -> "add nsw i64 %35, %29";
"add nsw i64 %35, %29" -> "icmp ult i64 %36, %29";
"icmp ult i64 %36, %29" -> "icmp ugt i64 %36, 2305843009213693951";

"icmp ugt i64 %36, 2305843009213693951" -> "or i1 %37, %38";
"or i1 %37, %38" -> "select i1 %39, i64 2305843009213693951, i64 %36";
"select i1 %39, i64 2305843009213693951, i64 %36" -> "icmp eq i64 %40, 0";

"icmp eq i64 %40, 0" -> "shl nuw nsw i64 %40, 2";
"shl nuw nsw i64 %40, 2" -> "invoke noalias nonnull i8* @_Znwm(i64 %43)";

"invoke noalias nonnull i8* @_Znwm(i64 %43)" -> "bitcast i8* %44 to i32*";

"bitcast i8* %44 to i32*" -> "getelementr inbounds i32, i32* %46, i64 %29";

"getelementr inbounds i32, i32* %46, i64 %29" -> "store i32 %16, i32* %49, align 4";

"store i32 %16, i32* %49, align 4" -> "icmp sgt i64 %28, 0";

"icmp sgt i64 %28, 0" -> "bitcast i32* %48 to i8*";
"bitcast i32* %48 to i8*" -> "bitcast i32* %13 to i8*";

"bitcast i32* %13 to i8*" -> "tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 %28, i1 false)";

"tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 %28, i1 false)" -> "getelementr inbounds i32, i32* %49, i64 1";
"getelementr inbounds i32, i32* %49, i64 1" -> "icmp eq i32* %13, null";

"icmp eq i32* %13, null" -> "bitcast i32* %13 to i8*";
"bitcast i32* %13 to i8*" -> "tail call void @_ZdlPv(i8* nonnull %58)";
"tail call void @_ZdlPv(i8* nonnull %58)" -> "store i32* %48, i32** %9, align 8";

"store i32* %48, i32** %9, align 8" -> "store i32* %55, i32** %7, align 8";
"store i32* %55, i32** %7, align 8" -> "getelementr inbounds i32, i32* %48, i64 %40";
"getelementr inbounds i32, i32* %48, i64 %40" -> "store i32* %60, i32** %8, align 8";

"store i32* %60, i32** %8, align 8" -> "br label %71";
"br label %71" -> "phi i32* [ %48, %59 ], [ %13, %23 ], [ %13, %12 ]";
"phi i32* [ %48, %59 ], [ %13, %23 ], [ %13, %12 ]" -> "phi i32* [ %60, %59 ], [ %14, %23 ], [ %14, %12 ]";
"phi i32* [ %60, %59 ], [ %14, %23 ], [ %14, %12 ]" -> "phi i32* [ %55, %59 ], [ %24, %23 ], [ %15, %12 ]";
"phi i32* [ %55, %59 ], [ %24, %23 ], [ %15, %12 ]" -> "add i32 %16, 1";

"add i32 %16, 1" -> "icmp eq i32 %16, %5";
"icmp eq i32 %16, %5" -> "br i1 %76, label %11, label %12";
"br i1 %76, label %11, label %12" -> "ret void";

}
```