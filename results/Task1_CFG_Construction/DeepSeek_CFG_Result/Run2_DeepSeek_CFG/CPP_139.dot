<think>
Alright, let's see what the user is asking for here. They've provided a chunk of IR code and want me to generate a control flow graph in dot format. The nodes should just have labels, not the full contents of each basic block.

First, I need to parse the IR code to identify all the basic blocks. Each label in the code represents a basic block. Looking through the code, I see labels like 3, 10, 12, 18, 28, and 30. So that's six nodes in total.

Next, I need to determine the edges between these nodes. I'll go through the code to see where each branch instruction points. For example, after the initial comparison at the beginning, there's a branch to 28 or 3. So node 1 (or the entry) connects to 28 and 3.

Then, in block 3, there's a branch to 12 or 10. So node 3 connects to 12 and 10. Block 10 has a branch to 30, so node 10 connects to 30. Block 12 has a branch to 28 or 18, so node 12 connects to 28 and 18.

Block 18 is a loop, so it branches back to itself and eventually to 28. So node 18 connects to itself and to 28. Block 30 connects back to itself and to 12. Finally, block 28 is the exit, so it doesn't connect anywhere else.

Putting it all together, I'll map out each connection. I should make sure the dot file accurately represents these edges without including any unnecessary details. I'll label each node with its number for simplicity.

I think that's all the user needs. They just want the structure, not the nitty-gritty details of each block. I'll present the dot code clearly so they can visualize the control flow easily.
</think>

Here is the control flow graph in dot file format showing the basic blocks and their connections:

```dot
digraph CFG {
    node [shape=box, style=filled];

    1 [label="Entry"];
    28 [label="28"];
    3 [label="3"];
    10 [label="10"];
    12 [label="12"];
    18 [label="18"];
    30 [label="30"];

    1 -> 28;
    1 -> 3;

    3 -> 12;
    3 -> 10;

    10 -> 30;

    12 -> 28;
    12 -> 18;

    18 -> 18;
    18 -> 28;

    30 -> 30;
    30 -> 12;
}
```

This graph shows the control flow between the basic blocks in the program. Each node represents a basic block, and edges represent control flow between blocks. The blocks are labeled with their respective numbers from the IR code.