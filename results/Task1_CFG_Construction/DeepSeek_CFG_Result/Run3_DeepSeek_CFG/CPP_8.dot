<think>
Alright, I'm trying to figure out how to create a control flow graph (CFG) from the given IR code. I remember that a CFG represents the flow of control within a program, showing how the execution moves from one basic block to another.

First, I need to identify the basic blocks. A basic block is a sequence of instructions without any branches or labels except at the beginning. So, I'll look through the IR code for labels like %2, %11, %15, etc. Each label marks the beginning of a new basic block.

Looking at the code, I see that it starts at label %2. From there, it goes to %11 if a certain condition is met. So, I'll draw an edge from %2 to %11. Then, within %11, there's a conditional branch to either %87 or %15. That means another edge from %11 to %87 and another to %15.

Next, I see that %15 has its own conditional branch to either %55 or %22. So, I'll add edges from %15 to %55 and %15 to %22. The %22 block seems to loop back to itself and also goes to %24. So, there's an edge from %22 to %24 and a loop edge from %24 back to itself.

From %24, it can go back to itself or move to %55. So, another edge from %24 to %55. The %55 block has a conditional to either %77 or %66, so edges from %55 to both. Then, %66 goes to %77, adding an edge there.

The %77 block goes to %87, so an edge from %77 to %87. The %87 block loops back to itself and also goes to %105. So, edges from %87 to %87 (a loop) and to %105. 

Finally, %105 can loop back to itself or go to %91. So, edges from %105 to itself and to %91. The %91 block is the exit point, so it ends there.

Putting it all together, I'll represent each basic block as a node and each possible control flow path as a directed edge between them. This way, the CFG accurately shows how the program's control can move through different blocks based on conditions and loops.
</think>

Here is the control flow graph in dot file format:

```dot
digraph CFG {
    node[shape=box, style=filled, color=lightblue];
    
    start -> 2;
    
    2 -> 11 [label = "cond"];
    2 -> 91 [label = "cond"];
    
    11 -> 87 [label = "cond"];
    11 -> 15 [label = "cond"];
    
    15 -> 55 [label = "cond"];
    15 -> 22 [label = "cond"];
    
    22 -> 24 [label = "uncond"];
    24 -> 24 [label = "loop"];
    24 -> 55 [label = "cond"];
    
    55 -> 77 [label = "cond"];
    55 -> 66 [label = "cond"];
    
    66 -> 77 [label = "uncond"];
    
    77 -> 87 [label = "uncond"];
    
    87 -> 105 [label = "uncond"];
    87 -> 87 [label = "loop"];
    
    105 -> 91 [label = "cond"];
    105 -> 105 [label = "loop"];
    
    91 -> end;
}
```

This dot file shows the control flow between basic blocks, with edges representing possible control flow paths. Each node represents a basic block in the code. You can visualize this graph using tools like Graphviz.