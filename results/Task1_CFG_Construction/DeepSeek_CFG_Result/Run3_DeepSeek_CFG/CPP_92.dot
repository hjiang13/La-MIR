<think>
Okay, so I need to figure out how to create a control flow graph (CFG) from the given IR code. I'm a bit new to this, but I'll try to break it down step by step.

First, I should understand what the IR code is doing. The code is in LLVM IR format, which I know is a intermediate representation used by compilers. The function in question is `_Z7any_intfff`, which I think translates to a function named `any_int` taking three floats as arguments.

Looking at the code, the function starts with some metadata and then defines the function with attributes. The main part is the body of the function. I see several basic blocks, each starting with a label like `%3`, `%12`, `%21`, etc.

I remember that in a CFG, each node represents a basic block, which is a sequence of instructions ending in a branch or a return. The edges represent the flow of control between these blocks.

So, I'll start by identifying all the basic blocks in the code. The function begins at label `%3`, which is the entry point. Then, there are labels `%12` and `%21`. Each of these is a basic block.

Next, I'll look at how these blocks are connected. The first instruction after `%3` is a `tail call` to `llvm.round.f32` for the first float argument. Then, there are some comparisons and a `select` instruction that chooses between two conditions. This leads to a branch instruction: `br i1 %11, label %21, label %12`. So, this means if `%11` is true, it branches to `%21`, otherwise to `%12`.

Moving on, block `%12` starts with `fadd float %0, %1` and some comparisons. It ends with `br label %21`, meaning it always branches to `%21`.

Block `%21` has a `phi` instruction, which I think is used to merge values from different predecessors. It ends with `ret i1 %22`, so this is the exit point returning a boolean.

Putting it all together, the CFG has three nodes: the entry block `%3`, block `%12`, and block `%21`. The edges are from `%3` to `%21` (if `%11` is true), from `%3` to `%12` (if `%11` is false), and from `%12` to `%21`.

I think I've got all the connections right. Now, I'll represent this as a dot file, showing each node and the edges between them without including the detailed instructions.
</think>

To create the control flow graph (CFG) from the provided IR code, we identify the basic blocks and their connections. Each basic block is a node, and edges represent control flow between them.

### Step-by-Step Explanation:

1. **Identify Basic Blocks:**
   - `%3`: Entry block.
   - `%12`: Second block, starts with `fadd float %0, %1`.
   - `%21`: Exit block with `ret i1 %22`.

2. **Determine Control Flow:**
   - From `%3`, there's a conditional branch to `%21` if `%11` is true, else to `%12`.
   - From `%12`, an unconditional branch to `%21`.

3. **Construct the CFG:**
   - Nodes: `%3`, `%12`, `%21`.
   - Edges: `%3` → `%21` (if true), `%3` → `%12` (if false), `%12` → `%21`.

### Control Flow Graph in Dot Format:

```dot
digraph CFG {
    node [shape=box];
    "%3" -> "%12" [label = "false"];
    "%3" -> "%21" [label = "true"];
    "%12" -> "%21";
}
```

This dot file represents the CFG with nodes as basic blocks and edges showing control flow.