<think>
Okay, so I'm trying to figure out how to create a control flow graph (CFG) from the given IR code. I'm new to this, so I'll take it step by step.

First, I remember that a CFG represents the flow of control through a program, showing the different paths execution can take. Each node in the graph is a basic block, and edges represent jumps between blocks.

Looking at the IR code, I see it's a function named @_Z11rolling_maxSt6vectorIiSaIiEE. The code starts with some setup, like bitcasting and memset calls. Then there are labels like 12, 13, etc., which I think are the basic blocks.

I need to identify each label as a node. The first block is the entry point, which seems to be right after the function definition. Then, it checks if two pointers are equal and branches to either label 12 or 13. So that's a conditional jump, meaning there's an edge from the entry block to block 12 and another to block 13.

Next, block 12 just returns void, so it's an exit point. Block 13 seems more complex. It has several phi nodes, which I think are used for variable assignments that depend on the path taken. Then it compares two values and branches again to either block 28 or 26.

Block 26 stores a value, updates a pointer, and then jumps to block 66. Block 28 does some calculations and then either throws an error via block 34 or proceeds to block 36. Block 34 calls a function and is marked as noreturn, so it probably exits the function.

Block 36 checks another condition and selects a value. It then checks if the result is zero and branches to either block 50 or 45. Block 45 allocates memory and then proceeds to block 50. Block 50 does some more operations, including a memmove if certain conditions are met.

Block 57 has some checks and might call a destructor before proceeding. Block 62 updates some pointers and then loops back to block 66. Block 66 seems to be a loop, as it has a phi node for the loop variable and checks whether to continue looping or exit.

There are also exception handling blocks, like 78, 80, 82, 85, 87, which handle errors and cleanup. These are part of the function's exception handling mechanism.

Putting it all together, I'll map each label as a node and draw edges based on the control flow. The loop from 66 back to 13 indicates a cycle in the graph. Each block's successors are determined by the 'br' instructions or function calls that transfer control.

I might have missed some details, especially with the phi nodes and exception handling, but I think this covers the main structure of the CFG.
</think>

To construct the control flow graph (CFG) from the provided IR code, we identify each basic block (labeled with numbers) and the control flow between them. Here's a simplified representation of the CFG:

1. **Node 2**: Entry block.
2. **Node 12**: Exit block (ret void).
3. **Node 13**: Contains phi nodes and conditional branches.
4. **Node 26**: Stores a value and jumps to Node 66.
5. **Node 28**: Performs calculations and branches based on conditions.
6. **Node 34**: Throws an error and exits.
7. **Node 36**: Checks conditions and selects values.
8. **Node 45**: Allocates memory and proceeds to Node 50.
9. **Node 48**: Continues from memory allocation.
10. **Node 50**: Performs operations, possibly including memmove.
11. **Node 57**: Checks conditions and may call a destructor.
12. **Node 62**: Updates pointers and jumps back to Node 66.
13. **Node 66**: Loop block that may return to Node 13 or exit to Node 12.
14. **Exception Handling Blocks (78, 80, 82, 85, 87)**: Handle errors and cleanup.

The edges represent the control flow between these blocks based on conditional jumps and function calls.

Here's the CFG in dot format:

```dot
digraph CFG {
    node[shape=box, style=filled];

    entry[ label="2" ]
    node12[ label="12" ]
    node13[ label="13" ]
    node26[ label="26" ]
    node28[ label="28" ]
    node34[ label="34" ]
    node36[ label="36" ]
    node45[ label="45" ]
    node48[ label="48" ]
    node50[ label="50" ]
    node57[ label="57" ]
    node62[ label="62" ]
    node66[ label="66" ]
    node78[ label="78" ]
    node80[ label="80" ]
    node82[ label="82" ]
    node85[ label="85" ]
    node87[ label="87" ]

    entry -> node12
    entry -> node13

    node12 -> node12

    node13 -> node26
    node13 -> node28

    node26 -> node66

    node28 -> node34
    node28 -> node36

    node34 -> node34

    node36 -> node45
    node36 -> node50

    node45 -> node48

    node48 -> node50

    node50 -> node57
    node50 -> node54
    node50 -> node57

    node57 -> node62
    node57 -> node60

    node60 -> node62

    node62 -> node66

    node66 -> node13
    node66 -> node12

    node78 -> node82

    node80 -> node82

    node82 -> node87
    node82 -> node85

    node85 -> node87

    node87 -> node87
}
```

This graph illustrates the control flow paths, including loops and exception handling. Each node represents a basic block, and edges show possible execution paths.