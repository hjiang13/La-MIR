Sure, here's the control flow graph for the given IR code program:

digraph {
    node [shape=box];

    "entry" [label="Entry"];
    "main" [label="Main"];
    "digit" [label="digit"];
    "to_xstring" [label="to_xstring"];
    "vsnprintf" [label="vsnprintf"];
    "llvm.va_start" [label="llvm.va_start"];
    "llvm.va_end" [label="llvm.va_end"];
    "llvm.memcpy.p0i8.p0i8.i64" [label="llvm.memcpy.p0i8.p0i8.i64"];
    "llvm.lifetime.start.p0i8" [label="llvm.lifetime.start.p0i8"];
    "llvm.lifetime.end.p0i8" [label="llvm.lifetime.end.p0i8"];
    "llvm.memset.p0i8.i64" [label="llvm.memset.p0i8.i64"];
    "llvm.dbg.value" [label="llvm.dbg.value"];

    "entry" -> "main" [label=""];
    "main" -> "digit" [label=""];
    "digit" -> "to_xstring" [label=""];
    "to_xstring" -> "vsnprintf" [label=""];
    "vsnprintf" -> "llvm.va_start" [label=""];
    "llvm.va_start" -> "llvm.va_end" [label=""];
    "llvm.va_end" -> "llvm.memcpy.p0i8.p0i8.i64" [label=""];
    "llvm.memcpy.p0i8.p0i8.i64" -> "llvm.lifetime.start.p0i8" [label=""];
    "llvm.lifetime.start.p0i8" -> "llvm.lifetime.end.p0i8" [label=""];
    "llvm.lifetime.end.p0i8" -> "llvm.memset.p0i8.i64" [label=""];
    "llvm.memset.p0i8.i64" -> "llvm.dbg.value" [label=""];
    "llvm.dbg.value" -> "exit" [label=""];
}

Note that this is a simplified representation of the control flow graph, and some nodes and edges may be missing. Additionally, the actual control flow graph for this program may be more complex and contain additional nodes and edges that are not shown here.