Sure, here's the control flow graph for the given LLVM IR code:
```
digraph G {
    node [shape=box];

    "entry" [label="entry"];
    "add" [label="add"];
    "ret" [label="ret"];

    "entry" -> "add" -> "ret";
}
```
Here's the interpretation of the graph:

* The `entry` node represents the entry point of the function.
* The `add` node represents the addition operation.
* The `ret` node represents the return operation.
* The edges between the nodes represent the control flow between them. In this case, there is a single edge from `entry` to `add`, and another edge from `add` to `ret`.

Note that the content of each basic block is not shown in the graph, as you requested. However, the graph still provides a high-level overview of the control flow of the program.