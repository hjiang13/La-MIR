Here is the control flow graph for the input IR code:
```
digraph G {
    node [shape=box];
    0 [label="Start"];
    1 [label="End"];
    2 [label="getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 1"];
    3 [label="getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 2"];
    4 [label="getelementptr inbounds %"class.std::vector", %"class.std::vector"* %0, i64 0, i32 0, i32 0, i32 0, i32 0"];
    5 [label="bitcast %"class.std::vector"* %0 to i8*"];
    6 [label="call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(24) %10, i8 0, i64 24, i1 false)"];
    7 [label="phi i32* [ null, %3 ], [ %72, %71 ]"];
    8 [label="phi i32* [ null, %3 ], [ %73, %71 ]"];
    9 [label="phi i32* [ null, %3 ], [ %74, %71 ]"];
    10 [label="phi i32 [ %6, %3 ], [ %75, %71 ]"];
    11 [label="icmp slt i32 %10, 10"];
    12 [label="and i32 %10, 1"];
    13 [label="icmp eq i32 %12, 0"];
    14 [label="and i1 %11, %13"];
    15 [label="br i1 %14, label %21, label %71"];
    16 [label="ret void"];
    17 [label="phi i32* [ %48, %59 ], [ %13, %23 ], [ %13, %12 ]"];
    18 [label="phi i32* [ %60, %59 ], [ %14, %23 ], [ %14, %12 ]"];
    19 [label="phi i32* [ %55, %59 ], [ %24, %23 ], [ %15, %12 ]"];
    20 [label="add i32 %16, 1"];
    21 [label="icmp eq i32 %20, %5"];
    22 [label="br i1 %21, label %11, label %12, !llvm.loop !12"];
    23 [label="store i32 %16, i32* %15, align 4, !tbaa !3"];
    24 [label="getelementptr inbounds i32, i32* %15, i64 1"];
    25 [label="store i32* %24, i32** %7, align 8, !tbaa !7"];
    26 [label="br label %71"];
    27 [label="icmp sgt i64 %28, 0"];
    28 [label="br i1 %27, label %31, label %33"];
    29 [label="invoke void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0)) #6"];
    30 [label="unreachable"];
    31 [label="shl nuw nsw i64 %40, 2"];
    32 [label="invoke noalias nonnull i8* @_Znwm(i64 %43) #7"];
    33 [label="icmp eq i64 %28, 0"];
    34 [label="select i1 %33, i64 1, i64 %29"];
    35 [label="icmp ult i64 %34, 2305843009213693951"];
    36 [label="or i1 %35, %37"];
    37 [label="select i1 %36, i64 2305843009213693951, i64 %34"];
    38 [label="icmp eq i64 %37, 0"];
    39 [label="br i1 %38, label %47, label %42"];
    40 [label="getelementptr inbounds i32, i32* %48, i64 %29"];
    41 [label="store i32 %16, i32* %40, align 4, !tbaa !3"];
    42 [label="icmp sgt i64 %28, 0"];
    43 [label="br i1 %42, label %45, label %44"];
    44 [label="tail call void @llvm.memove.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 %28, i1 false) #8"];
    45 [label="bitcast i8* %44 to i32*"];
    46 [label="store i32* %46, i32** %9, align 8, !tbaa !10"];
    47 [label="store i32* %50, i32** %7, align 8, !tbaa !7"];
    48 [label="getelementptr inbounds i32, i32* %48, i64 %40"];
    49 [label="store i32* %49, i32** %8, align 8, !tbaa !11"];
    50 [label="br label %71"];
    51 [label="phi { i8*, i32 } [ %62, %61 ], [ %64, %63 ]"];
    52 [label="icmp eq i32* %13, null"];
    53 [label="tail call void @_ZdlPv(i8* nonnull %58) #8"];
    54 [label="resume { i8*, i32 } %66"];
    55 [label="phi { i8*, i32 } [ %62, %61 ], [ %64, %63 ]"];
    56 [label="icmp eq i32* %13, null"];
    57 [label="tail call void @_ZdlPv(i8* nonnull %69) #8"];
    58 [label="resume { i8*, i32 } %66"];
}
```
Note that the control flow graph is a directed graph, where each node represents a basic block in the program and each edge represents a control flow edge between two basic blocks. The nodes are labeled with the corresponding basic block names in the IR code.