Sure, here's the control flow graph for the given IR code:
```dot
digraph {
    node [shape=box];
    0 [label="Start"];
    1 [label="is_equal_to_sum_even"];
    2 [label="and"];
    3 [label="icmp eq"];
    4 [label="icmp sgt"];
    5 [label="and"];
    6 [label="ret"];
    7 [label="End"];
    0 -> 1;
    1 -> 2;
    2 -> 3;
    3 -> 4;
    4 -> 5;
    5 -> 6;
    6 -> 7;
    7 -> 0;
}
```
In this graph, the nodes represent the basic blocks in the program, and the edges represent the control flow between them. The `Start` and `End` nodes represent the entry and exit points of the program, respectively. The `is_equal_to_sum_even` node represents the `is_equal_to_sum_even` function, which is the main entry point for the program. The `and` node represents the `and` instruction, which performs a bitwise AND operation on two integers. The `icmp eq` node represents the `icmp eq` instruction, which compares two integers for equality. The `icmp sgt` node represents the `icmp sgt` instruction, which compares two integers for signed greater than. The `and` node represents the second `and` instruction, which performs a bitwise AND operation on the result of the previous `and` instruction and the result of the `icmp sgt` instruction. The `ret` node represents the `ret` instruction, which returns the result of the `and` instruction.

Note that this graph only shows the control flow between the basic blocks, and does not include the content of each basic block. The content of each basic block can be obtained by examining the IR code for the program.