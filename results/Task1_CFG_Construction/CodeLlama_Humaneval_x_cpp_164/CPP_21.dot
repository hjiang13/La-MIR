Sure, I'd be happy to help you with that!

The IR code you provided is a bit long, so I'll break down the steps to generate the control flow graph into smaller chunks.

1. First, we need to parse the IR code and extract the basic blocks. A basic block is a sequence of instructions that always execute together. In LLVM IR, basic blocks are represented by a pair of curly braces (`{}`) and are separated by a semicolon (`;`).
2. Once we have the basic blocks, we need to identify the edges between them. An edge represents a control flow transfer between two basic blocks. In LLVM IR, edges are represented by a `br` instruction, which stands for "branch."
3. With the basic blocks and edges identified, we can now generate the control flow graph. We can do this using a graph library such as Graphviz.

Here's an example of how we might generate the control flow graph for the IR code you provided using Graphviz:
```
digraph CFG {
    node [shape=box];
    edge [arrowhead=vee];

    // Basic blocks
    bb1 [label="entry"];
    bb2 [label="if (%11 < %12)"];
    bb3 [label="else"];
    bb4 [label="if (%13 < %14)"];
    bb5 [label="else"];
    bb6 [label="if (%15 < %16)"];
    bb7 [label="else"];
    bb8 [label="return %17"];

    // Edges
    bb1 -> bb2 [label="true"];
    bb1 -> bb3 [label="false"];
    bb2 -> bb4 [label="true"];
    bb2 -> bb5 [label="false"];
    bb3 -> bb6 [label="true"];
    bb3 -> bb7 [label="false"];
    bb4 -> bb8 [label="true"];
    bb5 -> bb8 [label="false"];
    bb6 -> bb8 [label="true"];
    bb7 -> bb8 [label="false"];
}
```
This code will generate a graph with 8 basic blocks and 12 edges, representing the control flow of the program. The basic blocks are represented by boxes, and the edges are represented by arrows. The `bb` labels indicate the order in which the basic blocks appear in the program.

Note that this is just one way to generate the control flow graph for the IR code. There are many other ways to do it, depending on the specific requirements of the program and the tools you're using.