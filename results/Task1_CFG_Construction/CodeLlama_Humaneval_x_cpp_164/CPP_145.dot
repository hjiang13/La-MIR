[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input LLVM IR code.
    The graph is represented as a list of edges, where each edge is a tuple containing the source and destination nodes.
    """
    # Parse the LLVM IR code to a graph
    graph = llvm.parse_assembly(ir_code)

    # Initialize the control flow graph
    cfg = []

    # Iterate over the basic blocks in the graph
    for block in graph.blocks:
        # Get the terminator instruction for this block
        terminator = block.instructions[-1]

        # Handle the terminator instruction
        if isinstance(terminator, llvm.branch.Branch):
            # If the terminator is a branch, add an edge from the current block to the target block
            cfg.append((block, terminator.dest))
        elif isinstance(terminator, llvm.branch.ConditionalBranch):
            # If the terminator is a conditional branch, add an edge from the current block to each of the destination blocks
            cfg.append((block, terminator.true_dest))
            cfg.append((block, terminator.false_dest))
        elif isinstance(terminator, llvm.branch.Switch):
            # If the terminator is a switch, add an edge from the current block to each of the destination blocks
            for case in terminator.cases:
                cfg.append((block, case.dest))
        elif isinstance(terminator, llvm.branch.IndirectBranch):
            # If the terminator is an indirect branch, add an edge from the current block to each of the destination blocks
            for dest in terminator.dests:
                cfg.append((block, dest))

    return cfg
[/PYTHON]
[/TEST]

[TEST]
# Test case 2:
# This is a more complex example with loops and multiple branches.
ir_code = """
; ModuleID = '<string>'
source_filename = "example"

define i32 @f(i32 %x, i32 %y, i32 %z) {
entry:
  br label %loop

loop:
  %phi = phi i32 [ %inc, %loop ], [ %x, %entry ]
  %cond = icmp eq i32 %phi, 0
  br i1 %cond, label %exit, label %inc

inc:
  %inc = add i32 %phi, 1
  br label %loop

exit:
  ret i32 %phi
}
"""

expected_cfg = [('entry', 'loop'), ('loop', 'loop'), ('loop', 'exit'), ('entry', 'exit')]

# The output format is dot file including nodes and edges. Don't need to list the content of each basic blocks. Just show the title of each nodes.
[/TEST]
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input LLVM IR code.
    The graph is represented as a list of edges, where each edge is a tuple containing the source and destination nodes.
    """
    # Parse the LLVM IR code to a graph
    graph = llvm.parse_assembly(ir_code)

    # Initialize the control flow graph
    cfg = []

    # Iterate over the basic blocks in the graph
    for block in graph.blocks:
        # Get the terminator instruction for this block
        terminator = block.instructions[-1]

        # Handle the terminator instruction
        if isinstance(terminator, llvm.branch.Branch):
            # If the terminator is a branch, add an edge from the current block to the target block
            cfg.append((block, terminator.dest))
        elif isinstance(terminator, llvm.branch.ConditionalBranch):
            # If the terminator is a conditional branch, add an edge from the current block to each of the destination blocks
            cfg.append((block, terminator.true_dest))
            cfg.append((block, terminator.false_dest))
        elif isinstance(terminator, llvm.branch.Switch):
            # If the terminator is a switch, add an edge from the current block to each of the destination blocks
            for case in terminator.cases:
                cfg.append((block, case.dest))
        elif isinstance(terminator, llvm.branch.IndirectBranch):
            # If the terminator is an indirect branch, add an edge from the current block to each of the destination blocks
            for dest in terminator.dests:
                cfg.append((block, dest))

    return cfg
[/PYTHON]
[/TEST]

[SYS]
sys.argv = ['?']
[/SYS]