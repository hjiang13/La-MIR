[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 2:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 3:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 4:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 5:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 6:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 7:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 8:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 9:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 10:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes, where each node is a set of BB names.
    """
    # Parse the IR code and extract the basic blocks
    bbs = []
    for line in ir_code.split('\n'):
        if line.startswith('bb.'):
            bbs.append(line.split(' <')[0])

    # Create a graph as a dictionary of nodes, where each node is a set of BB names
    graph = {}
    for bb in bbs:
        graph[bb] = set()

    # Add edges to the graph by parsing the branch instructions
    for bb in bbs:
        for line in ir_code.split('\n'):
            if line.startswith('  br ') and line.split(' ')[1] == bb:
                graph[bb].add(line.split(' ')[2])

    return graph
[/PYTHON]
[/TEST]

[TEST]
# Test case 11:
=======
[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input