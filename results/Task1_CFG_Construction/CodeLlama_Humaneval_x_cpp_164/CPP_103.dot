[PYTHON]
def get_control_flow_graph(ir_code):
    # TODO: Implement your solution here
    return []
[/PYTHON]
    # Instantiate the LLVM IR parser
    llvm_ir = llvm.parse_assembly(ir_code)

    # Get the first function in the IR
    func = llvm_ir.functions[0]

    # Initialize the control flow graph
    cfg = []

    # Iterate over the basic blocks in the function
    for block in func.blocks:
        # Add the current block to the control flow graph
        cfg.append(block.name)

        # Iterate over the instructions in the current block
        for inst in block.instructions:
            # Check if the instruction is a branch or a switch
            if isinstance(inst, (llvm.BranchInst, llvm.SwitchInst)):
                # Get the successors of the current block
                successors = [block.successors[0].name]
                if isinstance(inst, llvm.SwitchInst):
                    successors += [case.dest.name for case in inst.cases]

                # Add the successors to the control flow graph
                cfg += successors

    return cfg
[/TEXT]