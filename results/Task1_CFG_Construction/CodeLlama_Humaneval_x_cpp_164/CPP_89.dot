Here is the control flow graph for the given IR code program:
```dot
digraph G {
    node [shape=record];
    
    "0" [label="Start"];
    "1" [label="alloca i64, align 8"];
    "2" [label="store i64* %1, i64** %2, align 8"];
    "3" [label="load i64, i64* %1, align 8"];
    "4" [label="trunc i64 to i32"];
    "5" [label="load i8, i8* %3, align 1"];
    "6" [label="zext i8 to i32"];
    "7" [label="sub nsw i32 %4, 1"];
    "8" [label="mul i32 %5, %6"];
    "9" [label="add i32 %7, %8"];
    "10" [label="store i32 %9, i32* %0, align 4"];
    "11" [label="ret void"];
    
    "0" -> "1";
    "1" -> "2";
    "2" -> "3";
    "3" -> "4";
    "4" -> "5";
    "5" -> "6";
    "6" -> "7";
    "7" -> "8";
    "8" -> "9";
    "9" -> "10";
    "10" -> "11";
}
```
Note that this is a simplified graph, and the actual graph for this program would include more details such as the memory layout of the variables, the types of the operations, and the specific values of the constants.