Sure, I'd be happy to help! The control flow graph for the given IR code program can be constructed using the following steps:

1. Identify the basic blocks in the code. A basic block is a sequence of instructions that always executes from start to end. In this case, the basic blocks are:
	* Block 1: The entry point of the function.
	* Block 2: The loop header.
	* Block 3: The loop body.
	* Block 4: The loop tail.
	* Block 5: The exit point of the function.
2. Draw a graph with the basic blocks as nodes. Each node should have a label indicating the block number.
3. Add edges between the nodes to represent the control flow between the blocks. The edges should be labeled with the type of control flow (e.g., "true" for a branch that is always taken, "false" for a branch that is never taken, etc.).

Here is the resulting control flow graph:
```
digraph {
  node [shape=box, style=filled, fillcolor=white, fontname=Helvetica]
  edge [arrowhead=vee, arrowsize=0.5]
  
  // Nodes
  entry [label="Block 1"]
  loop_header [label="Block 2"]
  loop_body [label="Block 3"]
  loop_tail [label="Block 4"]
  exit [label="Block 5"]
  
  // Edges
  entry -> loop_header [label="true"]
  loop_header -> loop_body [label="true"]
  loop_body -> loop_tail [label="true"]
  loop_tail -> exit [label="true"]
}
```
Note that this is just one possible control flow graph for the given IR code program. There may be other valid control flow graphs depending on the specific implementation details.