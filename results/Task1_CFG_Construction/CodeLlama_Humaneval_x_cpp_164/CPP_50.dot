[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a list of nodes, where each node is a tuple containing
    the node id, the block id, and the type of node (i.e., block start, block end, or instruction).
    """
    # Parse the IR code to extract the block and instruction IDs
    block_ids = []
    instruction_ids = []
    for line in ir_code.split('\n'):
        if ':' in line:
            block_id = int(line.split(':')[0])
            block_ids.append(block_id)
            instructions = line.split(':')[1].split(', ')
            for instruction in instructions:
                instruction_ids.append((block_id, instruction))

    # Create a graph where each node represents a block or instruction
    nodes = []
    for block_id in block_ids:
        nodes.append((block_id, block_id, 'block_start'))
        nodes.append((block_id + 1, block_id, 'block_end'))
    for instruction_id in instruction_ids:
        nodes.append((instruction_id[0], instruction_id[1], 'instruction'))

    # Add edges between nodes based on the control flow of the program
    edges = []
    for i in range(len(nodes)):
        current_node = nodes[i]
        if current_node[2] == 'block_start':
            edges.append((current_node[0], current_node[1], 'fallthrough'))
        elif current_node[2] == 'instruction':
            if i + 1 < len(nodes) and nodes[i + 1][1] == current_node[1]:
                edges.append((current_node[0], nodes[i + 1][0], 'fallthrough'))
            else:
                edges.append((current_node[0], current_node[1], 'branch'))
        elif current_node[2] == 'block_end':
            if i + 1 < len(nodes) and nodes[i + 1][1] == current_node[1]:
                edges.append((current_node[0], nodes[i + 1][0], 'fallthrough'))
            else:
                edges.append((current_node[0], current_node[1], 'return'))

    return nodes, edges


def generate_dot_file(nodes, edges):
    """
    Generates a DOT file based on the provided nodes and edges.
    """
    dot_file = 'digraph CFG {\n'
    for node in nodes:
        dot_file += '    {} [label="{}"]\n'.format(node[0], node[1])
    for edge in edges:
        dot_file += '    {} -> {} [label="{}"]\n'.format(edge[0], edge[1], edge[2])
    dot_file += '}'
    return dot_file


if __name__ == '__main__':
    ir_code = """
    ; ModuleID = '../../Human_xBenchmarks_164/CPP_50/CPP_50.cpp'
    source_filename = "../../Human_xBenchmarks_164/CPP_50/CPP_50.cpp"
    target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
    target triple = "x86_64-unknown-linux-gnu"

    ; Function Attrs: uwtable
    define dso_local void @_Z12encode_shiftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
    bb0:
      %3 = alloca i64, align 8
      %4 = alloca %"class.std::__cxx11::basic_string", align 8
      %5 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
      %6 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
      store %union.anon* %5, %union.anon** %6, align 8, !tbaa !3
      %7 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
      store i64 0, i64* %7, align 8, !tbaa !8
      %8 = bitcast %union.anon* %5 to i8*
      store i8 0, i8* %8, align 8, !tbaa !11
      %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
      %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
      %11 = bitcast %"class.std::__cxx11::basic_string"* %4 to i8*
      %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2
      %13 = bitcast %"class.std::__cxx11::basic_string"* %4 to %union.anon**
      %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
      %15 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
      %16 = bitcast i64* %3 to i8*
      %17 = bitcast %union.anon* %12 to i8*
      %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 0, i32 0
      %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2, i32 0
      %20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 1
      %21 = load i64, i64* %9, align 8, !tbaa !8
      %22 = icmp eq i64 %21, 0
      br i1 %22, label %105, label %23

    bb1:
      %24 = bitcast i64* %19 to <2 x i64>*
      %25 = bitcast i64* %7 to <2 x i64>*
      br label %26

    bb2:
      %27 = phi i64 [ %96, %94 ], [ 0, %23 ]
      %28 = phi i8* [ %95, %94 ], [ %8, %23 ]
      %29 = phi i64 [ %91, %94 ], [ 0, %23 ]
      %30 = load i8*, i8** %10, align 8, !tbaa !12
      %31 = getelementptr inbounds i8, i8* %30, i64 %29
      %32 = load i8, i8* %31, align 1, !tbaa !11
      %33 = sext i8 %32 to i16
      %34 = add nsw i16 %33, -92
      %35 = srem i16 %34, 26
      %36 = trunc i16 %35 to i8
      call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
      %37 = add nsw i8 %36, 97
      call void @llvm.experimental.noalias.scope.decl(metadata !13)
      store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3, !alias.scope !13
      call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13
      store i64 %27, i64* %3, align 8, !tbaa !16, !noalias !13
      %38 = icmp ugt i64 %27, 15
      br i1 %38, label %39, label %43

    bb3:
      %40 = invoke i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i64* nonnull align 8 dereferenceable(8) %3, i64 0)
          to label %41 unwind label %97

    bb4:
      store i8* %40, i8** %17, align 8, !tbaa !12, !alias.scope !13
      %42 = load i64, i64* %3, align 8, !tbaa !16, !noalias !13
      store i64 %42, i64* %19, align 8, !tbaa !11, !alias.scope !13
      br label %43

    bb5:
      %44 = phi i8* [ %40, %41 ], [ %16, %26 ]
      switch i64 %27, label %47 [
        i64 1, label %45
        i64 0, label %48
      ]

    bb6:
      %46 = load i8, i8* %28, align 1, !tbaa !11
      store i8 %46, i8* %44, align 1, !tbaa !11
      br label %48

    bb7:
      call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %28, i64 %27, i1 false) #6
      br label %48

    bb8:
      %49 = load i64, i64* %19, align 8, !tbaa !8, !alias.scope !13
      store i64 %49, i64* %20, align 8, !tbaa !8, !alias.scope !13
      %50 = load i8*, i8** %17, align 8, !tbaa !12
      %51 = icmp eq i8* %50, %16
      br i1 %51, label %99, label %58

    bb9:
      call void @_ZdlPv(i8* %50) #6
      br label %99

    bb10:
      store i8* %50, i8** %17, align 8, !tbaa !12
      store i64 %49, i64* %18, align 8, !tbaa !11
      %52 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !13
      %53 = getelementptr inbounds i8, i8* %52, i64 %49
      store i8 0, i8* %53, align 1, !tbaa !11
      %54 = load i8*, i8** %17, align 8, !tbaa !12
      br label %55

    bb11:
      call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6, !noalias !13
      %56 = load i64, i64* %19, align 8, !tbaa !8, !alias.scope !13
      %57 = invoke nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %4, i64 %56, i64 0, i64 1, i8 signext %37)
          to label %59 unwind label %54

    bb12:
      store i8* %56, i8** %17, align 8, !tbaa !12
      store i64 %57, i64* %18, align 8, !tbaa !11
      %58 = load i8*, i8** %17, align 8, !tbaa !12
      %59 = icmp eq i8* %58, %16
      br i1 %59, label %62, label %63

    bb13:
      store i8* %58, i8** %17, align 8, !tbaa !12
      store i64 %57, i64* %18, align 8, !tbaa !11
      %60 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !13
      %61 = getelementptr inbounds i8, i8* %60, i64 %57
      store i8 0, i8* %61, align 1, !tbaa !11
      %62 = load i8*, i8** %17, align 8, !tbaa !12
      br label %63

    bb14:
      call void @_ZdlPv(i8* %62) #6
      br label %63

    bb15:
      store %union.anon* %12, %union.anon** %13, align 8, !tbaa !12
      br label %63

    bb16:
      %64 = phi i8* [ %58, %63 ], [ %16, %62 ]
      store i64 0, i64* %19, align 8, !tbaa !8
      store i8 0, i8* %64, align 1, !tbaa !11
      %65 = load i8*, i8** %17, align 8, !tbaa !12
      %66 = icmp eq i8* %65, %16
      br i1 %66, label %90, label %67

    bb17:
      call void @_ZdlPv(i8* %65) #6
      br label %67

    bb18:
      store i8* %65, i8** %17, align 8, !tbaa !12
      store i64 %64, i64* %18, align 8, !tbaa !11
      %68 = load i8*, i8** %14, align 8, !tbaa !12, !noalias !13
      %69 = getelementptr inbounds i8, i8* %68, i64 %64
      store i8 0, i8* %69, align 1, !tbaa !11
      %70 = load i8*, i8** %17, align 8, !tbaa !12
      br label %71

    bb19:
      call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
      %71 = add nuw i64 %29, 1
      %72 = load i64, i64* %9, align 8, !tbaa !8
      %73 = icmp ugt i64 %72, %71
      br i1 %73, label %74, label %105, !llvm.loop !17

    bb20:
      %74 = phi { i8*, i32 } [ %98, %97 ], [ %55, %58 ], [ %55, %54 ]
      call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
      %75 = load i8*, i8** %14, align 8, !tbaa !12
      %76 = icmp eq i8* %75, %8
      br i1 %76, label %77, label %79

    bb21:
      call void @_ZdlPv(i8* %75) #6
      br label %77

    bb22:
      store i8* %75, i8** %17, align 8, !tbaa !12
      store i64 %72, i64* %18, align 8, !tbaa !11
      br label %77

    bb23:
      %78 = phi i8* [ %75, %77 ], [ %16, %79 ]
      store i64 0, i64* %19, align 8, !tbaa !8
      store i8 0, i8* %78, align 1, !tbaa !11
      %79 = load i8*, i