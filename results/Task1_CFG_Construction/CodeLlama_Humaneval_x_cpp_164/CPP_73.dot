Sure, I can help you with that.

The control flow graph of the given IR code program is as follows:
```dot
digraph {
    node[shape=record, style=filled];

    entry[label="entry"];
    iter[label="iter"];
    cond[label="cond"];
    body[label="body"];
    exit[label="exit"];

    entry -> iter[label=""];
    iter -> cond[label=""];
    cond -> body[label="true"];
    cond -> exit[label="false"];
    body -> iter[label=""];
}
```
In this graph, `entry` represents the entry point of the function, `iter` represents the loop iterator, `cond` represents the loop condition, `body` represents the loop body, and `exit` represents the exit point of the function.

The edges between the nodes represent the control flow of the program. For example, the edge from `entry` to `iter` indicates that the control flow starts at the `entry` node and then moves to the `iter` node, and so on.

The nodes are labeled with their corresponding basic block names, which are `entry`, `iter`, `cond`, `body`, and `exit`. The edges are labeled with the conditions or jumps that they represent. For example, the edge from `cond` to `body` is labeled with the condition `true`, which means that the control flow goes to the `body` node if the condition is true. Similarly, the edge from `cond` to `exit` is labeled with the condition `false`, which means that the control flow goes to the `exit` node if the condition is false.

Note that this is just one possible control flow graph for this program, and there may be other possible graphs depending on the specific implementation details.