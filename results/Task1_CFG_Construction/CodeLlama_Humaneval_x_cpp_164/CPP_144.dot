[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph for the given IR code.
    The graph is represented as a list of edges, where each edge is a tuple of the form (source, destination).
    """
    # Parse the IR code to extract the basic blocks
    basic_blocks = parse_ir_code(ir_code)
    # Create a graph object
    graph = []
    # Iterate over the basic blocks and add the edges to the graph
    for block in basic_blocks:
        # Get the label of the current block
        label = block.label
        # Iterate over the successors of the current block
        for successor in block.successors:
            # Add an edge to the graph for each successor
            graph.append((label, successor.label))
    return graph
[/PYTHON]
[TESTS]
# Test case 1:
ir_code = """
b'; ModuleID = \'../../Human_xBenchmarks_164/CPP_144/CPP_144.cpp\'\nsource_filename = "../../Human_xBenchmarks_164/CPP_144/CPP_144.cpp"\ntarget datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"\ntarget triple = "x86_64-unknown-linux-gnu"\n\n%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }\n%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }\n%union.anon = type { i64, [8 x i8] }\n\n@.str = private unnamed_addr constant [21 x i8] c"basic_string::substr\\00", align 1\n@.str.1 = private unnamed_addr constant [55 x i8] c"%s: __pos (which is %zu) > this->size() (which is %zu)\\00", align 1\n\n; Function Attrs: uwtable\ndefine dso_local zeroext i1 @_Z8simplifyNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES4_(%"class.std::__cxx11::basic_string"* nocapture readonly %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {\n  %3 = alloca i64, align 8\n  %4 = alloca i64, align 8\n  %5 = alloca i64, align 8\n  %6 = alloca %"class.std::__cxx11::basic_string", align 8\n  %7 = alloca %"class.std::__cxx11::basic_string", align 8\n  %8 = alloca %"class.std::__cxx11::basic_string", align 8\n  %9 = alloca %"class.std::__cxx11::basic_string", align 8\n  %10 = alloca %"class.std::__cxx11::basic_string", align 8\n  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1\n  %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0\n  %13 = bitcast %"class.std::__cxx11::basic_string"* %6 to i8*\n  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 2\n  %15 = bitcast %union.anon* %14 to i8*\n  %16 = bitcast i64* %5 to i8*\n  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0\n  %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 2, i32 0\n  %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 1\n  %20 = bitcast %"class.std::__cxx11::basic_string"* %7 to i8*\n  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 2\n  %22 = bitcast %union.anon* %21 to i8*\n  %23 = bitcast i64* %4 to i8*\n  %24 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 0, i32 0\n  %25 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 2, i32 0\n  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %7, i64 0, i32 1\n  %27 = bitcast %"class.std::__cxx11::basic_string"* %8 to i8*\n  %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 2\n  %29 = bitcast %union.anon* %28 to i8*\n  %30 = bitcast i64* %3 to i8*\n  %31 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 0, i32 0\n  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 2, i32 0\n  %33 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %8, i64 0, i32 1\n  %34 = load i64, i64* %11, align 8, !tbaa !3\n  %35 = icmp eq i64 %34, 0\n  br i1 %35, label %36, label %57\n\n36:                                               ; preds = %56, %2\n  %37 = phi i32 [ undef, %2 ], [ %55, %56 ]\n  %38 = phi i32 [ undef, %2 ], [ %54, %56 ]\n  %39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1\n  %40 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0\n  %41 = bitcast %"class.std::__cxx11::basic_string"* %9 to i8*\n  %42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %9, i64 0, i32 2\n  %43 = bitcast %"class.std::__cxx11::basic_string"* %9 to %union.anon**\n  %44 = bitcast %union.anon* %42 to i8*\n  %45 = bitcast i64* %4 to i8*\n  %46 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %9, i64 0, i32 0, i32 0\n  %47 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %9, i64 0, i32 2, i32 0\n  %48 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %9, i64 0, i32 1\n  %49 = load i64, i64* %39, align 8, !tbaa !3\n  %50 = icmp eq i64 %49, 0\n  br i1 %50, label %51, label %54\n\n51:                                               ; preds = %53\n  %52 = add nuw i64 %49, 1\n  br label %54\n\n54:                                               ; preds = %51, %53\n  %57 = phi i64 [ %56, %53 ], [ %52, %51 ]\n  %58 = phi i64 [ %55, %53 ], [ 0, %51 ]\n  %59 = phi i32 [ %54, %53 ], [ undef, %51 ]\n  %60 = phi i32 [ %53, %53 ], [ undef, %51 ]\n  %61 = load i8*, i8** %12, align 8, !tbaa !10\n  %62 = getelementptr inbounds i8, i8* %61, i64 %58\n  %63 = load i8, i8* %62, align 1, !tbaa !11\n  %64 = icmp eq i8 %63, 47\n  br i1 %64, label %66, label %65\n\n65:                                               ; preds = %54\n  %67 = add nuw i64 %58, 1\n  br label %53\n\n66:                                               ; preds = %54\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8\n  call void @llvm.experimental.noalias.scope.decl(metadata !12)\n  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !15, !alias.scope !12\n  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8, !noalias !12\n  store i64 %58, i64* %6, align 8, !tbaa !16, !noalias !12\n  %68 = icmp ugt i64 %58, 15\n  br i1 %68, label %69, label %72\n\n69:                                               ; preds = %66\n  %70 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %7, i64* nonnull align 8 dereferenceable(8) %6, i64 0)\n  store i8* %70, i8** %17, align 8, !tbaa !10, !alias.scope !12\n  %71 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  store i64 %71, i64* %18, align 8, !tbaa !11, !alias.scope !12\n  br label %72\n\n72:                                               ; preds = %69, %66\n  %73 = phi i8* [ %70, %69 ], [ %15, %66 ]\n  switch i64 %58, label %75 [\n    i64 1, label %74\n    i64 0, label %76\n  ]\n\n74:                                               ; preds = %72\n  %77 = load i8, i8* %61, align 1, !tbaa !11\n  store i8 %77, i8* %73, align 1, !tbaa !11\n  br label %76\n\n75:                                               ; preds = %72\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* nonnull align 1 %61, i64 %58, i1 false) #8\n  br label %76\n\n76:                                               ; preds = %72, %74, %75\n  %78 = load i64, i64* %6, align 8, !tbaa !16, !noalias !12\n  store i64 %78, i64* %19, align 8, !tbaa !3, !alias.scope !12\n  %79 = load i8*, i8** %17, align 8, !tbaa !10\n  %80 = call i64 @strtol(i8* nocapture nonnull %79, i8** null, i32 10) #8\n  %81 = trunc i64 %80 to i32\n  %82 = load i8*, i8** %17, align 8, !tbaa !10\n  %83 = icmp eq i8* %82, %15\n  br i1 %83, label %85, label %84\n\n84:                                               ; preds = %76\n  call void @_ZdlPv(i8* %82) #8\n  br label %85\n\n85:                                               ; preds = %76, %84\n  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8, !noalias !12\n  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8\n  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #8\n  %86 = add nuw i64 %58, 1\n  call void @llvm.experimental.noalias.scope.decl(metadata !17)\n  %87 = load i64, i64* %39, align 8, !tbaa !3, !noalias !17\n  %88 = icmp ugt i64 %87, %58\n  br i1 %88, label %90, label %91\n\n90: