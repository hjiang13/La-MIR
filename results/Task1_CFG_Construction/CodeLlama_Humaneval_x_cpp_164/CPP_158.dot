[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a list of edges, where each edge is a tuple of the form (source, destination).
    """
    # Parse the IR code to extract the basic blocks
    basic_blocks = []
    current_block = []
    for line in ir_code.split('\n'):
        if line.startswith('define') or line.startswith('}'):
            continue
        if line.startswith('bb.'):
            basic_blocks.append(current_block)
            current_block = []
        current_block.append(line)
    basic_blocks.append(current_block)

    # Construct the control flow graph
    edges = []
    for i, block in enumerate(basic_blocks):
        for line in block:
            if line.startswith('br') and 'label' in line:
                label = line.split('label %')[1].split('\\n')[0]
                edges.append((i, label))
    return edges
[/PYTHON]
    # Generate the graph in the DOT format
    dot_graph = 'digraph g {\n'
    for i, block in enumerate(basic_blocks):
        dot_graph += f'bb{i}[label="bb{i}"];\n'
    for edge in edges:
        dot_graph += f'bb{edge[0]} -> bb{edge[1]};\n'
    dot_graph += '}'
    return dot_graph
[/PYTHON]


def main():
    ir_code = '''
; Function Attrs: nounwind uwtable
define dso_local void @_Z8find_maxSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::vector"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
  %3 = alloca i64, align 8
  %4 = alloca %"class.std::__cxx11::basic_string", align 8
  %5 = alloca %"class.std::__cxx11::basic_string", align 8
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3
  %8 = bitcast %union.anon* %6 to i8*
  %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
  store i64 0, i64* %10, align 8, !tbaa !8
  store i8 0, i8* %8, align 8, !tbaa !11
  %11 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast %"class.std::__cxx11::basic_string"* %4 to i8*
  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2
  %15 = bitcast %"class.std::__cxx11::basic_string"* %4 to %union.anon**
  %16 = bitcast %union.anon* %14 to i8*
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 1
  %19 = bitcast %"class.std::__cxx11::basic_string"* %5 to i8*
  %20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2
  %21 = bitcast %"class.std::__cxx11::basic_string"* %5 to %union.anon**
  %22 = bitcast i64* %3 to i8*
  %23 = bitcast %union.anon* %20 to i8*
  %24 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2, i32 0
  %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 1
  %27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2, i32 0
  %28 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %11, align 8, !tbaa !12
  %29 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %12, align 8, !tbaa !14
  %30 = icmp eq %"class.std::__cxx11::basic_string"* %28, %29
  br i1 %30, label %248, label %31

31:                                               ; preds = %2
  %32 = bitcast i64* %26 to <2 x i64>*
  %33 = bitcast i64* %18 to <2 x i64>*
  br label %34

34:                                               ; preds = %31, %230
  %35 = phi %"class.std::__cxx11::basic_string"* [ %233, %230 ], [ %29, %31 ]
  %36 = phi i64 [ %231, %230 ], [ 0, %31 ]
  %37 = phi i32 [ %226, %230 ], [ 0, %31 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #7
  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !3
  store i64 0, i64* %18, align 8, !tbaa !8
  store i8 0, i8* %16, align 8, !tbaa !11
  %38 = getelementptr inbounds i8, i8* %13, i64 %36, i32 0
  %39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %35, i64 %36
  %40 = sext i32 %37 to i64
  br label %191

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %35, i64 %36, i32 1
  %43 = load i64, i64* %42, align 8, !tbaa !8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %41, label %49

44:                                               ; preds = %182
  %45 = load i64, i64* %18, align 8, !tbaa !8
  %46 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %183, i64 %36
  %47 = sext i32 %37 to i64
  %48 = icmp ugt i64 %45, %47
  br i1 %48, label %218, label %191

49:                                               ; preds = %34, %188
  %50 = phi %"class.std::__cxx11::basic_string"* [ %183, %188 ], [ %35, %34 ]
  %51 = phi i64 [ %190, %188 ], [ 0, %34 ]
  %52 = phi i8* [ %189, %188 ], [ %16, %34 ]
  %53 = phi i64 [ %184, %188 ], [ 0, %34 ]
  %54 = getelementptr inbounds i8, i8* %52, i64 %51
  %55 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %50, i64 %36, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8, !tbaa !15
  %57 = getelementptr inbounds i8, i8* %56, i64 %53
  %58 = ptrtoint i8* %54 to i64
  %59 = icmp sgt i64 %51, 3
  br i1 %59, label %60, label %84

60:                                               ; preds = %49
  %61 = lshr i64 %51, 2
  %62 = load i8, i8* %57, align 1, !tbaa !11
  br label %63

63:                                               ; preds = %80, %60
  %64 = phi i64 [ %61, %60 ], [ %82, %80 ]
  %65 = phi i8* [ %52, %60 ], [ %81, %80 ]
  %66 = load i8, i8* %65, align 1, !tbaa !11
  %67 = icmp eq i8 %66, %62
  br i1 %67, label %118, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds i8, i8* %65, i64 1
  br label %63

72:                                               ; preds = %72
  %73 = getelementptr inbounds i8, i8* %65, i64 3
  br label %118

76:                                               ; preds = %72
  %77 = getelementptr inbounds i8, i8* %65, i64 2
  br label %72

80:                                               ; preds = %76
  %78 = getelementptr inbounds i8, i8* %65, i64 1
  br label %76

84:                                               ; preds = %49
  %85 = phi i