Here is the control flow graph for the given IR code:
```
digraph {
    node [shape=box];
    0 [label="start"];
    1 [label="end"];
    2 [label="_Z11total_matchSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EES7_"];
    3 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %1, i64 0, i32 0, i32 0, i32 0, i32 1"];
    4 [label="load %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %4, align 8, !tbaa !3"];
    5 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %1, i64 0, i32 0, i32 0, i32 0, i32 0"];
    6 [label="load %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %6, align 8, !tbaa !8"];
    7 [label="ptrtoint %class.std::__cxx11::basic_string* %5 to i64"];
    8 [label="ptrtoint %class.std::__cxx11::basic_string* %7 to i64"];
    9 [label="sub i64 %8, %9"];
    10 [label="icmp eq i64 %10, 0"];
    11 [label="br i1 %11, label %36, label %12"];
    12 [label="phi i32 [ undef, %12 ], [ %76, %54 ]"];
    13 [label="phi i64 [ 0, %12 ], [ %77, %54 ]"];
    14 [label="phi i32 [ 0, %12 ], [ %76, %54 ]"];
    15 [label="icmp eq i64 %16, 0"];
    16 [label="br i1 %16, label %36, label %25"];
    17 [label="ashr exact i64 %10, 5"];
    18 [label="call i64 @llvm.umax.i64(i64 %13, i64 1)"];
    19 [label="add i64 %14, -1"];
    20 [label="and i64 %14, 3"];
    21 [label="icmp ult i64 %19, 3"];
    22 [label="br i1 %21, label %20, label %18"];
    23 [label="and i64 %14, -4"];
    24 [label="br label %54"];
    25 [label="phi i64 [ %33, %25 ], [ %22, %20 ]"];
    26 [label="phi i32 [ %32, %25 ], [ %23, %20 ]"];
    27 [label="phi i64 [ %34, %25 ], [ %16, %20 ]"];
    28 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %7, i64 %26, i32 1"];
    29 [label="load i64, i64* %28, align 8, !tbaa !9"];
    30 [label="trunc i64 %29 to i32"];
    31 [label="add i32 %27, %30"];
    32 [label="add nuw nsw i64 %26, 1"];
    33 [label="add i64 %28, -1"];
    34 [label="icmp eq i64 %33, 0"];
    35 [label="br i1 %34, label %36, label %25"];
    36 [label="phi i32 [ 0, %3 ], [ %21, %20 ], [ %32, %25 ]"];
    37 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %2, i64 0, i32 0, i32 0, i32 0, i32 1"];
    38 [label="load %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %38, align 8, !tbaa !3"];
    39 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %2, i64 0, i32 0, i32 0, i32 0, i32 0"];
    40 [label="load %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %40, align 8, !tbaa !8"];
    41 [label="ptrtoint %class.std::__cxx11::basic_string* %39 to i64"];
    42 [label="ptrtoint %class.std::__cxx11::basic_string* %40 to i64"];
    43 [label="sub i64 %41, %42"];
    44 [label="icmp eq i64 %43, 0"];
    45 [label="br i1 %45, label %122, label %46"];
    46 [label="ashr exact i64 %43, 5"];
    47 [label="call i64 @llvm.umax.i64(i64 %44, i64 1)"];
    48 [label="add i64 %47, -1"];
    49 [label="and i64 %47, 3"];
    50 [label="icmp ult i64 %48, 3"];
    51 [label="br i1 %50, label %106, label %52"];
    52 [label="and i64 %47, -4"];
    53 [label="br label %80"];
    54 [label="phi i64 [ 0, %18 ], [ %77, %54 ]"];
    55 [label="phi i32 [ 0, %18 ], [ %76, %54 ]"];
    56 [label="phi i64 [ %19, %18 ], [ %78, %54 ]"];
    57 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %7, i64 %55, i32 1"];
    58 [label="load i64, i64* %57, align 8, !tbaa !9"];
    59 [label="trunc i64 %58 to i32"];
    60 [label="add i32 %56, %59"];
    61 [label="or i64 %55, 1"];
    62 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %7, i64 %61, i32 1"];
    63 [label="load i64, i64* %62, align 8, !tbaa !9"];
    64 [label="trunc i64 %63 to i32"];
    65 [label="add i32 %60, %64"];
    66 [label="or i64 %55, 2"];
    67 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %7, i64 %66, i32 1"];
    68 [label="load i64, i64* %67, align 8, !tbaa !9"];
    69 [label="trunc i64 %68 to i32"];
    70 [label="add i32 %65, %69"];
    71 [label="or i64 %55, 3"];
    72 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %7, i64 %71, i32 1"];
    73 [label="load i64, i64* %72, align 8, !tbaa !9"];
    74 [label="trunc i64 %73 to i32"];
    75 [label="add i32 %70, %74"];
    76 [label="add nuw nsw i64 %55, 4"];
    77 [label="add i64 %57, -4"];
    78 [label="icmp eq i64 %77, 0"];
    79 [label="br i1 %78, label %20, label %54"];
    80 [label="phi i64 [ 0, %54 ], [ %103, %80 ]"];
    81 [label="phi i32 [ 0, %54 ], [ %102, %80 ]"];
    82 [label="phi i64 [ %53, %54 ], [ %104, %80 ]"];
    83 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %41, i64 %81, i32 1"];
    84 [label="load i64, i64* %83, align 8, !tbaa !9"];
    85 [label="trunc i64 %84 to i32"];
    86 [label="add i32 %82, %85"];
    87 [label="or i64 %81, 1"];
    88 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %41, i64 %87, i32 1"];
    89 [label="load i64, i64* %88, align 8, !tbaa !9"];
    90 [label="trunc i64 %89 to i32"];
    91 [label="add i32 %86, %90"];
    92 [label="or i64 %81, 2"];
    93 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %41, i64 %92, i32 1"];
    94 [label="load i64, i64* %93, align 8, !tbaa !9"];
    95 [label="trunc i64 %94 to i32"];
    96 [label="add i32 %91, %95"];
    97 [label="or i64 %81, 3"];
    98 [label="getelementptr inbounds %class.std::__cxx11::basic_string, %class.std::__cxx11::basic_string* %41, i64 %97, i32 1"];
    99 [label="load i64, i64* %98, align 8, !tbaa !9"];
    100 [label="trunc i64 %99 to i32"];
    101 [label="add i32 %96, %100"];
    102 [label="add nuw nsw i64 %81, 4"];
    103 [label="add i64 %83, -4"];
    104 [label="icmp eq i64 %103, 0"];
    105 [label="br i1 %104, label %106, label %80"];
    106 [label="phi i32 [ undef, %106 ], [ %102, %80 ]"];
    107 [label="icmp sgt i32 %37, %106"];
    108 [label="select i1 %107, %class.std::vector* %2, %class.std::vector* %1"];
    109 [label="select i1 %107, %class.std::__cxx11::basic_string* %41, %class.std::__cxx11::basic_string* %7"];
    110 [label="select i1 %107, %class.std::__cxx11::basic_string* %39, %class.std::__cxx11::basic_string* %5"];
    111 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %0, i64 0, i32 0, i32 0, i32 0, i32 0"];
    112 [label="store %class.std::__cxx11::basic_string* %108, %class.std::__cxx11::basic_string** %111, align 8"];
    113 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %0, i64 0, i32 0, i32 0, i32 0, i32 1"];
    114 [label="store %class.std::__cxx11::basic_string* %109, %class.std::__cxx11::basic_string** %113, align 8"];
    115 [label="getelementptr inbounds %class.std::vector, %class.std::vector* %0, i64 0, i32 0, i32 0, i32 0, i32 2"];
    116 [label="store %class.std::__cxx11::basic_string* %110, %class.std::__cxx11::basic_string** %115, align 8"];
    117 [label="ret void"];
}
```
Note that the node numbers are not necessarily the same as in the original code, as the IR code has been optimized and some nodes may have been removed or reordered. However, the basic structure of the control flow graph should be the same.