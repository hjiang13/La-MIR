[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph based on the input IR code.
    The graph is represented as a dictionary of nodes,
    where each node is a set of IR basic blocks.
    """
    # Parse the IR code and generate a control flow graph
    graph = {}
    block_ids = []
    for line in ir_code.splitlines():
        if line.startswith(";"):
            continue
        if line.startswith("define"):
            continue
        if line.startswith("@"):
            block_id = line.split()[0]
            block_ids.append(block_id)
            graph[block_id] = set()
        if line.startswith("br label"):
            branch_target = line.split()[2]
            graph[block_id].add(branch_target)
        if line.startswith("br i1"):
            branch_target = line.split()[5]
            graph[block_id].add(branch_target)
    return graph

def generate_dot(graph):
    """
    Generates a dot file based on the control flow graph.
    """
    dot = "digraph {\n"
    for node in graph:
        dot += f"  {node};\n"
        for neighbor in graph[node]:
            dot += f"  {node} -> {neighbor};\n"
    dot += "}"
    return dot

def main():
    ir_code = """
    ; ModuleID = '../../Human_xBenchmarks_164/CPP_51/CPP_51.cpp'
    source_filename = "../../Human_xBenchmarks_164/CPP_51/CPP_51.cpp"
    target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
    target triple = "x86_64-unknown-linux-gnu"

    %class.std::__cxx11::basic_string = type { %struct.std::__cxx11::basic_string::_Alloc_hider, i64, %union.anon }
    %struct.std::__cxx11::basic_string::_Alloc_hider = type { i8* }
    %union.anon = type { i64, [8 x i8] }

    @.str.1 = private unnamed_addr constant [11 x i8] c"AEIOUaeiou\00", align 1

    ; Function Attrs: uwtable
    define dso_local void @_Z13remove_vowelsNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, %"class.std::__cxx11::basic_string"* nocapture readonly %1) local_unnamed_addr #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
      %3 = alloca i64, align 8
      %4 = alloca %"class.std::__cxx11::basic_string", align 8
      %5 = alloca %"class.std::__cxx11::basic_string", align 8
      %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2
      %7 = bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**
      store %union.anon* %6, %union.anon** %7, align 8, !tbaa !3
      %8 = bitcast %union.anon* %6 to i8*
      %9 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 0, i32 0
      %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1
      store i64 0, i64* %10, align 8, !tbaa !8
      store i8 0, i8* %8, align 8, !tbaa !11
      %11 = bitcast %"class.std::__cxx11::basic_string"* %4 to i8*
      call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
      %12 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2
      %13 = bitcast %"class.std::__cxx11::basic_string"* %4 to %union.anon**
      store %union.anon* %12, %union.anon** %13, align 8, !tbaa !3
      %14 = bitcast %union.anon* %12 to i8*
      call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(10) %14, i8* noundef nonnull align 1 dereferenceable(10) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i64 10, i1 false) #6
      %15 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 0, i32 0
      %16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 1
      store i64 10, i64* %16, align 8, !tbaa !8
      %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %4, i64 0, i32 2, i32 1, i64 2
      store i8 0, i8* %17, align 2, !tbaa !11
      %18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 1
      %19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0
      %20 = bitcast %"class.std::__cxx11::basic_string"* %5 to i8*
      %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2
      %22 = bitcast %"class.std::__cxx11::basic_string"* %5 to %union.anon**
      %23 = bitcast i64* %3 to i8*
      %24 = bitcast %union.anon* %21 to i8*
      %25 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 0, i32 0
      %26 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 2, i32 0
      %27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %5, i64 0, i32 1
      %28 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2, i32 0
      %29 = load i64, i64* %18, align 8, !tbaa !8
      %30 = icmp eq i64 %29, 0
      br i1 %30, label %37, label %31

    31:                                               ; preds = %2
      %32 = bitcast i64* %27 to <2 x i64>*
      %33 = bitcast i64* %10 to <2 x i64>*
      br label %38

      ; ...

    106:                                              ; preds = %174
      %107 = phi i8 [ %83, %82 ], [ %89, %88 ], [ %96, %95 ], [ %50, %104 ], [ %50, %102 ], [ %50, %100 ], [ %50, %51 ]
      %108 = phi i8* [ %73, %82 ], [ %90, %88 ], [ %97, %95 ], [ %105, %104 ], [ %103, %102 ], [ %101, %100 ], [ %53, %51 ]
      %109 = icmp eq i8* %108, %43
      br i1 %109, label %110, label %174

      ; ...

    110:                                              ; preds = %76, %95, %106
      %111 = phi i8 [ %77, %76 ], [ %96, %95 ], [ %107, %106 ]
      call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #6
      call void @llvm.experimental.noalias.scope.decl(metadata !15)
      store %union.anon* %21, %union.anon** %22, align 8, !tbaa !3, !alias.scope !15
      %112 = load i8*, i8** %9, align 8, !tbaa !12, !noalias !15
      %113 = load i64, i64* %10, align 8, !tbaa !8, !noalias !15
      call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #6, !noalias !15
      store i64 %113, i64* %3, align 8, !tbaa !18, !noalias !15
      %114 = icmp ugt i64 %113, 15
      br i1 %114, label %115, label %119

      ; ...

    174:                                              ; preds = %106, %166
      %175 = phi i64 [ %39, %106 ], [ %167, %166 ]
      %176 = add nuw i64 %42, 1
      %177 = icmp ugt i64 %175, %176
      %178 = load i8*, i8** %15, align 8, !tbaa !12
      br i1 %177, label %179, label %34, !llvm.loop !19

      ; ...

    }

    ; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
    declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

    declare dso_local i32 @__gxx_personality_v0(...)

    ; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
    declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

    ; Function Attrs: nobuiltin nounwind
    declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #2

    declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3

    ; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
    declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

    declare dso_local nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i64, i64, i64, i8 signext) local_unnamed_addr #3

    ; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
    declare void @llvm.experimental.noalias.scope.decl(metadata) #5

    attributes #0 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
    attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
    attributes #2 = { nobuiltin nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
    attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
    attributes #4 = { argmemonly mustprogress nofree nounwind willreturn }
    attributes #5 = { inaccessiblememonly nofree nosync nounwind willreturn }
    attributes #6 = { nounwind }

    !llvm.module.flags = !{!0, !1}
    !llvm.ident = !{!2}

    !0 = !{i32 1, !"wchar_size", i32 4}
    !1 = !{i32 7, !"uwtable", i32 1}
    !2 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git d7b669b3a30345cfcdb2fde2af6f48aa4b94845d)"}
    !3 = !{!4, !5, i64 0}
    !4 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !5, i64 0}
    !5 = !{!"any pointer", !6, i64 0}
    !6 = !{!"omnipotent char", !7, i64 0}
    !7 = !{!"Simple C++ TBAA"}
    !8 = !{!9, !10, i64 8}
    !9 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !4, i64 0, !10, i64 8, !6, i64 16}
    !10 = !{!"long", !6, i64 0}
    !11 = !{!6, !6, i64 0}
    !12 = !{!9, !5, i64 0}
    !13 = distinct !{!13, !14}
    !14 = !{!"llvm.loop.mustprogress"}
    !15 = !{!16}
    !16 = distinct !{!16, !17, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_: argument 0"}
    !17 = distinct !{!17, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_"}
    !18 = !{!10, !10, i64 0}
    !19 = distinct !{!19, !14}
    """

    # Generate the control flow graph
    graph = get_control_flow_graph(ir_code)

    # Generate the dot file
    dot = generate_dot(graph)
    return dot

if __name__ == "__main__":
    main()
[/PYTHON]