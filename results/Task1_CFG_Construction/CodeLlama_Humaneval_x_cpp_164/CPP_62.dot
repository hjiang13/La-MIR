The IR code you provided is a LLVM IR (Intermediate Representation) of a C++ program. To obtain the control flow graph of this program, we can use the `llvm-cfi` tool, which is a part of the LLVM suite of tools.

Here is an example of how to use `llvm-cfi` to obtain the control flow graph of the program:
```
$ llvm-cfi -dot < /path/to/program.ll > program.dot
```
This will output the control flow graph of the program in the DOT format, which can be visualized using graphviz.

Here is an example of the graph that might be generated for the program you provided:
```
digraph G {
    rankdir=LR;
    node [shape=box];

    0 [label="start"];
    1 [label="loop"];
    2 [label="loop_body"];
    3 [label="loop_cond"];
    4 [label="loop_exit"];
    5 [label="function_entry"];
    6 [label="function_exit"];

    0 -> 1;
    1 -> 2;
    1 -> 3;
    2 -> 1;
    3 -> 4;
    4 -> 5;
    5 -> 6;
}
```
This graph shows the control flow of the program, with the nodes representing the basic blocks and the edges representing the control flow between them. The edges are labeled with the type of control flow they represent (e.g. "loop" for a loop, "function_entry" for the entry point of a function).

Note that this graph is a simplified representation of the control flow of the program, and does not include all the details of the program's behavior. For example, the graph does not show the contents of the basic blocks or the data flow between them. If you need more detailed information about the control flow of the program, you can use other tools such as `llvm-dis` to disassemble the program and `llvm-objdump` to dump the assembly code.