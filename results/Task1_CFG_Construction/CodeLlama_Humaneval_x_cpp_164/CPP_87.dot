[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph for the given IR code.
    The graph is represented as a list of nodes, where each node is a dictionary containing the node's name, its basic block, and its incoming and outgoing edges.
    """
    # Parse the IR code to generate a list of basic blocks
    basic_blocks = ir_code.split(";")

    # Create a list to store the nodes of the control flow graph
    nodes = []

    # Iterate over the basic blocks and create a node for each one
    for block in basic_blocks:
        # Get the name of the basic block (e.g. "%bb.1")
        block_name = block.split(" ")[0]

        # Get the instructions in the basic block
        instructions = block.split("\\n")[1:]

        # Create a node for the basic block
        node = {"name": block_name, "block": block, "in_edges": [], "out_edges": []}

        # Add the node to the list of nodes
        nodes.append(node)

    # Iterate over the nodes and add their incoming and outgoing edges
    for node in nodes:
        # Get the instructions in the basic block
        instructions = node["block"].split("\\n")[1:]

        # Iterate over the instructions and add their incoming and outgoing edges
        for instruction in instructions:
            # Get the opcode and the arguments
            opcode = instruction.split(" ")[0]
            args = instruction.split(" ")[1:]

            # Check if the opcode is a branch instruction
            if opcode in ["br", "br label %", "switch"]:
                # Get the target block
                target_block = args[-1]

                # Add an edge from the current node to the target block
                node["out_edges"].append(target_block)

                # Add an edge from the target block to the current node
                nodes[target_block]["in_edges"].append(node["name"])

    # Return the list of nodes
    return nodes
[/PYTHON]