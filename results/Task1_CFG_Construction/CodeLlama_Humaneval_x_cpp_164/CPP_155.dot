[PYTHON]
def generate_control_flow_graph(ir_code):
    # Tokenize the IR code
    tokens = ir_code.split()

    # Initialize the graph with the first node
    graph = {"nodes": [tokens[0]], "edges": []}

    # Iterate over the tokens and add nodes and edges to the graph
    for token in tokens:
        if token.startswith("br"):
            # Add a new edge to the graph
            graph["edges"].append([token.split(" ")[1], token.split(" ")[2]])
        elif token.startswith("bb"):
            # Add a new node to the graph
            graph["nodes"].append(token)

    return graph
[/PYTHON]

[TESTS]
# Test case 1:
assert generate_control_flow_graph(
    """
b1:
br b2

b2:
br b3

b3:
br b1
"""
) == {"nodes": ["b1", "b2", "b3"], "edges": [["b1", "b2"], ["b2", "b3"], ["b3", "b1"]]}

# Test case 2:
assert generate_control_flow_graph(
    """
b1:
br b2

b2:
br b3

b3:
br b4
"""
) == {"nodes": ["b1", "b2", "b3", "b4"], "edges": [["b1", "b2"], ["b2", "b3"], ["b3", "b4"]]}

# Test case 3:
assert generate_control_flow_graph(
    """
b1:
br b2

b2:
br b3

b3:
br b1

b4:
br b5
"""
) == {"nodes": ["b1", "b2", "b3", "b4", "b5"], "edges": [["b1", "b2"], ["b2", "b3"], ["b3", "b1"], ["b4", "b5"]]}

# Test case 4:
assert generate_control_flow_graph(
    """
b1:
br b2

b2:
br b3

b3:
br b4

b4:
br b5
"""
) == {"nodes": ["b1", "b2", "b3", "b4", "b5"], "edges": [["b1", "b2"], ["b2", "b3"], ["b3", "b4"], ["b4", "b5"]]}
[/TESTS]