Here is the control flow graph for the input IR code:
```dot
digraph {
    node [shape=box];
    0 [label="Start"];
    1 [label="Load i8*, i8** %16, align 8, !tbaa !12"];
    2 [label="Load i8, i8* %17, align 1, !tbaa !11"];
    3 [label="icmp slt i8 %18, 65"];
    4 [label="br i1 %3, label %8, label %15"];
    5 [label="getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2"];
    6 [label="bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**"];
    7 [label="store %union.anon* %5, %union.anon** %6, align 8, !tbaa !10"];
    8 [label="bitcast %union.anon* %5 to i16*"];
    9 [label="store i16 28494, i16* %8, align 8"];
    10 [label="getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1"];
    11 [label="store i64 2, i64* %10, align 8, !tbaa !3"];
    12 [label="bitcast %union.anon* %5 to i8*"];
    13 [label="getelementptr inbounds i8, i8* %12, i64 2"];
    14 [label="store i8 0, i8* %13, align 2, !tbaa !11"];
    15 [label="br label %143"];
    16 [label="getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %1, i64 0, i32 0, i32 0"];
    17 [label="load i8*, i8** %16, align 8, !tbaa !12"];
    18 [label="load i8, i8* %17, align 1, !tbaa !11"];
    19 [label="icmp slt i8 %18, 65"];
    20 [label="br i1 %19, label %21, label %20"];
    21 [label="getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 2"];
    22 [label="bitcast %"class.std::__cxx11::basic_string"* %0 to %union.anon**"];
    23 [label="store %union.anon* %21, %union.anon** %22, align 8, !tbaa !10"];
    24 [label="bitcast %union.anon* %21 to i16*"];
    25 [label="store i16 28494, i16* %24, align 8"];
    26 [label="getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %0, i64 0, i32 1"];
    27 [label="store i64 2, i64* %26, align 8, !tbaa !3"];
    28 [label="bitcast %union.anon* %21 to i8*"];
    29 [label="getelementptr inbounds i8, i8* %28, i64 2"];
    30 [label="store i8 0, i8* %29, align 2, !tbaa !11"];
    31 [label="br label %143"];
    32 [label="bitcast %"class.std::__cxx11::basic_string"* %3 to i8*"];
    33 [label="call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %32)"];
    34 [label="getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %3, i64 0, i32 2"];
    35 [label="bitcast %"class.std::__cxx11::basic_string"* %3 to %union.anon**"];
    36 [label="store %union.anon* %34, %union.anon** %35, align 8, !tbaa !10, !alias.scope !13"];
    37 [label="getelementptr inbounds %"class.std::allocator", %"class.std::allocator"* %4, i64 0, i32 0"];
    38 [label="call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %37)"];
    39 [label="invoke void @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))"];
    40 [label="call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %37)"];
    41 [label="landingpad { i8*, i32 }"];
    42 [label="call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %37)"];
    43 [label="load i8*, i8** %38, align 8, !tbaa !12"];
    44 [label="icmp eq i8* %43, %32"];
    45 [label="br i1 %44, label %46, label %47"];
    46 [label="call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32)"];
    47 [label="resume { i8*, i32 } %41"];
    48 [label="call void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg)"];
    49 [label="getelementptr inbounds %"class.std::allocator", %"class.std::allocator"* %4, i64 0, i32 0"];
    50 [label="call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %49)"];
    51 [label="call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %32)"];
    52 [label="ret void"];
}
```
Note that this is a simplified graph, and it does not include the contents of each basic block. The input IR code is quite large, and it would be difficult to include all the details in the graph. The graph is meant to provide a high-level overview of the control flow of the program.