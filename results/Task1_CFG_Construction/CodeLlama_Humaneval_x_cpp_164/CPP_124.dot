As a control flow graph analyzer, I can help you generate a graphical representation of the control flow for the provided IR code program.

The output format will be in the DOT language, which is a simple and readable format for graph descriptions. The DOT language is used by the Graphviz software package to generate visual diagrams of graphs.

Here's the control flow graph for the provided IR code program:
```dot
digraph G {
    node[shape=box, style=filled, color=black, fontsize=12];
    edge[arrowhead=vee, arrowsize=0.5, color=black];

    // Nodes
    entry[label="Entry"];
    block0[label="Block 0"];
    block1[label="Block 1"];
    block2[label="Block 2"];
    block3[label="Block 3"];
    block4[label="Block 4"];
    block5[label="Block 5"];
    block6[label="Block 6"];
    block7[label="Block 7"];
    block8[label="Block 8"];
    block9[label="Block 9"];
    block10[label="Block 10"];
    block11[label="Block 11"];
    block12[label="Block 12"];
    block13[label="Block 13"];
    block14[label="Block 14"];
    block15[label="Block 15"];
    block16[label="Block 16"];
    block17[label="Block 17"];
    block18[label="Block 18"];
    block19[label="Block 19"];
    block20[label="Block 20"];
    block21[label="Block 21"];
    exit[label="Exit"];

    // Edges
    entry -> block0;
    block0 -> block1;
    block1 -> block2;
    block2 -> block3;
    block3 -> block4;
    block4 -> block5;
    block5 -> block6;
    block6 -> block7;
    block7 -> block8;
    block8 -> block9;
    block9 -> block10;
    block10 -> block11;
    block11 -> block12;
    block12 -> block13;
    block13 -> block14;
    block14 -> block15;
    block15 -> block16;
    block16 -> block17;
    block17 -> block18;
    block18 -> block19;
    block19 -> block20;
    block20 -> block21;
    block21 -> exit;
}
```
This control flow graph shows the basic blocks in the program and the flow of control between them. The entry node represents the starting point of the program, and the exit node represents the end point. The other nodes represent individual basic blocks in the program. The edges between nodes represent the flow of control between basic blocks.

Note that this is a simplified control flow graph, and it does not include all the details of the program. For example, it does not include the instructions within each basic block, or the data dependencies between instructions. However, it provides a high-level overview of the control flow structure of the program, which can be useful for understanding the overall structure and behavior of the program.