Sure, here's the control flow graph for the given IR code:
```dot
digraph {
    node [shape=box];
    0 [label="Start"];
    1 [label="Allocate memory for vector"];
    2 [label="Initialize vector"];
    3 [label="Check if vector is empty"];
    4 [label="Allocate memory for new element"];
    5 [label="Insert element into vector"];
    6 [label="Check if vector is full"];
    7 [label="Reallocate memory for vector"];
    8 [label="Insert element into vector"];
    9 [label="Check if vector is full"];
    10 [label="Return"];

    0 -> 1 [label="Allocate memory"];
    1 -> 2 [label="Initialize vector"];
    2 -> 3 [label="Check if vector is empty"];
    3 -> 4 [label="Allocate memory for new element"];
    4 -> 5 [label="Insert element into vector"];
    5 -> 6 [label="Check if vector is full"];
    6 -> 7 [label="Reallocate memory for vector"];
    7 -> 8 [label="Insert element into vector"];
    8 -> 9 [label="Check if vector is full"];
    9 -> 10 [label="Return"];
}
```
Note that the nodes are labeled with the corresponding basic block ID, and the edges are labeled with the corresponding branch instruction. The graph shows the control flow of the program, starting from the allocation of memory for the vector, followed by the initialization of the vector, and then the insertion of elements into the vector. The graph also shows the reallocation of memory for the vector when it becomes full, and the insertion of elements into the vector after reallocation. Finally, the graph shows the return of the function.