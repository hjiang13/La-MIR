[PYTHON]
def get_control_flow_graph(ir_code):
    """
    Generates a control flow graph for the given IR code.
    The graph is represented as a list of nodes, where each node is a dictionary containing the node title and a list of successor nodes.
    """
    # Parse the IR code and generate a list of basic blocks
    basic_blocks = parse_ir_code(ir_code)

    # Create a list of nodes, where each node represents a basic block
    nodes = []
    for block in basic_blocks:
        nodes.append({'title': block['title'], 'successors': []})

    # Populate the successors for each node
    for i, node in enumerate(nodes):
        block = basic_blocks[i]
        successors = []
        for successor in block['successors']:
            index = basic_blocks.index(successor)
            successors.append(nodes[index])
        node['successors'] = successors

    return nodes

def parse_ir_code(ir_code):
    """
    Parses the IR code and generates a list of basic blocks.
    Each basic block is represented as a dictionary containing the title and a list of successors.
    """
    # Split the IR code into basic blocks
    basic_blocks = ir_code.split('; <label>:')
    basic_blocks = [block.strip() for block in basic_blocks]

    # Parse each basic block and extract the title and successors
    basic_blocks = [parse_basic_block(block) for block in basic_blocks]

    return basic_blocks

def parse_basic_block(block):
    """
    Parses a basic block and extracts the title and successors.
    """
    # Get the title of the basic block
    title = block.split(':')[0]

    # Get the successors of the basic block
    successors = []
    for line in block.split('\n'):
        if '->' in line:
            successor = line.split('->')[1].strip()
            successors.append(successor)

    return {'title': title, 'successors': successors}
[/PYTHON]

[TESTS]
# Test case 1:
ir_code = '''
; <label>:0
%1 = add i32 1, 2
%2 = add i32 %1, 3
br i1 1, label %3, label %4

; <label>:3
br label %5

; <label>:4
br label %6

; <label>:5
br label %7

; <label>:6
br label %7

; <label>:7
ret i32 0
'''

expected = [
    {'title': '0', 'successors': ['3', '4']},
    {'title': '3', 'successors': ['5']},
    {'title': '4', 'successors': ['6']},
    {'title': '5', 'successors': ['7']},
    {'title': '6', 'successors': ['7']},
    {'title': '7', 'successors': []}
]

assert get_control_flow_graph(ir_code) == expected

# Test case 2:
ir_code = '''
; <label>:0
br i1 1, label %3, label %4

; <label>:3
br label %5

; <label>:4
br label %6

; <label>:5
br label %7

; <label>:6
br label %7

; <label>:7
ret i32 0
'''

expected = [
    {'title': '0', 'successors': ['3', '4']},
    {'title': '3', 'successors': ['5']},
    {'title': '4', 'successors': ['6']},
    {'title': '5', 'successors': ['7']},
    {'title': '6', 'successors': ['7']},
    {'title': '7', 'successors': []}
]

assert get_control_flow_graph(ir_code) == expected

# Test case 3:
ir_code = '''
; <label>:0
br label %1

; <label>:1
br label %2

; <label>:2
ret i32 0
'''

expected = [
    {'title': '0', 'successors': ['1']},
    {'title': '1', 'successors': ['2']},
    {'title': '2', 'successors': []}
]

assert get_control_flow_graph(ir_code) == expected
[/TESTS]