After analyzing the provided IR code, I extracted the control flow graph (CFG) and represented it in the dot file format. Here is the output:

```
digraph CFG {
    node[shape=box];
    1[label="entry"];
    10[label="block 10"];
    16[label="block 16"];
    18[label="block 18"];
    23[label="block 23"];
    34[label="block 34"];
    36[label="block 36"];

    1 -> 10[label=""];
    1 -> 34[label=""];
    10 -> 16[label=""];
    10 -> 18[label=""];
    16 -> 36[label=""];
    18 -> 23[label=""];
    18 -> 34[label=""];
    -global -> 23[label=""];
    23 -> 23[label=""];
    23 -> 34[label=""];
    34 -> 34[label=""];
    36 -> 18[label=""];
    36 -> 36[label=""];
}
```

In this dot file, each node represents a basic block in the CFG, and the edges represent the control flow between them. The label on each edge is empty, as you requested, but it can be replaced with the actual condition or branch instruction that leads to the next block.

Note that the node named "global" is not a real basic block but rather a placeholder to represent the global entry point of the function.

To visualize the CFG, you can use a graph visualization tool like Graphviz. Save this dot file to a file named `cfg.dot`, and then run the command `dot -Tpng cfg.dot -o cfg.png` to generate a PNG image of the CFG.