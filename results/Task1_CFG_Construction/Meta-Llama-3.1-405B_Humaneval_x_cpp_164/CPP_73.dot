After analyzing the provided IR code, I extracted the control flow graph (CFG) and represented it in the DOT format. Here is the output:

```
digraph CFG {
    node[shape=box, style=filled];

    Entry[label="Entry"];
    BB1[label="BB1"];
    BB12[label="BB12"];
    BB14[label="BB14"];

    Entry -> BB1;
    BB1 -> BB12[label="cond: %11"];
    BB1 -> BB14[label="!cond: %11"];
    BB14 -> BB12[label="cond: %28"];
    BB14 -> BB14[label="!cond: %28"];
    BB12 -> Exit;
}
```

In this CFG, the nodes represent the basic blocks in the IR code:

*   `Entry`: The entry point of the function.
*   `BB1`: The first basic block, which contains the initial loads and calculations.
*   `BB12`: The basic block that returns the result.
*   `BB14`: The loop body, which contains the main calculations and the loop condition.

The edges represent the control flow between these basic blocks:

*   `Entry -> BB1`: The function starts at `BB1`.
*   `BB1 -> BB12` and `BB1 -> BB14`: The conditional branch based on the value of `%11`.
*   `BB14 -> BB12` and `BB14 -> BB14`: The loop condition and the self-loop.
*   `BB12 -> Exit`: The function returns from `BB12`.

You can visualize this CFG using tools like Graphviz or online graph visualization platforms.