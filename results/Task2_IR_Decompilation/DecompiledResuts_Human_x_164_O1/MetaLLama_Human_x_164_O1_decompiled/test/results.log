Compilation and Execution Results
=================================

CPP_30.cpp: Compilation Failed
Error: ./CPP_30.cpp: In function ‘void get_positive(vector*, vector*)’:
./CPP_30.cpp:24:53: error: request for member ‘_M_start’ in ‘__first->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   24 |     float* __first_start = __first->_M_base._M_impl._M_start;
      |                                                     ^~~~~~~~
./CPP_30.cpp:25:54: error: request for member ‘_M_finish’ in ‘__first->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   25 |     float* __first_finish = __first->_M_base._M_impl._M_finish;
      |                                                      ^~~~~~~~~
./CPP_30.cpp:26:55: error: request for member ‘_M_start’ in ‘__result->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   26 |     float* __result_start = __result->_M_base._M_impl._M_start;
      |                                                       ^~~~~~~~
./CPP_30.cpp:27:56: error: request for member ‘_M_finish’ in ‘__result->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   27 |     float* __result_finish = __result->_M_base._M_impl._M_finish;
      |                                                        ^~~~~~~~~
./CPP_30.cpp:41:17: error: ‘_M_realloc_insert’ was not declared in this scope
   41 |                 _M_realloc_insert(__result, __tmp, &__x);
      |                 ^~~~~~~~~~~~~~~~~
./CPP_30.cpp:53:31: error: request for member ‘_M_finish’ in ‘__result->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   53 |     __result->_M_base._M_impl._M_finish = __result_start;
      |                               ^~~~~~~~~
./CPP_30.cpp: In function ‘void _M_realloc_insert(vector*, float*, float*)’:
./CPP_30.cpp:59:41: error: request for member ‘_M_finish’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   59 |     int __len = __this->_M_base._M_impl._M_finish - __this->_M_base._M_impl._M_start;
      |                                         ^~~~~~~~~
./CPP_30.cpp:59:77: error: request for member ‘_M_start’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   59 |     int __len = __this->_M_base._M_impl._M_finish - __this->_M_base._M_impl._M_start;
      |                                                                             ^~~~~~~~
./CPP_30.cpp:62:9: error: ‘__throw_bad_alloc’ was not declared in this scope
   62 |         __throw_bad_alloc();
      |         ^~~~~~~~~~~~~~~~~
./CPP_30.cpp:66:33: error: request for member ‘_M_start’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   66 |     if (__this->_M_base._M_impl._M_start != NULL) {
      |                                 ^~~~~~~~
./CPP_30.cpp:67:54: error: request for member ‘_M_start’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   67 |         memmove(__new_start, __this->_M_base._M_impl._M_start, __len * sizeof(float));
      |                                                      ^~~~~~~~
./CPP_30.cpp:70:47: error: request for member ‘_M_finish’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   70 |     if (__position != __this->_M_base._M_impl._M_finish) {
      |                                               ^~~~~~~~~
./CPP_30.cpp:71:71: error: request for member ‘_M_finish’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   71 |         memmove(__new_start + 1, __position, (__this->_M_base._M_impl._M_finish - __position) * sizeof(float));
      |                                                                       ^~~~~~~~~
./CPP_30.cpp:73:33: error: request for member ‘_M_start’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   73 |     if (__this->_M_base._M_impl._M_start != NULL) {
      |                                 ^~~~~~~~
./CPP_30.cpp:74:38: error: request for member ‘_M_start’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   74 |         free(__this->_M_base._M_impl._M_start);
      |                                      ^~~~~~~~
./CPP_30.cpp:76:29: error: request for member ‘_M_start’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   76 |     __this->_M_base._M_impl._M_start = __new_start;
      |                             ^~~~~~~~
./CPP_30.cpp:77:29: error: request for member ‘_M_finish’ in ‘__this->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘float*’
   77 |     __this->_M_base._M_impl._M_finish = __new_finish;
      |                             ^~~~~~~~~
./CPP_30.cpp: At global scope:
./CPP_30.cpp:92:13: error: ‘vector’ is not a template
   92 | bool issame(vector<float> a,vector<float>b){
      |             ^~~~~~
./CPP_30.cpp:92:29: error: ‘vector’ is not a template
   92 | bool issame(vector<float> a,vector<float>b){
      |                             ^~~~~~
./CPP_30.cpp: In function ‘bool issame(vector, vector)’:
./CPP_30.cpp:93:11: error: ‘struct vector’ has no member named ‘size’
   93 |     if (a.size()!=b.size()) return false;
      |           ^~~~
./CPP_30.cpp:93:21: error: ‘struct vector’ has no member named ‘size’
   93 |     if (a.size()!=b.size()) return false;
      |                     ^~~~
./CPP_30.cpp:94:22: error: ‘struct vector’ has no member named ‘size’
   94 |     for (int i=0;i<a.size();i++)
      |                      ^~~~
./CPP_30.cpp:96:18: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   96 |         if (abs(a[i]-b[i])>1e-4) return false;
      |                  ^
./CPP_30.cpp:96:23: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   96 |         if (abs(a[i]-b[i])>1e-4) return false;
      |                       ^
In file included from ./CPP_30.cpp:91:
./CPP_30.cpp: In function ‘int main()’:
./CPP_30.cpp:101:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  101 |     assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_30.cpp:23:27: note:   initializing argument 1 of ‘void get_positive(vector*, vector*)’
   23 | void get_positive(vector* __result, vector* __first) {
      |                   ~~~~~~~~^~~~~~~~
In file included from ./CPP_30.cpp:91:
./CPP_30.cpp:102:71: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  102 |     assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));
      |                                                                       ^
      |                                                                       |
      |                                                                       <brace-enclosed initializer list>
./CPP_30.cpp:23:27: note:   initializing argument 1 of ‘void get_positive(vector*, vector*)’
   23 | void get_positive(vector* __result, vector* __first) {
      |                   ~~~~~~~~^~~~~~~~
In file included from ./CPP_30.cpp:91:
./CPP_30.cpp:103:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  103 |      assert (issame(get_positive({-1, -2}) , {} ));
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_30.cpp:23:27: note:   initializing argument 1 of ‘void get_positive(vector*, vector*)’
   23 | void get_positive(vector* __result, vector* __first) {
      |                   ~~~~~~~~^~~~~~~~
In file included from ./CPP_30.cpp:91:
./CPP_30.cpp:104:36: error: too few arguments to function ‘void get_positive(vector*, vector*)’
  104 |      assert (issame(get_positive({}) , {}));
      |                                    ^
./CPP_30.cpp:23:6: note: declared here
   23 | void get_positive(vector* __result, vector* __first) {
      |      ^~~~~~~~~~~~


CPP_110.cpp: Compilation Failed
Error: ./CPP_110.cpp:3:20: error: variable or field ‘exchange’ declared void
    3 | void exchange(std::string* result, std::vector<int>* v1, std::vector<int>* v2) {
      |                    ^~~~~~
./CPP_110.cpp:3:20: error: ‘string’ is not a member of ‘std’
./CPP_110.cpp:2:1: note: ‘std::string’ is defined in header ‘<string>’; did you forget to ‘#include <string>’?
    1 | #include <string.h>
  +++ |+#include <string>
    2 | 
./CPP_110.cpp:3:28: error: ‘result’ was not declared in this scope
    3 | void exchange(std::string* result, std::vector<int>* v1, std::vector<int>* v2) {
      |                            ^~~~~~
./CPP_110.cpp:3:41: error: ‘vector’ is not a member of ‘std’
    3 | void exchange(std::string* result, std::vector<int>* v1, std::vector<int>* v2) {
      |                                         ^~~~~~
./CPP_110.cpp:2:1: note: ‘std::vector’ is defined in header ‘<vector>’; did you forget to ‘#include <vector>’?
    1 | #include <string.h>
  +++ |+#include <vector>
    2 | 
./CPP_110.cpp:3:48: error: expected primary-expression before ‘int’
    3 | void exchange(std::string* result, std::vector<int>* v1, std::vector<int>* v2) {
      |                                                ^~~
./CPP_110.cpp:3:63: error: ‘vector’ is not a member of ‘std’
    3 | void exchange(std::string* result, std::vector<int>* v1, std::vector<int>* v2) {
      |                                                               ^~~~~~
./CPP_110.cpp:3:63: note: ‘std::vector’ is defined in header ‘<vector>’; did you forget to ‘#include <vector>’?
./CPP_110.cpp:3:70: error: expected primary-expression before ‘int’
    3 | void exchange(std::string* result, std::vector<int>* v1, std::vector<int>* v2) {
      |                                                                      ^~~
In file included from ./CPP_110.cpp:38:
./CPP_110.cpp: In function ‘int main()’:
./CPP_110.cpp:40:13: error: ‘exchange’ was not declared in this scope
   40 |     assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == "YES");
      |             ^~~~~~~~


CPP_9.cpp: Compilation Failed
Error: ./CPP_9.cpp:12:110: error: expected ‘,’ or ‘...’ before ‘this’
   12 | void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(std_vector* this, int* __position, int* __x) {
      |                                                                                                              ^~~~
./CPP_9.cpp: In function ‘void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(std_vector*)’:
./CPP_9.cpp:13:18: error: invalid use of ‘this’ in non-member function
   13 |     int* __tmp = this->_M_base._M_impl;
      |                  ^~~~
./CPP_9.cpp:14:19: error: invalid use of ‘this’ in non-member function
   14 |     int* __tmp1 = this->_M_base._M_impl;
      |                   ^~~~
./CPP_9.cpp:21:18: warning: overflow in conversion from ‘long int’ to ‘int’ changes value from ‘2305843009213693951’ to ‘-1’ [-Woverflow]
   21 |         __tmp3 = 2305843009213693951;
      |                  ^~~~~~~~~~~~~~~~~~~
./CPP_9.cpp:24:9: error: ‘__throw_length_error’ was not declared in this scope
   24 |         __throw_length_error("vector::_M_realloc_insert");
      |         ^~~~~~~~~~~~~~~~~~~~
./CPP_9.cpp:26:37: error: expected ‘)’ before ‘!’ token
   26 |     if (__tmp3 > 2305843009213693951! / sizeof(int)) {
      |        ~                            ^
      |                                     )
./CPP_9.cpp:27:9: error: ‘__throw_bad_alloc’ was not declared in this scope
   27 |         __throw_bad_alloc();
      |         ^~~~~~~~~~~~~~~~~
./CPP_9.cpp:29:25: error: invalid conversion from ‘void*’ to ‘int*’ [-fpermissive]
   29 |     int* __tmp4 = malloc(__tmp3 * sizeof(int));
      |                   ~~~~~~^~~~~~~~~~~~~~~~~~~~~~
      |                         |
      |                         void*
./CPP_9.cpp:30:29: error: ‘__position’ was not declared in this scope
   30 |     int* __tmp5 = __tmp4 + (__position - __tmp1);
      |                             ^~~~~~~~~~
./CPP_9.cpp:31:16: error: ‘__x’ was not declared in this scope
   31 |     *__tmp5 = *__x;
      |                ^~~
./CPP_9.cpp:41:5: error: invalid use of ‘this’ in non-member function
   41 |     this->_M_base._M_impl = __tmp4;
      |     ^~~~
./CPP_9.cpp:42:5: error: invalid use of ‘this’ in non-member function
   42 |     this->_M_base._M_impl + __tmp3 = __tmp4 + __tmp3;
      |     ^~~~
./CPP_9.cpp: In function ‘void rolling_max(std_vector*, const std_vector*)’:
./CPP_9.cpp:65:129: error: too many arguments to function ‘void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(std_vector*)’
   65 |             _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(__result, __tmp8, &__tmp);
      |                                                                                                                                 ^
./CPP_9.cpp:12:6: note: declared here
   12 | void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(std_vector* this, int* __position, int* __x) {
      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_9.cpp: At global scope:
./CPP_9.cpp:89:13: error: ‘vector’ was not declared in this scope
   89 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_9.cpp:89:20: error: expected primary-expression before ‘int’
   89 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_9.cpp:89:27: error: ‘vector’ was not declared in this scope
   89 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_9.cpp:89:34: error: expected primary-expression before ‘int’
   89 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_9.cpp:89:39: error: expression list treated as compound expression in initializer [-fpermissive]
   89 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
In file included from ./CPP_9.cpp:88:
./CPP_9.cpp: In function ‘int main()’:
./CPP_9.cpp:98:35: error: too few arguments to function ‘void rolling_max(std_vector*, const std_vector*)’
   98 |      assert (issame(rolling_max({}),{}));
      |                                   ^
./CPP_9.cpp:45:6: note: declared here
   45 | void rolling_max(std_vector* __result, const std_vector* __x) {
      |      ^~~~~~~~~~~
In file included from ./CPP_9.cpp:88:
./CPP_9.cpp:98:39: error: ‘issame’ cannot be used as a function
   98 |      assert (issame(rolling_max({}),{}));
      |                                       ^
./CPP_9.cpp:99:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   99 |     assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_9.cpp:45:30: note:   initializing argument 1 of ‘void rolling_max(std_vector*, const std_vector*)’
   45 | void rolling_max(std_vector* __result, const std_vector* __x) {
      |                  ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_9.cpp:88:
./CPP_9.cpp:99:60: error: ‘issame’ cannot be used as a function
   99 |     assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));
      |                                                            ^
./CPP_9.cpp:100:45: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
  100 |      assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));
      |                                             ^
      |                                             |
      |                                             <brace-enclosed initializer list>
./CPP_9.cpp:45:30: note:   initializing argument 1 of ‘void rolling_max(std_vector*, const std_vector*)’
   45 | void rolling_max(std_vector* __result, const std_vector* __x) {
      |                  ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_9.cpp:88:
./CPP_9.cpp:100:59: error: ‘issame’ cannot be used as a function
  100 |      assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));
      |                                                           ^
./CPP_9.cpp:101:51: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
  101 |       assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));
      |                                                   ^
      |                                                   |
      |                                                   <brace-enclosed initializer list>
./CPP_9.cpp:45:30: note:   initializing argument 1 of ‘void rolling_max(std_vector*, const std_vector*)’
   45 | void rolling_max(std_vector* __result, const std_vector* __x) {
      |                  ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_9.cpp:88:
./CPP_9.cpp:101:73: error: ‘issame’ cannot be used as a function
  101 |       assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));
      |                                                                         ^


CPP_35.cpp: Compilation Failed
Error: In file included from ./CPP_35.cpp:15:
./CPP_35.cpp: In function ‘int main()’:
./CPP_35.cpp:17:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   17 |     assert (abs(max_element({1, 2, 3})- 3)<1e-4);
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_35.cpp:3:26: note:   initializing argument 1 of ‘float max_element(float*, int)’
    3 | float max_element(float* arr, int len) {
      |                   ~~~~~~~^~~
In file included from ./CPP_35.cpp:15:
./CPP_35.cpp:17:13: error: ‘abs’ was not declared in this scope
   17 |     assert (abs(max_element({1, 2, 3})- 3)<1e-4);
      |             ^~~
./CPP_35.cpp:18:68: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   18 |     assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);
      |                                                                    ^
      |                                                                    |
      |                                                                    <brace-enclosed initializer list>
./CPP_35.cpp:3:26: note:   initializing argument 1 of ‘float max_element(float*, int)’
    3 | float max_element(float* arr, int len) {
      |                   ~~~~~~~^~~


CPP_134.cpp: Compilation Failed
Error: In file included from ./CPP_134.cpp:42:
./CPP_134.cpp: In function ‘int main()’:
./CPP_134.cpp:44:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   44 |     assert (check_if_last_char_is_a_letter("apple") == false);
      |                                            ^~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:45:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   45 |     assert (check_if_last_char_is_a_letter("apple pi e") == true);
      |                                            ^~~~~~~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:46:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   46 |     assert (check_if_last_char_is_a_letter("eeeee") == false);
      |                                            ^~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:47:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   47 |     assert (check_if_last_char_is_a_letter("A") == true);
      |                                            ^~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:48:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   48 |     assert (check_if_last_char_is_a_letter("Pumpkin pie ") == false);
      |                                            ^~~~~~~~~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:49:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   49 |     assert (check_if_last_char_is_a_letter("Pumpkin pie 1") == false);
      |                                            ^~~~~~~~~~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:50:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   50 |     assert (check_if_last_char_is_a_letter("") == false);
      |                                            ^~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:51:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   51 |     assert (check_if_last_char_is_a_letter("eeeee e ") == false);
      |                                            ^~~~~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:52:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   52 |     assert (check_if_last_char_is_a_letter("apple pie") == false);
      |                                            ^~~~~~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^
In file included from ./CPP_134.cpp:42:
./CPP_134.cpp:53:44: error: cannot convert ‘const char*’ to ‘basic_string*’
   53 |     assert (check_if_last_char_is_a_letter("apple pi e ") == false);
      |                                            ^~~~~~~~~~~~~
      |                                            |
      |                                            const char*
./CPP_134.cpp:12:50: note:   initializing argument 1 of ‘int check_if_last_char_is_a_letter(basic_string*)’
   12 | int check_if_last_char_is_a_letter(basic_string* s) {
      |                                    ~~~~~~~~~~~~~~^


CPP_102.cpp: Execution Failed
Error: CPP_102: ./CPP_102.cpp:16: int main(): Assertion `choose_num(12, 15) == 14' failed.
Aborted (core dumped)


CPP_18.cpp: Compilation Failed
Error: In file included from ./CPP_18.cpp:55:
./CPP_18.cpp: In function ‘int main()’:
./CPP_18.cpp:57:28: error: cannot convert ‘const char*’ to ‘string*’
   57 |     assert (how_many_times("", "x") == 0);
      |                            ^~
      |                            |
      |                            const char*
./CPP_18.cpp:15:28: note:   initializing argument 1 of ‘int how_many_times(string*, string*)’
   15 | int how_many_times(string* str1, string* str2) {
      |                    ~~~~~~~~^~~~
In file included from ./CPP_18.cpp:55:
./CPP_18.cpp:58:28: error: cannot convert ‘const char*’ to ‘string*’
   58 |     assert (how_many_times("xyxyxyx", "x") == 4);
      |                            ^~~~~~~~~
      |                            |
      |                            const char*
./CPP_18.cpp:15:28: note:   initializing argument 1 of ‘int how_many_times(string*, string*)’
   15 | int how_many_times(string* str1, string* str2) {
      |                    ~~~~~~~~^~~~
In file included from ./CPP_18.cpp:55:
./CPP_18.cpp:59:29: error: cannot convert ‘const char*’ to ‘string*’
   59 |      assert (how_many_times("cacacacac", "cac") == 4);
      |                             ^~~~~~~~~~~
      |                             |
      |                             const char*
./CPP_18.cpp:15:28: note:   initializing argument 1 of ‘int how_many_times(string*, string*)’
   15 | int how_many_times(string* str1, string* str2) {
      |                    ~~~~~~~~^~~~
In file included from ./CPP_18.cpp:55:
./CPP_18.cpp:60:28: error: cannot convert ‘const char*’ to ‘string*’
   60 |     assert (how_many_times("john doe", "john") == 1);
      |                            ^~~~~~~~~~
      |                            |
      |                            const char*
./CPP_18.cpp:15:28: note:   initializing argument 1 of ‘int how_many_times(string*, string*)’
   15 | int how_many_times(string* str1, string* str2) {
      |                    ~~~~~~~~^~~~


CPP_45.cpp: Compilation Failed
Error: In file included from ./CPP_45.cpp:7:
./CPP_45.cpp: In function ‘int main()’:
./CPP_45.cpp:9:13: error: ‘abs’ was not declared in this scope
    9 |     assert (abs(triangle_area(5, 3) - 7.5)<1e-4);
      |             ^~~


CPP_21.cpp: Compilation Failed
Error: ./CPP_21.cpp:63:13: error: ‘vector’ was not declared in this scope
   63 | bool issame(vector<float> a,vector<float>b){
      |             ^~~~~~
./CPP_21.cpp:63:20: error: expected primary-expression before ‘float’
   63 | bool issame(vector<float> a,vector<float>b){
      |                    ^~~~~
./CPP_21.cpp:63:29: error: ‘vector’ was not declared in this scope
   63 | bool issame(vector<float> a,vector<float>b){
      |                             ^~~~~~
./CPP_21.cpp:63:36: error: expected primary-expression before ‘float’
   63 | bool issame(vector<float> a,vector<float>b){
      |                                    ^~~~~
./CPP_21.cpp:63:43: error: expression list treated as compound expression in initializer [-fpermissive]
   63 | bool issame(vector<float> a,vector<float>b){
      |                                           ^
In file included from ./CPP_21.cpp:62:
./CPP_21.cpp: In function ‘int main()’:
./CPP_21.cpp:72:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   72 |     assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_21.cpp:18:34: note:   initializing argument 1 of ‘void rescale_to_unit(std_vector*, std_vector*)’
   18 | void rescale_to_unit(std_vector* __result, std_vector* __x) {
      |                      ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_21.cpp:62:
./CPP_21.cpp:72:61: error: ‘issame’ cannot be used as a function
   72 |     assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));
      |                                                             ^
./CPP_21.cpp:73:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   73 |      assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0}));
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_21.cpp:18:34: note:   initializing argument 1 of ‘void rescale_to_unit(std_vector*, std_vector*)’
   18 | void rescale_to_unit(std_vector* __result, std_vector* __x) {
      |                      ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_21.cpp:62:
./CPP_21.cpp:73:63: error: ‘issame’ cannot be used as a function
   73 |      assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0}));
      |                                                               ^
./CPP_21.cpp:74:62: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   74 |      assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));
      |                                                              ^
      |                                                              |
      |                                                              <brace-enclosed initializer list>
./CPP_21.cpp:18:34: note:   initializing argument 1 of ‘void rescale_to_unit(std_vector*, std_vector*)’
   18 | void rescale_to_unit(std_vector* __result, std_vector* __x) {
      |                      ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_21.cpp:62:
./CPP_21.cpp:74:93: error: ‘issame’ cannot be used as a function
   74 |      assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));
      |                                                                                             ^
./CPP_21.cpp:75:61: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   75 |     assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));
      |                                                             ^
      |                                                             |
      |                                                             <brace-enclosed initializer list>
./CPP_21.cpp:18:34: note:   initializing argument 1 of ‘void rescale_to_unit(std_vector*, std_vector*)’
   18 | void rescale_to_unit(std_vector* __result, std_vector* __x) {
      |                      ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_21.cpp:62:
./CPP_21.cpp:75:92: error: ‘issame’ cannot be used as a function
   75 |     assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));
      |                                                                                            ^
./CPP_21.cpp:76:67: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   76 |      assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));
      |                                                                   ^
      |                                                                   |
      |                                                                   <brace-enclosed initializer list>
./CPP_21.cpp:18:34: note:   initializing argument 1 of ‘void rescale_to_unit(std_vector*, std_vector*)’
   18 | void rescale_to_unit(std_vector* __result, std_vector* __x) {
      |                      ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_21.cpp:62:
./CPP_21.cpp:76:97: error: ‘issame’ cannot be used as a function
   76 |      assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));
      |                                                                                                 ^


CPP_78.cpp: Execution Failed
Error: CPP_78: ./CPP_78.cpp:57: int main(): Assertion `hex_key("1077E") == 2' failed.
Aborted (core dumped)


CPP_63.cpp: Compilation Failed
Error: In file included from ./CPP_63.cpp:22:
./CPP_63.cpp: In function ‘int main()’:
./CPP_63.cpp:24:13: error: ‘fibfib’ was not declared in this scope
   24 |     assert (fibfib(2) == 1);
      |             ^~~~~~


CPP_100.cpp: Compilation Failed
Error: ./CPP_100.cpp:46:13: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   46 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             Vector
./CPP_100.cpp:46:20: error: expected primary-expression before ‘int’
   46 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_100.cpp:46:27: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   46 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           Vector
./CPP_100.cpp:46:34: error: expected primary-expression before ‘int’
   46 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_100.cpp:46:39: error: expression list treated as compound expression in initializer [-fpermissive]
   46 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_100.cpp:54:5: error: redefinition of ‘int main()’
   54 | int main(){
      |     ^~~~
./CPP_100.cpp:38:5: note: ‘int main()’ previously defined here
   38 | int main() {
      |     ^~~~
In file included from ./CPP_100.cpp:45:
./CPP_100.cpp: In function ‘int main()’:
./CPP_100.cpp:55:32: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   55 |     assert (issame(make_a_pile(3) , {3, 5, 7}));
      |                                ^
      |                                |
      |                                int
./CPP_100.cpp:55:33: error: too few arguments to function ‘void make_a_pile(Vector*, int)’
   55 |     assert (issame(make_a_pile(3) , {3, 5, 7}));
      |                                 ^
./CPP_100.cpp:19:6: note: declared here
   19 | void make_a_pile(Vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_100.cpp:45:
./CPP_100.cpp:55:46: error: ‘issame’ cannot be used as a function
   55 |     assert (issame(make_a_pile(3) , {3, 5, 7}));
      |                                              ^
./CPP_100.cpp:56:32: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   56 |     assert (issame(make_a_pile(4) , {4,6,8,10}));
      |                                ^
      |                                |
      |                                int
./CPP_100.cpp:56:33: error: too few arguments to function ‘void make_a_pile(Vector*, int)’
   56 |     assert (issame(make_a_pile(4) , {4,6,8,10}));
      |                                 ^
./CPP_100.cpp:19:6: note: declared here
   19 | void make_a_pile(Vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_100.cpp:45:
./CPP_100.cpp:56:47: error: ‘issame’ cannot be used as a function
   56 |     assert (issame(make_a_pile(4) , {4,6,8,10}));
      |                                               ^
./CPP_100.cpp:57:32: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   57 |     assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));
      |                                ^
      |                                |
      |                                int
./CPP_100.cpp:57:33: error: too few arguments to function ‘void make_a_pile(Vector*, int)’
   57 |     assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));
      |                                 ^
./CPP_100.cpp:19:6: note: declared here
   19 | void make_a_pile(Vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_100.cpp:45:
./CPP_100.cpp:57:54: error: ‘issame’ cannot be used as a function
   57 |     assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));
      |                                                      ^
./CPP_100.cpp:58:32: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   58 |     assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));
      |                                ^
      |                                |
      |                                int
./CPP_100.cpp:58:33: error: too few arguments to function ‘void make_a_pile(Vector*, int)’
   58 |     assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));
      |                                 ^
./CPP_100.cpp:19:6: note: declared here
   19 | void make_a_pile(Vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_100.cpp:45:
./CPP_100.cpp:58:59: error: ‘issame’ cannot be used as a function
   58 |     assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));
      |                                                           ^
./CPP_100.cpp:59:32: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   59 |     assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));
      |                                ^
      |                                |
      |                                int
./CPP_100.cpp:59:33: error: too few arguments to function ‘void make_a_pile(Vector*, int)’
   59 |     assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));
      |                                 ^
./CPP_100.cpp:19:6: note: declared here
   19 | void make_a_pile(Vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_100.cpp:45:
./CPP_100.cpp:59:68: error: ‘issame’ cannot be used as a function
   59 |     assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));
      |                                                                    ^


CPP_106.cpp: Compilation Failed
Error: ./CPP_106.cpp:56:13: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   56 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             Vector
./CPP_106.cpp:56:20: error: expected primary-expression before ‘int’
   56 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_106.cpp:56:27: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   56 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           Vector
./CPP_106.cpp:56:34: error: expected primary-expression before ‘int’
   56 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_106.cpp:56:39: error: expression list treated as compound expression in initializer [-fpermissive]
   56 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_106.cpp:64:5: error: redefinition of ‘int main()’
   64 | int main(){
      |     ^~~~
./CPP_106.cpp:45:5: note: ‘int main()’ previously defined here
   45 | int main() {
      |     ^~~~
In file included from ./CPP_106.cpp:55:
./CPP_106.cpp: In function ‘int main()’:
./CPP_106.cpp:65:22: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   65 |     assert (issame(f(5) , {1, 2, 6, 24, 15}));
      |                      ^
      |                      |
      |                      int
./CPP_106.cpp:65:23: error: too few arguments to function ‘void f(Vector*, int)’
   65 |     assert (issame(f(5) , {1, 2, 6, 24, 15}));
      |                       ^
./CPP_106.cpp:29:6: note: declared here
   29 | void f(Vector* vec, int n) {
      |      ^
In file included from ./CPP_106.cpp:55:
./CPP_106.cpp:65:44: error: ‘issame’ cannot be used as a function
   65 |     assert (issame(f(5) , {1, 2, 6, 24, 15}));
      |                                            ^
./CPP_106.cpp:66:22: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   66 |     assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));
      |                      ^
      |                      |
      |                      int
./CPP_106.cpp:66:23: error: too few arguments to function ‘void f(Vector*, int)’
   66 |     assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));
      |                       ^
./CPP_106.cpp:29:6: note: declared here
   29 | void f(Vector* vec, int n) {
      |      ^
In file included from ./CPP_106.cpp:55:
./CPP_106.cpp:66:53: error: ‘issame’ cannot be used as a function
   66 |     assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));
      |                                                     ^
./CPP_106.cpp:67:22: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   67 |     assert (issame(f(1) , {1}));
      |                      ^
      |                      |
      |                      int
./CPP_106.cpp:67:23: error: too few arguments to function ‘void f(Vector*, int)’
   67 |     assert (issame(f(1) , {1}));
      |                       ^
./CPP_106.cpp:29:6: note: declared here
   29 | void f(Vector* vec, int n) {
      |      ^
In file included from ./CPP_106.cpp:55:
./CPP_106.cpp:67:30: error: ‘issame’ cannot be used as a function
   67 |     assert (issame(f(1) , {1}));
      |                              ^
./CPP_106.cpp:68:22: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   68 |     assert (issame(f(3) , {1, 2, 6}));
      |                      ^
      |                      |
      |                      int
./CPP_106.cpp:68:23: error: too few arguments to function ‘void f(Vector*, int)’
   68 |     assert (issame(f(3) , {1, 2, 6}));
      |                       ^
./CPP_106.cpp:29:6: note: declared here
   29 | void f(Vector* vec, int n) {
      |      ^
In file included from ./CPP_106.cpp:55:
./CPP_106.cpp:68:36: error: ‘issame’ cannot be used as a function
   68 |     assert (issame(f(3) , {1, 2, 6}));
      |                                    ^


CPP_99.cpp: Compilation Failed
Error: ./CPP_99.cpp: In function ‘int closest_integer(const char*)’:
./CPP_99.cpp:7:17: error: ‘round’ was not declared in this scope
    7 |     return (int)round(num);
      |                 ^~~~~


CPP_39.cpp: Execution Failed
Error: CPP_39: ./CPP_39.cpp:29: int main(): Assertion `prime_fib(1) == 2' failed.
Aborted (core dumped)


CPP_56.cpp: Compilation Failed
Error: ./CPP_56.cpp:4:40: error: ‘size_t’ has not been declared
    4 | bool correct_bracketing(const char* s, size_t len) {
      |                                        ^~~~~~
./CPP_56.cpp: In function ‘bool correct_bracketing(const char*, int)’:
./CPP_56.cpp:10:10: error: ‘size_t’ was not declared in this scope
   10 |     for (size_t i = 0; i < len; i++) {
      |          ^~~~~~
./CPP_56.cpp:3:1: note: ‘size_t’ is defined in header ‘<cstddef>’; did you forget to ‘#include <cstddef>’?
    2 | #include <stdint.h>
  +++ |+#include <cstddef>
    3 | 
./CPP_56.cpp:10:24: error: ‘i’ was not declared in this scope
   10 |     for (size_t i = 0; i < len; i++) {
      |                        ^
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp: In function ‘int main()’:
./CPP_56.cpp:27:36: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   27 |     assert (correct_bracketing("<>"));
      |                                    ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:28:40: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   28 |     assert (correct_bracketing("<<><>>"));
      |                                        ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:29:46: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   29 |     assert (correct_bracketing("<><><<><>><>"));
      |                                              ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:30:60: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   30 |     assert (correct_bracketing("<><><<<><><>><>><<><><<>>>"));
      |                                                            ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:31:48: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   31 |     assert (not (correct_bracketing("<<<><>>>>")));
      |                                                ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:32:43: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   32 |     assert (not (correct_bracketing("><<>")));
      |                                           ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:33:40: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   33 |     assert (not (correct_bracketing("<")));
      |                                        ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:34:43: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   34 |     assert (not (correct_bracketing("<<<<")));
      |                                           ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:35:40: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   35 |     assert (not (correct_bracketing(">")));
      |                                        ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:36:42: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   36 |     assert (not (correct_bracketing("<<>")));
      |                                          ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:37:55: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   37 |     assert (not (correct_bracketing("<><><<><>><>><<>")));
      |                                                       ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~
In file included from ./CPP_56.cpp:25:
./CPP_56.cpp:38:55: error: too few arguments to function ‘bool correct_bracketing(const char*, int)’
   38 |     assert (not (correct_bracketing("<><><<><>><>>><>")));
      |                                                       ^
./CPP_56.cpp:4:6: note: declared here
    4 | bool correct_bracketing(const char* s, size_t len) {
      |      ^~~~~~~~~~~~~~~~~~


CPP_11.cpp: Compilation Failed
Error: ./CPP_11.cpp:3:22: error: variable or field ‘string_xor’ declared void
    3 | void string_xor(std::string* result, const std::string* str1, const std::string* str2) {
      |                      ^~~~~~
./CPP_11.cpp:3:22: error: ‘string’ is not a member of ‘std’
./CPP_11.cpp:2:1: note: ‘std::string’ is defined in header ‘<string>’; did you forget to ‘#include <string>’?
    1 | #include <string.h>
  +++ |+#include <string>
    2 | 
./CPP_11.cpp:3:30: error: ‘result’ was not declared in this scope
    3 | void string_xor(std::string* result, const std::string* str1, const std::string* str2) {
      |                              ^~~~~~
./CPP_11.cpp:3:38: error: expected primary-expression before ‘const’
    3 | void string_xor(std::string* result, const std::string* str1, const std::string* str2) {
      |                                      ^~~~~
./CPP_11.cpp:3:63: error: expected primary-expression before ‘const’
    3 | void string_xor(std::string* result, const std::string* str1, const std::string* str2) {
      |                                                               ^~~~~
In file included from ./CPP_11.cpp:29:
./CPP_11.cpp: In function ‘int main()’:
./CPP_11.cpp:31:13: error: ‘string_xor’ was not declared in this scope
   31 |     assert (string_xor("111000", "101010") == "010010");
      |             ^~~~~~~~~~


CPP_146.cpp: Compilation Failed
Error: ./CPP_146.cpp:33:5: error: redefinition of ‘int main()’
   33 | int main(){
      |     ^~~~
./CPP_146.cpp:22:5: note: ‘int main()’ previously defined here
   22 | int main() {
      |     ^~~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp: In function ‘int main()’:
./CPP_146.cpp:34:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   34 |     assert (specialFilter({5, -2, 1, -5}) == 0  );
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_146.cpp:5:24: note:   initializing argument 1 of ‘int specialFilter(int*, int)’
    5 | int specialFilter(int* arr, int size) {
      |                   ~~~~~^~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp:35:45: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   35 |     assert (specialFilter({15, -73, 14, -15}) == 1);
      |                                             ^
      |                                             |
      |                                             <brace-enclosed initializer list>
./CPP_146.cpp:5:24: note:   initializing argument 1 of ‘int specialFilter(int*, int)’
    5 | int specialFilter(int* arr, int size) {
      |                   ~~~~~^~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp:36:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   36 |     assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_146.cpp:5:24: note:   initializing argument 1 of ‘int specialFilter(int*, int)’
    5 | int specialFilter(int* arr, int size) {
      |                   ~~~~~^~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp:37:55: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   37 |     assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);
      |                                                       ^
      |                                                       |
      |                                                       <brace-enclosed initializer list>
./CPP_146.cpp:5:24: note:   initializing argument 1 of ‘int specialFilter(int*, int)’
    5 | int specialFilter(int* arr, int size) {
      |                   ~~~~~^~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp:38:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   38 |     assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_146.cpp:5:24: note:   initializing argument 1 of ‘int specialFilter(int*, int)’
    5 | int specialFilter(int* arr, int size) {
      |                   ~~~~~^~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp:39:30: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   39 |     assert (specialFilter({1}) == 0              );
      |                              ^
      |                              |
      |                              int
./CPP_146.cpp:39:30: error: too few arguments to function ‘int specialFilter(int*, int)’
./CPP_146.cpp:5:5: note: declared here
    5 | int specialFilter(int* arr, int size) {
      |     ^~~~~~~~~~~~~
In file included from ./CPP_146.cpp:32:
./CPP_146.cpp:40:29: error: too few arguments to function ‘int specialFilter(int*, int)’
   40 |     assert (specialFilter({}) == 0                   );
      |                             ^
./CPP_146.cpp:5:5: note: declared here
    5 | int specialFilter(int* arr, int size) {
      |     ^~~~~~~~~~~~~


CPP_59.cpp: Execution Failed
Error: CPP_59: ./CPP_59.cpp:29: int main(): Assertion `largest_prime_factor(15) == 5' failed.
Aborted (core dumped)


CPP_32.cpp: Compilation Failed
Error: ./CPP_32.cpp: In function ‘int main()’:
./CPP_32.cpp:70:9: error: ‘vector’ was not declared in this scope
   70 |         vector<double> coeffs = {};
      |         ^~~~~~
./CPP_32.cpp:70:16: error: expected primary-expression before ‘double’
   70 |         vector<double> coeffs = {};
      |                ^~~~~~
./CPP_32.cpp:75:13: error: ‘coeffs’ was not declared in this scope; did you mean ‘coeff’?
   75 |             coeffs.push_back(coeff);
      |             ^~~~~~
      |             coeff
./CPP_32.cpp:78:30: error: ‘coeffs’ was not declared in this scope; did you mean ‘ncoeff’?
   78 |         solution = find_zero(coeffs);
      |                              ^~~~~~
      |                              ncoeff


CPP_77.cpp: Compilation Failed
Error: In file included from ./CPP_77.cpp:13:
./CPP_77.cpp: In function ‘int main()’:
./CPP_77.cpp:15:13: error: ‘iscuber’ was not declared in this scope
   15 |     assert (iscuber(1) == true);
      |             ^~~~~~~


CPP_98.cpp: Compilation Failed
Error: ./CPP_98.cpp: In function ‘int count_upper(char*)’:
./CPP_98.cpp:7:17: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    7 |     char *str = "AEIOU";
      |                 ^~~~~~~
./CPP_98.cpp: In function ‘int main()’:
./CPP_98.cpp:27:15: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   27 |     char *s = "Hello World";
      |               ^~~~~~~~~~~~~
./CPP_98.cpp: At global scope:
./CPP_98.cpp:34:5: error: redefinition of ‘int main()’
   34 | int main(){
      |     ^~~~
./CPP_98.cpp:26:5: note: ‘int main()’ previously defined here
   26 | int main() {
      |     ^~~~
In file included from ./CPP_98.cpp:33:
./CPP_98.cpp: In function ‘int main()’:
./CPP_98.cpp:35:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   35 |     assert (count_upper("aBCdEf")  == 1);
      |                         ^~~~~~~~
./CPP_98.cpp:36:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   36 |     assert (count_upper("abcdefg") == 0);
      |                         ^~~~~~~~~
./CPP_98.cpp:37:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   37 |     assert (count_upper("dBBE") == 0);
      |                         ^~~~~~
./CPP_98.cpp:38:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   38 |     assert (count_upper("B")  == 0);
      |                         ^~~
./CPP_98.cpp:39:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   39 |     assert (count_upper("U")  == 1);
      |                         ^~~
./CPP_98.cpp:40:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   40 |     assert (count_upper("") == 0);
      |                         ^~
./CPP_98.cpp:41:25: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   41 |     assert (count_upper("EEEE") == 2);
      |                         ^~~~~~


CPP_0.cpp: Compilation Failed
Error: ./CPP_0.cpp:28:5: error: redefinition of ‘int main()’
   28 | int main(){
      |     ^~~~
./CPP_0.cpp:21:5: note: ‘int main()’ previously defined here
   21 | int main() {
      |     ^~~~
./CPP_0.cpp: In function ‘int main()’:
./CPP_0.cpp:29:5: error: ‘vector’ was not declared in this scope
   29 |     vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};
      |     ^~~~~~
./CPP_0.cpp:29:12: error: expected primary-expression before ‘float’
   29 |     vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};
      |            ^~~~~
In file included from ./CPP_0.cpp:27:
./CPP_0.cpp:30:32: error: ‘a’ was not declared in this scope
   30 |     assert (has_close_elements(a, 0.3)==true);
      |                                ^
./CPP_0.cpp:33:63: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   33 |     assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);
      |                                                               ^
      |                                                               |
      |                                                               <brace-enclosed initializer list>
./CPP_0.cpp:9:31: note:   initializing argument 1 of ‘int has_close_elements(float*, int, float)’
    9 | int has_close_elements(float* data, int size, float threshold) {
      |                        ~~~~~~~^~~~
In file included from ./CPP_0.cpp:27:
./CPP_0.cpp:34:62: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   34 |     assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);
      |                                                              ^
      |                                                              |
      |                                                              <brace-enclosed initializer list>
./CPP_0.cpp:9:31: note:   initializing argument 1 of ‘int has_close_elements(float*, int, float)’
    9 | int has_close_elements(float* data, int size, float threshold) {
      |                        ~~~~~~~^~~~
In file included from ./CPP_0.cpp:27:
./CPP_0.cpp:35:62: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   35 |     assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);
      |                                                              ^
      |                                                              |
      |                                                              <brace-enclosed initializer list>
./CPP_0.cpp:9:31: note:   initializing argument 1 of ‘int has_close_elements(float*, int, float)’
    9 | int has_close_elements(float* data, int size, float threshold) {
      |                        ~~~~~~~^~~~
In file included from ./CPP_0.cpp:27:
./CPP_0.cpp:36:62: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   36 |     assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);
      |                                                              ^
      |                                                              |
      |                                                              <brace-enclosed initializer list>
./CPP_0.cpp:9:31: note:   initializing argument 1 of ‘int has_close_elements(float*, int, float)’
    9 | int has_close_elements(float* data, int size, float threshold) {
      |                        ~~~~~~~^~~~
In file included from ./CPP_0.cpp:27:
./CPP_0.cpp:37:62: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   37 |     assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);
      |                                                              ^
      |                                                              |
      |                                                              <brace-enclosed initializer list>
./CPP_0.cpp:9:31: note:   initializing argument 1 of ‘int has_close_elements(float*, int, float)’
    9 | int has_close_elements(float* data, int size, float threshold) {
      |                        ~~~~~~~^~~~


CPP_141.cpp: Compilation Failed
Error: ./CPP_141.cpp:23:100: error: expected ‘,’ or ‘...’ before ‘sret’
   23 | void _Z15file_name_checkNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(basic_string* noalias sret, basic_string* nocapture readonly str) {
      |                                                                                                    ^~~~
./CPP_141.cpp: In function ‘void _Z15file_name_checkNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(basic_string*)’:
./CPP_141.cpp:27:9: error: ‘str’ was not declared in this scope; did you mean ‘std’?
   27 |     if (str->_M_string_length < 5) {
      |         ^~~
      |         std
./CPP_141.cpp:28:9: error: ‘sret’ was not declared in this scope
   28 |         sret->_M_dataplus._M_p = "No";
      |         ^~~~
./CPP_141.cpp:33:13: error: ‘str’ was not declared in this scope; did you mean ‘std’?
   33 |     switch (str->_M_dataplus._M_p[0]) {
      |             ^~~
      |             std
./CPP_141.cpp:46:13: error: ‘sret’ was not declared in this scope
   46 |             sret->_M_dataplus._M_p = "No";
      |             ^~~~
./CPP_141.cpp:54:29: error: ‘str’ was not declared in this scope; did you mean ‘std’?
   54 |     tmp._M_dataplus._M_p = &str->_M_dataplus._M_p[str->_M_string_length - 4];
      |                             ^~~
      |                             std
./CPP_141.cpp:61:9: error: ‘sret’ was not declared in this scope
   61 |         sret->_M_dataplus._M_p = "No";
      |         ^~~~
./CPP_141.cpp:79:9: error: ‘sret’ was not declared in this scope
   79 |         sret->_M_dataplus._M_p = "No";
      |         ^~~~
./CPP_141.cpp:82:9: error: ‘sret’ was not declared in this scope
   82 |         sret->_M_dataplus._M_p = "Yes";
      |         ^~~~
In file included from ./CPP_141.cpp:90:
./CPP_141.cpp: In function ‘int main()’:
./CPP_141.cpp:92:13: error: ‘file_name_check’ was not declared in this scope
   92 |     assert (file_name_check("example.txt") == "Yes");
      |             ^~~~~~~~~~~~~~~


CPP_127.cpp: Compilation Failed
Error: In file included from ./CPP_127.cpp:29:
./CPP_127.cpp: In function ‘int main()’:
./CPP_127.cpp:31:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   31 |     assert (intersection({1, 2}, {2, 3}) == "NO");
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:32:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   32 |     assert (intersection({-1, 1}, {0, 4}) == "NO");
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:33:43: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   33 |     assert (intersection({-3, -1}, {-5, 5}) == "YES");
      |                                           ^
      |                                           |
      |                                           <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:34:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   34 |     assert (intersection({-2, 2}, {-4, 0}) == "YES");
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:35:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   35 |     assert (intersection({-11, 2}, {-1, -1}) == "NO");
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:36:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   36 |     assert (intersection({1, 2}, {3, 5}) == "NO");
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:37:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   37 |     assert (intersection({1, 2}, {1, 2}) == "NO");
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~
In file included from ./CPP_127.cpp:29:
./CPP_127.cpp:38:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘char**’
   38 |     assert (intersection({-2, -2}, {-3, -2}) == "NO");
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_127.cpp:4:26: note:   initializing argument 1 of ‘void intersection(char**, int*, int, int*, int)’
    4 | void intersection(char** result, int* v1, int size1, int* v2, int size2) {
      |                   ~~~~~~~^~~~~~


CPP_122.cpp: Compilation Failed
Error: ./CPP_122.cpp:26:5: error: redefinition of ‘int main()’
   26 | int main(){
      |     ^~~~
./CPP_122.cpp:15:5: note: ‘int main()’ previously defined here
   15 | int main() {
      |     ^~~~
In file included from ./CPP_122.cpp:25:
./CPP_122.cpp: In function ‘int main()’:
./CPP_122.cpp:27:56: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   27 |     assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);
      |                                                        ^
      |                                                        |
      |                                                        <brace-enclosed initializer list>
./CPP_122.cpp:4:23: note:   initializing argument 1 of ‘int add_elements(int*, int)’
    4 | int add_elements(int* data, int size) {
      |                  ~~~~~^~~~
In file included from ./CPP_122.cpp:25:
./CPP_122.cpp:28:49: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   28 |     assert (add_elements({111,121,3,4000,5,6}, 2) == 0);
      |                                                 ^
      |                                                 |
      |                                                 <brace-enclosed initializer list>
./CPP_122.cpp:4:23: note:   initializing argument 1 of ‘int add_elements(int*, int)’
    4 | int add_elements(int* data, int size) {
      |                  ~~~~~^~~~
In file included from ./CPP_122.cpp:25:
./CPP_122.cpp:29:51: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);
      |                                                   ^
      |                                                   |
      |                                                   <brace-enclosed initializer list>
./CPP_122.cpp:4:23: note:   initializing argument 1 of ‘int add_elements(int*, int)’
    4 | int add_elements(int* data, int size) {
      |                  ~~~~~^~~~
In file included from ./CPP_122.cpp:25:
./CPP_122.cpp:30:54: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   30 |     assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);
      |                                                      ^
      |                                                      |
      |                                                      <brace-enclosed initializer list>
./CPP_122.cpp:4:23: note:   initializing argument 1 of ‘int add_elements(int*, int)’
    4 | int add_elements(int* data, int size) {
      |                  ~~~~~^~~~
In file included from ./CPP_122.cpp:25:
./CPP_122.cpp:31:32: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   31 |     assert (add_elements({1}, 1) == 1);
      |                                ^
      |                                |
      |                                int
./CPP_122.cpp:4:23: note:   initializing argument 1 of ‘int add_elements(int*, int)’
    4 | int add_elements(int* data, int size) {
      |                  ~~~~~^~~~


CPP_55.cpp: Compilation Failed
Error: In file included from ./CPP_55.cpp:13:
./CPP_55.cpp: In function ‘int main()’:
./CPP_55.cpp:15:13: error: ‘fib’ was not declared in this scope
   15 |     assert (fib(10) == 55);
      |             ^~~


CPP_115.cpp: Compilation Failed
Error: In file included from ./CPP_115.cpp:43:
./CPP_115.cpp: In function ‘int main()’:
./CPP_115.cpp:45:58: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int**’
   45 |     assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);
      |                                                          ^
      |                                                          |
      |                                                          <brace-enclosed initializer list>
./CPP_115.cpp:4:20: note:   initializing argument 1 of ‘int max_fill(int**, int, int)’
    4 | int max_fill(int** vec, int size, int num) {
      |              ~~~~~~^~~
In file included from ./CPP_115.cpp:43:
./CPP_115.cpp:46:69: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int**’
   46 |     assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);
      |                                                                     ^
      |                                                                     |
      |                                                                     <brace-enclosed initializer list>
./CPP_115.cpp:4:20: note:   initializing argument 1 of ‘int max_fill(int**, int, int)’
    4 | int max_fill(int** vec, int size, int num) {
      |              ~~~~~~^~~
In file included from ./CPP_115.cpp:43:
./CPP_115.cpp:47:43: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int**’
   47 |     assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);
      |                                           ^
      |                                           |
      |                                           <brace-enclosed initializer list>
./CPP_115.cpp:4:20: note:   initializing argument 1 of ‘int max_fill(int**, int, int)’
    4 | int max_fill(int** vec, int size, int num) {
      |              ~~~~~~^~~
In file included from ./CPP_115.cpp:43:
./CPP_115.cpp:48:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int**’
   48 |     assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_115.cpp:4:20: note:   initializing argument 1 of ‘int max_fill(int**, int, int)’
    4 | int max_fill(int** vec, int size, int num) {
      |              ~~~~~~^~~
In file included from ./CPP_115.cpp:43:
./CPP_115.cpp:49:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int**’
   49 |     assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_115.cpp:4:20: note:   initializing argument 1 of ‘int max_fill(int**, int, int)’
    4 | int max_fill(int** vec, int size, int num) {
      |              ~~~~~~^~~


CPP_40.cpp: Compilation Failed
Error: In file included from ./CPP_40.cpp:22:
./CPP_40.cpp: In function ‘int main()’:
./CPP_40.cpp:24:45: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   24 |     assert (triples_sum_to_zero({1, 3, 5, 0}) == false);
      |                                             ^
      |                                             |
      |                                             <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:25:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   25 |     assert (triples_sum_to_zero({1, 3, 5, -1}) == false);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:26:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   26 |     assert (triples_sum_to_zero({1, 3, -2, 1}) == true);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:27:45: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   27 |     assert (triples_sum_to_zero({1, 2, 3, 7}) == false);
      |                                             ^
      |                                             |
      |                                             <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:28:45: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   28 |     assert (triples_sum_to_zero({1, 2, 5, 7}) == false);
      |                                             ^
      |                                             |
      |                                             <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:29:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   29 |     assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:30:36: error: invalid conversion from ‘int’ to ‘int32_t*’ {aka ‘int*’} [-fpermissive]
   30 |     assert (triples_sum_to_zero({1}) == false);
      |                                    ^
      |                                    |
      |                                    int
./CPP_40.cpp:30:36: error: too few arguments to function ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
./CPP_40.cpp:3:9: note: declared here
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |         ^~~~~~~~~~~~~~~~~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:31:48: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   31 |     assert (triples_sum_to_zero({1, 3, 5, -100}) == false);
      |                                                ^
      |                                                |
      |                                                <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~
In file included from ./CPP_40.cpp:22:
./CPP_40.cpp:32:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int32_t*’ {aka ‘int*’}
   32 |     assert (triples_sum_to_zero({100, 3, 5, -100}) == false);
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_40.cpp:3:38: note:   initializing argument 1 of ‘int32_t triples_sum_to_zero(int32_t*, int64_t)’
    3 | int32_t triples_sum_to_zero(int32_t* data, int64_t size) {
      |                             ~~~~~~~~~^~~~


CPP_48.cpp: Compilation Failed
Error: ./CPP_48.cpp: In function ‘void* _ZdlPv(void*)’:
./CPP_48.cpp:24:5: error: ‘free’ was not declared in this scope
   24 |     free(p);
      |     ^~~~
./CPP_48.cpp:2:1: note: ‘free’ is defined in header ‘<cstdlib>’; did you forget to ‘#include <cstdlib>’?
    1 | #include <string.h>
  +++ |+#include <cstdlib>
    2 | 
./CPP_48.cpp: At global scope:
./CPP_48.cpp:28:87: error: expected ‘,’ or ‘...’ before ‘this’
   28 | int _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(basic_string* this, unsigned long long* p, unsigned long long n) {
      |                                                                                       ^~~~
./CPP_48.cpp: In function ‘int _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(basic_string*)’:
./CPP_48.cpp:29:5: error: invalid use of ‘this’ in non-member function
   29 |     this->_M_dataplus._M_p = malloc(n);
      |     ^~~~
./CPP_48.cpp:29:37: error: ‘n’ was not declared in this scope
   29 |     this->_M_dataplus._M_p = malloc(n);
      |                                     ^
./CPP_48.cpp:29:30: error: ‘malloc’ was not declared in this scope
   29 |     this->_M_dataplus._M_p = malloc(n);
      |                              ^~~~~~
./CPP_48.cpp:29:30: note: ‘malloc’ is defined in header ‘<cstdlib>’; did you forget to ‘#include <cstdlib>’?
./CPP_48.cpp:30:5: error: invalid use of ‘this’ in non-member function
   30 |     this->_M_string_length = n;
      |     ^~~~
./CPP_48.cpp:31:12: error: invalid use of ‘this’ in non-member function
   31 |     return this->_M_dataplus._M_p;
      |            ^~~~
./CPP_48.cpp: In function ‘int is_palindrome(basic_string*)’:
./CPP_48.cpp:37:27: error: ‘malloc’ was not declared in this scope
   37 |     char* reversed_data = malloc(length);
      |                           ^~~~~~
./CPP_48.cpp:37:27: note: ‘malloc’ is defined in header ‘<cstdlib>’; did you forget to ‘#include <cstdlib>’?
./CPP_48.cpp:43:5: error: ‘free’ was not declared in this scope
   43 |     free(reversed_data);
      |     ^~~~
./CPP_48.cpp:43:5: note: ‘free’ is defined in header ‘<cstdlib>’; did you forget to ‘#include <cstdlib>’?
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp: In function ‘int main()’:
./CPP_48.cpp:50:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   50 |     assert (is_palindrome("") == true);
      |                           ^~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp:51:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   51 |     assert (is_palindrome("aba") == true);
      |                           ^~~~~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp:52:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   52 |     assert (is_palindrome("aaaaa") == true);
      |                           ^~~~~~~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp:53:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   53 |     assert (is_palindrome("zbcd") == false);
      |                           ^~~~~~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp:54:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   54 |     assert (is_palindrome("xywyx") == true);
      |                           ^~~~~~~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp:55:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   55 |     assert (is_palindrome("xywyz") == false);
      |                           ^~~~~~~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^
In file included from ./CPP_48.cpp:48:
./CPP_48.cpp:56:27: error: cannot convert ‘const char*’ to ‘basic_string*’
   56 |     assert (is_palindrome("xywzx") == false);
      |                           ^~~~~~~
      |                           |
      |                           const char*
./CPP_48.cpp:34:33: note:   initializing argument 1 of ‘int is_palindrome(basic_string*)’
   34 | int is_palindrome(basic_string* s) {
      |                   ~~~~~~~~~~~~~~^


CPP_155.cpp: Compilation Failed
Error: ./CPP_155.cpp:60:13: error: ‘vector’ was not declared in this scope; did you mean ‘vector_t’?
   60 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             vector_t
./CPP_155.cpp:60:20: error: expected primary-expression before ‘int’
   60 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_155.cpp:60:27: error: ‘vector’ was not declared in this scope; did you mean ‘vector_t’?
   60 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           vector_t
./CPP_155.cpp:60:34: error: expected primary-expression before ‘int’
   60 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_155.cpp:60:39: error: expression list treated as compound expression in initializer [-fpermissive]
   60 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_155.cpp:68:5: error: redefinition of ‘int main()’
   68 | int main(){
      |     ^~~~
./CPP_155.cpp:49:5: note: ‘int main()’ previously defined here
   49 | int main() {
      |     ^~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp: In function ‘int main()’:
./CPP_155.cpp:69:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   69 |     assert (issame(even_odd_count(7) , {0, 1}));
      |                                   ^
      |                                   |
      |                                   int
./CPP_155.cpp:69:36: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   69 |     assert (issame(even_odd_count(7) , {0, 1}));
      |                                    ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:69:46: error: ‘issame’ cannot be used as a function
   69 |     assert (issame(even_odd_count(7) , {0, 1}));
      |                                              ^
./CPP_155.cpp:70:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   70 |     assert (issame(even_odd_count(-78) , {1, 1}));
      |                                   ^~~
      |                                   |
      |                                   int
./CPP_155.cpp:70:38: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   70 |     assert (issame(even_odd_count(-78) , {1, 1}));
      |                                      ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:70:48: error: ‘issame’ cannot be used as a function
   70 |     assert (issame(even_odd_count(-78) , {1, 1}));
      |                                                ^
./CPP_155.cpp:71:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   71 |     assert (issame(even_odd_count(3452) , {2, 2}));
      |                                   ^~~~
      |                                   |
      |                                   int
./CPP_155.cpp:71:39: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   71 |     assert (issame(even_odd_count(3452) , {2, 2}));
      |                                       ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:71:49: error: ‘issame’ cannot be used as a function
   71 |     assert (issame(even_odd_count(3452) , {2, 2}));
      |                                                 ^
./CPP_155.cpp:72:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   72 |     assert (issame(even_odd_count(346211) , {3, 3}));
      |                                   ^~~~~~
      |                                   |
      |                                   int
./CPP_155.cpp:72:41: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   72 |     assert (issame(even_odd_count(346211) , {3, 3}));
      |                                         ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:72:51: error: ‘issame’ cannot be used as a function
   72 |     assert (issame(even_odd_count(346211) , {3, 3}));
      |                                                   ^
./CPP_155.cpp:73:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   73 |     assert (issame(even_odd_count(-345821) , {3, 3}));
      |                                   ^~~~~~~
      |                                   |
      |                                   int
./CPP_155.cpp:73:42: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   73 |     assert (issame(even_odd_count(-345821) , {3, 3}));
      |                                          ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:73:52: error: ‘issame’ cannot be used as a function
   73 |     assert (issame(even_odd_count(-345821) , {3, 3}));
      |                                                    ^
./CPP_155.cpp:74:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   74 |     assert (issame(even_odd_count(-2) , {1, 0}));
      |                                   ^~
      |                                   |
      |                                   int
./CPP_155.cpp:74:37: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   74 |     assert (issame(even_odd_count(-2) , {1, 0}));
      |                                     ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:74:47: error: ‘issame’ cannot be used as a function
   74 |     assert (issame(even_odd_count(-2) , {1, 0}));
      |                                               ^
./CPP_155.cpp:75:35: error: invalid conversion from ‘int’ to ‘vector_t*’ [-fpermissive]
   75 |     assert (issame(even_odd_count(-45347) , {2, 3}));
      |                                   ^~~~~~
      |                                   |
      |                                   int
./CPP_155.cpp:75:41: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   75 |     assert (issame(even_odd_count(-45347) , {2, 3}));
      |                                         ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:75:51: error: ‘issame’ cannot be used as a function
   75 |     assert (issame(even_odd_count(-45347) , {2, 3}));
      |                                                   ^
./CPP_155.cpp:76:36: error: too few arguments to function ‘void even_odd_count(vector_t*, int)’
   76 |     assert (issame(even_odd_count(0) , {1, 0}));
      |                                    ^
./CPP_155.cpp:17:6: note: declared here
   17 | void even_odd_count(vector_t* result, int n) {
      |      ^~~~~~~~~~~~~~
In file included from ./CPP_155.cpp:59:
./CPP_155.cpp:76:46: error: ‘issame’ cannot be used as a function
   76 |     assert (issame(even_odd_count(0) , {1, 0}));
      |                                              ^


CPP_96.cpp: Compilation Failed
Error: ./CPP_96.cpp: In function ‘void count_up_to(vector*, int)’:
./CPP_96.cpp:27:36: error: request for member ‘_M_finish’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   27 |             if (v->_M_base._M_impl._M_finish == v->_M_base._M_impl._M_start) {
      |                                    ^~~~~~~~~
./CPP_96.cpp:27:68: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   27 |             if (v->_M_base._M_impl._M_finish == v->_M_base._M_impl._M_start) {
      |                                                                    ^~~~~~~~
./CPP_96.cpp:28:131: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   28 |                 _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(v, v->_M_base._M_impl._M_start, &i);
      |                                                                                                                                   ^~~~~~~~
./CPP_96.cpp:28:17: error: ‘_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_’ was not declared in this scope
   28 |                 _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(v, v->_M_base._M_impl._M_start, &i);
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_96.cpp:29:43: error: request for member ‘_M_finish’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   29 |             } else if (v->_M_base._M_impl._M_finish != v->_M_base._M_impl._M_end_of_storage) {
      |                                           ^~~~~~~~~
./CPP_96.cpp:29:75: error: request for member ‘_M_end_of_storage’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   29 |             } else if (v->_M_base._M_impl._M_finish != v->_M_base._M_impl._M_end_of_storage) {
      |                                                                           ^~~~~~~~~~~~~~~~~
./CPP_96.cpp:31:43: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   31 |                 while (v->_M_base._M_impl._M_start + j != v->_M_base._M_impl._M_finish) {
      |                                           ^~~~~~~~
./CPP_96.cpp:31:78: error: request for member ‘_M_finish’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   31 |                 while (v->_M_base._M_impl._M_start + j != v->_M_base._M_impl._M_finish) {
      |                                                                              ^~~~~~~~~
./CPP_96.cpp:32:45: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   32 |                     if ((v->_M_base._M_impl._M_start + j)->_M_impl._M_start % i == 0) {
      |                                             ^~~~~~~~
./CPP_96.cpp:38:44: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   38 |                     if (v->_M_base._M_impl._M_start == v->_M_base._M_impl._M_end_of_storage) {
      |                                            ^~~~~~~~
./CPP_96.cpp:38:75: error: request for member ‘_M_end_of_storage’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   38 |                     if (v->_M_base._M_impl._M_start == v->_M_base._M_impl._M_end_of_storage) {
      |                                                                           ^~~~~~~~~~~~~~~~~
./CPP_96.cpp:39:139: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   39 |                         _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(v, v->_M_base._M_impl._M_start, &i);
      |                                                                                                                                           ^~~~~~~~
./CPP_96.cpp:39:25: error: ‘_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_’ was not declared in this scope
   39 |                         _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(v, v->_M_base._M_impl._M_start, &i);
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_96.cpp:41:44: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   41 |                         v->_M_base._M_impl._M_start-> _M_impl._M_start = i;
      |                                            ^~~~~~~~
./CPP_96.cpp:42:44: error: request for member ‘_M_finish’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   42 |                         v->_M_base._M_impl._M_finish = v->_M_base._M_impl._M_start + 1;
      |                                            ^~~~~~~~~
./CPP_96.cpp:42:75: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   42 |                         v->_M_base._M_impl._M_finish = v->_M_base._M_impl._M_start + 1;
      |                                                                           ^~~~~~~~
./CPP_96.cpp: In function ‘void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(vector*, int*, int*)’:
./CPP_96.cpp:52:40: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   52 |     int* _M_start = v->_M_base._M_impl._M_start;
      |                                        ^~~~~~~~
./CPP_96.cpp:53:41: error: request for member ‘_M_finish’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   53 |     int* _M_finish = v->_M_base._M_impl._M_finish;
      |                                         ^~~~~~~~~
./CPP_96.cpp:54:49: error: request for member ‘_M_end_of_storage’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   54 |     int* _M_end_of_storage = v->_M_base._M_impl._M_end_of_storage;
      |                                                 ^~~~~~~~~~~~~~~~~
./CPP_96.cpp:63:24: error: request for member ‘_M_start’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   63 |     v->_M_base._M_impl._M_start = _M_start;
      |                        ^~~~~~~~
./CPP_96.cpp:64:24: error: request for member ‘_M_finish’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   64 |     v->_M_base._M_impl._M_finish = _M_start + __len;
      |                        ^~~~~~~~~
./CPP_96.cpp:65:24: error: request for member ‘_M_end_of_storage’ in ‘v->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   65 |     v->_M_base._M_impl._M_end_of_storage = _M_start + __len;
      |                        ^~~~~~~~~~~~~~~~~
./CPP_96.cpp: At global scope:
./CPP_96.cpp:70:13: error: ‘vector’ is not a template
   70 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_96.cpp:70:27: error: ‘vector’ is not a template
   70 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_96.cpp: In function ‘bool issame(vector, vector)’:
./CPP_96.cpp:71:11: error: ‘struct vector’ has no member named ‘size’
   71 |     if (a.size()!=b.size()) return false;
      |           ^~~~
./CPP_96.cpp:71:21: error: ‘struct vector’ has no member named ‘size’
   71 |     if (a.size()!=b.size()) return false;
      |                     ^~~~
./CPP_96.cpp:72:22: error: ‘struct vector’ has no member named ‘size’
   72 |     for (int i=0;i<a.size();i++)
      |                      ^~~~
./CPP_96.cpp:74:10: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   74 |     if (a[i]!=b[i]) return false;
      |          ^
./CPP_96.cpp:74:16: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   74 |     if (a[i]!=b[i]) return false;
      |                ^
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp: In function ‘int main()’:
./CPP_96.cpp:79:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   79 |     assert (issame(count_up_to(5) , {2,3}));
      |                                ^
      |                                |
      |                                int
./CPP_96.cpp:79:33: error: too few arguments to function ‘void count_up_to(vector*, int)’
   79 |     assert (issame(count_up_to(5) , {2,3}));
      |                                 ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:80:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   80 |     assert (issame(count_up_to(6) , {2,3,5}));
      |                                ^
      |                                |
      |                                int
./CPP_96.cpp:80:33: error: too few arguments to function ‘void count_up_to(vector*, int)’
   80 |     assert (issame(count_up_to(6) , {2,3,5}));
      |                                 ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:81:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   81 |     assert (issame(count_up_to(7) , {2,3,5}));
      |                                ^
      |                                |
      |                                int
./CPP_96.cpp:81:33: error: too few arguments to function ‘void count_up_to(vector*, int)’
   81 |     assert (issame(count_up_to(7) , {2,3,5}));
      |                                 ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:82:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   82 |     assert (issame(count_up_to(10) , {2,3,5,7}));
      |                                ^~
      |                                |
      |                                int
./CPP_96.cpp:82:34: error: too few arguments to function ‘void count_up_to(vector*, int)’
   82 |     assert (issame(count_up_to(10) , {2,3,5,7}));
      |                                  ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:83:33: error: too few arguments to function ‘void count_up_to(vector*, int)’
   83 |     assert (issame(count_up_to(0) , {}));
      |                                 ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:84:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   84 |     assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));
      |                                ^~
      |                                |
      |                                int
./CPP_96.cpp:84:34: error: too few arguments to function ‘void count_up_to(vector*, int)’
   84 |     assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));
      |                                  ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:85:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   85 |     assert (issame(count_up_to(1) , {}));
      |                                ^
      |                                |
      |                                int
./CPP_96.cpp:85:33: error: too few arguments to function ‘void count_up_to(vector*, int)’
   85 |     assert (issame(count_up_to(1) , {}));
      |                                 ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:86:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   86 |     assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));
      |                                ^~
      |                                |
      |                                int
./CPP_96.cpp:86:34: error: too few arguments to function ‘void count_up_to(vector*, int)’
   86 |     assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));
      |                                  ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:87:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   87 |     assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));
      |                                ^~
      |                                |
      |                                int
./CPP_96.cpp:87:34: error: too few arguments to function ‘void count_up_to(vector*, int)’
   87 |     assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));
      |                                  ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~
In file included from ./CPP_96.cpp:69:
./CPP_96.cpp:88:32: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   88 |     assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));
      |                                ^~~
      |                                |
      |                                int
./CPP_96.cpp:88:35: error: too few arguments to function ‘void count_up_to(vector*, int)’
   88 |     assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));
      |                                   ^
./CPP_96.cpp:23:6: note: declared here
   23 | void count_up_to(vector* v, int n) {
      |      ^~~~~~~~~~~


CPP_3.cpp: Compilation Failed
Error: ./CPP_3.cpp:2:1: error: stray ‘`’ in program
    2 | ```
      | ^
./CPP_3.cpp:2:2: error: stray ‘`’ in program
    2 | ```
      |  ^
./CPP_3.cpp:2:3: error: stray ‘`’ in program
    2 | ```
      |   ^
./CPP_3.cpp:46:1: error: stray ‘`’ in program
   46 | ```
      | ^
./CPP_3.cpp:46:2: error: stray ‘`’ in program
   46 | ```
      |  ^
./CPP_3.cpp:46:3: error: stray ‘`’ in program
   46 | ```
      |   ^
./CPP_3.cpp:47:19: warning: character constant too long for its type
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_3.cpp:47:171: error: stray ‘`’ in program
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                                                                                                                                                                           ^
./CPP_3.cpp:47:179: error: stray ‘`’ in program
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                                                                                                                                                                                   ^
./CPP_3.cpp:47:185: error: stray ‘`’ in program
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                                                                                                                                                                                         ^
./CPP_3.cpp:47:193: error: stray ‘`’ in program
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                                                                                                                                                                                                 ^
./CPP_3.cpp:47:221: warning: missing terminating ' character
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                                                                                                                                                                                                                             ^
./CPP_3.cpp:47:221: error: missing terminating ' character
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      |                                                                                                                                                                                                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_3.cpp:1:1: error: ‘Based’ does not name a type
    1 | Based on the provided LLVM IR code, I will generate the corresponding C source code. Here it is:
      | ^~~~~
./CPP_3.cpp:47:1: error: ‘Please’ does not name a type
   47 | Please note that I've replaced the original C++ standard library classes (`std::vector`) with custom structs to match the LLVM IR representation. Additionally, I've used `int32_t` and `int64_t` types to match the IR code's integer types. The `llvm_umax_i64` function has been implemented as a simple maximum function.
      | ^~~~~~
In file included from ./CPP_3.cpp:49:
./CPP_3.cpp: In function ‘int main()’:
./CPP_3.cpp:51:5: error: ‘__assert_fail’ was not declared in this scope
   51 |     assert (below_zero({}) == false);
      |     ^~~~~~
./CPP_3.cpp:52:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   52 |     assert (below_zero({1, 2, -3, 1, 2, -3}) == false);
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_3.cpp:23:35: note:   initializing argument 1 of ‘uint8_t below_zero(Vector*)’
   23 | uint8_t below_zero(struct Vector* vec) {
      |                    ~~~~~~~~~~~~~~~^~~
In file included from ./CPP_3.cpp:49:
./CPP_3.cpp:53:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   53 |     assert (below_zero({1, 2, -4, 5, 6}) == true);
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_3.cpp:23:35: note:   initializing argument 1 of ‘uint8_t below_zero(Vector*)’
   23 | uint8_t below_zero(struct Vector* vec) {
      |                    ~~~~~~~~~~~~~~~^~~
In file included from ./CPP_3.cpp:49:
./CPP_3.cpp:54:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   54 |     assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_3.cpp:23:35: note:   initializing argument 1 of ‘uint8_t below_zero(Vector*)’
   23 | uint8_t below_zero(struct Vector* vec) {
      |                    ~~~~~~~~~~~~~~~^~~
In file included from ./CPP_3.cpp:49:
./CPP_3.cpp:55:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   55 |     assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_3.cpp:23:35: note:   initializing argument 1 of ‘uint8_t below_zero(Vector*)’
   23 | uint8_t below_zero(struct Vector* vec) {
      |                    ~~~~~~~~~~~~~~~^~~
In file included from ./CPP_3.cpp:49:
./CPP_3.cpp:56:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   56 |     assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_3.cpp:23:35: note:   initializing argument 1 of ‘uint8_t below_zero(Vector*)’
   23 | uint8_t below_zero(struct Vector* vec) {
      |                    ~~~~~~~~~~~~~~~^~~


CPP_97.cpp: Compilation Failed
Error: ./CPP_97.cpp:1:3: error: expected ‘)’ before ‘>’ token
    1 | (b > 0) ? b : -b
      | ~ ^~
      |   )
In file included from ./CPP_97.cpp:4:
./CPP_97.cpp: In function ‘int main()’:
./CPP_97.cpp:6:13: error: ‘multiply’ was not declared in this scope
    6 |     assert (multiply(148, 412) == 16                   );
      |             ^~~~~~~~
./CPP_97.cpp:6:5: error: ‘__assert_fail’ was not declared in this scope
    6 |     assert (multiply(148, 412) == 16                   );
      |     ^~~~~~


CPP_4.cpp: Compilation Failed
Error: ./CPP_4.cpp: In function ‘float mean_absolute_deviation(float*, int)’:
./CPP_4.cpp:10:24: error: ‘fabs’ was not declared in this scope
   10 |         sum_abs_dev += fabs(data[i] - mean);
      |                        ^~~~
In file included from ./CPP_4.cpp:16:
./CPP_4.cpp: In function ‘int main()’:
./CPP_4.cpp:18:56: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   18 |     assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);
      |                                                        ^
      |                                                        |
      |                                                        <brace-enclosed initializer list>
./CPP_4.cpp:1:38: note:   initializing argument 1 of ‘float mean_absolute_deviation(float*, int)’
    1 | float mean_absolute_deviation(float* data, int size) {
      |                               ~~~~~~~^~~~
In file included from ./CPP_4.cpp:16:
./CPP_4.cpp:18:13: error: ‘abs’ was not declared in this scope
   18 |     assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);
      |             ^~~
./CPP_4.cpp:19:61: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   19 |     assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);
      |                                                             ^
      |                                                             |
      |                                                             <brace-enclosed initializer list>
./CPP_4.cpp:1:38: note:   initializing argument 1 of ‘float mean_absolute_deviation(float*, int)’
    1 | float mean_absolute_deviation(float* data, int size) {
      |                               ~~~~~~~^~~~
In file included from ./CPP_4.cpp:16:
./CPP_4.cpp:20:66: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   20 |     assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);
      |                                                                  ^
      |                                                                  |
      |                                                                  <brace-enclosed initializer list>
./CPP_4.cpp:1:38: note:   initializing argument 1 of ‘float mean_absolute_deviation(float*, int)’
    1 | float mean_absolute_deviation(float* data, int size) {
      |                               ~~~~~~~^~~~


CPP_80.cpp: Execution Failed
Error: CPP_80: ./CPP_80.cpp:19: int main(): Assertion `is_happy("aabb") == false' failed.
Aborted (core dumped)


CPP_23.cpp: Compilation Failed
Error: In file included from ./CPP_23.cpp:17:
./CPP_23.cpp: In function ‘int main()’:
./CPP_23.cpp:19:20: error: cannot convert ‘const char*’ to ‘std_string*’
   19 |     assert (strlen("") == 0);
      |                    ^~
      |                    |
      |                    const char*
./CPP_23.cpp:12:28: note:   initializing argument 1 of ‘int32_t strlen(std_string*)’
   12 | int32_t strlen(std_string* s) {
      |                ~~~~~~~~~~~~^
In file included from ./CPP_23.cpp:17:
./CPP_23.cpp:20:20: error: cannot convert ‘const char*’ to ‘std_string*’
   20 |     assert (strlen("x") == 1);
      |                    ^~~
      |                    |
      |                    const char*
./CPP_23.cpp:12:28: note:   initializing argument 1 of ‘int32_t strlen(std_string*)’
   12 | int32_t strlen(std_string* s) {
      |                ~~~~~~~~~~~~^
In file included from ./CPP_23.cpp:17:
./CPP_23.cpp:21:21: error: cannot convert ‘const char*’ to ‘std_string*’
   21 |      assert (strlen("asdasnakj") == 9);
      |                     ^~~~~~~~~~~
      |                     |
      |                     const char*
./CPP_23.cpp:12:28: note:   initializing argument 1 of ‘int32_t strlen(std_string*)’
   12 | int32_t strlen(std_string* s) {
      |                ~~~~~~~~~~~~^


CPP_136.cpp: Compilation Failed
Error: ./CPP_136.cpp:80:13: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   80 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             Vector
./CPP_136.cpp:80:20: error: expected primary-expression before ‘int’
   80 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_136.cpp:80:27: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   80 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           Vector
./CPP_136.cpp:80:34: error: expected primary-expression before ‘int’
   80 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_136.cpp:80:39: error: expression list treated as compound expression in initializer [-fpermissive]
   80 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_136.cpp:88:5: error: redefinition of ‘int main()’
   88 | int main(){
      |     ^~~~
./CPP_136.cpp:56:5: note: ‘int main()’ previously defined here
   56 | int main() {
      |     ^~~~
In file included from ./CPP_136.cpp:79:
./CPP_136.cpp: In function ‘int main()’:
./CPP_136.cpp:89:20: error: ‘largest_smallest_integers’ was not declared in this scope; did you mean ‘largestSmallestIntegers’?
   89 |     assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));
      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_136.cpp:89:74: error: ‘issame’ cannot be used as a function
   89 |     assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));
      |                                                                          ^
./CPP_136.cpp:90:77: error: ‘issame’ cannot be used as a function
   90 |     assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));
      |                                                                             ^
./CPP_136.cpp:91:79: error: ‘issame’ cannot be used as a function
   91 |     assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));
      |                                                                               ^
./CPP_136.cpp:92:79: error: ‘issame’ cannot be used as a function
   92 |     assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));
      |                                                                               ^
./CPP_136.cpp:93:82: error: ‘issame’ cannot be used as a function
   93 |     assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));
      |                                                                                  ^
./CPP_136.cpp:94:58: error: ‘issame’ cannot be used as a function
   94 |     assert (issame(largest_smallest_integers({}) , {0, 0}));
      |                                                          ^
./CPP_136.cpp:95:59: error: ‘issame’ cannot be used as a function
   95 |     assert (issame(largest_smallest_integers({0}) , {0, 0}));
      |                                                           ^
./CPP_136.cpp:96:73: error: ‘issame’ cannot be used as a function
   96 |     assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));
      |                                                                         ^
./CPP_136.cpp:97:76: error: ‘issame’ cannot be used as a function
   97 |     assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));
      |                                                                            ^
./CPP_136.cpp:98:76: error: ‘issame’ cannot be used as a function
   98 |     assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));
      |                                                                            ^
./CPP_136.cpp:99:82: error: ‘issame’ cannot be used as a function
   99 |     assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));
      |                                                                                  ^


CPP_27.cpp: Compilation Failed
Error: ./CPP_27.cpp: In function ‘int main()’:
./CPP_27.cpp:46:17: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   46 |     char *str = "Hello, World!";
      |                 ^~~~~~~~~~~~~~~
./CPP_27.cpp: At global scope:
./CPP_27.cpp:53:5: error: redefinition of ‘int main()’
   53 | int main(){
      |     ^~~~
./CPP_27.cpp:45:5: note: ‘int main()’ previously defined here
   45 | int main() {
      |     ^~~~
In file included from ./CPP_27.cpp:52:
./CPP_27.cpp: In function ‘int main()’:
./CPP_27.cpp:54:23: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   54 |     assert (filp_case("") == "");
      |                       ^~
./CPP_27.cpp:54:27: error: invalid operands of types ‘void’ and ‘const char [1]’ to binary ‘operator==’
   54 |     assert (filp_case("") == "");
      |             ~~~~~~~~~~~~~ ^~ ~~
      |                      |       |
      |                      void    const char [1]
./CPP_27.cpp:55:23: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   55 |     assert (filp_case("Hello!") == "hELLO!");
      |                       ^~~~~~~~
./CPP_27.cpp:55:33: error: invalid operands of types ‘void’ and ‘const char [7]’ to binary ‘operator==’
   55 |     assert (filp_case("Hello!") == "hELLO!");
      |             ~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~
      |                      |             |
      |                      void          const char [7]
./CPP_27.cpp:56:23: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   56 |     assert (filp_case("These violent delights have violent ends") == "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS");
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_27.cpp:56:67: error: invalid operands of types ‘void’ and ‘const char [41]’ to binary ‘operator==’
   56 |     assert (filp_case("These violent delights have violent ends") == "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                      |                                               |
      |                      void                                            const char [41]


CPP_16.cpp: Execution Failed
Error: Segmentation fault (core dumped)


CPP_72.cpp: Compilation Failed
Error: In file included from ./CPP_72.cpp:16:
./CPP_72.cpp: In function ‘int main()’:
./CPP_72.cpp:18:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   18 |     assert (will_it_fly({3, 2, 3}, 9)==true);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_72.cpp:3:22: note:   initializing argument 1 of ‘int will_it_fly(int*, int, int)’
    3 | int will_it_fly(int* arr, int n, int threshold) {
      |                 ~~~~~^~~
In file included from ./CPP_72.cpp:16:
./CPP_72.cpp:19:34: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   19 |     assert (will_it_fly({1, 2}, 5) == false);
      |                                  ^
      |                                  |
      |                                  <brace-enclosed initializer list>
./CPP_72.cpp:3:22: note:   initializing argument 1 of ‘int will_it_fly(int*, int, int)’
    3 | int will_it_fly(int* arr, int n, int threshold) {
      |                 ~~~~~^~~
In file included from ./CPP_72.cpp:16:
./CPP_72.cpp:20:31: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   20 |     assert (will_it_fly({3}, 5) == true);
      |                               ^
      |                               |
      |                               int
./CPP_72.cpp:20:31: error: too few arguments to function ‘int will_it_fly(int*, int, int)’
./CPP_72.cpp:3:5: note: declared here
    3 | int will_it_fly(int* arr, int n, int threshold) {
      |     ^~~~~~~~~~~
In file included from ./CPP_72.cpp:16:
./CPP_72.cpp:21:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   21 |     assert (will_it_fly({3, 2, 3}, 1) == false);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_72.cpp:3:22: note:   initializing argument 1 of ‘int will_it_fly(int*, int, int)’
    3 | int will_it_fly(int* arr, int n, int threshold) {
      |                 ~~~~~^~~
In file included from ./CPP_72.cpp:16:
./CPP_72.cpp:22:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   22 |     assert (will_it_fly({1, 2, 3}, 6) ==false);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_72.cpp:3:22: note:   initializing argument 1 of ‘int will_it_fly(int*, int, int)’
    3 | int will_it_fly(int* arr, int n, int threshold) {
      |                 ~~~~~^~~
In file included from ./CPP_72.cpp:16:
./CPP_72.cpp:23:31: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   23 |     assert (will_it_fly({5}, 5) == true);
      |                               ^
      |                               |
      |                               int
./CPP_72.cpp:23:31: error: too few arguments to function ‘int will_it_fly(int*, int, int)’
./CPP_72.cpp:3:5: note: declared here
    3 | int will_it_fly(int* arr, int n, int threshold) {
      |     ^~~~~~~~~~~


CPP_43.cpp: Compilation Failed
Error: In file included from ./CPP_43.cpp:15:
./CPP_43.cpp: In function ‘int main()’:
./CPP_43.cpp:17:43: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   17 |     assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);
      |                                           ^
      |                                           |
      |                                           <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:18:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   18 |     assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:19:43: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   19 |     assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);
      |                                           ^
      |                                           |
      |                                           <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:20:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   20 |     assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:21:34: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   21 |     assert (pairs_sum_to_zero({1}) == false);
      |                                  ^
      |                                  |
      |                                  int
./CPP_43.cpp:21:34: error: too few arguments to function ‘int pairs_sum_to_zero(int*, int)’
./CPP_43.cpp:3:5: note: declared here
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |     ^~~~~~~~~~~~~~~~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:22:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   22 |     assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:23:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   23 |     assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:24:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   24 |     assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~
In file included from ./CPP_43.cpp:15:
./CPP_43.cpp:25:52: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   25 |     assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);
      |                                                    ^
      |                                                    |
      |                                                    <brace-enclosed initializer list>
./CPP_43.cpp:3:28: note:   initializing argument 1 of ‘int pairs_sum_to_zero(int*, int)’
    3 | int pairs_sum_to_zero(int* arr, int size) {
      |                       ~~~~~^~~


CPP_53.cpp: Compilation Failed
Error: ./CPP_53.cpp: In function ‘int main()’:
./CPP_53.cpp:15:15: error: ‘rand’ was not declared in this scope
   15 |         int x=rand()%1000;
      |               ^~~~


CPP_126.cpp: Compilation Failed
Error: In file included from ./CPP_126.cpp:16:
./CPP_126.cpp: In function ‘int main()’:
./CPP_126.cpp:18:26: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   18 |     assert (is_sorted({5}) == true);
      |                          ^
      |                          |
      |                          int
./CPP_126.cpp:18:26: error: too few arguments to function ‘bool is_sorted(int*, int)’
./CPP_126.cpp:3:6: note: declared here
    3 | bool is_sorted(int* arr, int len) {
      |      ^~~~~~~~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:19:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   19 |     assert (is_sorted({1, 2, 3, 4, 5}) == true);
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:20:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   20 |     assert (is_sorted({1, 3, 2, 4, 5}) == false);
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:21:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   21 |     assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:22:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   22 |     assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:23:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   23 |     assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:24:25: error: too few arguments to function ‘bool is_sorted(int*, int)’
   24 |     assert (is_sorted({}) == true);
      |                         ^
./CPP_126.cpp:3:6: note: declared here
    3 | bool is_sorted(int* arr, int len) {
      |      ^~~~~~~~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:25:26: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   25 |     assert (is_sorted({1}) == true);
      |                          ^
      |                          |
      |                          int
./CPP_126.cpp:25:26: error: too few arguments to function ‘bool is_sorted(int*, int)’
./CPP_126.cpp:3:6: note: declared here
    3 | bool is_sorted(int* arr, int len) {
      |      ^~~~~~~~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:26:32: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   26 |     assert (is_sorted({3, 2, 1}) == false);
      |                                ^
      |                                |
      |                                <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:27:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   27 |     assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:28:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   28 |     assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:29:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_126.cpp:16:
./CPP_126.cpp:30:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   30 |     assert (is_sorted({1, 2, 3, 4}) == true);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_126.cpp:3:21: note:   initializing argument 1 of ‘bool is_sorted(int*, int)’
    3 | bool is_sorted(int* arr, int len) {
      |                ~~~~~^~~


CPP_52.cpp: Compilation Failed
Error: ./CPP_52.cpp: In function ‘bool below_threshold(int*, int, int)’:
./CPP_52.cpp:12:19: error: ‘__builtin_umaxll’ was not declared in this scope; did you mean ‘__builtin_fmaxl’?
   12 |     int64_t max = __builtin_umaxll(length, 1);
      |                   ^~~~~~~~~~~~~~~~
      |                   __builtin_fmaxl
In file included from ./CPP_52.cpp:26:
./CPP_52.cpp: In function ‘int main()’:
./CPP_52.cpp:28:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   28 |     assert (below_threshold({1, 2, 4, 10}, 100));
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_52.cpp:4:27: note:   initializing argument 1 of ‘bool below_threshold(int*, int, int)’
    4 | bool below_threshold(int* data, int size, int threshold) {
      |                      ~~~~~^~~~
In file included from ./CPP_52.cpp:26:
./CPP_52.cpp:29:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (not(below_threshold({1, 20, 4, 10}, 5)));
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_52.cpp:4:27: note:   initializing argument 1 of ‘bool below_threshold(int*, int, int)’
    4 | bool below_threshold(int* data, int size, int threshold) {
      |                      ~~~~~^~~~
In file included from ./CPP_52.cpp:26:
./CPP_52.cpp:30:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   30 |     assert (below_threshold({1, 20, 4, 10}, 21));
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_52.cpp:4:27: note:   initializing argument 1 of ‘bool below_threshold(int*, int, int)’
    4 | bool below_threshold(int* data, int size, int threshold) {
      |                      ~~~~~^~~~
In file included from ./CPP_52.cpp:26:
./CPP_52.cpp:31:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   31 |     assert (below_threshold({1, 20, 4, 10}, 22));
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_52.cpp:4:27: note:   initializing argument 1 of ‘bool below_threshold(int*, int, int)’
    4 | bool below_threshold(int* data, int size, int threshold) {
      |                      ~~~~~^~~~
In file included from ./CPP_52.cpp:26:
./CPP_52.cpp:32:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   32 |     assert (below_threshold({1, 8, 4, 10}, 11));
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_52.cpp:4:27: note:   initializing argument 1 of ‘bool below_threshold(int*, int, int)’
    4 | bool below_threshold(int* data, int size, int threshold) {
      |                      ~~~~~^~~~
In file included from ./CPP_52.cpp:26:
./CPP_52.cpp:33:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   33 |     assert (not(below_threshold({1, 8, 4, 10}, 10)));
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_52.cpp:4:27: note:   initializing argument 1 of ‘bool below_threshold(int*, int, int)’
    4 | bool below_threshold(int* data, int size, int threshold) {
      |                      ~~~~~^~~~


CPP_2.cpp: Compilation Failed
Error: ./CPP_2.cpp:2:1: error: stray ‘`’ in program
    2 | ```
      | ^
./CPP_2.cpp:2:2: error: stray ‘`’ in program
    2 | ```
      |  ^
./CPP_2.cpp:2:3: error: stray ‘`’ in program
    2 | ```
      |   ^
./CPP_2.cpp:1:1: error: ‘Based’ does not name a type
    1 | Based on the provided LLVM IR code, here is the equivalent C source code:
      | ^~~~~
In file included from ./CPP_2.cpp:10:
./CPP_2.cpp: In function ‘int main()’:
./CPP_2.cpp:12:10: error: ‘truncate_number’ was not declared in this scope
   12 |  assert (truncate_number(3.5) == 0.5);
      |          ^~~~~~~~~~~~~~~
./CPP_2.cpp:13:10: error: ‘abs’ was not declared in this scope
   13 |  assert (abs(truncate_number(1.33) - 0.33) < 1e-4);
      |          ^~~


CPP_57.cpp: Compilation Failed
Error: In file included from ./CPP_57.cpp:20:
./CPP_57.cpp: In function ‘int main()’:
./CPP_57.cpp:22:36: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   22 |     assert (monotonic({1, 2, 4, 10}) == true);
      |                                    ^
      |                                    |
      |                                    <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:23:36: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   23 |     assert (monotonic({1, 2, 4, 20}) == true);
      |                                    ^
      |                                    |
      |                                    <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:24:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   24 |     assert (monotonic({1, 20, 4, 10}) == false);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:25:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   25 |     assert (monotonic({4, 1, 0, -10}) == true);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:26:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   26 |     assert (monotonic({4, 1, 1, 0}) == true);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:27:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   27 |     assert (monotonic({1, 2, 3, 2, 5, 60}) == false);
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:28:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   28 |     assert (monotonic({1, 2, 3, 4, 5, 60}) == true);
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~
In file included from ./CPP_57.cpp:20:
./CPP_57.cpp:29:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘float*’
   29 |     assert (monotonic({9, 9, 9, 9}) == true);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_57.cpp:3:23: note:   initializing argument 1 of ‘bool monotonic(float*, int)’
    3 | bool monotonic(float* arr, int len) {
      |                ~~~~~~~^~~


CPP_159.cpp: Compilation Failed
Error: ./CPP_159.cpp: In function ‘void _Z3eatiii(std__Vector_base*, int, int, int)’:
./CPP_159.cpp:18:28: error: request for member ‘_M_start’ in ‘* __result->std__Vector_base::_M_impl’, which is of non-class type ‘int’
   18 |         __result->_M_impl->_M_start = __begin;
      |                            ^~~~~~~~
./CPP_159.cpp:19:28: error: request for member ‘_M_finish’ in ‘* __result->std__Vector_base::_M_impl’, which is of non-class type ‘int’
   19 |         __result->_M_impl->_M_finish = __begin;
      |                            ^~~~~~~~~
./CPP_159.cpp:20:28: error: request for member ‘_M_end_of_storage’ in ‘* __result->std__Vector_base::_M_impl’, which is of non-class type ‘int’
   20 |         __result->_M_impl->_M_end_of_storage = (int*)(((char*)__begin) + 8);
      |                            ^~~~~~~~~~~~~~~~~
./CPP_159.cpp:24:28: error: request for member ‘_M_start’ in ‘* __result->std__Vector_base::_M_impl’, which is of non-class type ‘int’
   24 |         __result->_M_impl->_M_start = __begin;
      |                            ^~~~~~~~
./CPP_159.cpp:25:28: error: request for member ‘_M_finish’ in ‘* __result->std__Vector_base::_M_impl’, which is of non-class type ‘int’
   25 |         __result->_M_impl->_M_finish = (int*)(((char*)__begin) + 4);
      |                            ^~~~~~~~~
./CPP_159.cpp:26:28: error: request for member ‘_M_end_of_storage’ in ‘* __result->std__Vector_base::_M_impl’, which is of non-class type ‘int’
   26 |         __result->_M_impl->_M_end_of_storage = (int*)(((char*)__begin) + 8);
      |                            ^~~~~~~~~~~~~~~~~
./CPP_159.cpp: At global scope:
./CPP_159.cpp:32:13: error: ‘vector’ was not declared in this scope
   32 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_159.cpp:32:20: error: expected primary-expression before ‘int’
   32 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_159.cpp:32:27: error: ‘vector’ was not declared in this scope
   32 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_159.cpp:32:34: error: expected primary-expression before ‘int’
   32 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_159.cpp:32:39: error: expression list treated as compound expression in initializer [-fpermissive]
   32 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
In file included from ./CPP_159.cpp:31:
./CPP_159.cpp: In function ‘int main()’:
./CPP_159.cpp:41:20: error: ‘eat’ was not declared in this scope
   41 |     assert (issame(eat(5, 6, 10) , {11, 4}));
      |                    ^~~
./CPP_159.cpp:41:43: error: ‘issame’ cannot be used as a function
   41 |     assert (issame(eat(5, 6, 10) , {11, 4}));
      |                                           ^
./CPP_159.cpp:42:42: error: ‘issame’ cannot be used as a function
   42 |     assert (issame(eat(4, 8, 9) , {12, 1}));
      |                                          ^
./CPP_159.cpp:43:44: error: ‘issame’ cannot be used as a function
   43 |     assert (issame(eat(1, 10, 10) , {11, 0}));
      |                                            ^
./CPP_159.cpp:44:42: error: ‘issame’ cannot be used as a function
   44 |     assert (issame(eat(2, 11, 5) , {7, 0}));
      |                                          ^
./CPP_159.cpp:46:41: error: ‘issame’ cannot be used as a function
   46 |     assert (issame(eat(4, 5, 7) , {9, 2}));
      |                                         ^
./CPP_159.cpp:47:41: error: ‘issame’ cannot be used as a function
   47 |     assert (issame(eat(4, 5, 1) , {5, 0}));
      |                                         ^


CPP_108.cpp: Compilation Failed
Error: In file included from ./CPP_108.cpp:26:
./CPP_108.cpp: In function ‘int main()’:
./CPP_108.cpp:28:26: error: too few arguments to function ‘int count_nums(int*, int)’
   28 |     assert (count_nums({}) == 0);
      |                          ^
./CPP_108.cpp:3:5: note: declared here
    3 | int count_nums(int* arr, int len) {
      |     ^~~~~~~~~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:29:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (count_nums({-1, -2, 0}) == 0);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_108.cpp:3:21: note:   initializing argument 1 of ‘int count_nums(int*, int)’
    3 | int count_nums(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:30:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   30 |     assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_108.cpp:3:21: note:   initializing argument 1 of ‘int count_nums(int*, int)’
    3 | int count_nums(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:31:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   31 |     assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_108.cpp:3:21: note:   initializing argument 1 of ‘int count_nums(int*, int)’
    3 | int count_nums(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:32:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   32 |     assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_108.cpp:3:21: note:   initializing argument 1 of ‘int count_nums(int*, int)’
    3 | int count_nums(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:33:49: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   33 |     assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);
      |                                                 ^
      |                                                 |
      |                                                 <brace-enclosed initializer list>
./CPP_108.cpp:3:21: note:   initializing argument 1 of ‘int count_nums(int*, int)’
    3 | int count_nums(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:34:31: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   34 |     assert (count_nums({-0, 1}) == 1);
      |                               ^
      |                               |
      |                               <brace-enclosed initializer list>
./CPP_108.cpp:3:21: note:   initializing argument 1 of ‘int count_nums(int*, int)’
    3 | int count_nums(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_108.cpp:26:
./CPP_108.cpp:35:27: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   35 |     assert (count_nums({1}) == 1);
      |                           ^
      |                           |
      |                           int
./CPP_108.cpp:35:27: error: too few arguments to function ‘int count_nums(int*, int)’
./CPP_108.cpp:3:5: note: declared here
    3 | int count_nums(int* arr, int len) {
      |     ^~~~~~~~~~


CPP_61.cpp: Compilation Failed
Error: In file included from ./CPP_61.cpp:32:
./CPP_61.cpp: In function ‘int main()’:
./CPP_61.cpp:34:32: error: cannot convert ‘const char*’ to ‘basic_string*’
   34 |     assert (correct_bracketing("()"));
      |                                ^~~~
      |                                |
      |                                const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:35:32: error: cannot convert ‘const char*’ to ‘basic_string*’
   35 |     assert (correct_bracketing("(()())"));
      |                                ^~~~~~~~
      |                                |
      |                                const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:36:32: error: cannot convert ‘const char*’ to ‘basic_string*’
   36 |     assert (correct_bracketing("()()(()())()"));
      |                                ^~~~~~~~~~~~~~
      |                                |
      |                                const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:37:32: error: cannot convert ‘const char*’ to ‘basic_string*’
   37 |     assert (correct_bracketing("()()((()()())())(()()(()))"));
      |                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                                |
      |                                const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:38:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   38 |     assert (not (correct_bracketing("((()())))")));
      |                                     ^~~~~~~~~~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:39:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   39 |     assert (not (correct_bracketing(")(()")));
      |                                     ^~~~~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:40:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   40 |     assert (not (correct_bracketing("(")));
      |                                     ^~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:41:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   41 |     assert (not (correct_bracketing("((((")));
      |                                     ^~~~~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:42:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   42 |     assert (not (correct_bracketing(")")));
      |                                     ^~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:43:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   43 |     assert (not (correct_bracketing("(()")));
      |                                     ^~~~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:44:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   44 |     assert (not (correct_bracketing("()()(()())())(()")));
      |                                     ^~~~~~~~~~~~~~~~~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^
In file included from ./CPP_61.cpp:32:
./CPP_61.cpp:45:37: error: cannot convert ‘const char*’ to ‘basic_string*’
   45 |     assert (not (correct_bracketing("()()(()())()))()")));
      |                                     ^~~~~~~~~~~~~~~~~~
      |                                     |
      |                                     const char*
./CPP_61.cpp:13:38: note:   initializing argument 1 of ‘int correct_bracketing(basic_string*)’
   13 | int correct_bracketing(basic_string* s) {
      |                        ~~~~~~~~~~~~~~^


CPP_13.cpp: Compilation Failed
Error: ./CPP_13.cpp: In function ‘int greatest_common_divisor(int, int)’:
./CPP_13.cpp:10:12: error: ‘c’ was not declared in this scope
   10 |     return c;
      |            ^


CPP_124.cpp: Compilation Failed
Error: In file included from ./CPP_124.cpp:59:
./CPP_124.cpp: In function ‘int main()’:
./CPP_124.cpp:61:24: error: cannot convert ‘const char*’ to ‘string*’
   61 |     assert (valid_date("03-11-2000") == true);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:62:24: error: cannot convert ‘const char*’ to ‘string*’
   62 |     assert (valid_date("15-01-2012") == false);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:63:24: error: cannot convert ‘const char*’ to ‘string*’
   63 |     assert (valid_date("04-0-2040") == false);
      |                        ^~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:64:24: error: cannot convert ‘const char*’ to ‘string*’
   64 |     assert (valid_date("06-04-2020") == true);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:65:24: error: cannot convert ‘const char*’ to ‘string*’
   65 |     assert (valid_date("01-01-2007") == true);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:66:24: error: cannot convert ‘const char*’ to ‘string*’
   66 |     assert (valid_date("03-32-2011") == false);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:67:24: error: cannot convert ‘const char*’ to ‘string*’
   67 |     assert (valid_date("") == false);
      |                        ^~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:68:24: error: cannot convert ‘const char*’ to ‘string*’
   68 |     assert (valid_date("04-31-3000") == false);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:69:24: error: cannot convert ‘const char*’ to ‘string*’
   69 |     assert (valid_date("06-06-2005") == true);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:70:24: error: cannot convert ‘const char*’ to ‘string*’
   70 |     assert (valid_date("21-31-2000") == false);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:71:24: error: cannot convert ‘const char*’ to ‘string*’
   71 |     assert (valid_date("04-12-2003") == true);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:72:24: error: cannot convert ‘const char*’ to ‘string*’
   72 |     assert (valid_date("04122003") == false);
      |                        ^~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:73:24: error: cannot convert ‘const char*’ to ‘string*’
   73 |     assert (valid_date("20030412") == false);
      |                        ^~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:74:24: error: cannot convert ‘const char*’ to ‘string*’
   74 |     assert (valid_date("2003-04") == false);
      |                        ^~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:75:24: error: cannot convert ‘const char*’ to ‘string*’
   75 |     assert (valid_date("2003-04-12") == false);
      |                        ^~~~~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~
In file included from ./CPP_124.cpp:59:
./CPP_124.cpp:76:24: error: cannot convert ‘const char*’ to ‘string*’
   76 |     assert (valid_date("04-2003") == false);
      |                        ^~~~~~~~~
      |                        |
      |                        const char*
./CPP_124.cpp:25:24: note:   initializing argument 1 of ‘int valid_date(string*)’
   25 | int valid_date(string* date) {
      |                ~~~~~~~~^~~~


CPP_142.cpp: Compilation Failed
Error: In file included from ./CPP_142.cpp:19:
./CPP_142.cpp: In function ‘int main()’:
./CPP_142.cpp:21:32: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   21 |     assert (sum_squares({1,2,3}) == 6);
      |                                ^
      |                                |
      |                                <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:22:32: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   22 |     assert (sum_squares({1,4,9}) == 14);
      |                                ^
      |                                |
      |                                <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:23:27: error: too few arguments to function ‘int sum_squares(int*, int)’
   23 |     assert (sum_squares({}) == 0);
      |                           ^
./CPP_142.cpp:3:5: note: declared here
    3 | int sum_squares(int* data, int size) {
      |     ^~~~~~~~~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:24:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   24 |     assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:25:53: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   25 |     assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);
      |                                                     ^
      |                                                     |
      |                                                     <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:26:28: error: too few arguments to function ‘int sum_squares(int*, int)’
   26 |     assert (sum_squares({0}) == 0);
      |                            ^
./CPP_142.cpp:3:5: note: declared here
    3 | int sum_squares(int* data, int size) {
      |     ^~~~~~~~~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:27:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   27 |     assert (sum_squares({-1,-5,2,-1,-5}) == -126);
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:28:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   28 |     assert (sum_squares({-56,-99,1,0,-2}) == 3030);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:29:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:30:89: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   30 |     assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);
      |                                                                                         ^
      |                                                                                         |
      |                                                                                         <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_142.cpp:19:
./CPP_142.cpp:31:107: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   31 |     assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);
      |                                                                                                           ^
      |                                                                                                           |
      |                                                                                                           <brace-enclosed initializer list>
./CPP_142.cpp:3:22: note:   initializing argument 1 of ‘int sum_squares(int*, int)’
    3 | int sum_squares(int* data, int size) {
      |                 ~~~~~^~~~


CPP_114.cpp: Compilation Failed
Error: In file included from ./CPP_114.cpp:21:
./CPP_114.cpp: In function ‘int main()’:
./CPP_114.cpp:23:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   23 |     assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:24:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   24 |     assert (minSubArraySum({-1, -2, -3}) == -6);
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:25:48: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   25 |     assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);
      |                                                ^
      |                                                |
      |                                                <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:26:47: error: invalid conversion from ‘long int’ to ‘int64_t*’ {aka ‘long int*’} [-fpermissive]
   26 |     assert (minSubArraySum({-9999999999999999}) == -9999999999999999);
      |                                               ^
      |                                               |
      |                                               long int
./CPP_114.cpp:26:47: error: too few arguments to function ‘int64_t minSubArraySum(int64_t*, int64_t)’
./CPP_114.cpp:3:9: note: declared here
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |         ^~~~~~~~~~~~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:27:48: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   27 |     assert (minSubArraySum({0, 10, 20, 1000000}) == 0);
      |                                                ^
      |                                                |
      |                                                <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:28:48: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   28 |     assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);
      |                                                ^
      |                                                |
      |                                                <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:29:53: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   29 |     assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);
      |                                                     ^
      |                                                     |
      |                                                     <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:30:49: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   30 |     assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);
      |                                                 ^
      |                                                 |
      |                                                 <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:31:53: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   31 |     assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);
      |                                                     ^
      |                                                     |
      |                                                     <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:32:33: error: invalid conversion from ‘int’ to ‘int64_t*’ {aka ‘long int*’} [-fpermissive]
   32 |     assert (minSubArraySum({-10}) == -10);
      |                                 ^
      |                                 |
      |                                 int
./CPP_114.cpp:32:33: error: too few arguments to function ‘int64_t minSubArraySum(int64_t*, int64_t)’
./CPP_114.cpp:3:9: note: declared here
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |         ^~~~~~~~~~~~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:33:31: error: invalid conversion from ‘int’ to ‘int64_t*’ {aka ‘long int*’} [-fpermissive]
   33 |     assert (minSubArraySum({7}) == 7);
      |                               ^
      |                               |
      |                               int
./CPP_114.cpp:33:31: error: too few arguments to function ‘int64_t minSubArraySum(int64_t*, int64_t)’
./CPP_114.cpp:3:9: note: declared here
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |         ^~~~~~~~~~~~~~
In file included from ./CPP_114.cpp:21:
./CPP_114.cpp:34:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int64_t*’ {aka ‘long int*’}
   34 |     assert (minSubArraySum({1, -1}) == -1);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_114.cpp:3:33: note:   initializing argument 1 of ‘int64_t minSubArraySum(int64_t*, int64_t)’
    3 | int64_t minSubArraySum(int64_t* data, int64_t size) {
      |                        ~~~~~~~~~^~~~


CPP_85.cpp: Compilation Failed
Error: ./CPP_85.cpp: In function ‘int add(std::vector<int>)’:
./CPP_85.cpp:4:18: error: ‘std::_Vector_base<int, std::allocator<int> >::_Vector_impl std::_Vector_base<int, std::allocator<int> >::_M_impl’ is inaccessible within this context
    4 |   int* begin = v._M_impl._M_start;
      |                  ^~~~~~~
In file included from /usr/include/c++/9/vector:67,
                 from ./CPP_85.cpp:1:
/usr/include/c++/9/bits/stl_vector.h:337:20: note: declared here
  337 |       _Vector_impl _M_impl;
      |                    ^~~~~~~
./CPP_85.cpp:5:16: error: ‘std::_Vector_base<int, std::allocator<int> >::_Vector_impl std::_Vector_base<int, std::allocator<int> >::_M_impl’ is inaccessible within this context
    5 |   int* end = v._M_impl._M_finish;
      |                ^~~~~~~
In file included from /usr/include/c++/9/vector:67,
                 from ./CPP_85.cpp:1:
/usr/include/c++/9/bits/stl_vector.h:337:20: note: declared here
  337 |       _Vector_impl _M_impl;
      |                    ^~~~~~~


CPP_46.cpp: Compilation Failed
Error: In file included from ./CPP_46.cpp:26:
./CPP_46.cpp: In function ‘int main()’:
./CPP_46.cpp:28:13: error: ‘fib4’ was not declared in this scope; did you mean ‘fib’?
   28 |     assert (fib4(5) == 4);
      |             ^~~~


CPP_62.cpp: Compilation Failed
Error: ./CPP_62.cpp:19:104: error: expected ‘,’ or ‘...’ before ‘this’
   19 | void _ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(vector *this, float *beginacin, float *value) {
      |                                                                                                        ^~~~
./CPP_62.cpp: In function ‘void _ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(vector*)’:
./CPP_62.cpp:20:20: error: invalid use of ‘this’ in non-member function
   20 |     float *begin = this->base.data.begin;
      |                    ^~~~
./CPP_62.cpp:21:18: error: invalid use of ‘this’ in non-member function
   21 |     float *end = this->base.data.end;
      |                  ^~~~
./CPP_62.cpp:25:9: error: ‘_ZSt17__throw_bad_allocv’ was not declared in this scope
   25 |         _ZSt17__throw_bad_allocv();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
./CPP_62.cpp:27:32: error: ‘_Znwm’ was not declared in this scope
   27 |     float *new_data = (float *)_Znwm(new_size * sizeof(float));
      |                                ^~~~~
./CPP_62.cpp:29:9: error: ‘_ZdlPv’ was not declared in this scope
   29 |         _ZdlPv((void *)begin);
      |         ^~~~~~
./CPP_62.cpp:31:5: error: invalid use of ‘this’ in non-member function
   31 |     this->base.data.begin = new_data;
      |     ^~~~
./CPP_62.cpp:32:5: error: invalid use of ‘this’ in non-member function
   32 |     this->base.data.end = new_data + new_size;
      |     ^~~~
./CPP_62.cpp:33:23: error: ‘value’ was not declared in this scope
   33 |     new_data[size] = *value;
      |                       ^~~~~
./CPP_62.cpp: In function ‘void _Z10derivativeSt6vectorIfSaIfEE(vector*, vector*)’:
./CPP_62.cpp:44:119: error: too many arguments to function ‘void _ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(vector*)’
   44 |         _ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(result, NULL, &value);
      |                                                                                                                       ^
./CPP_62.cpp:19:6: note: declared here
   19 | void _ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_(vector *this, float *beginacin, float *value) {
      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_62.cpp: At global scope:
./CPP_62.cpp:78:13: error: ‘vector’ is not a template
   78 | bool issame(vector<float> a,vector<float>b){
      |             ^~~~~~
./CPP_62.cpp:78:29: error: ‘vector’ is not a template
   78 | bool issame(vector<float> a,vector<float>b){
      |                             ^~~~~~
./CPP_62.cpp: In function ‘bool issame(vector, vector)’:
./CPP_62.cpp:79:11: error: ‘struct vector’ has no member named ‘size’
   79 |     if (a.size()!=b.size()) return false;
      |           ^~~~
./CPP_62.cpp:79:21: error: ‘struct vector’ has no member named ‘size’
   79 |     if (a.size()!=b.size()) return false;
      |                     ^~~~
./CPP_62.cpp:80:22: error: ‘struct vector’ has no member named ‘size’
   80 |     for (int i=0;i<a.size();i++)
      |                      ^~~~
./CPP_62.cpp:82:18: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   82 |         if (abs(a[i]-b[i])>1e-4) return false;
      |                  ^
./CPP_62.cpp:82:23: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   82 |         if (abs(a[i]-b[i])>1e-4) return false;
      |                       ^
./CPP_62.cpp: At global scope:
./CPP_62.cpp:86:5: error: redefinition of ‘int main()’
   86 | int main(){
      |     ^~~~
./CPP_62.cpp:66:5: note: ‘int main()’ previously defined here
   66 | int main() {
      |     ^~~~
In file included from ./CPP_62.cpp:77:
./CPP_62.cpp: In function ‘int main()’:
./CPP_62.cpp:87:20: error: ‘derivative’ was not declared in this scope
   87 |     assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));
      |                    ^~~~~~~~~~


CPP_36.cpp: Execution Timed Out

CPP_131.cpp: Compilation Failed
Error: ./CPP_131.cpp:28:5: error: redefinition of ‘int main()’
   28 | int main(){
      |     ^~~~
./CPP_131.cpp:20:5: note: ‘int main()’ previously defined here
   20 | int main() {
      |     ^~~~


CPP_152.cpp: Compilation Failed
Error: ./CPP_152.cpp:23:104: error: expected ‘,’ or ‘...’ before ‘this’
   23 | void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(vector* this, int* __position, int* __x) {
      |                                                                                                        ^~~~
./CPP_152.cpp: In function ‘void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(vector*)’:
./CPP_152.cpp:26:9: error: invalid use of ‘this’ in non-member function
   26 |     if (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start == 0) {
      |         ^~~~
./CPP_152.cpp:26:51: error: invalid use of ‘this’ in non-member function
   26 |     if (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start == 0) {
      |                                                   ^~~~
./CPP_152.cpp:29:23: error: invalid use of ‘this’ in non-member function
   29 |         __new_size = (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start) * 2;
      |                       ^~~~
./CPP_152.cpp:29:65: error: invalid use of ‘this’ in non-member function
   29 |         __new_size = (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start) * 2;
      |                                                                 ^~~~
./CPP_152.cpp:33:22: warning: overflow in conversion from ‘long int’ to ‘int’ changes value from ‘2305843009213693951’ to ‘-1’ [-Woverflow]
   33 |         __new_size = 2305843009213693951;
      |                      ^~~~~~~~~~~~~~~~~~~
./CPP_152.cpp:43:40: error: ‘__position’ was not declared in this scope
   43 |     int* __new_finish = __new_start + (__position - this->_M_base._M_impl._M_start);
      |                                        ^~~~~~~~~~
./CPP_152.cpp:43:53: error: invalid use of ‘this’ in non-member function
   43 |     int* __new_finish = __new_start + (__position - this->_M_base._M_impl._M_start);
      |                                                     ^~~~
./CPP_152.cpp:44:22: error: ‘__x’ was not declared in this scope
   44 |     *__new_finish = *__x;
      |                      ^~~
./CPP_152.cpp:46:9: error: invalid use of ‘this’ in non-member function
   46 |     if (this->_M_base._M_impl._M_start != this->_M_base._M_impl._M_finish) {
      |         ^~~~
./CPP_152.cpp:46:43: error: invalid use of ‘this’ in non-member function
   46 |     if (this->_M_base._M_impl._M_start != this->_M_base._M_impl._M_finish) {
      |                                           ^~~~
./CPP_152.cpp:47:30: error: invalid use of ‘this’ in non-member function
   47 |         memmove(__new_start, this->_M_base._M_impl._M_start, (__position - this->_M_base._M_impl._M_start) * sizeof(int));
      |                              ^~~~
./CPP_152.cpp:47:76: error: invalid use of ‘this’ in non-member function
   47 |         memmove(__new_start, this->_M_base._M_impl._M_start, (__position - this->_M_base._M_impl._M_start) * sizeof(int));
      |                                                                            ^~~~
./CPP_152.cpp:50:9: error: invalid use of ‘this’ in non-member function
   50 |     if (this->_M_base._M_impl._M_finish != __position) {
      |         ^~~~
./CPP_152.cpp:51:48: error: invalid use of ‘this’ in non-member function
   51 |         memmove(__new_finish + 1, __position, (this->_M_base._M_impl._M_finish - __position) * sizeof(int));
      |                                                ^~~~
./CPP_152.cpp:54:9: error: invalid use of ‘this’ in non-member function
   54 |     if (this->_M_base._M_impl._M_start != NULL) {
      |         ^~~~
./CPP_152.cpp:55:14: error: invalid use of ‘this’ in non-member function
   55 |         free(this->_M_base._M_impl._M_start);
      |              ^~~~
./CPP_152.cpp:58:5: error: invalid use of ‘this’ in non-member function
   58 |     this->_M_base._M_impl._M_start = __new_start;
      |     ^~~~
./CPP_152.cpp:59:5: error: invalid use of ‘this’ in non-member function
   59 |     this->_M_base._M_impl._M_finish = __new_finish + 1;
      |     ^~~~
./CPP_152.cpp:60:5: error: invalid use of ‘this’ in non-member function
   60 |     this->_M_base._M_impl._M_end_of_storage = __new_start + __new_size;
      |     ^~~~
./CPP_152.cpp: At global scope:
./CPP_152.cpp:63:22: error: expected ‘,’ or ‘...’ before ‘this’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |                      ^~~~
./CPP_152.cpp: In function ‘void compare(vector*)’:
./CPP_152.cpp:65:12: error: invalid use of ‘this’ in non-member function
   65 |     memset(this, 0, sizeof(vector));
      |            ^~~~
./CPP_152.cpp:67:17: error: ‘__x’ was not declared in this scope
   67 |     int* __it = __x->_M_base._M_impl._M_start;
      |                 ^~~
./CPP_152.cpp:72:20: error: ‘__y’ was not declared in this scope; did you mean ‘__b’?
   72 |         int __b = *__y->_M_base._M_impl._M_start;
      |                    ^~~
      |                    __b
./CPP_152.cpp:77:13: error: invalid use of ‘this’ in non-member function
   77 |         if (this->_M_base._M_impl._M_finish == this->_M_base._M_impl._M_end_of_storage) {
      |             ^~~~
./CPP_152.cpp:77:48: error: invalid use of ‘this’ in non-member function
   77 |         if (this->_M_base._M_impl._M_finish == this->_M_base._M_impl._M_end_of_storage) {
      |                                                ^~~~
./CPP_152.cpp:78:103: error: invalid use of ‘this’ in non-member function
   78 |             _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(this, this->_M_base._M_impl._M_finish, &__tmp);
      |                                                                                                       ^~~~
./CPP_152.cpp:78:109: error: invalid use of ‘this’ in non-member function
   78 |             _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(this, this->_M_base._M_impl._M_finish, &__tmp);
      |                                                                                                             ^~~~
./CPP_152.cpp:80:14: error: invalid use of ‘this’ in non-member function
   80 |             *this->_M_base._M_impl._M_finish = __tmp;
      |              ^~~~
./CPP_152.cpp:81:15: error: invalid use of ‘this’ in non-member function
   81 |             ++this->_M_base._M_impl._M_finish;
      |               ^~~~
./CPP_152.cpp: At global scope:
./CPP_152.cpp:90:13: error: ‘vector’ is not a template
   90 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_152.cpp:90:27: error: ‘vector’ is not a template
   90 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_152.cpp: In function ‘bool issame(vector, vector)’:
./CPP_152.cpp:91:11: error: ‘struct vector’ has no member named ‘size’
   91 |     if (a.size()!=b.size()) return false;
      |           ^~~~
./CPP_152.cpp:91:21: error: ‘struct vector’ has no member named ‘size’
   91 |     if (a.size()!=b.size()) return false;
      |                     ^~~~
./CPP_152.cpp:92:22: error: ‘struct vector’ has no member named ‘size’
   92 |     for (int i=0;i<a.size();i++)
      |                      ^~~~
./CPP_152.cpp:94:10: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   94 |     if (a[i]!=b[i]) return false;
      |          ^
./CPP_152.cpp:94:16: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   94 |     if (a[i]!=b[i]) return false;
      |                ^
In file included from ./CPP_152.cpp:89:
./CPP_152.cpp: In function ‘int main()’:
./CPP_152.cpp:99:56: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
   99 |     assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));
      |                                                        ^
      |                                                        |
      |                                                        <brace-enclosed initializer list>
./CPP_152.cpp:63:14: note:   initializing argument 1 of ‘void compare(vector*)’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |              ^~~~~~~
In file included from ./CPP_152.cpp:89:
./CPP_152.cpp:100:56: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  100 |     assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));
      |                                                        ^
      |                                                        |
      |                                                        <brace-enclosed initializer list>
./CPP_152.cpp:63:14: note:   initializing argument 1 of ‘void compare(vector*)’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |              ^~~~~~~
In file included from ./CPP_152.cpp:89:
./CPP_152.cpp:101:56: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  101 |     assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));
      |                                                        ^
      |                                                        |
      |                                                        <brace-enclosed initializer list>
./CPP_152.cpp:63:14: note:   initializing argument 1 of ‘void compare(vector*)’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |              ^~~~~~~
In file included from ./CPP_152.cpp:89:
./CPP_152.cpp:102:55: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  102 |     assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));
      |                                                       ^
      |                                                       |
      |                                                       <brace-enclosed initializer list>
./CPP_152.cpp:63:14: note:   initializing argument 1 of ‘void compare(vector*)’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |              ^~~~~~~
In file included from ./CPP_152.cpp:89:
./CPP_152.cpp:103:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  103 |     assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_152.cpp:63:14: note:   initializing argument 1 of ‘void compare(vector*)’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |              ^~~~~~~
In file included from ./CPP_152.cpp:89:
./CPP_152.cpp:104:48: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  104 |     assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));
      |                                                ^
      |                                                |
      |                                                <brace-enclosed initializer list>
./CPP_152.cpp:63:14: note:   initializing argument 1 of ‘void compare(vector*)’
   63 | void compare(vector* this, vector* __x, vector* __y) {
      |              ^~~~~~~


CPP_132.cpp: Compilation Failed
Error: In file included from ./CPP_132.cpp:38:
./CPP_132.cpp: In function ‘int main()’:
./CPP_132.cpp:40:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   40 |     assert (is_nested("[[]]") == true);
      |                       ^~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:41:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   41 |     assert (is_nested("[]]]]]]][[[[[]") == false);
      |                       ^~~~~~~~~~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:42:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   42 |     assert (is_nested("[][]") == false);
      |                       ^~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:43:24: error: cannot convert ‘const char*’ to ‘basic_string*’
   43 |     assert (is_nested(("[]")) == false);
      |                       ~^~~~~
      |                        |
      |                        const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:44:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   44 |     assert (is_nested("[[[[]]]]") == true);
      |                       ^~~~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:45:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   45 |     assert (is_nested("[]]]]]]]]]]") == false);
      |                       ^~~~~~~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:46:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   46 |     assert (is_nested("[][][[]]") == true);
      |                       ^~~~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:47:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   47 |     assert (is_nested("[[]") == false);
      |                       ^~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:48:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   48 |     assert (is_nested("[]]") == false);
      |                       ^~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:49:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   49 |     assert (is_nested("[[]][[") == true);
      |                       ^~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:50:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   50 |     assert (is_nested("[[][]]") == true);
      |                       ^~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:51:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   51 |     assert (is_nested("") == false);
      |                       ^~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:52:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   52 |     assert (is_nested("[[[[[[[[") == false);
      |                       ^~~~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~
In file included from ./CPP_132.cpp:38:
./CPP_132.cpp:53:23: error: cannot convert ‘const char*’ to ‘basic_string*’
   53 |     assert (is_nested("]]]]]]]]") == false);
      |                       ^~~~~~~~~~
      |                       |
      |                       const char*
./CPP_132.cpp:10:29: note:   initializing argument 1 of ‘int is_nested(basic_string*)’
   10 | int is_nested(basic_string* str) {
      |               ~~~~~~~~~~~~~~^~~


CPP_68.cpp: Compilation Failed
Error: ./CPP_68.cpp:38:86: error: expected ‘,’ or ‘...’ before ‘this’
   38 | void _ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(vector* this, int* first, int* last) {
      |                                                                                      ^~~~
./CPP_68.cpp: In function ‘void _ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(vector*)’:
./CPP_68.cpp:39:41: error: ‘last’ was not declared in this scope
   39 |     unsigned long size = (unsigned long)last - (unsigned long)first;
      |                                         ^~~~
./CPP_68.cpp:39:63: error: ‘first’ was not declared in this scope
   39 |     unsigned long size = (unsigned long)last - (unsigned long)first;
      |                                                               ^~~~~
./CPP_68.cpp:43:26: error: invalid conversion from ‘void*’ to ‘int*’ [-fpermissive]
   43 |     int* new_data = _Znwm(size * sizeof(int));
      |                     ~~~~~^~~~~~~~~~~~~~~~~~~~
      |                          |
      |                          void*
./CPP_68.cpp:47:21: error: invalid use of ‘this’ in non-member function
   47 |     int* old_data = this->_M_base._M_impl._M_start;
      |                     ^~~~
./CPP_68.cpp:51:5: error: invalid use of ‘this’ in non-member function
   51 |     this->_M_base._M_impl._M_start = new_data;
      |     ^~~~
./CPP_68.cpp:52:5: error: invalid use of ‘this’ in non-member function
   52 |     this->_M_base._M_impl._M_finish = new_data + size;
      |     ^~~~
./CPP_68.cpp:53:5: error: invalid use of ‘this’ in non-member function
   53 |     this->_M_base._M_impl._M_end_of_storage = new_data + size;
      |     ^~~~
./CPP_68.cpp: In function ‘void pluck(vector*, vector*)’:
./CPP_68.cpp:57:38: error: request for member ‘_M_start’ in ‘v2->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   57 |     int* first = v2->_M_base._M_impl._M_start;
      |                                      ^~~~~~~~
./CPP_68.cpp:58:37: error: request for member ‘_M_finish’ in ‘v2->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   58 |     int* last = v2->_M_base._M_impl._M_finish;
      |                                     ^~~~~~~~~
./CPP_68.cpp:59:37: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   59 |     int* data = v1->_M_base._M_impl._M_start;
      |                                     ^~~~~~~~
./CPP_68.cpp:62:29: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   62 |     if (v1->_M_base._M_impl._M_start == v1->_M_base._M_impl._M_finish) {
      |                             ^~~~~~~~
./CPP_68.cpp:62:61: error: request for member ‘_M_finish’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   62 |     if (v1->_M_base._M_impl._M_start == v1->_M_base._M_impl._M_finish) {
      |                                                             ^~~~~~~~~
./CPP_68.cpp:63:96: error: too many arguments to function ‘void _ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(vector*)’
   63 |         _ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(v1, first, last);
      |                                                                                                ^
./CPP_68.cpp:38:6: note: declared here
   38 | void _ZNSt6vectorIiSaIiEE13_M_assign_auxIPKiEEvT_S5_St20forward_iterator_tag(vector* this, int* first, int* last) {
      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_68.cpp:65:69: error: request for member ‘_M_finish’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   65 |         unsigned long old_size = (unsigned long)v1->_M_base._M_impl._M_finish - (unsigned long)v1->_M_base._M_impl._M_start;
      |                                                                     ^~~~~~~~~
./CPP_68.cpp:65:116: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   65 |         unsigned long old_size = (unsigned long)v1->_M_base._M_impl._M_finish - (unsigned long)v1->_M_base._M_impl._M_start;
      |                                                                                                                    ^~~~~~~~
./CPP_68.cpp:67:34: error: invalid conversion from ‘void*’ to ‘int*’ [-fpermissive]
   67 |             int* new_data = _Znwm(size * sizeof(int));
      |                             ~~~~~^~~~~~~~~~~~~~~~~~~~
      |                                  |
      |                                  void*
./CPP_68.cpp:69:55: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   69 |                 memmove(new_data, v1->_M_base._M_impl._M_start, old_size * sizeof(int));
      |                                                       ^~~~~~~~
./CPP_68.cpp:71:49: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   71 |             int* old_data = v1->_M_base._M_impl._M_start;
      |                                                 ^~~~~~~~
./CPP_68.cpp:75:33: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   75 |             v1->_M_base._M_impl._M_start = new_data;
      |                                 ^~~~~~~~
./CPP_68.cpp:76:33: error: request for member ‘_M_finish’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   76 |             v1->_M_base._M_impl._M_finish = new_data + size;
      |                                 ^~~~~~~~~
./CPP_68.cpp:77:33: error: request for member ‘_M_end_of_storage’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   77 |             v1->_M_base._M_impl._M_end_of_storage = new_data + size;
      |                                 ^~~~~~~~~~~~~~~~~
./CPP_68.cpp:79:41: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   79 |             memmove(v1->_M_base._M_impl._M_start, first, size * sizeof(int));
      |                                         ^~~~~~~~
./CPP_68.cpp:80:33: error: request for member ‘_M_finish’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   80 |             v1->_M_base._M_impl._M_finish = v1->_M_base._M_impl._M_start + size;
      |                                 ^~~~~~~~~
./CPP_68.cpp:80:65: error: request for member ‘_M_start’ in ‘v1->vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   80 |             v1->_M_base._M_impl._M_finish = v1->_M_base._M_impl._M_start + size;
      |                                                                 ^~~~~~~~
./CPP_68.cpp: At global scope:
./CPP_68.cpp:87:13: error: ‘vector’ is not a template
   87 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_68.cpp:87:27: error: ‘vector’ is not a template
   87 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_68.cpp: In function ‘bool issame(vector, vector)’:
./CPP_68.cpp:88:11: error: ‘struct vector’ has no member named ‘size’
   88 |     if (a.size()!=b.size()) return false;
      |           ^~~~
./CPP_68.cpp:88:21: error: ‘struct vector’ has no member named ‘size’
   88 |     if (a.size()!=b.size()) return false;
      |                     ^~~~
./CPP_68.cpp:89:22: error: ‘struct vector’ has no member named ‘size’
   89 |     for (int i=0;i<a.size();i++)
      |                      ^~~~
./CPP_68.cpp:91:14: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   91 |         if (a[i]!=b[i]) return false;
      |              ^
./CPP_68.cpp:91:20: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   91 |         if (a[i]!=b[i]) return false;
      |                    ^
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp: In function ‘int main()’:
./CPP_68.cpp:96:33: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
   96 |     assert (issame(pluck({4,2,3}) , {2, 1}));
      |                                 ^
      |                                 |
      |                                 <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:97:33: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
   97 |     assert (issame(pluck({1,2,3}) , {2, 1}));
      |                                 ^
      |                                 |
      |                                 <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:98:28: error: too few arguments to function ‘void pluck(vector*, vector*)’
   98 |     assert (issame(pluck({}) , {}));
      |                            ^
./CPP_68.cpp:56:6: note: declared here
   56 | void pluck(vector* v1, vector* v2) {
      |      ^~~~~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:99:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
   99 |     assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:100:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  100 |     assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:101:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  101 |     assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:102:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  102 |     assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~
In file included from ./CPP_68.cpp:86:
./CPP_68.cpp:103:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
  103 |     assert (issame(pluck({7, 9, 7, 1}) , {}));
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_68.cpp:56:20: note:   initializing argument 1 of ‘void pluck(vector*, vector*)’
   56 | void pluck(vector* v1, vector* v2) {
      |            ~~~~~~~~^~


CPP_163.cpp: Compilation Failed
Error: ./CPP_163.cpp:23:32: error: expected ‘,’ or ‘...’ before ‘this’
   23 | void _M_realloc_insert(vector* this, int* __position, int* __x) {
      |                                ^~~~
./CPP_163.cpp: In function ‘void _M_realloc_insert(vector*)’:
./CPP_163.cpp:25:17: error: ‘__position’ was not declared in this scope
   25 |     int __len = __position - this->_M_base._M_impl._M_start;
      |                 ^~~~~~~~~~
./CPP_163.cpp:25:30: error: invalid use of ‘this’ in non-member function
   25 |     int __len = __position - this->_M_base._M_impl._M_start;
      |                              ^~~~
./CPP_163.cpp:30:30: error: invalid use of ‘this’ in non-member function
   30 |         memmove(__new_start, this->_M_base._M_impl._M_start, __len * 4);
      |                              ^~~~
./CPP_163.cpp:32:31: error: ‘__x’ was not declared in this scope
   32 |     *(__new_start + __len) = *__x;
      |                               ^~~
./CPP_163.cpp:33:23: error: invalid use of ‘this’ in non-member function
   33 |     if (__position != this->_M_base._M_impl._M_finish) {
      |                       ^~~~
./CPP_163.cpp:34:55: error: invalid use of ‘this’ in non-member function
   34 |         memmove(__new_start + __len + 1, __position, (this->_M_base._M_impl._M_finish - __position) * 4);
      |                                                       ^~~~
./CPP_163.cpp:36:9: error: invalid use of ‘this’ in non-member function
   36 |     if (this->_M_base._M_impl._M_start != NULL) {
      |         ^~~~
./CPP_163.cpp:37:14: error: invalid use of ‘this’ in non-member function
   37 |         free(this->_M_base._M_impl._M_start);
      |              ^~~~
./CPP_163.cpp:39:5: error: invalid use of ‘this’ in non-member function
   39 |     this->_M_base._M_impl._M_start = __new_start;
      |     ^~~~
./CPP_163.cpp:40:5: error: invalid use of ‘this’ in non-member function
   40 |     this->_M_base._M_impl._M_finish = __new_start + __len + 1;
      |     ^~~~
./CPP_163.cpp:41:5: error: invalid use of ‘this’ in non-member function
   41 |     this->_M_base._M_impl._M_end_of_storage = __new_start + __len + 1;
      |     ^~~~
./CPP_163.cpp: At global scope:
./CPP_163.cpp:44:32: error: expected ‘,’ or ‘...’ before ‘this’
   44 | void generate_integers(vector* this, int n, int m) {
      |                                ^~~~
./CPP_163.cpp: In function ‘void generate_integers(vector*)’:
./CPP_163.cpp:45:5: error: invalid use of ‘this’ in non-member function
   45 |     this->_M_base._M_impl._M_start = NULL;
      |     ^~~~
./CPP_163.cpp:46:5: error: invalid use of ‘this’ in non-member function
   46 |     this->_M_base._M_impl._M_finish = NULL;
      |     ^~~~
./CPP_163.cpp:47:5: error: invalid use of ‘this’ in non-member function
   47 |     this->_M_base._M_impl._M_end_of_storage = NULL;
      |     ^~~~
./CPP_163.cpp:48:16: error: ‘n’ was not declared in this scope
   48 |     int __n = (n < m) ? n : m;
      |                ^
./CPP_163.cpp:48:20: error: ‘m’ was not declared in this scope
   48 |     int __n = (n < m) ? n : m;
      |                    ^
./CPP_163.cpp:53:21: error: invalid use of ‘this’ in non-member function
   53 |                 if (this->_M_base._M_impl._M_start == this->_M_base._M_impl._M_finish) {
      |                     ^~~~
./CPP_163.cpp:53:55: error: invalid use of ‘this’ in non-member function
   53 |                 if (this->_M_base._M_impl._M_start == this->_M_base._M_impl._M_finish) {
      |                                                       ^~~~
./CPP_163.cpp:54:39: error: invalid use of ‘this’ in non-member function
   54 |                     _M_realloc_insert(this, this->_M_base._M_impl._M_finish, &i);
      |                                       ^~~~
./CPP_163.cpp:54:45: error: invalid use of ‘this’ in non-member function
   54 |                     _M_realloc_insert(this, this->_M_base._M_impl._M_finish, &i);
      |                                             ^~~~
./CPP_163.cpp:56:23: error: invalid use of ‘this’ in non-member function
   56 |                     *(this->_M_base._M_impl._M_start + i) = i;
      |                       ^~~~
./CPP_163.cpp: In function ‘int main()’:
./CPP_163.cpp:65:33: error: too many arguments to function ‘void generate_integers(vector*)’
   65 |     generate_integers(&v, 10, 20);
      |                                 ^
./CPP_163.cpp:44:6: note: declared here
   44 | void generate_integers(vector* this, int n, int m) {
      |      ^~~~~~~~~~~~~~~~~
./CPP_163.cpp: At global scope:
./CPP_163.cpp:71:13: error: ‘vector’ is not a template
   71 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_163.cpp:71:27: error: ‘vector’ is not a template
   71 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_163.cpp: In function ‘bool issame(vector, vector)’:
./CPP_163.cpp:72:11: error: ‘struct vector’ has no member named ‘size’
   72 |     if (a.size()!=b.size()) return false;
      |           ^~~~
./CPP_163.cpp:72:21: error: ‘struct vector’ has no member named ‘size’
   72 |     if (a.size()!=b.size()) return false;
      |                     ^~~~
./CPP_163.cpp:73:22: error: ‘struct vector’ has no member named ‘size’
   73 |     for (int i=0;i<a.size();i++)
      |                      ^~~~
./CPP_163.cpp:75:10: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   75 |     if (a[i]!=b[i]) return false;
      |          ^
./CPP_163.cpp:75:16: error: no match for ‘operator[]’ (operand types are ‘vector’ and ‘int’)
   75 |     if (a[i]!=b[i]) return false;
      |                ^
./CPP_163.cpp: At global scope:
./CPP_163.cpp:79:5: error: redefinition of ‘int main()’
   79 | int main(){
      |     ^~~~
./CPP_163.cpp:63:5: note: ‘int main()’ previously defined here
   63 | int main() {
      |     ^~~~
In file included from ./CPP_163.cpp:70:
./CPP_163.cpp: In function ‘int main()’:
./CPP_163.cpp:80:38: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   80 |     assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));
      |                                      ^
      |                                      |
      |                                      int
./CPP_163.cpp:80:43: error: too many arguments to function ‘void generate_integers(vector*)’
   80 |     assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));
      |                                           ^
./CPP_163.cpp:44:6: note: declared here
   44 | void generate_integers(vector* this, int n, int m) {
      |      ^~~~~~~~~~~~~~~~~
In file included from ./CPP_163.cpp:70:
./CPP_163.cpp:80:59: error: invalid use of void expression
   80 |     assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));
      |                                                           ^
./CPP_163.cpp:81:38: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   81 |     assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));
      |                                      ^~
      |                                      |
      |                                      int
./CPP_163.cpp:81:43: error: too many arguments to function ‘void generate_integers(vector*)’
   81 |     assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));
      |                                           ^
./CPP_163.cpp:44:6: note: declared here
   44 | void generate_integers(vector* this, int n, int m) {
      |      ^~~~~~~~~~~~~~~~~
In file included from ./CPP_163.cpp:70:
./CPP_163.cpp:81:59: error: invalid use of void expression
   81 |     assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));
      |                                                           ^
./CPP_163.cpp:82:38: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   82 |     assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));
      |                                      ^~~
      |                                      |
      |                                      int
./CPP_163.cpp:82:44: error: too many arguments to function ‘void generate_integers(vector*)’
   82 |     assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));
      |                                            ^
./CPP_163.cpp:44:6: note: declared here
   44 | void generate_integers(vector* this, int n, int m) {
      |      ^~~~~~~~~~~~~~~~~
In file included from ./CPP_163.cpp:70:
./CPP_163.cpp:82:60: error: invalid use of void expression
   82 |     assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));
      |                                                            ^
./CPP_163.cpp:83:38: error: invalid conversion from ‘int’ to ‘vector*’ [-fpermissive]
   83 |     assert (issame(generate_integers(17,89) , {}));
      |                                      ^~
      |                                      |
      |                                      int
./CPP_163.cpp:83:43: error: too many arguments to function ‘void generate_integers(vector*)’
   83 |     assert (issame(generate_integers(17,89) , {}));
      |                                           ^
./CPP_163.cpp:44:6: note: declared here
   44 | void generate_integers(vector* this, int n, int m) {
      |      ^~~~~~~~~~~~~~~~~
In file included from ./CPP_163.cpp:70:
./CPP_163.cpp:83:49: error: invalid use of void expression
   83 |     assert (issame(generate_integers(17,89) , {}));
      |                                                 ^


CPP_74.cpp: Compilation Failed
Error: ./CPP_74.cpp: In function ‘void total_match(Vector*, const Vector*, const Vector*)’:
./CPP_74.cpp:18:16: error: invalid conversion from ‘const void*’ to ‘void*’ [-fpermissive]
   18 |         memset(vec2, 0, sizeof(Vector));
      |                ^~~~
      |                |
      |                const void*
In file included from ./CPP_74.cpp:1:
/usr/include/string.h:61:28: note:   initializing argument 1 of ‘void* memset(void*, int, size_t)’
   61 | extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));
      |                      ~~~~~~^~~
./CPP_74.cpp:24:16: error: invalid conversion from ‘const void*’ to ‘void*’ [-fpermissive]
   24 |         memset(vec1, 0, sizeof(Vector));
      |                ^~~~
      |                |
      |                const void*
In file included from ./CPP_74.cpp:1:
/usr/include/string.h:61:28: note:   initializing argument 1 of ‘void* memset(void*, int, size_t)’
   61 | extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));
      |                      ~~~~~~^~~
./CPP_74.cpp:42:16: error: invalid conversion from ‘const void*’ to ‘void*’ [-fpermissive]
   42 |         memset(vec1, 0, sizeof(Vector));
      |                ^~~~
      |                |
      |                const void*
In file included from ./CPP_74.cpp:1:
/usr/include/string.h:61:28: note:   initializing argument 1 of ‘void* memset(void*, int, size_t)’
   61 | extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));
      |                      ~~~~~~^~~
./CPP_74.cpp:45:16: error: invalid conversion from ‘const void*’ to ‘void*’ [-fpermissive]
   45 |         memset(vec2, 0, sizeof(Vector));
      |                ^~~~
      |                |
      |                const void*
In file included from ./CPP_74.cpp:1:
/usr/include/string.h:61:28: note:   initializing argument 1 of ‘void* memset(void*, int, size_t)’
   61 | extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));
      |                      ~~~~~~^~~
./CPP_74.cpp: At global scope:
./CPP_74.cpp:51:13: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   51 | bool issame(vector<string> a,vector<string>b){
      |             ^~~~~~
      |             Vector
./CPP_74.cpp:51:20: error: ‘string’ was not declared in this scope; did you mean ‘String’?
   51 | bool issame(vector<string> a,vector<string>b){
      |                    ^~~~~~
      |                    String
./CPP_74.cpp:51:28: error: ‘a’ was not declared in this scope
   51 | bool issame(vector<string> a,vector<string>b){
      |                            ^
./CPP_74.cpp:51:30: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   51 | bool issame(vector<string> a,vector<string>b){
      |                              ^~~~~~
      |                              Vector
./CPP_74.cpp:51:37: error: ‘string’ was not declared in this scope; did you mean ‘String’?
   51 | bool issame(vector<string> a,vector<string>b){
      |                                     ^~~~~~
      |                                     String
./CPP_74.cpp:51:44: error: ‘b’ was not declared in this scope
   51 | bool issame(vector<string> a,vector<string>b){
      |                                            ^
./CPP_74.cpp:51:45: error: expression list treated as compound expression in initializer [-fpermissive]
   51 | bool issame(vector<string> a,vector<string>b){
      |                                             ^
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp: In function ‘int main()’:
./CPP_74.cpp:60:38: error: too few arguments to function ‘void total_match(Vector*, const Vector*, const Vector*)’
   60 |     assert (issame(total_match({}, {}) , {}));
      |                                      ^
./CPP_74.cpp:15:6: note: declared here
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |      ^~~~~~~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:60:44: error: ‘issame’ cannot be used as a function
   60 |     assert (issame(total_match({}, {}) , {}));
      |                                            ^
./CPP_74.cpp:61:61: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   61 |     assert (issame(total_match({"hi", "admin"}, {"hi", "hi"}) , {"hi", "hi"}));
      |                                                             ^
      |                                                             |
      |                                                             <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:61:77: error: ‘issame’ cannot be used as a function
   61 |     assert (issame(total_match({"hi", "admin"}, {"hi", "hi"}) , {"hi", "hi"}));
      |                                                                             ^
./CPP_74.cpp:62:81: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   62 |     assert (issame(total_match({"hi", "admin"}, {"hi", "hi", "admin", "project"}) , {"hi", "admin"}));
      |                                                                                 ^
      |                                                                                 |
      |                                                                                 <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:62:100: error: ‘issame’ cannot be used as a function
   62 |     assert (issame(total_match({"hi", "admin"}, {"hi", "hi", "admin", "project"}) , {"hi", "admin"}));
      |                                                                                                    ^
./CPP_74.cpp:63:64: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   63 |     assert (issame(total_match({"4"}, {"1", "2", "3", "4", "5"}) , {"4"}));
      |                                                                ^
      |                                                                |
      |                                                                <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:63:73: error: ‘issame’ cannot be used as a function
   63 |     assert (issame(total_match({"4"}, {"1", "2", "3", "4", "5"}) , {"4"}));
      |                                                                         ^
./CPP_74.cpp:64:61: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   64 |     assert (issame(total_match({"hi", "admin"}, {"hI", "Hi"}) , {"hI", "Hi"}));
      |                                                             ^
      |                                                             |
      |                                                             <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:64:77: error: ‘issame’ cannot be used as a function
   64 |     assert (issame(total_match({"hi", "admin"}, {"hI", "Hi"}) , {"hI", "Hi"}));
      |                                                                             ^
./CPP_74.cpp:65:67: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   65 |     assert (issame(total_match({"hi", "admin"}, {"hI", "hi", "hi"}) , {"hI", "hi", "hi"}));
      |                                                                   ^
      |                                                                   |
      |                                                                   <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:65:89: error: ‘issame’ cannot be used as a function
   65 |     assert (issame(total_match({"hi", "admin"}, {"hI", "hi", "hi"}) , {"hI", "hi", "hi"}));
      |                                                                                         ^
./CPP_74.cpp:66:68: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   66 |     assert (issame(total_match({"hi", "admin"}, {"hI", "hi", "hii"}) , {"hi", "admin"}));
      |                                                                    ^
      |                                                                    |
      |                                                                    <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:66:87: error: ‘issame’ cannot be used as a function
   66 |     assert (issame(total_match({"hi", "admin"}, {"hI", "hi", "hii"}) , {"hi", "admin"}));
      |                                                                                       ^
./CPP_74.cpp:67:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘const Vector*’
   67 |     assert (issame(total_match({}, {"this"}) , {}));
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_74.cpp:15:48: note:   initializing argument 2 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                                  ~~~~~~~~~~~~~~^~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:67:50: error: ‘issame’ cannot be used as a function
   67 |     assert (issame(total_match({}, {"this"}) , {}));
      |                                                  ^
./CPP_74.cpp:68:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   68 |     assert (issame(total_match({"this"}, {}) , {}));
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_74.cpp:15:26: note:   initializing argument 1 of ‘void total_match(Vector*, const Vector*, const Vector*)’
   15 | void total_match(Vector* result, const Vector* vec1, const Vector* vec2) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_74.cpp:50:
./CPP_74.cpp:68:50: error: ‘issame’ cannot be used as a function
   68 |     assert (issame(total_match({"this"}, {}) , {}));
      |                                                  ^


CPP_54.cpp: Execution Failed
Error: CPP_54: ./CPP_54.cpp:75: int main(): Assertion `same_chars("eabcdzzzz", "dddzzzzzzzddeddabc") == true' failed.
Aborted (core dumped)


CPP_135.cpp: Compilation Failed
Error: ./CPP_135.cpp:25:5: error: redefinition of ‘int main()’
   25 | int main(){
      |     ^~~~
./CPP_135.cpp:15:5: note: ‘int main()’ previously defined here
   15 | int main() {
      |     ^~~~
In file included from ./CPP_135.cpp:24:
./CPP_135.cpp: In function ‘int main()’:
./CPP_135.cpp:26:36: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   26 |     assert (can_arrange({1,2,4,3,5})==3);
      |                                    ^
      |                                    |
      |                                    <brace-enclosed initializer list>
./CPP_135.cpp:4:22: note:   initializing argument 1 of ‘int can_arrange(int*, int)’
    4 | int can_arrange(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_135.cpp:24:
./CPP_135.cpp:27:34: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   27 |     assert (can_arrange({1,2,4,5})==-1);
      |                                  ^
      |                                  |
      |                                  <brace-enclosed initializer list>
./CPP_135.cpp:4:22: note:   initializing argument 1 of ‘int can_arrange(int*, int)’
    4 | int can_arrange(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_135.cpp:24:
./CPP_135.cpp:28:45: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   28 |     assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);
      |                                             ^
      |                                             |
      |                                             <brace-enclosed initializer list>
./CPP_135.cpp:4:22: note:   initializing argument 1 of ‘int can_arrange(int*, int)’
    4 | int can_arrange(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_135.cpp:24:
./CPP_135.cpp:29:36: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (can_arrange({4,8,5,7,3})==4);
      |                                    ^
      |                                    |
      |                                    <brace-enclosed initializer list>
./CPP_135.cpp:4:22: note:   initializing argument 1 of ‘int can_arrange(int*, int)’
    4 | int can_arrange(int* data, int size) {
      |                 ~~~~~^~~~
In file included from ./CPP_135.cpp:24:
./CPP_135.cpp:30:27: error: too few arguments to function ‘int can_arrange(int*, int)’
   30 |     assert (can_arrange({})==-1);
      |                           ^
./CPP_135.cpp:4:5: note: declared here
    4 | int can_arrange(int* data, int size) {
      |     ^~~~~~~~~~~


CPP_8.cpp: Compilation Failed
Error: ./CPP_8.cpp:63:13: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   63 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             Vector
./CPP_8.cpp:63:20: error: expected primary-expression before ‘int’
   63 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_8.cpp:63:27: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   63 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           Vector
./CPP_8.cpp:63:34: error: expected primary-expression before ‘int’
   63 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_8.cpp:63:39: error: expression list treated as compound expression in initializer [-fpermissive]
   63 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_8.cpp:71:5: error: redefinition of ‘int main()’
   71 | int main(){
      |     ^~~~
./CPP_8.cpp:38:5: note: ‘int main()’ previously defined here
   38 | int main() {
      |     ^~~~
In file included from ./CPP_8.cpp:62:
./CPP_8.cpp: In function ‘int main()’:
./CPP_8.cpp:72:34: error: too few arguments to function ‘void sum_product(Vector*, Vector*)’
   72 |     assert (issame(sum_product({}) ,{0, 1}));
      |                                  ^
./CPP_8.cpp:11:6: note: declared here
   11 | void sum_product(Vector* result, Vector* input) {
      |      ^~~~~~~~~~~
In file included from ./CPP_8.cpp:62:
./CPP_8.cpp:72:43: error: ‘issame’ cannot be used as a function
   72 |     assert (issame(sum_product({}) ,{0, 1}));
      |                                           ^
./CPP_8.cpp:73:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   73 |     assert (issame(sum_product({1, 1, 1}), {3, 1}));
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_8.cpp:11:26: note:   initializing argument 1 of ‘void sum_product(Vector*, Vector*)’
   11 | void sum_product(Vector* result, Vector* input) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_8.cpp:62:
./CPP_8.cpp:73:50: error: ‘issame’ cannot be used as a function
   73 |     assert (issame(sum_product({1, 1, 1}), {3, 1}));
      |                                                  ^
./CPP_8.cpp:74:40: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   74 |     assert (issame(sum_product({100, 0}),{100, 0}));
      |                                        ^
      |                                        |
      |                                        <brace-enclosed initializer list>
./CPP_8.cpp:11:26: note:   initializing argument 1 of ‘void sum_product(Vector*, Vector*)’
   11 | void sum_product(Vector* result, Vector* input) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_8.cpp:62:
./CPP_8.cpp:74:50: error: ‘issame’ cannot be used as a function
   74 |     assert (issame(sum_product({100, 0}),{100, 0}));
      |                                                  ^
./CPP_8.cpp:75:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   75 |      assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_8.cpp:11:26: note:   initializing argument 1 of ‘void sum_product(Vector*, Vector*)’
   11 | void sum_product(Vector* result, Vector* input) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_8.cpp:62:
./CPP_8.cpp:75:68: error: ‘issame’ cannot be used as a function
   75 |      assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));
      |                                                                    ^
./CPP_8.cpp:76:38: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
   76 |       assert (issame(sum_product({10}) ,{10, 10}));
      |                                      ^
      |                                      |
      |                                      int
./CPP_8.cpp:76:38: error: too few arguments to function ‘void sum_product(Vector*, Vector*)’
./CPP_8.cpp:11:6: note: declared here
   11 | void sum_product(Vector* result, Vector* input) {
      |      ^~~~~~~~~~~
In file included from ./CPP_8.cpp:62:
./CPP_8.cpp:76:49: error: ‘issame’ cannot be used as a function
   76 |       assert (issame(sum_product({10}) ,{10, 10}));
      |                                                 ^


CPP_42.cpp: Compilation Failed
Error: ./CPP_42.cpp:44:13: error: ‘vector’ was not declared in this scope; did you mean ‘std_vector’?
   44 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             std_vector
./CPP_42.cpp:44:20: error: expected primary-expression before ‘int’
   44 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_42.cpp:44:27: error: ‘vector’ was not declared in this scope; did you mean ‘std_vector’?
   44 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           std_vector
./CPP_42.cpp:44:34: error: expected primary-expression before ‘int’
   44 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_42.cpp:44:39: error: expression list treated as compound expression in initializer [-fpermissive]
   44 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
In file included from ./CPP_42.cpp:43:
./CPP_42.cpp: In function ‘int main()’:
./CPP_42.cpp:53:32: error: too few arguments to function ‘void incr_list(std_vector*, std_vector*)’
   53 |     assert (issame(incr_list({}) , {}));
      |                                ^
./CPP_42.cpp:17:6: note: declared here
   17 | void incr_list(std_vector* __result, std_vector* __x) {
      |      ^~~~~~~~~
In file included from ./CPP_42.cpp:43:
./CPP_42.cpp:53:38: error: ‘issame’ cannot be used as a function
   53 |     assert (issame(incr_list({}) , {}));
      |                                      ^
./CPP_42.cpp:54:39: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   54 |     assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));
      |                                       ^
      |                                       |
      |                                       <brace-enclosed initializer list>
./CPP_42.cpp:17:28: note:   initializing argument 1 of ‘void incr_list(std_vector*, std_vector*)’
   17 | void incr_list(std_vector* __result, std_vector* __x) {
      |                ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_42.cpp:43:
./CPP_42.cpp:54:52: error: ‘issame’ cannot be used as a function
   54 |     assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));
      |                                                    ^
./CPP_42.cpp:55:59: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   55 |     assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));
      |                                                           ^
      |                                                           |
      |                                                           <brace-enclosed initializer list>
./CPP_42.cpp:17:28: note:   initializing argument 1 of ‘void incr_list(std_vector*, std_vector*)’
   17 | void incr_list(std_vector* __result, std_vector* __x) {
      |                ~~~~~~~~~~~~^~~~~~~~
In file included from ./CPP_42.cpp:43:
./CPP_42.cpp:55:93: error: ‘issame’ cannot be used as a function
   55 |     assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));
      |                                                                                             ^


CPP_133.cpp: Compilation Failed
Error: In file included from ./CPP_133.cpp:14:
./CPP_133.cpp: In function ‘int main()’:
./CPP_133.cpp:16:32: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   16 |     assert (sum_squares({1,2,3})==14);
      |                                ^
      |                                |
      |                                <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:17:34: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   17 |     assert (sum_squares({1.0,2,3})==14);
      |                                  ^
      |                                  |
      |                                  <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:18:34: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   18 |     assert (sum_squares({1,3,5,7})==84);
      |                                  ^
      |                                  |
      |                                  <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:19:36: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   19 |     assert (sum_squares({1.4,4.2,0})==29);
      |                                    ^
      |                                    |
      |                                    <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:20:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   20 |     assert (sum_squares({-2.4,1,1})==6);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:21:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   21 |     assert (sum_squares({100,1,15,2})==10230);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:22:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   22 |     assert (sum_squares({10000,10000})==200000000);
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:23:39: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   23 |     assert (sum_squares({-1.4,4.6,6.3})==75);
      |                                       ^
      |                                       |
      |                                       <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:24:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   24 |     assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:25:28: error: too few arguments to function ‘int sum_squares(int, float*)’
   25 |     assert (sum_squares({0})==0);
      |                            ^
./CPP_133.cpp:4:5: note: declared here
    4 | int sum_squares(int n, float *arr) {
      |     ^~~~~~~~~~~
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:26:29: error: too few arguments to function ‘int sum_squares(int, float*)’
   26 |     assert (sum_squares({-1})==1);
      |                             ^
./CPP_133.cpp:4:5: note: declared here
    4 | int sum_squares(int n, float *arr) {
      |     ^~~~~~~~~~~
In file included from ./CPP_133.cpp:14:
./CPP_133.cpp:27:33: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int’
   27 |     assert (sum_squares({-1,1,0})==2);
      |                                 ^
      |                                 |
      |                                 <brace-enclosed initializer list>
./CPP_133.cpp:4:21: note:   initializing argument 1 of ‘int sum_squares(int, float*)’
    4 | int sum_squares(int n, float *arr) {
      |                 ~~~~^


CPP_121.cpp: Compilation Failed
Error: In file included from ./CPP_121.cpp:15:
./CPP_121.cpp: In function ‘int main()’:
./CPP_121.cpp:17:13: error: ‘solutions’ was not declared in this scope; did you mean ‘solution’?
   17 |     assert (solutions({5, 8, 7, 1})    == 12);
      |             ^~~~~~~~~


CPP_109.cpp: Compilation Failed
Error: ./CPP_109.cpp: In function ‘int move_one_ball(std_vector*)’:
./CPP_109.cpp:22:34: error: request for member ‘_M_finish’ in ‘v->std_vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   22 |     int* _3 = v->_M_base._M_impl._M_finish;
      |                                  ^~~~~~~~~
./CPP_109.cpp:23:34: error: request for member ‘_M_start’ in ‘v->std_vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   23 |     int* _5 = v->_M_base._M_impl._M_start;
      |                                  ^~~~~~~~
In file included from ./CPP_109.cpp:79:
./CPP_109.cpp: In function ‘int main()’:
./CPP_109.cpp:81:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   81 |     assert (move_one_ball({3, 4, 5, 1, 2})==true);
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_109.cpp:21:31: note:   initializing argument 1 of ‘int move_one_ball(std_vector*)’
   21 | int move_one_ball(std_vector* v) {
      |                   ~~~~~~~~~~~~^
In file included from ./CPP_109.cpp:79:
./CPP_109.cpp:82:43: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   82 |     assert (move_one_ball({3, 5, 10, 1, 2})==true);
      |                                           ^
      |                                           |
      |                                           <brace-enclosed initializer list>
./CPP_109.cpp:21:31: note:   initializing argument 1 of ‘int move_one_ball(std_vector*)’
   21 | int move_one_ball(std_vector* v) {
      |                   ~~~~~~~~~~~~^
In file included from ./CPP_109.cpp:79:
./CPP_109.cpp:83:39: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   83 |     assert (move_one_ball({4, 3, 1, 2})==false);
      |                                       ^
      |                                       |
      |                                       <brace-enclosed initializer list>
./CPP_109.cpp:21:31: note:   initializing argument 1 of ‘int move_one_ball(std_vector*)’
   21 | int move_one_ball(std_vector* v) {
      |                   ~~~~~~~~~~~~^
In file included from ./CPP_109.cpp:79:
./CPP_109.cpp:84:42: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘std_vector*’
   84 |     assert (move_one_ball({3, 5, 4, 1, 2})==false);
      |                                          ^
      |                                          |
      |                                          <brace-enclosed initializer list>
./CPP_109.cpp:21:31: note:   initializing argument 1 of ‘int move_one_ball(std_vector*)’
   21 | int move_one_ball(std_vector* v) {
      |                   ~~~~~~~~~~~~^


CPP_5.cpp: Compilation Failed
Error: ./CPP_5.cpp:115:13: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
  115 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
      |             Vector
./CPP_5.cpp:115:20: error: expected primary-expression before ‘int’
  115 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_5.cpp:115:27: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
  115 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
      |                           Vector
./CPP_5.cpp:115:34: error: expected primary-expression before ‘int’
  115 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_5.cpp:115:39: error: expression list treated as compound expression in initializer [-fpermissive]
  115 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_5.cpp:123:5: error: redefinition of ‘int main()’
  123 | int main(){
      |     ^~~~
./CPP_5.cpp:78:5: note: ‘int main()’ previously defined here
   78 | int main() {
      |     ^~~~
In file included from ./CPP_5.cpp:114:
./CPP_5.cpp: In function ‘int main()’:
./CPP_5.cpp:124:36: error: invalid conversion from ‘int’ to ‘Vector*’ [-fpermissive]
  124 |     assert (issame(intersperse({}, 7), {}));
      |                                    ^
      |                                    |
      |                                    int
./CPP_5.cpp:124:37: error: too few arguments to function ‘void intersperse(Vector*, Vector*, int)’
  124 |     assert (issame(intersperse({}, 7), {}));
      |                                     ^
./CPP_5.cpp:47:6: note: declared here
   47 | void intersperse(Vector* result, Vector* input, int value) {
      |      ^~~~~~~~~~~
In file included from ./CPP_5.cpp:114:
./CPP_5.cpp:124:42: error: ‘issame’ cannot be used as a function
  124 |     assert (issame(intersperse({}, 7), {}));
      |                                          ^
./CPP_5.cpp:126:47: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
  126 |     assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));
      |                                               ^
      |                                               |
      |                                               <brace-enclosed initializer list>
./CPP_5.cpp:47:26: note:   initializing argument 1 of ‘void intersperse(Vector*, Vector*, int)’
   47 | void intersperse(Vector* result, Vector* input, int value) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_5.cpp:114:
./CPP_5.cpp:126:70: error: ‘issame’ cannot be used as a function
  126 |     assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));
      |                                                                      ^
./CPP_5.cpp:127:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
  127 |     assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_5.cpp:47:26: note:   initializing argument 1 of ‘void intersperse(Vector*, Vector*, int)’
   47 | void intersperse(Vector* result, Vector* input, int value) {
      |                  ~~~~~~~~^~~~~~
In file included from ./CPP_5.cpp:114:
./CPP_5.cpp:127:61: error: ‘issame’ cannot be used as a function
  127 |     assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));
      |                                                             ^


CPP_12.cpp: Compilation Failed
Error: ./CPP_12.cpp:52:5: error: redefinition of ‘int main()’
   52 | int main(){
      |     ^~~~
./CPP_12.cpp:43:5: note: ‘int main()’ previously defined here
   43 | int main() {
      |     ^~~~
In file included from ./CPP_12.cpp:51:
./CPP_12.cpp: In function ‘int main()’:
./CPP_12.cpp:53:23: error: too few arguments to function ‘void longest(vector*, string*)’
   53 |     assert (longest({}) == "");
      |                       ^
./CPP_12.cpp:22:6: note: declared here
   22 | void longest(vector* vec, string* str) {
      |      ^~~~~~~
In file included from ./CPP_12.cpp:51:
./CPP_12.cpp:54:36: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
   54 |     assert (longest({"x", "y", "z"}) == "x");
      |                                    ^
      |                                    |
      |                                    <brace-enclosed initializer list>
./CPP_12.cpp:22:22: note:   initializing argument 1 of ‘void longest(vector*, string*)’
   22 | void longest(vector* vec, string* str) {
      |              ~~~~~~~~^~~
In file included from ./CPP_12.cpp:51:
./CPP_12.cpp:55:63: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘vector*’
   55 |     assert (longest({"x", "yyy", "zzzz", "www", "kkkk", "abc"}) == "zzzz");
      |                                                               ^
      |                                                               |
      |                                                               <brace-enclosed initializer list>
./CPP_12.cpp:22:22: note:   initializing argument 1 of ‘void longest(vector*, string*)’
   22 | void longest(vector* vec, string* str) {
      |              ~~~~~~~~^~~


CPP_150.cpp: Execution Failed
Error: CPP_150: ./CPP_150.cpp:26: int main(): Assertion `x_or_y(7, 34, 12) == 34' failed.
Aborted (core dumped)


CPP_25.cpp: Compilation Failed
Error: ./CPP_25.cpp:23:111: error: expected ‘,’ or ‘...’ before ‘this’
   23 | void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(std__vector* this, int* __position, int* __x) {
      |                                                                                                               ^~~~
./CPP_25.cpp: In function ‘void _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(std__vector*)’:
./CPP_25.cpp:27:9: error: invalid use of ‘this’ in non-member function
   27 |     if (this->_M_base._M_impl._M_finish != this->_M_base._M_impl._M_end_of_storage) {
      |         ^~~~
./CPP_25.cpp:27:44: error: invalid use of ‘this’ in non-member function
   27 |     if (this->_M_base._M_impl._M_finish != this->_M_base._M_impl._M_end_of_storage) {
      |                                            ^~~~
./CPP_25.cpp:28:23: error: invalid use of ‘this’ in non-member function
   28 |         __new_size = (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start) << 2;
      |                       ^~~~
./CPP_25.cpp:28:65: error: invalid use of ‘this’ in non-member function
   28 |         __new_size = (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start) << 2;
      |                                                                 ^~~~
./CPP_25.cpp:33:23: error: invalid use of ‘this’ in non-member function
   33 |         __new_size = (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start) << 2;
      |                       ^~~~
./CPP_25.cpp:33:65: error: invalid use of ‘this’ in non-member function
   33 |         __new_size = (this->_M_base._M_impl._M_end_of_storage - this->_M_base._M_impl._M_start) << 2;
      |                                                                 ^~~~
./CPP_25.cpp:35:26: warning: overflow in conversion from ‘long int’ to ‘int’ changes value from ‘2305843009213693951’ to ‘-1’ [-Woverflow]
   35 |             __new_size = 2305843009213693951;
      |                          ^~~~~~~~~~~~~~~~~~~
./CPP_25.cpp:42:13: error: ‘_ZSt17__throw_bad_allocv’ was not declared in this scope
   42 |             _ZSt17__throw_bad_allocv();
      |             ^~~~~~~~~~~~~~~~~~~~~~~~
./CPP_25.cpp:46:9: error: invalid use of ‘this’ in non-member function
   46 |     if (this->_M_base._M_impl._M_start != this->_M_base._M_impl._M_finish) {
      |         ^~~~
./CPP_25.cpp:46:43: error: invalid use of ‘this’ in non-member function
   46 |     if (this->_M_base._M_impl._M_start != this->_M_base._M_impl._M_finish) {
      |                                           ^~~~
./CPP_25.cpp:47:30: error: invalid use of ‘this’ in non-member function
   47 |         memmove(__new_start, this->_M_base._M_impl._M_start, (__position - this->_M_base._M_impl._M_start) * sizeof(int));
      |                              ^~~~
./CPP_25.cpp:47:63: error: ‘__position’ was not declared in this scope
   47 |         memmove(__new_start, this->_M_base._M_impl._M_start, (__position - this->_M_base._M_impl._M_start) * sizeof(int));
      |                                                               ^~~~~~~~~~
./CPP_25.cpp:47:76: error: invalid use of ‘this’ in non-member function
   47 |         memmove(__new_start, this->_M_base._M_impl._M_start, (__position - this->_M_base._M_impl._M_start) * sizeof(int));
      |                                                                            ^~~~
./CPP_25.cpp:50:6: error: ‘__position’ was not declared in this scope
   50 |     *__position = *__x;
      |      ^~~~~~~~~~
./CPP_25.cpp:50:20: error: ‘__x’ was not declared in this scope
   50 |     *__position = *__x;
      |                    ^~~
./CPP_25.cpp:52:9: error: invalid use of ‘this’ in non-member function
   52 |     if (this->_M_base._M_impl._M_finish != __position) {
      |         ^~~~
./CPP_25.cpp:53:45: error: invalid use of ‘this’ in non-member function
   53 |         memmove(__new_start + (__position - this->_M_base._M_impl._M_start) + 1, __position, (this->_M_base._M_impl._M_finish - __position) * sizeof(int));
      |                                             ^~~~
./CPP_25.cpp:53:95: error: invalid use of ‘this’ in non-member function
   53 |         memmove(__new_start + (__position - this->_M_base._M_impl._M_start) + 1, __position, (this->_M_base._M_impl._M_finish - __position) * sizeof(int));
      |                                                                                               ^~~~
./CPP_25.cpp:56:9: error: invalid use of ‘this’ in non-member function
   56 |     if (this->_M_base._M_impl._M_start != NULL) {
      |         ^~~~
./CPP_25.cpp:57:14: error: invalid use of ‘this’ in non-member function
   57 |         free(this->_M_base._M_impl._M_start);
      |              ^~~~
./CPP_25.cpp:60:5: error: invalid use of ‘this’ in non-member function
   60 |     this->_M_base._M_impl._M_start = __new_start;
      |     ^~~~
./CPP_25.cpp:61:5: error: invalid use of ‘this’ in non-member function
   61 |     this->_M_base._M_impl._M_finish = __new_start + (__position - this->_M_base._M_impl._M_start) + 1;
      |     ^~~~
./CPP_25.cpp:61:67: error: invalid use of ‘this’ in non-member function
   61 |     this->_M_base._M_impl._M_finish = __new_start + (__position - this->_M_base._M_impl._M_start) + 1;
      |                                                                   ^~~~
./CPP_25.cpp:62:5: error: invalid use of ‘this’ in non-member function
   62 |     this->_M_base._M_impl._M_end_of_storage = __new_start + __new_size;
      |     ^~~~
./CPP_25.cpp: In function ‘void factorize(std__vector*, int)’:
./CPP_25.cpp:71:43: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   71 |             if (__result->_M_base._M_impl._M_finish == __result->_M_base._M_impl._M_end_of_storage) {
      |                                           ^~~~~~~~~
./CPP_25.cpp:71:82: error: request for member ‘_M_end_of_storage’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   71 |             if (__result->_M_base._M_impl._M_finish == __result->_M_base._M_impl._M_end_of_storage) {
      |                                                                                  ^~~~~~~~~~~~~~~~~
./CPP_25.cpp:72:145: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   72 |                 _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(__result, __result->_M_base._M_impl._M_finish, &__tmp);
      |                                                                                                                                                 ^~~~~~~~~
./CPP_25.cpp:74:44: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   74 |                 *__result->_M_base._M_impl._M_finish = __x;
      |                                            ^~~~~~~~~
./CPP_25.cpp:75:43: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   75 |                 __result->_M_base._M_impl._M_finish++;
      |                                           ^~~~~~~~~
./CPP_25.cpp:84:43: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   84 |             if (__result->_M_base._M_impl._M_finish == __result->_M_base._M_impl._M_end_of_storage) {
      |                                           ^~~~~~~~~
./CPP_25.cpp:84:82: error: request for member ‘_M_end_of_storage’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   84 |             if (__result->_M_base._M_impl._M_finish == __result->_M_base._M_impl._M_end_of_storage) {
      |                                                                                  ^~~~~~~~~~~~~~~~~
./CPP_25.cpp:85:145: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   85 |                 _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_(__result, __result->_M_base._M_impl._M_finish, &__tmp2);
      |                                                                                                                                                 ^~~~~~~~~
./CPP_25.cpp:87:44: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   87 |                 *__result->_M_base._M_impl._M_finish = __tmp2;
      |                                            ^~~~~~~~~
./CPP_25.cpp:88:43: error: request for member ‘_M_finish’ in ‘__result->std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   88 |                 __result->_M_base._M_impl._M_finish++;
      |                                           ^~~~~~~~~
./CPP_25.cpp: In function ‘int main()’:
./CPP_25.cpp:98:30: error: request for member ‘_M_start’ in ‘__result.std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   98 |     __result._M_base._M_impl._M_start = NULL;
      |                              ^~~~~~~~
./CPP_25.cpp:99:30: error: request for member ‘_M_finish’ in ‘__result.std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
   99 |     __result._M_base._M_impl._M_finish = NULL;
      |                              ^~~~~~~~~
./CPP_25.cpp:100:30: error: request for member ‘_M_end_of_storage’ in ‘__result.std__vector::_M_base._Vector_base::_M_impl’, which is of non-class type ‘int*’
  100 |     __result._M_base._M_impl._M_end_of_storage = NULL;
      |                              ^~~~~~~~~~~~~~~~~
./CPP_25.cpp: At global scope:
./CPP_25.cpp:109:13: error: ‘vector’ was not declared in this scope
  109 | bool issame(vector<int> a,vector<int>b){
      |             ^~~~~~
./CPP_25.cpp:109:20: error: expected primary-expression before ‘int’
  109 | bool issame(vector<int> a,vector<int>b){
      |                    ^~~
./CPP_25.cpp:109:27: error: ‘vector’ was not declared in this scope
  109 | bool issame(vector<int> a,vector<int>b){
      |                           ^~~~~~
./CPP_25.cpp:109:34: error: expected primary-expression before ‘int’
  109 | bool issame(vector<int> a,vector<int>b){
      |                                  ^~~
./CPP_25.cpp:109:39: error: expression list treated as compound expression in initializer [-fpermissive]
  109 | bool issame(vector<int> a,vector<int>b){
      |                                       ^
./CPP_25.cpp:117:5: error: redefinition of ‘int main()’
  117 | int main(){
      |     ^~~~
./CPP_25.cpp:96:5: note: ‘int main()’ previously defined here
   96 | int main() {
      |     ^~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp: In function ‘int main()’:
./CPP_25.cpp:118:30: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  118 |     assert (issame(factorize(2) , {2}));
      |                              ^
      |                              |
      |                              int
./CPP_25.cpp:118:31: error: too few arguments to function ‘void factorize(std__vector*, int)’
  118 |     assert (issame(factorize(2) , {2}));
      |                               ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:118:38: error: ‘issame’ cannot be used as a function
  118 |     assert (issame(factorize(2) , {2}));
      |                                      ^
./CPP_25.cpp:119:30: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  119 |     assert (issame(factorize(4) , {2, 2}));
      |                              ^
      |                              |
      |                              int
./CPP_25.cpp:119:31: error: too few arguments to function ‘void factorize(std__vector*, int)’
  119 |     assert (issame(factorize(4) , {2, 2}));
      |                               ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:119:41: error: ‘issame’ cannot be used as a function
  119 |     assert (issame(factorize(4) , {2, 2}));
      |                                         ^
./CPP_25.cpp:120:30: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  120 |     assert (issame(factorize(8) , {2, 2, 2}));
      |                              ^
      |                              |
      |                              int
./CPP_25.cpp:120:31: error: too few arguments to function ‘void factorize(std__vector*, int)’
  120 |     assert (issame(factorize(8) , {2, 2, 2}));
      |                               ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:120:44: error: ‘issame’ cannot be used as a function
  120 |     assert (issame(factorize(8) , {2, 2, 2}));
      |                                            ^
./CPP_25.cpp:121:33: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  121 |      assert (issame(factorize(3 * 19) , {3, 19}));
      |                               ~~^~~~
      |                                 |
      |                                 int
./CPP_25.cpp:121:37: error: too few arguments to function ‘void factorize(std__vector*, int)’
  121 |      assert (issame(factorize(3 * 19) , {3, 19}));
      |                                     ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:121:48: error: ‘issame’ cannot be used as a function
  121 |      assert (issame(factorize(3 * 19) , {3, 19}));
      |                                                ^
./CPP_25.cpp:122:41: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  122 |     assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19}));
      |                              ~~~~~~~~~~~^~~~
      |                                         |
      |                                         int
./CPP_25.cpp:122:45: error: too few arguments to function ‘void factorize(std__vector*, int)’
  122 |     assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19}));
      |                                             ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:122:63: error: ‘issame’ cannot be used as a function
  122 |     assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19}));
      |                                                               ^
./CPP_25.cpp:123:50: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  123 |     assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19}));
      |                              ~~~~~~~~~~~~~~~~~~~~^~~~
      |                                                  |
      |                                                  int
./CPP_25.cpp:123:54: error: too few arguments to function ‘void factorize(std__vector*, int)’
  123 |     assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19}));
      |                                                      ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:123:79: error: ‘issame’ cannot be used as a function
  123 |     assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19}));
      |                                                                               ^
./CPP_25.cpp:124:42: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  124 |     assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19}));
      |                              ~~~~~~~~~~~~^~~~
      |                                          |
      |                                          int
./CPP_25.cpp:124:46: error: too few arguments to function ‘void factorize(std__vector*, int)’
  124 |     assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19}));
      |                                              ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:124:65: error: ‘issame’ cannot be used as a function
  124 |     assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19}));
      |                                                                 ^
./CPP_25.cpp:125:36: error: invalid conversion from ‘int’ to ‘std__vector*’ [-fpermissive]
  125 |     assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));
      |                              ~~~~~~^~~
      |                                    |
      |                                    int
./CPP_25.cpp:125:39: error: too few arguments to function ‘void factorize(std__vector*, int)’
  125 |     assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));
      |                                       ^
./CPP_25.cpp:65:6: note: declared here
   65 | void factorize(std__vector* __result, int __x) {
      |      ^~~~~~~~~
In file included from ./CPP_25.cpp:108:
./CPP_25.cpp:125:52: error: ‘issame’ cannot be used as a function
  125 |     assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));
      |                                                    ^


CPP_89.cpp: Compilation Failed
Error: ./CPP_89.cpp:25:5: error: redefinition of ‘int main()’
   25 | int main(){
      |     ^~~~
./CPP_89.cpp:15:5: note: ‘int main()’ previously defined here
   15 | int main() {
      |     ^~~~
In file included from ./CPP_89.cpp:24:
./CPP_89.cpp: In function ‘int main()’:
./CPP_89.cpp:26:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   26 |     assert (encrypt("hi") == "lm");
      |                     ^~~~
./CPP_89.cpp:26:27: error: invalid operands of types ‘void’ and ‘const char [3]’ to binary ‘operator==’
   26 |     assert (encrypt("hi") == "lm");
      |             ~~~~~~~~~~~~~ ^~ ~~~~
      |                    |         |
      |                    void      const char [3]
./CPP_89.cpp:27:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   27 |     assert (encrypt("asdfghjkl") == "ewhjklnop");
      |                     ^~~~~~~~~~~
./CPP_89.cpp:27:34: error: invalid operands of types ‘void’ and ‘const char [10]’ to binary ‘operator==’
   27 |     assert (encrypt("asdfghjkl") == "ewhjklnop");
      |             ~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~
      |                    |                |
      |                    void             const char [10]
./CPP_89.cpp:28:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   28 |     assert (encrypt("gf") == "kj");
      |                     ^~~~
./CPP_89.cpp:28:27: error: invalid operands of types ‘void’ and ‘const char [3]’ to binary ‘operator==’
   28 |     assert (encrypt("gf") == "kj");
      |             ~~~~~~~~~~~~~ ^~ ~~~~
      |                    |         |
      |                    void      const char [3]
./CPP_89.cpp:29:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   29 |     assert (encrypt("et") == "ix");
      |                     ^~~~
./CPP_89.cpp:29:27: error: invalid operands of types ‘void’ and ‘const char [3]’ to binary ‘operator==’
   29 |     assert (encrypt("et") == "ix");
      |             ~~~~~~~~~~~~~ ^~ ~~~~
      |                    |         |
      |                    void      const char [3]
./CPP_89.cpp:30:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   30 |     assert (encrypt("faewfawefaewg")=="jeiajeaijeiak");
      |                     ^~~~~~~~~~~~~~~
./CPP_89.cpp:30:37: error: invalid operands of types ‘void’ and ‘const char [14]’ to binary ‘operator==’
   30 |     assert (encrypt("faewfawefaewg")=="jeiajeaijeiak");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
      |                    |                  |
      |                    void               const char [14]
./CPP_89.cpp:31:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   31 |     assert (encrypt("hellomyfriend")=="lippsqcjvmirh");
      |                     ^~~~~~~~~~~~~~~
./CPP_89.cpp:31:37: error: invalid operands of types ‘void’ and ‘const char [14]’ to binary ‘operator==’
   31 |     assert (encrypt("hellomyfriend")=="lippsqcjvmirh");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
      |                    |                  |
      |                    void               const char [14]
./CPP_89.cpp:32:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   32 |     assert (encrypt("dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh")=="hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl");
      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./CPP_89.cpp:32:69: error: invalid operands of types ‘void’ and ‘const char [46]’ to binary ‘operator==’
   32 |     assert (encrypt("dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh")=="hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl");
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                    |                                                  |
      |                    void                                               const char [46]
./CPP_89.cpp:33:21: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   33 |     assert (encrypt("a")=="e");
      |                     ^~~
./CPP_89.cpp:33:25: error: invalid operands of types ‘void’ and ‘const char [2]’ to binary ‘operator==’
   33 |     assert (encrypt("a")=="e");
      |             ~~~~~~~~~~~~^~~~~
      |                    |      |
      |                    void   const char [2]


CPP_64.cpp: Compilation Failed
Error: ./CPP_64.cpp:34:5: error: redefinition of ‘int main()’
   34 | int main(){
      |     ^~~~
./CPP_64.cpp:25:5: note: ‘int main()’ previously defined here
   25 | int main() {
      |     ^~~~


CPP_128.cpp: Compilation Failed
Error: In file included from ./CPP_128.cpp:23:
./CPP_128.cpp: In function ‘int main()’:
./CPP_128.cpp:25:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   25 |     assert (prod_signs({1, 2, 2, -4}) == -9);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:26:30: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   26 |     assert (prod_signs({0, 1}) == 0);
      |                              ^
      |                              |
      |                              <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:27:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   27 |     assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:28:26: error: too few arguments to function ‘int prod_signs(int*, int)’
   28 |     assert (prod_signs({}) == -32768);
      |                          ^
./CPP_128.cpp:4:5: note: declared here
    4 | int prod_signs(int* arr, int len) {
      |     ^~~~~~~~~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:29:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   29 |     assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:30:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   30 |     assert (prod_signs({-1, 1, -1, 1}) == 4);
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:31:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   31 |     assert (prod_signs({-1, 1, 1, 1}) == -4);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~
In file included from ./CPP_128.cpp:23:
./CPP_128.cpp:32:37: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   32 |     assert (prod_signs({-1, 1, 1, 0}) == 0);
      |                                     ^
      |                                     |
      |                                     <brace-enclosed initializer list>
./CPP_128.cpp:4:21: note:   initializing argument 1 of ‘int prod_signs(int*, int)’
    4 | int prod_signs(int* arr, int len) {
      |                ~~~~~^~~


CPP_91.cpp: Compilation Failed
Error: ./CPP_91.cpp: In function ‘int is_bored(const char*)’:
./CPP_91.cpp:3:15: error: ‘strlen’ was not declared in this scope
    3 |     int len = strlen(str);
      |               ^~~~~~
./CPP_91.cpp:1:1: note: ‘strlen’ is defined in header ‘<cstring>’; did you forget to ‘#include <cstring>’?
  +++ |+#include <cstring>
    1 | int is_bored(const char *str) {


CPP_73.cpp: Compilation Failed
Error: In file included from ./CPP_73.cpp:14:
./CPP_73.cpp: In function ‘int main()’:
./CPP_73.cpp:16:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   16 |     assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:17:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   17 |     assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:18:38: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   18 |     assert (smallest_change({1, 4, 2}) == 1);
      |                                      ^
      |                                      |
      |                                      <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:19:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   19 |     assert (smallest_change({1, 4, 4, 2}) == 1);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:20:44: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   20 |     assert (smallest_change({1, 2, 3, 2, 1}) == 0);
      |                                            ^
      |                                            |
      |                                            <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:21:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   21 |     assert (smallest_change({3, 1, 1, 3}) == 0);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:22:32: error: invalid conversion from ‘int’ to ‘int*’ [-fpermissive]
   22 |     assert (smallest_change({1}) == 0);
      |                                ^
      |                                |
      |                                int
./CPP_73.cpp:22:32: error: too few arguments to function ‘int smallest_change(int*, int)’
./CPP_73.cpp:3:5: note: declared here
    3 | int smallest_change(int* data, int size) {
      |     ^~~~~~~~~~~~~~~
In file included from ./CPP_73.cpp:14:
./CPP_73.cpp:23:35: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘int*’
   23 |     assert (smallest_change({0, 1}) == 1);
      |                                   ^
      |                                   |
      |                                   <brace-enclosed initializer list>
./CPP_73.cpp:3:26: note:   initializing argument 1 of ‘int smallest_change(int*, int)’
    3 | int smallest_change(int* data, int size) {
      |                     ~~~~~^~~~


CPP_151.cpp: Compilation Failed
Error: In file included from ./CPP_151.cpp:50:
./CPP_151.cpp: In function ‘int main()’:
./CPP_151.cpp:53:41: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   53 |     assert (double_the_difference({5, 4}) == 25);
      |                                         ^
      |                                         |
      |                                         <brace-enclosed initializer list>
./CPP_151.cpp:19:36: note:   initializing argument 1 of ‘long int double_the_difference(Vector*)’
   19 | long double_the_difference(Vector* vec) {
      |                            ~~~~~~~~^~~
In file included from ./CPP_151.cpp:50:
./CPP_151.cpp:54:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   54 |     assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_151.cpp:19:36: note:   initializing argument 1 of ‘long int double_the_difference(Vector*)’
   19 | long double_the_difference(Vector* vec) {
      |                            ~~~~~~~~^~~
In file included from ./CPP_151.cpp:50:
./CPP_151.cpp:55:50: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   55 |     assert (double_the_difference({-10, -20, -30}) == 0 );
      |                                                  ^
      |                                                  |
      |                                                  <brace-enclosed initializer list>
./CPP_151.cpp:19:36: note:   initializing argument 1 of ‘long int double_the_difference(Vector*)’
   19 | long double_the_difference(Vector* vec) {
      |                            ~~~~~~~~^~~
In file included from ./CPP_151.cpp:50:
./CPP_151.cpp:56:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   56 |     assert (double_the_difference({-1, -2, 8}) == 0);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_151.cpp:19:36: note:   initializing argument 1 of ‘long int double_the_difference(Vector*)’
   19 | long double_the_difference(Vector* vec) {
      |                            ~~~~~~~~^~~
In file included from ./CPP_151.cpp:50:
./CPP_151.cpp:57:46: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘Vector*’
   57 |     assert (double_the_difference({0.2, 3, 5}) == 34);
      |                                              ^
      |                                              |
      |                                              <brace-enclosed initializer list>
./CPP_151.cpp:19:36: note:   initializing argument 1 of ‘long int double_the_difference(Vector*)’
   19 | long double_the_difference(Vector* vec) {
      |                            ~~~~~~~~^~~
./CPP_151.cpp:61:5: error: ‘vector’ was not declared in this scope; did you mean ‘Vector’?
   61 |     vector<float> lst={};
      |     ^~~~~~
      |     Vector
./CPP_151.cpp:61:12: error: expected primary-expression before ‘float’
   61 |     vector<float> lst={};
      |            ^~~~~
./CPP_151.cpp:65:9: error: ‘lst’ was not declared in this scope
   65 |         lst.push_back(i+0.0);
      |         ^~~
In file included from ./CPP_151.cpp:50:
./CPP_151.cpp:69:35: error: ‘lst’ was not declared in this scope
   69 |     assert (double_the_difference(lst) == odd_sum );
      |                                   ^~~


CPP_95.cpp: Compilation Failed
Error: ./CPP_95.cpp: In function ‘int check_dict_case(void*)’:
./CPP_95.cpp:33:23: error: cannot convert ‘_Rb_tree_node_base*’ to ‘char*’ in assignment
   33 |         str._M_data = (_Rb_tree_node_base*)((char*)node + 1);
      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                       |
      |                       _Rb_tree_node_base*
./CPP_95.cpp:36:33: error: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]
   36 |             str._M_data = malloc(size);
      |                           ~~~~~~^~~~~~
      |                                 |
      |                                 void*
In file included from ./CPP_95.cpp:65:
./CPP_95.cpp: In function ‘int main()’:
./CPP_95.cpp:67:64: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘void*’
   67 |     assert (check_dict_case({{"p","pineapple"}, {"b","banana"}}) == true);
      |                                                                ^
      |                                                                |
      |                                                                <brace-enclosed initializer list>
./CPP_95.cpp:23:27: note:   initializing argument 1 of ‘int check_dict_case(void*)’
   23 | int check_dict_case(void* dict) {
      |                     ~~~~~~^~~~
In file included from ./CPP_95.cpp:65:
./CPP_95.cpp:68:80: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘void*’
   68 |     assert (check_dict_case({{"p","pineapple"}, {"A","banana"}, {"B","banana"}}) == false);
      |                                                                                ^
      |                                                                                |
      |                                                                                <brace-enclosed initializer list>
./CPP_95.cpp:23:27: note:   initializing argument 1 of ‘int check_dict_case(void*)’
   23 | int check_dict_case(void* dict) {
      |                     ~~~~~~^~~~
In file included from ./CPP_95.cpp:65:
./CPP_95.cpp:69:79: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘void*’
   69 |     assert (check_dict_case({{"p","pineapple"}, {"5","banana"}, {"a","apple"}}) == false);
      |                                                                               ^
      |                                                                               |
      |                                                                               <brace-enclosed initializer list>
./CPP_95.cpp:23:27: note:   initializing argument 1 of ‘int check_dict_case(void*)’
   23 | int check_dict_case(void* dict) {
      |                     ~~~~~~^~~~
In file included from ./CPP_95.cpp:65:
./CPP_95.cpp:70:80: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘void*’
   70 |     assert (check_dict_case({{"Name","John"}, {"Age","36"}, {"City","Houston"}}) == false);
      |                                                                                ^
      |                                                                                |
      |                                                                                <brace-enclosed initializer list>
./CPP_95.cpp:23:27: note:   initializing argument 1 of ‘int check_dict_case(void*)’
   23 | int check_dict_case(void* dict) {
      |                     ~~~~~~^~~~
In file included from ./CPP_95.cpp:65:
./CPP_95.cpp:71:63: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘void*’
   71 |     assert (check_dict_case({{"STATE","NC"}, {"ZIP","12345"} }) == true  );
      |                                                               ^
      |                                                               |
      |                                                               <brace-enclosed initializer list>
./CPP_95.cpp:23:27: note:   initializing argument 1 of ‘int check_dict_case(void*)’
   23 | int check_dict_case(void* dict) {
      |                     ~~~~~~^~~~
In file included from ./CPP_95.cpp:65:
./CPP_95.cpp:72:69: error: cannot convert ‘<brace-enclosed initializer list>’ to ‘void*’
   72 |     assert (check_dict_case({{"fruit","Orange"}, {"taste","Sweet"} }) == true  );
      |                                                                     ^
      |                                                                     |
      |                                                                     <brace-enclosed initializer list>
./CPP_95.cpp:23:27: note:   initializing argument 1 of ‘int check_dict_case(void*)’
   23 | int check_dict_case(void* dict) {
      |                     ~~~~~~^~~~


Summary
=======
Total files processed: 97
Compilation failures: 73
Execution failures: 9
Assertion failures: 0

Detailed Results
===============
CPP_30.cpp Compilation Failed
CPP_110.cpp Compilation Failed
CPP_9.cpp Compilation Failed
CPP_35.cpp Compilation Failed
CPP_138.cpp Passed
CPP_134.cpp Compilation Failed
CPP_102.cpp Execution Failed
CPP_18.cpp Compilation Failed
CPP_45.cpp Compilation Failed
CPP_21.cpp Compilation Failed
CPP_78.cpp Execution Failed
CPP_63.cpp Compilation Failed
CPP_100.cpp Compilation Failed
CPP_106.cpp Compilation Failed
CPP_83.cpp Passed
CPP_71.cpp Passed
CPP_99.cpp Compilation Failed
CPP_82.cpp Passed
CPP_39.cpp Execution Failed
CPP_56.cpp Compilation Failed
CPP_11.cpp Compilation Failed
CPP_146.cpp Compilation Failed
CPP_59.cpp Execution Failed
CPP_32.cpp Compilation Failed
CPP_77.cpp Compilation Failed
CPP_98.cpp Compilation Failed
CPP_41.cpp Passed
CPP_0.cpp Compilation Failed
CPP_157.cpp Passed
CPP_141.cpp Compilation Failed
CPP_127.cpp Compilation Failed
CPP_31.cpp Passed
CPP_122.cpp Compilation Failed
CPP_49.cpp Passed
CPP_55.cpp Compilation Failed
CPP_115.cpp Compilation Failed
CPP_40.cpp Compilation Failed
CPP_48.cpp Compilation Failed
CPP_155.cpp Compilation Failed
CPP_96.cpp Compilation Failed
CPP_3.cpp Compilation Failed
CPP_97.cpp Compilation Failed
CPP_4.cpp Compilation Failed
CPP_60.cpp Passed
CPP_76.cpp Passed
CPP_80.cpp Execution Failed
CPP_23.cpp Compilation Failed
CPP_136.cpp Compilation Failed
CPP_27.cpp Compilation Failed
CPP_16.cpp Execution Failed
CPP_72.cpp Compilation Failed
CPP_24.cpp Passed
CPP_92.cpp Passed
CPP_43.cpp Compilation Failed
CPP_53.cpp Compilation Failed
CPP_126.cpp Compilation Failed
CPP_52.cpp Compilation Failed
CPP_2.cpp Compilation Failed
CPP_139.cpp Passed
CPP_57.cpp Compilation Failed
CPP_159.cpp Compilation Failed
CPP_108.cpp Compilation Failed
CPP_61.cpp Compilation Failed
CPP_13.cpp Compilation Failed
CPP_124.cpp Compilation Failed
CPP_75.cpp Passed
CPP_142.cpp Compilation Failed
CPP_66.cpp Passed
CPP_114.cpp Compilation Failed
CPP_85.cpp Compilation Failed
CPP_46.cpp Compilation Failed
CPP_62.cpp Compilation Failed
CPP_36.cpp Execution Timed Out
CPP_131.cpp Compilation Failed
CPP_152.cpp Compilation Failed
CPP_132.cpp Compilation Failed
CPP_68.cpp Compilation Failed
CPP_163.cpp Compilation Failed
CPP_74.cpp Compilation Failed
CPP_54.cpp Execution Failed
CPP_135.cpp Compilation Failed
CPP_8.cpp Compilation Failed
CPP_42.cpp Compilation Failed
CPP_133.cpp Compilation Failed
CPP_121.cpp Compilation Failed
CPP_109.cpp Compilation Failed
CPP_5.cpp Compilation Failed
CPP_12.cpp Compilation Failed
CPP_150.cpp Execution Failed
CPP_25.cpp Compilation Failed
CPP_89.cpp Compilation Failed
CPP_64.cpp Compilation Failed
CPP_128.cpp Compilation Failed
CPP_91.cpp Compilation Failed
CPP_73.cpp Compilation Failed
CPP_151.cpp Compilation Failed
CPP_95.cpp Compilation Failed
