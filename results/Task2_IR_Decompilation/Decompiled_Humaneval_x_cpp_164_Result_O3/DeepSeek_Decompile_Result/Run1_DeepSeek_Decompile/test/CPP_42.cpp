#include <vector>
#include <cstring> // For memset

void incr_list(std::vector<int>& output, const std::vector<int>& input) {
    if (input.empty()) {
        output = input;
        return;
    }

    size_t size = input.size();
    const int* data = input.data();
    int* output_data = output.data();

    // For small vectors, process each element individually
    if (size < 8) {
        for (size_t i = 0; i < size; ++i) {
            output_data[i] = data[i] + 1;
        }
    } else {
        // Process in chunks of 4 elements using SIMD
        size_t chunks = size / 4;
        for (size_t i = 0; i < chunks; ++i) {
            const int* chunk_start = data + (i * 4);
            int* output_chunk = output_data + (i * 4);
            
            // Using SIMD instructions (assumed to be generated by the compiler)
            __m128i vec = _mm_loadu_si128(reinterpret_cast<const __m128i*>(chunk_start));
            __m128i incremented = _mm_add_epi32(vec, _mm_set1_epi32(1));
            _mm_storeu_si128(reinterpret_cast<__m128i*>(output_chunk), incremented);
        }

        // Handle remaining elements
        size_t remainder = size % 4;
        for (size_t i = 0; i < remainder; ++i) {
            output_data[chunk_start + i] = data[chunk_start + i] + 1;
        }
    }

    // Ensure the output vector has the correct size
    output.resize(size);

    // Zero-initialize the input vector's memory (optional, for security)
    memset(const_cast<int*>(input.data()), 0, sizeof(int) * size);
}

#undef NDEBUG
#include<assert.h>
bool issame(vector<int> a,vector<int>b){
    if (a.size()!=b.size()) return false;
    for (int i=0;i<a.size();i++)
    {
        if (a[i]!=b[i]) return false;
    }
    return true;
}
int main(){
    assert (issame(incr_list({}) , {}));
    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));
    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));
}
